/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2019-11-11 15:51:47.727283
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45;
x0=IKcos(j[1]);
x1=IKsin(j[2]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKcos(j[3]);
x5=IKsin(j[3]);
x6=IKcos(j[5]);
x7=IKcos(j[4]);
x8=IKsin(j[5]);
x9=IKsin(j[4]);
x10=IKsin(j[0]);
x11=IKcos(j[0]);
x12=((0.39225)*x11);
x13=((0.09465)*x11);
x14=((1.0)*x10);
x15=((0.09465)*x10);
x16=((1.0)*x5);
x17=((0.0823)*x4);
x18=((0.0823)*x5);
x19=((1.0)*x7);
x20=((0.39225)*x10);
x21=((1.0)*x4);
x22=((1.0)*x11);
x23=((0.0823)*x7);
x24=((0.425)*x0);
x25=(x0*x2);
x26=(x1*x3);
x27=(x0*x1);
x28=(x2*x3);
x29=(x14*x9);
x30=(x14*x25);
x31=(x22*x25);
x32=(x27+x28);
x33=((((-1.0)*x26))+(((1.0)*x25)));
x34=(x32*x4);
x35=(x33*x5);
x36=((((-1.0)*x30))+((x10*x26)));
x37=((((-1.0)*x31))+((x11*x26)));
x38=(x14*((x27+x28)));
x39=(x22*((x27+x28)));
x40=(x37*x4);
x41=(((x33*x4))+((x5*(((((-1.0)*x27))+(((-1.0)*x28)))))));
x42=(((x38*x5))+((x36*x4)));
x43=(x40+((x39*x5)));
x44=(((x5*((x31+(((-1.0)*x22*x26))))))+((x39*x4)));
x45=((((-1.0)*x21*x38))+((x16*(((((-1.0)*x30))+((x14*x26)))))));
eerot[0]=(((x41*x8))+((x6*x7*((x35+x34)))));
eerot[1]=(((x41*x6))+((x7*x8*(((((-1.0)*x35))+(((-1.0)*x34)))))));
eerot[2]=(x9*(((((-1.0)*x16*x33))+(((-1.0)*x21*x32)))));
eetrans[0]=((0.13916)+((x4*(((((-0.09465)*x25))+(((0.09465)*x26))))))+((x5*(((((0.09465)*x28))+(((0.09465)*x27))))))+(((-0.425)*x3))+((x9*(((((-1.0)*x18*x33))+(((-1.0)*x17*x32))))))+(((-0.39225)*x27))+(((-0.39225)*x28)));
eerot[3]=(((x45*x8))+((x6*(((((-1.0)*x19*x42))+(((-1.0)*x22*x9)))))));
eerot[4]=(((x45*x6))+((x8*((((x42*x7))+((x11*x9)))))));
eerot[5]=((((-1.0)*x11*x19))+((x42*x9)));
eetrans[1]=((3.3e-7)+((x5*(((((-1.0)*x15*x26))+((x15*x25))))))+((x4*((((x15*x27))+((x15*x28))))))+(((-1.0)*x11*x23))+(((-1.0)*x10*x24))+(((-0.10915)*x11))+((x9*((((x18*x38))+((x17*x36))))))+((x20*x26))+(((-1.0)*x20*x25)));
eerot[6]=(((x6*(((((-1.0)*x29))+((x43*x7))))))+((x44*x8)));
eerot[7]=(((x8*(((((-1.0)*x19*x43))+x29))))+((x44*x6)));
eerot[8]=(((x9*(((((-1.0)*x16*x39))+(((-1.0)*x21*x37))))))+(((-1.0)*x14*x7)));
IkReal x46=((1.0)*x13);
eetrans[2]=((0.95)+((x5*(((((-1.0)*x25*x46))+((x13*x26))))))+((x9*(((((-1.0)*x18*x39))+(((-1.0)*x17*x37))))))+(((-1.0)*x12*x26))+((x11*x24))+(((-1.0)*x10*x23))+(((-0.10915)*x10))+((x12*x25))+((x4*(((((-1.0)*x28*x46))+(((-1.0)*x27*x46)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r20;
new_r01=r21;
new_r02=r22;
new_px=((-0.95)+pz+(((-0.0823)*r22)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((3.3e-7)+(((0.0823)*r12))+(((-1.0)*py)));
new_r20=r00;
new_r21=r01;
new_r22=r02;
new_pz=((-0.13916)+px+(((-0.0823)*r02)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x47=((1.0)*px);
IkReal x48=((1.0)*pz);
IkReal x49=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x49))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x48)));
rxp0_2=((((-1.0)*r10*x47))+((py*r00)));
rxp1_0=((((-1.0)*r21*x49))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x48)));
rxp1_2=((((-1.0)*r11*x47))+((py*r01)));
rxp2_0=((((-1.0)*r22*x49))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x48))+((px*r22)));
rxp2_2=((((-1.0)*r12*x47))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x50=((0.1893)*npx);
IkReal x51=((0.1893)*npy);
IkReal x52=((0.09465)*r22);
IkReal x53=((0.09465)*r21);
IkReal x54=((-0.09465)*r20);
IkReal x55=((-1.0)*r20);
IkReal x56=((-1.0)*rxp0_2);
IkReal x57=((-0.09465)*r21);
IkReal x58=((-1.0)*r21);
IkReal x59=((-1.0)*rxp1_2);
IkReal x60=((-1.0)*npx);
IkReal x61=((-1.0)*r22);
IkReal x62=((-1.0)*npz);
matrixinvcoeffs[0]=x54;
matrixinvcoeffs[1]=x50;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x55;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x56;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x54;
matrixinvcoeffs[19]=x50;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x55;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x56;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x57;
matrixinvcoeffs[33]=x51;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x58;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x59;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x57;
matrixinvcoeffs[51]=x51;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x58;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x59;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x61;
matrixinvcoeffs[76]=x52;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x62;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x52;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x59;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x57;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x59;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x53;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x55;
matrixinvcoeffs[133]=x60;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x55;
matrixinvcoeffs[151]=x60;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x54;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x61;
matrixinvcoeffs[165]=x62;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x52;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x61;
matrixinvcoeffs[183]=x62;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x58;
matrixinvcoeffs[204]=x53;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x59;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x53;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x60;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x54;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x55;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x54;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x56;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x63=pz*pz;
IkReal x64=pp*pp;
IkReal x65=((0.1893)*pz);
IkReal x66=((1.7)*pz);
IkReal x67=(gclwh15_9*npx);
IkReal x68=(gclwh6_11*r21);
IkReal x69=(pp*r22);
IkReal x70=((0.00702803935125)*r21);
IkReal x71=(gclwh5_9*npz);
IkReal x72=(gclwh8_11*r20);
IkReal x73=(npy*pz);
IkReal x74=((3.60823078949063e-5)*r22);
IkReal x75=(gclwh14_3*rxp0_2);
IkReal x76=((0.000977833645875)*r20);
IkReal x77=(npz*pz);
IkReal x78=((0.000977833645875)*r21);
IkReal x79=(gclwh10_12*r22);
IkReal x80=(gclwh10_2*rxp2_2);
IkReal x81=((0.00076243651125)*rxp1_2);
IkReal x82=((0.00600991575645741)*r20);
IkReal x83=((0.154705425)*rxp1_2);
IkReal x84=((0.017917245)*r21);
IkReal x85=(gclwh6_11*rxp1_2);
IkReal x86=((0.3786)*rxp1_2);
IkReal x87=(gclwh7_0*rxp1_2);
IkReal x88=((0.7572)*rxp1_2);
IkReal x89=((0.154705425)*rxp2_2);
IkReal x90=((2.0)*gclwh11_10);
IkReal x91=(gclwh12_8*r21);
IkReal x92=((0.81725)*pp);
IkReal x93=(pp*pz);
IkReal x94=(gclwh14_2*r20);
IkReal x95=(pp*r21);
IkReal x96=((2.0)*gclwh4_11);
IkReal x97=(gclwh8_12*r20);
IkReal x98=(npx*pz);
IkReal x99=(gclwh14_8*rxp0_2);
IkReal x100=((0.1893)*rxp2_2);
IkReal x101=(gclwh5_9*rxp2_2);
IkReal x102=((0.020662095)*rxp1_2);
IkReal x103=((0.007321434238125)*r21);
IkReal x104=((1.6345)*pz);
IkReal x105=((0.0089586225)*pz);
IkReal x106=(gclwh13_0*r21);
IkReal x107=(gclwh5_9*r22);
IkReal x108=(gclwh11_10*r22);
IkReal x109=(gclwh11_13*r22);
IkReal x110=((1.0)*r21);
IkReal x111=((0.3786)*rxp0_2);
IkReal x112=(gclwh14_14*rxp0_2);
IkReal x113=(pp*r20);
IkReal x114=((0.00195566729175)*r22);
IkReal x115=(gclwh15_10*rxp0_2);
IkReal x116=(gclwh14_8*r20);
IkReal x117=(gclwh12_8*rxp1_2);
IkReal x118=((2.0)*gclwh9_10);
IkReal x119=((2.0)*gclwh15_10);
IkReal x120=(gclwh5_15*rxp2_2);
IkReal x121=((2.0)*gclwh13_10);
IkReal x122=((0.00702803935125)*r20);
IkReal x123=(gclwh13_9*r21);
IkReal x124=(gclwh5_0*r22);
IkReal x125=((0.01464286847625)*r20);
IkReal x126=(gclwh15_1*r20);
IkReal x127=((0.000977833645875)*r22);
IkReal x128=((0.0089586225)*r20);
IkReal x129=((2.0)*gclwh10_11);
IkReal x130=(gclwh5_10*r22);
IkReal x131=((2.0)*pp);
IkReal x132=(gclwh15_9*r20);
IkReal x133=(gclwh1_3*r20);
IkReal x134=((0.00195566729175)*r20);
IkReal x135=(gclwh4_3*rxp2_2);
IkReal x136=((0.2183)*gclwh13_15);
IkReal x137=((2.0)*gclwh7_10);
IkReal x138=(gclwh15_0*r20);
IkReal x139=(gclwh9_0*r20);
IkReal x140=(gclwh15_15*rxp0_2);
IkReal x141=(gclwh2_1*r21);
IkReal x142=((4.0)*gclwh11_10);
IkReal x143=((0.30941085)*rxp0_2);
IkReal x144=(gclwh9_0*rxp0_2);
IkReal x145=(gclwh5_10*rxp2_2);
IkReal x146=((0.2183)*gclwh12_14);
IkReal x147=((0.2183)*gclwh14_14);
IkReal x148=(gclwh4_2*rxp2_2);
IkReal x149=((0.03275)*pp);
IkReal x150=((0.006199575)*rxp1_2);
IkReal x151=(gclwh12_2*rxp1_2);
IkReal x152=(gclwh5_0*rxp2_2);
IkReal x153=((3.60823078949063e-5)*r21);
IkReal x154=(gclwh14_11*rxp0_2);
IkReal x155=((0.020662095)*rxp0_2);
IkReal x156=(gclwh14_8*npx);
IkReal x157=((4.0)*gclwh9_10);
IkReal x158=((0.00195566729175)*r21);
IkReal x159=(gclwh8_12*rxp0_2);
IkReal x160=((0.01464286847625)*r21);
IkReal x161=((0.3786)*rxp2_2);
IkReal x162=((0.01464286847625)*r22);
IkReal x163=(gclwh7_13*r21);
IkReal x164=((4.0)*gclwh7_10);
IkReal x165=(gclwh13_0*rxp1_2);
IkReal x166=((0.1893)*rxp1_2);
IkReal x167=(gclwh6_2*r21);
IkReal x168=(gclwh5_1*rxp2_2);
IkReal x169=(gclwh8_2*rxp0_2);
IkReal x170=(gclwh9_10*r20);
IkReal x171=((4.0)*pp);
IkReal x172=(gclwh15_1*rxp0_2);
IkReal x173=(gclwh9_13*r20);
IkReal x174=((0.0089586225)*r21);
IkReal x175=(gclwh0_0*r20);
IkReal x176=(gclwh10_11*r22);
IkReal x177=((2.0)*gclwh12_11);
IkReal x178=((0.0655)*pz);
IkReal x179=((0.006199575)*rxp2_2);
IkReal x180=(gclwh12_14*rxp1_2);
IkReal x181=(gclwh15_0*rxp0_2);
IkReal x182=((2.0)*npx);
IkReal x183=(gclwh9_13*rxp0_2);
IkReal x184=((1.0)*pp);
IkReal x185=((4.0)*gclwh10_11);
IkReal x186=(gclwh15_9*rxp0_2);
IkReal x187=((3.60823078949063e-5)*r20);
IkReal x188=((0.00702803935125)*r22);
IkReal x189=(gclwh8_2*r20);
IkReal x190=((0.2183)*gclwh5_15);
IkReal x191=(gclwh10_2*r22);
IkReal x192=(gclwh5_1*r22);
IkReal x193=(gclwh13_9*rxp1_2);
IkReal x194=((2.0)*gclwh5_10);
IkReal x195=((0.020662095)*rxp2_2);
IkReal x196=(gclwh4_8*r22);
IkReal x197=((0.017917245)*r20);
IkReal x198=(gclwh7_0*r21);
IkReal x199=((0.00600991575645741)*r21);
IkReal x200=(gclwh11_0*r22);
IkReal x201=(gclwh6_12*r21);
IkReal x202=((0.2183)*gclwh15_15);
IkReal x203=(gclwh11_0*rxp2_2);
IkReal x204=((0.2183)*gclwh4_14);
IkReal x205=(gclwh4_14*rxp2_2);
IkReal x206=(gclwh6_2*rxp1_2);
IkReal x207=((0.1893)*rxp0_2);
IkReal x208=(gclwh4_8*rxp2_2);
IkReal x209=((0.12699240901125)*rxp1_2);
IkReal x210=(gclwh14_2*rxp0_2);
IkReal x211=(gclwh4_3*r22);
IkReal x212=((0.1893)*pp);
IkReal x213=(gclwh13_15*rxp1_2);
IkReal x214=(gclwh1_2*r20);
IkReal x215=((2.0)*gclwh14_11);
IkReal x216=(gclwh4_11*r22);
IkReal x217=((0.020662095)*x112);
IkReal x218=(gclwh6_5*x78);
IkReal x219=(gclwh8_5*x76);
IkReal x220=(gclwh12_14*x102);
IkReal x221=(gclwh10_5*x127);
IkReal x222=(gclwh4_14*x195);
IkReal x223=((0.0089586225)*x68);
IkReal x224=(gclwh12_11*x166);
IkReal x225=((0.017917245)*x117);
IkReal x226=((0.017917245)*x208);
IkReal x227=(gclwh4_11*x100);
IkReal x228=((0.0089586225)*x72);
IkReal x229=((0.1893)*x154);
IkReal x230=((0.0089586225)*x176);
IkReal x231=((0.017917245)*x99);
IkReal x232=((0.017917245)*x101);
IkReal x233=((0.0089586225)*x108);
IkReal x234=((0.1893)*x115);
IkReal x235=((0.017917245)*x193);
IkReal x236=(gclwh9_10*x128);
IkReal x237=((0.017917245)*x186);
IkReal x238=(gclwh13_10*x166);
IkReal x239=(gclwh7_10*x174);
IkReal x240=(gclwh5_10*x100);
IkReal x241=((0.020662095)*x140);
IkReal x242=(gclwh7_7*x78);
IkReal x243=(gclwh9_7*x76);
IkReal x244=(gclwh13_15*x102);
IkReal x245=((0.020662095)*x120);
IkReal x246=(gclwh11_7*x127);
IkReal x247=(gclwh10_5*x195);
IkReal x248=(gclwh8_5*x155);
IkReal x249=(gclwh14_14*x76);
IkReal x250=(gclwh6_5*x102);
IkReal x251=(gclwh4_14*x127);
IkReal x252=(gclwh12_14*x78);
IkReal x253=(gclwh8_11*x207);
IkReal x254=((0.000847933619625)*x91);
IkReal x255=(gclwh12_11*x174);
IkReal x256=(gclwh10_11*x100);
IkReal x257=((0.0089586225)*x216);
IkReal x258=((0.000847933619625)*x196);
IkReal x259=((0.1893)*x85);
IkReal x260=(gclwh14_11*x128);
IkReal x261=((0.000847933619625)*x116);
IkReal x262=(gclwh9_10*x207);
IkReal x263=(gclwh13_10*x174);
IkReal x264=(gclwh11_10*x100);
IkReal x265=((0.000847933619625)*x132);
IkReal x266=((0.0089586225)*x130);
IkReal x267=((0.000847933619625)*x107);
IkReal x268=(gclwh7_10*x166);
IkReal x269=((0.000847933619625)*x123);
IkReal x270=(gclwh15_10*x128);
IkReal x271=(gclwh5_15*x127);
IkReal x272=(gclwh7_7*x102);
IkReal x273=(gclwh13_15*x78);
IkReal x274=(gclwh15_15*x76);
IkReal x275=(gclwh9_7*x155);
IkReal x276=(gclwh11_7*x195);
IkReal x277=((0.017917245)*x176);
IkReal x278=(gclwh14_11*x111);
IkReal x279=((0.017917245)*x72);
IkReal x280=((0.04132419)*x112);
IkReal x281=((0.04132419)*x180);
IkReal x282=((0.04132419)*x205);
IkReal x283=(gclwh4_11*x161);
IkReal x284=((0.017917245)*x68);
IkReal x285=(gclwh12_11*x86);
IkReal x286=((0.04132419)*x120);
IkReal x287=((0.04132419)*x213);
IkReal x288=((0.04132419)*x140);
IkReal x289=((0.017917245)*x170);
IkReal x290=(gclwh15_10*x111);
IkReal x291=((0.017917245)*x108);
IkReal x292=(gclwh7_10*x84);
IkReal x293=((0.3786)*x145);
IkReal x294=(gclwh13_10*x86);
IkReal x295=((0.3786)*x85);
IkReal x296=(gclwh14_11*x197);
IkReal x297=(gclwh14_14*x134);
IkReal x298=(gclwh4_14*x114);
IkReal x299=(gclwh12_14*x158);
IkReal x300=(gclwh14_8*x113);
IkReal x301=((2.0)*x63);
IkReal x302=((1.0)*x64);
IkReal x303=(r21*x64);
IkReal x304=((0.2183)*gclwh10_5*x77);
IkReal x305=((0.2183)*gclwh8_5*x98);
IkReal x306=((0.10915)*gclwh6_5*x95);
IkReal x307=((0.2183)*gclwh6_5*x73);
IkReal x308=((0.10915)*gclwh8_5*x113);
IkReal x309=((0.10915)*gclwh10_5*x69);
IkReal x310=(gclwh12_3*pp*x166);
IkReal x311=(x129*x77);
IkReal x312=(x105*x189);
IkReal x313=((2.0)*gclwh8_11*x98);
IkReal x314=(gclwh10_2*pz*x69);
IkReal x315=(x210*x65);
IkReal x316=(x189*x93);
IkReal x317=(gclwh4_3*pp*x100);
IkReal x318=(x105*x191);
IkReal x319=(x151*x65);
IkReal x320=((2.0)*gclwh6_11*x73);
IkReal x321=(x148*x65);
IkReal x322=(x212*x75);
IkReal x323=(x105*x167);
IkReal x324=(gclwh13_1*pp*x166);
IkReal x325=(x105*x200);
IkReal x326=(x105*x139);
IkReal x327=(gclwh5_1*pp*x100);
IkReal x328=(x181*x65);
IkReal x329=(gclwh11_0*pz*x69);
IkReal x330=(x137*x73);
IkReal x331=(x139*x93);
IkReal x332=(x77*x90);
IkReal x333=(x172*x212);
IkReal x334=(x118*x98);
IkReal x335=(x105*x198);
IkReal x336=(x165*x65);
IkReal x337=(x152*x65);
IkReal x338=((0.10915)*gclwh7_7*x95);
IkReal x339=((0.2183)*gclwh9_7*x98);
IkReal x340=((0.2183)*gclwh11_7*x77);
IkReal x341=((0.10915)*gclwh9_7*x113);
IkReal x342=((0.2183)*gclwh7_7*x73);
IkReal x343=((0.10915)*gclwh11_7*x69);
IkReal x344=((0.10915)*gclwh14_14*x113);
IkReal x345=(x204*x77);
IkReal x346=(x146*x73);
IkReal x347=((0.10915)*gclwh12_14*x95);
IkReal x348=(x147*x98);
IkReal x349=((0.10915)*gclwh4_14*x69);
IkReal x350=((0.09465)*gclwh4_8*x69);
IkReal x351=(x93*x94);
IkReal x352=(gclwh12_3*x303);
IkReal x353=(x206*x65);
IkReal x354=(gclwh3_3*x303);
IkReal x355=(x133*x64);
IkReal x356=(gclwh3_2*r21*x105);
IkReal x357=(x215*x98);
IkReal x358=(x156*x65);
IkReal x359=(x105*x94);
IkReal x360=((0.09465)*pp*x91);
IkReal x361=(x211*x64);
IkReal x362=(x105*x214);
IkReal x363=(x169*x65);
IkReal x364=(x77*x96);
IkReal x365=(gclwh4_2*r22*x105);
IkReal x366=(gclwh4_8*npz*x65);
IkReal x367=(gclwh12_2*r21*x105);
IkReal x368=(x65*x80);
IkReal x369=((0.09465)*x300);
IkReal x370=(x177*x73);
IkReal x371=(gclwh12_8*npy*x65);
IkReal x372=(x126*x64);
IkReal x373=(x65*x71);
IkReal x374=(gclwh5_0*pz*x69);
IkReal x375=(gclwh13_9*npy*x65);
IkReal x376=(x105*x124);
IkReal x377=(x106*x93);
IkReal x378=((0.09465)*gclwh15_9*x113);
IkReal x379=(x119*x98);
IkReal x380=(x105*x106);
IkReal x381=(x141*x64);
IkReal x382=(gclwh2_0*r21*x105);
IkReal x383=(x144*x65);
IkReal x384=(x203*x65);
IkReal x385=(gclwh0_1*r20*x64);
IkReal x386=(x105*x175);
IkReal x387=((0.09465)*gclwh5_9*x69);
IkReal x388=(x65*x87);
IkReal x389=((0.09465)*gclwh13_9*x95);
IkReal x390=(x105*x138);
IkReal x391=(x65*x67);
IkReal x392=(x194*x77);
IkReal x393=(x121*x73);
IkReal x394=((0.10915)*gclwh13_15*x95);
IkReal x395=((0.10915)*gclwh5_15*x69);
IkReal x396=(x202*x98);
IkReal x397=((0.10915)*gclwh15_15*x113);
IkReal x398=(x190*x77);
IkReal x399=(x136*x73);
IkReal x400=(x131*x72);
IkReal x401=(x129*x69);
IkReal x402=((4.0)*gclwh6_11*x73);
IkReal x403=((4.0)*gclwh8_11*x98);
IkReal x404=(x131*x68);
IkReal x405=(x185*x77);
IkReal x406=(x69*x90);
IkReal x407=(x164*x73);
IkReal x408=(x113*x118);
IkReal x409=(x137*x95);
IkReal x410=(x157*x98);
IkReal x411=(x142*x77);
IkReal x412=(x113*x215);
IkReal x413=((4.0)*gclwh12_11*x73);
IkReal x414=((4.0)*gclwh4_11*x77);
IkReal x415=(x113*x147);
IkReal x416=((0.4366)*gclwh12_14*x73);
IkReal x417=((0.4366)*gclwh4_14*x77);
IkReal x418=(x146*x95);
IkReal x419=((0.4366)*gclwh14_14*x98);
IkReal x420=(x204*x69);
IkReal x421=(gclwh6_2*npy*x301);
IkReal x422=(gclwh6_2*x110*x93);
IkReal x423=(gclwh10_2*npz*x301);
IkReal x424=(gclwh8_2*x182*x63);
IkReal x425=(gclwh7_0*npy*x301);
IkReal x426=(gclwh9_0*x182*x63);
IkReal x427=(gclwh11_0*npz*x301);
IkReal x428=(gclwh7_0*x110*x93);
IkReal x429=(gclwh12_2*npy*x301);
IkReal x430=(gclwh3_2*npy*x301);
IkReal x431=(gclwh1_2*x182*x63);
IkReal x432=(gclwh14_3*x182*x93);
IkReal x433=(gclwh4_2*npz*x301);
IkReal x434=(gclwh4_3*x131*x77);
IkReal x435=(gclwh12_2*x110*x93);
IkReal x436=((1.0)*x214*x93);
IkReal x437=(gclwh3_3*x131*x73);
IkReal x438=((1.0)*gclwh4_2*pz*x69);
IkReal x439=(gclwh1_3*x182*x93);
IkReal x440=(gclwh3_2*x110*x93);
IkReal x441=(gclwh12_3*x131*x73);
IkReal x442=(gclwh14_2*x182*x63);
IkReal x443=(gclwh14_3*r20*x302);
IkReal x444=(gclwh0_0*x182*x63);
IkReal x445=(gclwh2_0*npy*x301);
IkReal x446=(gclwh5_1*x131*x77);
IkReal x447=(gclwh13_1*x131*x73);
IkReal x448=(gclwh15_0*x182*x63);
IkReal x449=(gclwh2_1*x131*x73);
IkReal x450=(gclwh0_1*x182*x93);
IkReal x451=(gclwh5_0*npz*x301);
IkReal x452=(gclwh13_0*npy*x301);
IkReal x453=((1.0)*x175*x93);
IkReal x454=((1.0)*x138*x93);
IkReal x455=(gclwh2_0*x110*x93);
IkReal x456=(gclwh13_1*x110*x64);
IkReal x457=(x192*x302);
IkReal x458=(gclwh15_1*x182*x93);
IkReal x459=(x282+x281);
IkReal x460=(x287+x286);
IkReal x461=(x247+x248);
IkReal x462=(x220+x222);
IkReal x463=(x245+x244);
IkReal x464=(x276+x275);
IkReal x465=(x320+x229+x228+x230);
IkReal x466=(x330+x233+x236+x234);
IkReal x467=(x393+x392+x268+x270);
IkReal x468=(x370+x364+x259+x260);
IkReal x469=(x297+x416+x417+x415);
IkReal x470=(x306+x304+x305+x218);
IkReal x471=(x346+x344+x345+x249);
IkReal x472=(x397+x399+x398+x274);
IkReal x473=(x339+x338+x340+x242);
IkReal x474=(x379+x264+x266+x263+x262);
IkReal x475=(x357+x255+x256+x257+x253);
IkReal x476=(x311+x313+x223+x224+x227);
IkReal x477=(x332+x334+x238+x239+x240);
IkReal x478=(x347+x348+x349+x251+x252);
IkReal x479=(x395+x394+x396+x273+x271);
IkReal x480=(x342+x343+x341+x243+x246);
IkReal x481=(x298+x299+x418+x419+x420);
IkReal x482=(x295+x296+x412+x413+x414);
IkReal x483=(x308+x309+x307+x219+x221);
IkReal x484=(x285+x284+x283+x403+x405+x404);
IkReal x485=(x292+x293+x294+x409+x410+x411);
IkReal x486=(x290+x291+x289+x407+x406+x408);
IkReal x487=(x277+x278+x279+x401+x400+x402);
IkReal x488=(((x177*x95))+((x69*x96))+((gclwh12_11*x84))+(((0.017917245)*x216))+((gclwh10_11*x161))+(((4.0)*gclwh14_11*x98))+((gclwh8_11*x111)));
IkReal x489=(x321+x322+x323+x319+x231+x424+x423+x422);
IkReal x490=(x333+x337+x336+x335+x237+x428+x427+x426);
IkReal x491=(x318+x315+x314+x317+x316+x310+x312+x225+x226+x421);
IkReal x492=(x331+x324+x325+x326+x327+x328+x329+x232+x235+x425);
IkReal x493=(x387+x388+x389+x391+x390+x267+x269+x449+x458+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x494=(x351+x350+x353+x352+x355+x354+x356+x359+x358+x360+x361+x362+x258+x254+x429+x430+x431+x432+x433+x65);
IkReal x495=(x371+x368+x369+x363+x365+x366+x367+x261+x438+x439+x434+x435+x436+x437+x441+x440+x443+x442);
IkReal x496=(x386+x384+x385+x382+x383+x380+x381+x378+x377+x376+x375+x374+x373+x372+x265+x448+x445+x444+x447+x446+x65);
op[0]=((((1.6345)*gclwh10_12*x77))+(((0.154705425)*x99))+(((-1.0)*x483))+((gclwh6_12*x103))+(((-0.007321434238125)*x97))+(((-1.6345)*gclwh6_12*x73))+(((-1.0)*gclwh4_8*x89))+x462+x470+(((-1.0)*x92*x97))+(((-0.81725)*gclwh10_12*x69))+((x201*x92))+(((-1.0)*x217))+(((1.6345)*gclwh8_12*x98))+(((-0.007321434238125)*x79))+(((-1.0)*gclwh12_8*x83)));
op[1]=((((-1.0)*x489))+(((-1.0)*gclwh12_3*x209))+(((-1.0)*x476))+(((-0.12699240901125)*x135))+x491+x465+((pp*x72))+(((0.12699240901125)*x75))+((gclwh10_11*x69))+(((-1.0)*x184*x68)));
op[2]=((-0.17125635)+(((-1.0)*x484))+x487);
op[3]=(((gclwh8_2*x122))+((gclwh10_2*x188))+(((-0.160905)*x99))+(((0.7845)*gclwh8_2*x113))+(((-1.0)*gclwh6_2*x70))+(((-0.7845)*gclwh6_2*x95))+(((0.160905)*x208))+(((-0.14850585)*x148))+(((-0.14850585)*x151))+(((-1.569)*gclwh10_2*x77))+(((0.7845)*gclwh10_2*x69))+(((0.160905)*x117))+(((0.14850585)*x210))+(((-1.0)*x459))+x280+(((-1.569)*gclwh8_2*x98))+(((1.569)*gclwh6_2*x73)));
op[4]=((((-0.000293394886875)*x79))+(((-0.0655)*gclwh6_12*x73))+(((-1.0)*x483))+(((0.03275)*gclwh6_12*x95))+(((-1.0)*x462))+(((-0.03275)*gclwh10_12*x69))+(((-0.000293394886875)*x97))+((gclwh4_8*x179))+x217+x470+(((-1.0)*x149*x97))+(((0.0655)*gclwh10_12*x77))+(((0.0655)*gclwh8_12*x98))+(((0.006199575)*x117))+(((0.000293394886875)*x201))+(((-0.006199575)*x99)));
op[5]=((((-1.0)*x184*x72))+((pp*x68))+(((-1.0)*x489))+(((-1.0)*x465))+x491+x476+(((-1.0)*gclwh12_3*x81))+(((-0.00076243651125)*x135))+(((0.00076243651125)*x75))+(((-1.0)*gclwh10_11*x69)));
op[6]=((((0.12699240901125)*x172))+(((-1.0)*x490))+(((-1.0)*gclwh9_10*x113))+((gclwh7_10*x95))+(((-1.0)*gclwh13_1*x209))+(((-1.0)*gclwh11_10*x69))+(((-1.0)*x466))+x492+x477+(((-0.12699240901125)*x168)));
op[7]=(((gclwh7_13*x103))+(((-1.0)*gclwh13_9*x83))+((x163*x92))+(((-1.0)*x480))+(((0.154705425)*x186))+(((-1.0)*gclwh5_9*x89))+x463+x473+(((1.6345)*gclwh9_13*x98))+(((-1.0)*x173*x92))+(((-0.007321434238125)*x109))+(((-1.0)*x241))+(((-0.007321434238125)*x173))+(((1.6345)*gclwh11_13*x77))+(((-1.6345)*gclwh7_13*x73))+(((-0.81725)*gclwh11_13*x69)));
op[8]=((((-0.160905)*x193))+(((0.160905)*x186))+(((-1.0)*gclwh7_0*x70))+(((-0.160905)*x101))+(((0.14850585)*x181))+(((1.569)*gclwh7_0*x73))+(((0.7845)*gclwh11_0*x69))+(((-0.14850585)*x152))+(((-0.14850585)*x165))+((gclwh9_0*x122))+x460+(((-1.569)*gclwh11_0*x77))+(((-1.569)*gclwh9_0*x98))+(((-1.0)*x288))+(((-0.7845)*gclwh7_0*x95))+((gclwh11_0*x188))+(((0.7845)*gclwh9_0*x113)));
op[9]=((-0.17125635)+(((-1.0)*x485))+x486);
op[10]=((((-1.0)*x490))+(((-1.0)*gclwh7_10*x95))+(((-1.0)*x477))+x492+x466+(((0.00076243651125)*x172))+((gclwh9_10*x113))+(((-0.00076243651125)*x168))+(((-1.0)*gclwh13_1*x81))+((gclwh11_10*x69)));
op[11]=((((0.000293394886875)*x163))+(((-0.03275)*gclwh9_13*x113))+(((0.03275)*gclwh7_13*x95))+(((-0.006199575)*x186))+(((-1.0)*x480))+(((-0.0655)*gclwh7_13*x73))+(((-1.0)*x463))+((gclwh13_9*x150))+(((-0.000293394886875)*x109))+(((0.0655)*gclwh11_13*x77))+(((-0.03275)*gclwh11_13*x69))+x241+x473+(((0.0655)*gclwh9_13*x98))+(((-0.000293394886875)*x173))+(((0.006199575)*x101)));
op[12]=((((1.6345)*gclwh4_8*x77))+(((1.6345)*gclwh12_8*x73))+(((-1.6345)*gclwh14_8*x98))+(((-1.0)*x91*x92))+(((-0.007321434238125)*x91))+(((-1.0)*x471))+(((0.154705425)*x159))+((gclwh10_12*x89))+x461+x478+(((-0.81725)*gclwh4_8*x69))+(((0.007321434238125)*x116))+((x116*x92))+(((-1.0)*x250))+(((-1.0)*gclwh6_12*x83))+(((-0.007321434238125)*x196)));
op[13]=((-0.679811285)+(((1.341705325)*gclwh12_3*x73))+(((-1.0)*x495))+(((1.341705325)*gclwh4_3*x77))+(((-1.0)*gclwh12_3*x199))+(((-0.66189404)*gclwh4_3*x69))+(((-0.66189404)*gclwh12_3*x95))+(((-1.0)*x475))+((gclwh3_3*x199))+(((-0.679811285)*gclwh1_3*x113))+(((-0.679811285)*gclwh3_3*x95))+(((1.341705325)*gclwh3_3*x73))+(((-1.0)*gclwh4_11*x69))+(((1.341705325)*gclwh1_3*x98))+x494+x468+((gclwh1_3*x82))+((gclwh14_3*x82))+(((-1.341705325)*gclwh14_3*x98))+((gclwh14_11*x113))+(((-1.0)*gclwh12_11*x95))+(((-0.00600991575645741)*x211))+(((0.66189404)*gclwh14_3*x113)));
op[14]=((-0.07735732)+(((-1.0)*x488))+x482);
op[15]=((((-1.0)*gclwh4_2*x188))+(((-0.85)*x300))+(((1.569)*gclwh3_2*x73))+(((0.7845)*pp*x94))+(((-1.0)*x481))+(((-0.14850585)*x80))+((gclwh3_2*x70))+(((-0.7845)*gclwh12_2*x95))+(((-0.007614829125)*x116))+(((1.569)*gclwh12_2*x73))+(((-0.14850585)*x169))+(((0.00702803935125)*x94))+(((0.85)*pp*x91))+((x156*x66))+(((0.007614829125)*x91))+x469+(((0.007614829125)*x196))+(((-0.7845)*gclwh1_2*x113))+(((0.85)*gclwh4_8*x69))+(((1.569)*gclwh4_2*x77))+(((-0.7845)*gclwh3_2*x95))+(((-1.569)*gclwh14_2*x98))+(((-1.0)*gclwh12_2*x70))+(((1.569)*gclwh1_2*x98))+(((-1.0)*gclwh12_8*npy*x66))+((gclwh1_2*x122))+(((-1.0)*gclwh4_8*npz*x66))+(((0.14850585)*x206))+(((-0.7845)*gclwh4_2*x69)));
op[16]=((((0.0655)*gclwh14_8*x98))+(((0.03275)*gclwh4_8*x69))+(((-1.0)*gclwh6_12*x150))+(((-0.0655)*gclwh12_8*x73))+(((-0.0655)*gclwh4_8*x77))+(((-0.03275)*x300))+(((-1.0)*x478))+(((-0.000293394886875)*x116))+(((0.000293394886875)*x91))+x461+x471+(((0.006199575)*x159))+((gclwh10_12*x179))+((x149*x91))+(((0.000293394886875)*x196))+(((-1.0)*x250)));
op[17]=((0.012986285)+(((-0.00493096)*gclwh14_3*x113))+(((-1.0)*gclwh14_11*x113))+(((0.008055325)*gclwh3_3*x73))+(((-1.0)*x495))+((gclwh4_11*x69))+(((0.00493096)*gclwh4_3*x69))+(((-1.0)*x468))+(((-0.012986285)*gclwh3_3*x95))+(((0.008055325)*gclwh12_3*x73))+x494+x475+(((0.008055325)*gclwh4_3*x77))+(((-0.008055325)*gclwh14_3*x98))+((gclwh3_3*x153))+(((0.00493096)*gclwh12_3*x95))+(((3.60823078949063e-5)*x133))+(((-1.0)*gclwh4_3*x74))+(((-0.012986285)*gclwh1_3*x113))+((gclwh12_11*x95))+((gclwh14_3*x187))+(((-1.0)*gclwh12_3*x153))+(((0.008055325)*gclwh1_3*x98)));
op[18]=((0.679811285)+(((0.66189404)*gclwh5_1*x69))+(((-1.0)*x493))+(((1.341705325)*gclwh0_1*x98))+(((0.00600991575645741)*x192))+(((-0.66189404)*gclwh15_1*x113))+(((0.00600991575645741)*x141))+(((-1.0)*gclwh15_1*x82))+(((-0.679811285)*gclwh0_1*x113))+(((-1.341705325)*gclwh5_1*x77))+(((-1.0)*x474))+(((-1.341705325)*gclwh13_1*x73))+(((-1.0)*gclwh13_10*x95))+((gclwh0_1*x82))+((gclwh15_10*x113))+(((-1.0)*gclwh5_10*x69))+x496+x467+(((0.66189404)*gclwh13_1*x95))+(((1.341705325)*gclwh2_1*x73))+(((-0.679811285)*gclwh2_1*x95))+(((1.341705325)*gclwh15_1*x98))+((gclwh13_1*x199)));
op[19]=(((x104*x67))+(((-1.0)*x479))+(((-1.0)*x464))+(((-1.0)*gclwh11_13*x89))+(((-0.154705425)*x183))+x272+x472+(((-0.007321434238125)*x132))+(((-1.6345)*gclwh13_9*x73))+(((0.007321434238125)*x107))+(((-1.0)*x132*x92))+((gclwh7_13*x83))+(((0.81725)*gclwh5_9*x69))+((gclwh13_9*x103))+(((-1.0)*x104*x71))+((x123*x92)));
op[20]=((((-0.7845)*gclwh15_0*x113))+((gclwh15_15*x134))+(((-0.85)*gclwh15_9*x113))+((gclwh0_0*x122))+(((0.007614829125)*x107))+(((-0.007614829125)*x132))+(((-1.0)*x66*x71))+(((-0.14850585)*x87))+(((-0.7845)*gclwh2_0*x95))+(((0.4366)*gclwh13_15*x73))+(((0.007614829125)*x123))+(((-1.569)*gclwh5_0*x77))+(((0.7845)*gclwh5_0*x69))+(((1.569)*gclwh15_0*x98))+(((0.14850585)*x144))+(((-0.7845)*gclwh0_0*x113))+((gclwh2_0*x70))+(((-1.0)*gclwh15_0*x122))+((x113*x202))+((gclwh13_0*x70))+(((1.569)*gclwh2_0*x73))+(((1.569)*gclwh0_0*x98))+(((-1.0)*gclwh5_15*x114))+(((0.85)*gclwh5_9*x69))+(((0.4366)*gclwh5_15*x77))+(((-1.0)*gclwh13_15*x158))+(((0.85)*gclwh13_9*x95))+(((-0.4366)*gclwh15_15*x98))+(((-1.0)*x190*x69))+(((0.00702803935125)*x124))+(((-1.0)*x136*x95))+(((0.14850585)*x203))+(((-1.0)*gclwh13_9*npy*x66))+((x66*x67))+(((0.7845)*gclwh13_0*x95))+(((-1.569)*gclwh13_0*x73)));
op[21]=((-0.07735732)+(((4.0)*gclwh15_10*x98))+((gclwh11_10*x161))+(((-1.0)*x113*x119))+(((-4.0)*gclwh13_10*x73))+((x121*x95))+(((-1.0)*gclwh15_10*x197))+(((0.017917245)*x130))+((x194*x69))+((gclwh9_10*x111))+((gclwh13_10*x84))+(((-4.0)*gclwh5_10*x77))+(((-1.0)*gclwh7_10*x86)));
op[22]=((-0.012986285)+((gclwh5_1*x74))+(((0.008055325)*gclwh2_1*x73))+(((3.60823078949063e-5)*x141))+(((-1.0)*x493))+(((-1.0)*gclwh15_10*x113))+(((-0.00493096)*gclwh5_1*x69))+(((-0.012986285)*gclwh2_1*x95))+(((-0.008055325)*gclwh5_1*x77))+(((0.008055325)*gclwh15_1*x98))+(((-1.0)*x467))+(((-0.012986285)*gclwh0_1*x113))+x496+x474+((gclwh0_1*x187))+(((0.00493096)*gclwh15_1*x113))+(((-0.00493096)*gclwh13_1*x95))+(((0.008055325)*gclwh0_1*x98))+((gclwh13_10*x95))+((gclwh5_10*x69))+(((-3.60823078949063e-5)*x126))+(((-0.008055325)*gclwh13_1*x73))+((gclwh13_1*x153)));
op[23]=((((0.0655)*gclwh13_9*x73))+(((-0.006199575)*x183))+(((0.03275)*gclwh15_9*x113))+(((-0.03275)*gclwh13_9*x95))+(((-0.000293394886875)*x123))+(((-0.03275)*gclwh5_9*x69))+(((-1.0)*x178*x67))+((gclwh7_13*x150))+(((-1.0)*x472))+(((0.000293394886875)*x132))+(((-1.0)*x464))+(((-0.000293394886875)*x107))+x272+x479+((x178*x71))+(((-1.0)*gclwh11_13*x179)));
op[24]=((-0.35681135)+(((-1.0)*x484))+x487);
op[25]=((((-3.269)*gclwh8_2*x98))+((gclwh8_2*x125))+((gclwh10_2*x162))+(((-1.0)*gclwh6_2*x160))+(((3.269)*gclwh6_2*x73))+(((-3.269)*gclwh10_2*x77))+(((-1.0)*x459))+(((-0.30941085)*x151))+x280+((gclwh14_2*x143))+(((-0.30941085)*x148))+(((-1.6345)*gclwh6_2*x95))+(((1.6345)*gclwh8_2*x113))+(((1.6345)*gclwh10_2*x69)));
op[26]=((((1.569)*pp*x97))+(((0.08264838)*x112))+(((1.569)*gclwh10_12*x69))+(((-3.138)*gclwh10_12*x77))+(((0.0140560787025)*x79))+(((-0.0140560787025)*x201))+(((-1.569)*gclwh6_12*x95))+(((-0.08264838)*x180))+(((0.0140560787025)*x97))+(((-0.08264838)*x205))+(((3.138)*gclwh6_12*x73))+(((-3.138)*gclwh8_12*x98)));
op[27]=((((-0.03583449)*x72))+(((-1.0)*x185*x69))+(((0.03583449)*x68))+(((8.0)*gclwh10_11*x77))+(((0.7572)*gclwh4_11*rxp2_2))+((x171*x68))+(((-0.03583449)*x176))+(((8.0)*gclwh8_11*x98))+(((-0.7572)*x154))+(((-1.0)*x171*x72))+((gclwh12_11*x88))+(((-8.0)*gclwh6_11*x73)));
op[28]=((-0.01429865)+(((-1.0)*x487))+x484);
op[29]=((((-0.00058678977375)*x167))+(((-0.131)*gclwh8_2*x98))+(((0.00058678977375)*x191))+(((0.00058678977375)*x189))+(((0.0655)*gclwh8_2*x113))+(((0.01239915)*x210))+x459+(((-0.0655)*gclwh6_2*x95))+(((-1.0)*x280))+(((0.131)*gclwh6_2*x73))+(((-0.131)*gclwh10_2*x77))+(((-0.01239915)*x151))+(((0.0655)*gclwh10_2*x69))+(((-0.01239915)*x148)));
op[30]=((((-3.269)*gclwh9_0*x98))+(((-1.6345)*gclwh7_0*x95))+(((-0.30941085)*x165))+(((3.269)*gclwh7_0*x73))+(((-1.0)*gclwh7_0*x160))+(((-0.30941085)*x152))+(((1.6345)*gclwh9_0*x113))+((gclwh9_0*x125))+x460+(((-3.269)*gclwh11_0*x77))+(((1.6345)*gclwh11_0*x69))+((gclwh15_0*x143))+(((-1.0)*x288))+((gclwh11_0*x162)));
op[31]=((-0.35681135)+(((-1.0)*x485))+x486);
op[32]=(((x113*x157))+(((0.03583449)*x170))+(((-1.0)*gclwh13_10*x88))+(((-0.03583449)*gclwh7_10*r21))+(((-1.0)*x164*x95))+((x142*x69))+(((0.03583449)*x108))+(((-8.0)*gclwh11_10*x77))+(((8.0)*gclwh7_10*x73))+(((-0.7572)*x145))+(((0.7572)*x115))+(((-8.0)*gclwh9_10*x98)));
op[33]=((((-0.0140560787025)*x163))+(((-3.138)*gclwh11_13*x77))+(((1.569)*gclwh9_13*x113))+(((0.0140560787025)*x109))+(((-0.08264838)*x213))+(((1.569)*gclwh11_13*x69))+(((0.08264838)*x140))+(((3.138)*gclwh7_13*x73))+(((0.0140560787025)*x173))+(((-1.569)*gclwh7_13*x95))+(((-0.08264838)*x120))+(((-3.138)*gclwh9_13*x98)));
op[34]=((((-0.0655)*gclwh7_0*x95))+(((-0.00058678977375)*x198))+(((0.131)*gclwh7_0*x73))+(((-1.0)*x460))+(((0.00058678977375)*x139))+x288+(((0.0655)*gclwh11_0*x69))+(((-0.131)*gclwh11_0*x77))+(((0.0655)*gclwh9_0*x113))+(((-0.131)*gclwh9_0*x98))+(((0.00058678977375)*x200))+(((-0.01239915)*x165))+(((-0.01239915)*x152))+(((0.01239915)*x181)));
op[35]=((-0.01429865)+(((-1.0)*x486))+x485);
op[36]=((1.31196768)+(((-1.0)*x488))+x482);
op[37]=((((-1.6345)*gclwh3_2*x95))+(((-1.0)*gclwh12_2*x160))+(((3.269)*gclwh12_2*x73))+(((0.30941085)*x206))+(((-1.0)*x481))+(((-1.0)*gclwh4_2*x162))+(((-3.269)*gclwh14_2*x98))+(((-1.6345)*gclwh1_2*x113))+(((0.01464286847625)*x94))+(((3.269)*gclwh1_2*x98))+x469+(((-1.6345)*gclwh12_2*x95))+(((3.269)*gclwh3_2*x73))+(((-0.30941085)*x80))+((gclwh1_2*x125))+((gclwh3_2*x160))+(((-1.0)*gclwh8_2*x143))+(((-1.6345)*gclwh4_2*x69))+(((1.6345)*pp*x94))+(((3.269)*gclwh4_2*x77)));
IkReal x497=pz*pz;
IkReal x498=pp*pp;
IkReal x499=((0.1893)*pz);
IkReal x500=((1.7)*pz);
IkReal x501=(gclwh15_9*npx);
IkReal x502=(pp*r21);
IkReal x503=(pp*r22);
IkReal x504=((0.00702803935125)*r21);
IkReal x505=(gclwh5_9*npz);
IkReal x506=(pp*r20);
IkReal x507=(npy*pz);
IkReal x508=((4.0)*gclwh12_11);
IkReal x509=((3.60823078949063e-5)*r22);
IkReal x510=(gclwh14_3*rxp0_2);
IkReal x511=((0.000977833645875)*r20);
IkReal x512=(npz*pz);
IkReal x513=((0.000977833645875)*r21);
IkReal x514=(gclwh10_2*rxp2_2);
IkReal x515=((0.00076243651125)*rxp1_2);
IkReal x516=((0.00600991575645741)*r20);
IkReal x517=((0.154705425)*rxp1_2);
IkReal x518=((0.4366)*gclwh5_15);
IkReal x519=(gclwh6_11*rxp1_2);
IkReal x520=(gclwh7_0*rxp1_2);
IkReal x521=((0.154705425)*rxp2_2);
IkReal x522=((2.0)*gclwh11_10);
IkReal x523=((0.2970117)*rxp1_2);
IkReal x524=((0.017917245)*r21);
IkReal x525=(gclwh14_2*pz);
IkReal x526=(gclwh12_8*r21);
IkReal x527=(gclwh14_2*rxp0_2);
IkReal x528=((2.0)*gclwh4_11);
IkReal x529=((0.007321434238125)*r20);
IkReal x530=(npx*pz);
IkReal x531=((0.4366)*gclwh15_15);
IkReal x532=(gclwh10_11*rxp2_2);
IkReal x533=(gclwh5_9*rxp2_2);
IkReal x534=((0.020662095)*rxp1_2);
IkReal x535=((0.007321434238125)*r21);
IkReal x536=(gclwh0_0*r20);
IkReal x537=((0.0089586225)*r21);
IkReal x538=(gclwh13_0*pz);
IkReal x539=((1.6345)*pz);
IkReal x540=((0.007321434238125)*r22);
IkReal x541=((1.0)*pz);
IkReal x542=(gclwh14_14*rxp0_2);
IkReal x543=(gclwh4_14*r22);
IkReal x544=((0.1893)*rxp0_2);
IkReal x545=((0.00058678977375)*r22);
IkReal x546=(gclwh12_8*rxp1_2);
IkReal x547=((2.0)*gclwh9_10);
IkReal x548=((0.1893)*rxp2_2);
IkReal x549=((2.0)*gclwh15_10);
IkReal x550=((4.0)*gclwh14_11);
IkReal x551=(gclwh5_15*rxp2_2);
IkReal x552=((0.020662095)*rxp0_2);
IkReal x553=((2.0)*gclwh13_10);
IkReal x554=((0.3786)*rxp1_2);
IkReal x555=(gclwh9_0*r20);
IkReal x556=(gclwh13_9*r21);
IkReal x557=(gclwh15_1*r20);
IkReal x558=((0.000977833645875)*r22);
IkReal x559=((0.006199575)*rxp0_2);
IkReal x560=(gclwh6_2*rxp1_2);
IkReal x561=((0.0089586225)*r20);
IkReal x562=((2.0)*gclwh10_11);
IkReal x563=((2.0)*pp);
IkReal x564=((0.00058678977375)*r21);
IkReal x565=(gclwh1_3*r20);
IkReal x566=(gclwh14_14*r20);
IkReal x567=(gclwh9_0*rxp0_2);
IkReal x568=(gclwh4_3*rxp2_2);
IkReal x569=(gclwh5_0*r22);
IkReal x570=((0.03583449)*r20);
IkReal x571=((0.00058678977375)*r20);
IkReal x572=((0.2183)*gclwh13_15);
IkReal x573=((2.0)*gclwh7_10);
IkReal x574=(gclwh2_1*r21);
IkReal x575=((4.0)*gclwh15_10);
IkReal x576=((0.0089586225)*pz);
IkReal x577=((0.2183)*gclwh12_14);
IkReal x578=((0.2183)*gclwh14_14);
IkReal x579=(gclwh11_0*rxp2_2);
IkReal x580=(gclwh8_2*rxp0_2);
IkReal x581=((0.3786)*rxp2_2);
IkReal x582=(gclwh12_2*rxp1_2);
IkReal x583=(gclwh5_0*rxp2_2);
IkReal x584=((3.60823078949063e-5)*r21);
IkReal x585=(gclwh15_9*r20);
IkReal x586=((0.3786)*rxp0_2);
IkReal x587=((0.006199575)*rxp1_2);
IkReal x588=(gclwh14_8*npx);
IkReal x589=(gclwh13_15*r21);
IkReal x590=((0.017917245)*r20);
IkReal x591=(gclwh5_15*r22);
IkReal x592=((0.000293394886875)*r21);
IkReal x593=(gclwh13_0*rxp1_2);
IkReal x594=(gclwh7_10*rxp1_2);
IkReal x595=((0.000293394886875)*r22);
IkReal x596=(gclwh5_1*rxp2_2);
IkReal x597=((0.154705425)*rxp0_2);
IkReal x598=((0.4366)*gclwh13_15);
IkReal x599=((0.0089586225)*r22);
IkReal x600=((0.2970117)*rxp2_2);
IkReal x601=(gclwh5_9*r22);
IkReal x602=((0.7572)*rxp0_2);
IkReal x603=((4.0)*gclwh4_11);
IkReal x604=(gclwh15_1*rxp0_2);
IkReal x605=((0.000293394886875)*r20);
IkReal x606=((2.0)*gclwh6_11);
IkReal x607=((0.4366)*gclwh12_14);
IkReal x608=((0.017917245)*r22);
IkReal x609=(gclwh15_0*r20);
IkReal x610=(gclwh15_15*r20);
IkReal x611=((2.0)*gclwh12_11);
IkReal x612=(gclwh14_8*rxp0_2);
IkReal x613=((0.0655)*pz);
IkReal x614=((0.006199575)*rxp2_2);
IkReal x615=((0.04132419)*rxp1_2);
IkReal x616=((0.4366)*gclwh4_14);
IkReal x617=(gclwh15_0*rxp0_2);
IkReal x618=(gclwh14_8*r20);
IkReal x619=((0.03583449)*r22);
IkReal x620=((2.0)*gclwh8_11);
IkReal x621=((4.0)*gclwh13_10);
IkReal x622=(gclwh15_9*rxp0_2);
IkReal x623=((3.60823078949063e-5)*r20);
IkReal x624=((0.00702803935125)*r22);
IkReal x625=((0.2183)*gclwh5_15);
IkReal x626=(gclwh5_1*r22);
IkReal x627=((4.0)*gclwh5_10);
IkReal x628=(gclwh13_9*rxp1_2);
IkReal x629=((2.0)*gclwh5_10);
IkReal x630=((0.4366)*gclwh14_14);
IkReal x631=((0.020662095)*rxp2_2);
IkReal x632=(gclwh4_8*r22);
IkReal x633=(gclwh4_2*rxp2_2);
IkReal x634=((0.00600991575645741)*r21);
IkReal x635=((0.2183)*gclwh15_15);
IkReal x636=((0.2183)*gclwh4_14);
IkReal x637=((0.00702803935125)*r20);
IkReal x638=(gclwh12_14*r21);
IkReal x639=(gclwh4_8*rxp2_2);
IkReal x640=((0.2970117)*rxp0_2);
IkReal x641=(gclwh8_2*pz);
IkReal x642=(gclwh13_1*rxp1_2);
IkReal x643=((0.1893)*pp);
IkReal x644=(gclwh12_3*rxp1_2);
IkReal x645=((0.01464286847625)*r21);
IkReal x646=((0.1893)*rxp1_2);
IkReal x647=(gclwh4_3*r22);
IkReal x648=((2.0)*gclwh14_11);
IkReal x649=((0.03583449)*r21);
IkReal x650=((0.00195566729175)*x589);
IkReal x651=((0.00195566729175)*x591);
IkReal x652=((0.00195566729175)*x610);
IkReal x653=(gclwh15_10*x590);
IkReal x654=(gclwh7_10*x554);
IkReal x655=(gclwh5_10*x608);
IkReal x656=(gclwh9_10*x586);
IkReal x657=(gclwh13_10*x524);
IkReal x658=(gclwh11_10*x581);
IkReal x659=(gclwh12_14*x534);
IkReal x660=(gclwh6_5*x513);
IkReal x661=(gclwh4_14*x631);
IkReal x662=(gclwh8_5*x511);
IkReal x663=((0.020662095)*x542);
IkReal x664=(gclwh10_5*x558);
IkReal x665=((0.017917245)*x546);
IkReal x666=(gclwh8_11*x561);
IkReal x667=(gclwh14_11*x544);
IkReal x668=((0.017917245)*x639);
IkReal x669=(gclwh10_11*x599);
IkReal x670=(gclwh6_11*x537);
IkReal x671=(gclwh12_11*x646);
IkReal x672=(gclwh4_11*x548);
IkReal x673=((0.017917245)*x612);
IkReal x674=((0.017917245)*x533);
IkReal x675=(gclwh13_10*x646);
IkReal x676=(gclwh7_10*x537);
IkReal x677=(gclwh5_10*x548);
IkReal x678=((0.017917245)*x628);
IkReal x679=((0.017917245)*x622);
IkReal x680=(gclwh11_10*x599);
IkReal x681=(gclwh15_10*x544);
IkReal x682=(gclwh9_10*x561);
IkReal x683=(gclwh13_15*x534);
IkReal x684=((0.020662095)*x551);
IkReal x685=(gclwh7_7*x513);
IkReal x686=(gclwh9_7*x511);
IkReal x687=(gclwh15_15*x552);
IkReal x688=(gclwh11_7*x558);
IkReal x689=(gclwh12_11*x524);
IkReal x690=((0.3786)*x532);
IkReal x691=(gclwh4_11*x608);
IkReal x692=(gclwh8_11*x586);
IkReal x693=((0.00195566729175)*x543);
IkReal x694=((0.00195566729175)*x638);
IkReal x695=((0.00195566729175)*x566);
IkReal x696=((0.000977833645875)*x543);
IkReal x697=(gclwh10_5*x631);
IkReal x698=(gclwh12_14*x513);
IkReal x699=(gclwh8_5*x552);
IkReal x700=(gclwh6_5*x534);
IkReal x701=(gclwh14_14*x511);
IkReal x702=((0.000847933619625)*x526);
IkReal x703=((0.1893)*x519);
IkReal x704=(gclwh14_11*x561);
IkReal x705=((0.000847933619625)*x632);
IkReal x706=(gclwh8_11*x544);
IkReal x707=(gclwh12_11*x537);
IkReal x708=((0.1893)*x532);
IkReal x709=(gclwh4_11*x599);
IkReal x710=((0.000847933619625)*x618);
IkReal x711=((0.1893)*x594);
IkReal x712=(gclwh15_10*x561);
IkReal x713=((0.000847933619625)*x585);
IkReal x714=((0.000847933619625)*x601);
IkReal x715=(gclwh9_10*x544);
IkReal x716=(gclwh13_10*x537);
IkReal x717=((0.000847933619625)*x556);
IkReal x718=(gclwh11_10*x548);
IkReal x719=(gclwh5_10*x599);
IkReal x720=(gclwh15_15*x511);
IkReal x721=(gclwh7_7*x534);
IkReal x722=(gclwh5_15*x558);
IkReal x723=(gclwh9_7*x552);
IkReal x724=(gclwh11_7*x631);
IkReal x725=(gclwh13_15*x513);
IkReal x726=((2.0)*x497);
IkReal x727=(r21*x498);
IkReal x728=((1.0)*x498);
IkReal x729=(x502*x572);
IkReal x730=(x530*x531);
IkReal x731=(x503*x625);
IkReal x732=(x507*x598);
IkReal x733=(x506*x635);
IkReal x734=(x512*x518);
IkReal x735=(x506*x549);
IkReal x736=(x512*x627);
IkReal x737=(x507*x621);
IkReal x738=(x502*x553);
IkReal x739=(x530*x575);
IkReal x740=(x503*x629);
IkReal x741=((0.2183)*gclwh10_5*x512);
IkReal x742=((0.2183)*gclwh8_5*x530);
IkReal x743=((0.10915)*gclwh6_5*x502);
IkReal x744=((0.2183)*gclwh6_5*x507);
IkReal x745=((0.10915)*gclwh8_5*x506);
IkReal x746=((0.10915)*gclwh10_5*x503);
IkReal x747=(x643*x644);
IkReal x748=(x507*x606);
IkReal x749=(x561*x641);
IkReal x750=(gclwh10_2*pz*x503);
IkReal x751=(x499*x527);
IkReal x752=(x506*x641);
IkReal x753=(gclwh4_3*pp*x548);
IkReal x754=(gclwh10_2*r22*x576);
IkReal x755=(x499*x582);
IkReal x756=(x512*x562);
IkReal x757=(x499*x633);
IkReal x758=(x510*x643);
IkReal x759=(x530*x620);
IkReal x760=(gclwh6_2*pz*x537);
IkReal x761=(x642*x643);
IkReal x762=(x512*x522);
IkReal x763=(x530*x547);
IkReal x764=(gclwh11_0*r22*x576);
IkReal x765=(x555*x576);
IkReal x766=(gclwh5_1*pp*x548);
IkReal x767=(x499*x617);
IkReal x768=(gclwh11_0*pz*x503);
IkReal x769=(gclwh9_0*pz*x506);
IkReal x770=(gclwh15_1*pp*x544);
IkReal x771=(gclwh7_0*pz*x537);
IkReal x772=(x499*x593);
IkReal x773=(x499*x583);
IkReal x774=(x507*x573);
IkReal x775=((0.10915)*gclwh7_7*x502);
IkReal x776=((0.2183)*gclwh9_7*x530);
IkReal x777=((0.2183)*gclwh11_7*x512);
IkReal x778=((0.10915)*gclwh9_7*x506);
IkReal x779=((0.2183)*gclwh7_7*x507);
IkReal x780=((0.10915)*gclwh11_7*x503);
IkReal x781=(x503*x528);
IkReal x782=(x502*x611);
IkReal x783=(x530*x550);
IkReal x784=(x502*x577);
IkReal x785=(x530*x630);
IkReal x786=(x503*x636);
IkReal x787=(x506*x578);
IkReal x788=(x507*x607);
IkReal x789=(x512*x616);
IkReal x790=((0.10915)*gclwh12_14*x502);
IkReal x791=(x530*x578);
IkReal x792=((0.10915)*gclwh4_14*x503);
IkReal x793=((0.10915)*gclwh14_14*x506);
IkReal x794=(x512*x636);
IkReal x795=(x507*x577);
IkReal x796=((0.09465)*gclwh4_8*x503);
IkReal x797=(x506*x525);
IkReal x798=(gclwh12_3*x727);
IkReal x799=(x512*x528);
IkReal x800=(x499*x560);
IkReal x801=(gclwh3_3*x727);
IkReal x802=(x498*x565);
IkReal x803=(gclwh3_2*pz*x537);
IkReal x804=(x499*x588);
IkReal x805=(x525*x561);
IkReal x806=((0.09465)*gclwh12_8*x502);
IkReal x807=(x498*x647);
IkReal x808=(gclwh1_2*pz*x561);
IkReal x809=(x507*x611);
IkReal x810=(x499*x580);
IkReal x811=(gclwh4_2*r22*x576);
IkReal x812=(gclwh4_8*npz*x499);
IkReal x813=(gclwh12_2*pz*x537);
IkReal x814=(x499*x514);
IkReal x815=(x530*x648);
IkReal x816=((0.09465)*gclwh14_8*x506);
IkReal x817=(gclwh12_8*npy*x499);
IkReal x818=(x498*x557);
IkReal x819=(x499*x505);
IkReal x820=(gclwh5_0*pz*x503);
IkReal x821=(gclwh13_9*npy*x499);
IkReal x822=(x569*x576);
IkReal x823=(x502*x538);
IkReal x824=((0.09465)*gclwh15_9*x506);
IkReal x825=(x537*x538);
IkReal x826=(x498*x574);
IkReal x827=(x512*x629);
IkReal x828=(gclwh2_0*pz*x537);
IkReal x829=(x499*x567);
IkReal x830=(x507*x553);
IkReal x831=(x499*x579);
IkReal x832=(gclwh0_1*r20*x498);
IkReal x833=(x536*x576);
IkReal x834=((0.09465)*gclwh5_9*x503);
IkReal x835=(x499*x520);
IkReal x836=((0.09465)*gclwh13_9*x502);
IkReal x837=(gclwh15_0*pz*x561);
IkReal x838=(x499*x501);
IkReal x839=(x530*x549);
IkReal x840=((0.10915)*gclwh15_15*x506);
IkReal x841=(x512*x625);
IkReal x842=(x507*x572);
IkReal x843=((0.10915)*gclwh13_15*x502);
IkReal x844=((0.10915)*gclwh5_15*x503);
IkReal x845=(x530*x635);
IkReal x846=(gclwh6_2*npy*x726);
IkReal x847=(gclwh6_2*x502*x541);
IkReal x848=(gclwh10_2*npz*x726);
IkReal x849=(gclwh8_2*npx*x726);
IkReal x850=(gclwh7_0*npy*x726);
IkReal x851=(gclwh9_0*npx*x726);
IkReal x852=(gclwh11_0*npz*x726);
IkReal x853=(gclwh7_0*x502*x541);
IkReal x854=(gclwh12_2*npy*x726);
IkReal x855=(gclwh3_2*npy*x726);
IkReal x856=(gclwh1_2*npx*x726);
IkReal x857=(gclwh14_3*x530*x563);
IkReal x858=(gclwh4_2*npz*x726);
IkReal x859=(gclwh4_3*x512*x563);
IkReal x860=(gclwh12_2*x502*x541);
IkReal x861=(gclwh1_2*x506*x541);
IkReal x862=(gclwh3_3*x507*x563);
IkReal x863=(gclwh4_2*x503*x541);
IkReal x864=(gclwh1_3*x530*x563);
IkReal x865=(gclwh3_2*x502*x541);
IkReal x866=(gclwh12_3*x507*x563);
IkReal x867=(gclwh14_2*npx*x726);
IkReal x868=(gclwh14_3*r20*x728);
IkReal x869=(gclwh0_0*npx*x726);
IkReal x870=(gclwh2_0*npy*x726);
IkReal x871=(gclwh5_1*x512*x563);
IkReal x872=(gclwh13_1*x507*x563);
IkReal x873=(gclwh15_0*npx*x726);
IkReal x874=(gclwh2_1*x507*x563);
IkReal x875=(gclwh0_1*x530*x563);
IkReal x876=(gclwh5_0*npz*x726);
IkReal x877=(gclwh13_0*npy*x726);
IkReal x878=(gclwh0_0*x506*x541);
IkReal x879=(gclwh15_0*x506*x541);
IkReal x880=(gclwh2_0*x502*x541);
IkReal x881=((1.0)*gclwh13_1*x727);
IkReal x882=(x626*x728);
IkReal x883=(gclwh15_1*x530*x563);
IkReal x884=(x659+x661);
IkReal x885=(x697+x699);
IkReal x886=(x683+x684);
IkReal x887=(x723+x724);
IkReal x888=(x682+x681+x680+x774);
IkReal x889=(x669+x667+x666+x748);
IkReal x890=(x703+x704+x799+x809);
IkReal x891=(x711+x712+x827+x830);
IkReal x892=(x652+x734+x733+x732);
IkReal x893=(x660+x742+x743+x741);
IkReal x894=(x701+x793+x795+x794);
IkReal x895=(x695+x787+x788+x789);
IkReal x896=(x685+x777+x776+x775);
IkReal x897=(x720+x841+x840+x842);
IkReal x898=(x719+x718+x715+x716+x839);
IkReal x899=(x708+x709+x706+x707+x815);
IkReal x900=(x676+x677+x675+x762+x763);
IkReal x901=(x672+x670+x671+x756+x759);
IkReal x902=(((x512*x603))+(((0.3786)*x519))+((x506*x648))+((x507*x508))+((gclwh14_11*x590)));
IkReal x903=(x694+x693+x786+x784+x785);
IkReal x904=(x653+x654+x737+x736+x735);
IkReal x905=(x696+x698+x791+x790+x792);
IkReal x906=(x722+x725+x843+x845+x844);
IkReal x907=(x662+x664+x746+x744+x745);
IkReal x908=(x650+x651+x731+x730+x729);
IkReal x909=(x688+x686+x779+x778+x780);
IkReal x910=(x655+x656+x657+x658+x739+x738+x740);
IkReal x911=(x689+x690+x691+x692+x782+x783+x781);
IkReal x912=(x679+x773+x772+x771+x770+x852+x853+x851);
IkReal x913=(x673+x755+x757+x758+x760+x847+x849+x848);
IkReal x914=(x678+x674+x768+x769+x764+x765+x766+x767+x761+x850);
IkReal x915=(x668+x665+x754+x751+x750+x753+x752+x747+x749+x846);
IkReal x916=(x714+x717+x878+x879+x874+x875+x876+x877+x881+x880+x883+x882+x834+x835+x836+x837+x838);
IkReal x917=(x499+x702+x705+x797+x796+x798+x856+x857+x854+x855+x858+x808+x805+x804+x807+x806+x801+x800+x803+x802);
IkReal x918=(x710+x859+x868+x867+x866+x865+x864+x863+x862+x861+x860+x816+x817+x814+x812+x813+x810+x811);
IkReal x919=(x499+x713+x869+x870+x871+x872+x873+x818+x819+x829+x828+x823+x822+x821+x820+x826+x825+x824+x831+x832+x833);
op[38]=((((0.8732)*gclwh4_14*x512))+(((-0.0039113345835)*x638))+((x506*x630))+(((-1.0)*gclwh8_12*x640))+(((0.0039113345835)*x566))+(((0.8732)*gclwh12_14*x507))+(((-1.0)*x502*x607))+(((-1.0)*gclwh10_12*x600))+(((-0.0039113345835)*x543))+(((-0.8732)*gclwh14_14*x530))+((gclwh6_12*x523))+(((-1.0)*x503*x616)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x530))+((gclwh8_11*x602))+((x503*x603))+(((-8.0)*gclwh4_11*x512))+(((-1.0)*x506*x550))+(((0.7572)*x532))+(((-0.7572)*x519))+((x502*x508))+((gclwh12_11*x649))+(((-8.0)*gclwh12_11*x507))+(((-1.0)*gclwh14_11*x570))+((gclwh4_11*x619)));
op[40]=((0.02168232)+(((-1.0)*x902))+x911);
op[41]=(((gclwh3_2*x564))+(((-0.131)*npx*x525))+(((-1.0)*gclwh12_2*x564))+((gclwh1_2*x571))+((gclwh14_2*x571))+(((-0.0655)*gclwh1_2*x506))+(((-0.01239915)*x580))+(((-1.0)*x895))+(((0.131)*gclwh4_2*x512))+(((0.0655)*gclwh14_2*x506))+(((-0.0655)*gclwh12_2*x502))+(((0.131)*gclwh12_2*x507))+(((0.131)*gclwh1_2*x530))+(((-0.0655)*gclwh4_2*x503))+x903+(((-0.0655)*gclwh3_2*x502))+(((-0.01239915)*x514))+(((0.131)*gclwh3_2*x507))+(((0.01239915)*x560))+(((-1.0)*gclwh4_2*x545)));
op[42]=((((3.269)*gclwh15_0*x530))+(((-3.269)*gclwh13_0*x507))+(((-0.30941085)*x520))+(((-1.6345)*gclwh15_0*x506))+(((3.269)*gclwh0_0*x530))+(((0.30941085)*x567))+(((1.6345)*gclwh13_0*x502))+(((-1.0)*x908))+(((-1.6345)*gclwh0_0*x506))+(((0.30941085)*x579))+(((0.01464286847625)*x569))+((gclwh13_0*x645))+((gclwh2_0*x645))+(((-0.01464286847625)*x609))+(((0.01464286847625)*x536))+x892+(((3.269)*gclwh2_0*x507))+(((-1.6345)*gclwh2_0*x502))+(((-3.269)*gclwh5_0*x512))+(((1.6345)*gclwh5_0*x503)));
op[43]=((1.31196768)+(((-1.0)*x904))+x910);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-8.0)*gclwh13_10*x507))+(((-0.7572)*x594))+(((8.0)*gclwh15_10*x530))+((x503*x627))+((gclwh13_10*x649))+((x502*x621))+((gclwh5_10*x619))+(((-1.0)*x506*x575))+((gclwh9_10*x602))+(((-8.0)*gclwh5_10*x512))+(((-1.0)*gclwh15_10*x570)));
op[45]=(((gclwh11_13*x600))+((gclwh9_13*x640))+((x503*x518))+(((0.8732)*gclwh15_15*x530))+(((-1.0)*gclwh7_13*x523))+((x502*x598))+(((0.0039113345835)*x591))+(((-0.8732)*gclwh13_15*x507))+(((-1.0)*x506*x531))+(((-0.0039113345835)*x610))+(((0.0039113345835)*x589))+(((-0.8732)*gclwh5_15*x512)));
op[46]=((((0.131)*gclwh2_0*x507))+(((0.131)*gclwh15_0*x530))+(((-1.0)*gclwh15_0*x571))+(((-0.0655)*gclwh15_0*x506))+(((-0.0655)*gclwh0_0*x506))+(((-0.131)*gclwh5_0*x512))+(((0.131)*gclwh0_0*x530))+(((0.00058678977375)*x536))+(((-0.131)*gclwh13_0*x507))+(((-0.01239915)*x520))+((gclwh5_0*x545))+(((-1.0)*x892))+(((0.01239915)*x579))+((gclwh13_0*x564))+((gclwh2_0*x564))+(((-0.0655)*gclwh2_0*x502))+(((0.0655)*gclwh13_0*x502))+x908+(((0.0655)*gclwh5_0*x503))+(((0.01239915)*x567)));
op[47]=((0.02168232)+(((-1.0)*x910))+x904);
op[48]=((((-1.0)*gclwh4_8*x521))+(((-1.0)*gclwh12_8*x517))+((gclwh10_12*x540))+((gclwh8_12*x529))+(((-1.6345)*gclwh10_12*x512))+(((-1.0)*x907))+(((0.81725)*gclwh8_12*x506))+(((-1.0)*x884))+((gclwh14_8*x597))+(((0.81725)*gclwh10_12*x503))+x663+(((-1.6345)*gclwh8_12*x530))+(((1.6345)*gclwh6_12*x507))+(((-1.0)*gclwh6_12*x535))+x893+(((-0.81725)*gclwh6_12*x502)));
op[49]=((((0.12699240901125)*x510))+(((-1.0)*gclwh10_11*x503))+(((-1.0)*x913))+(((-0.12699240901125)*x568))+(((-1.0)*x889))+(((-0.12699240901125)*x644))+((gclwh6_11*x502))+x915+x901+(((-1.0)*gclwh8_11*x506)));
op[50]=((0.17125635)+(((4.0)*gclwh10_11*x512))+((gclwh12_11*x554))+((gclwh6_11*x524))+((x502*x606))+(((4.0)*gclwh8_11*x530))+(((-4.0)*gclwh6_11*x507))+(((-1.0)*gclwh8_11*x590))+(((-1.0)*x506*x620))+(((-1.0)*gclwh14_11*x586))+(((-1.0)*x503*x562))+(((-1.0)*gclwh10_11*x608))+((gclwh4_11*x581)));
op[51]=((((0.14850585)*x582))+(((-0.160905)*x612))+(((-1.0)*gclwh8_2*x637))+(((0.160905)*x639))+(((-0.14850585)*x527))+((gclwh6_2*x504))+(((0.7845)*gclwh6_2*x502))+(((-1.0)*gclwh10_2*x624))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x546))+(((-0.7845)*gclwh8_2*x506))+((gclwh12_14*x615))+(((0.14850585)*x633))+(((1.569)*gclwh10_2*x512))+(((1.569)*gclwh8_2*x530))+(((-1.569)*gclwh6_2*x507))+(((-0.04132419)*x542))+(((-0.7845)*gclwh10_2*x503)));
op[52]=((((-0.0655)*gclwh10_12*x512))+(((-0.0655)*gclwh8_12*x530))+(((0.0655)*gclwh6_12*x507))+(((-0.03275)*gclwh6_12*x502))+(((-1.0)*x907))+((gclwh4_8*x614))+(((0.03275)*gclwh8_12*x506))+((gclwh10_12*x595))+(((-1.0)*gclwh6_12*x592))+(((-1.0)*x663))+(((0.006199575)*x546))+(((0.03275)*gclwh10_12*x503))+(((-1.0)*gclwh14_8*x559))+x884+x893+((gclwh8_12*x605)));
op[53]=(((gclwh8_11*x506))+(((-1.0)*gclwh6_11*x502))+(((-1.0)*x901))+(((-1.0)*x913))+((gclwh10_11*x503))+(((-0.00076243651125)*x568))+x889+x915+(((0.00076243651125)*x510))+(((-1.0)*gclwh12_3*x515)));
op[54]=(((gclwh11_10*x503))+((gclwh9_10*x506))+(((-1.0)*x900))+(((-1.0)*x912))+(((-0.12699240901125)*x596))+(((-1.0)*gclwh7_10*x502))+(((-0.12699240901125)*x642))+(((0.12699240901125)*x604))+x888+x914);
op[55]=((((-1.0)*gclwh13_9*x517))+(((-1.6345)*gclwh9_13*x530))+(((0.81725)*gclwh11_13*x503))+(((0.81725)*gclwh9_13*x506))+(((-1.0)*x909))+(((-1.0)*gclwh5_9*x521))+(((-1.0)*gclwh7_13*x535))+(((-1.6345)*gclwh11_13*x512))+(((-1.0)*x886))+(((-0.81725)*gclwh7_13*x502))+(((1.6345)*gclwh7_13*x507))+x687+((gclwh11_13*x540))+((gclwh15_9*x597))+x896+((gclwh9_13*x529)));
op[56]=((((-1.0)*gclwh13_15*x615))+(((-0.7845)*gclwh11_0*x503))+(((0.14850585)*x583))+(((-0.04132419)*x551))+(((-0.00702803935125)*x555))+(((-1.569)*gclwh7_0*x507))+(((-1.0)*gclwh11_0*x624))+((gclwh7_0*x504))+(((0.160905)*x622))+(((-0.14850585)*x617))+(((1.569)*gclwh9_0*x530))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.160905)*x628))+(((0.7845)*gclwh7_0*x502))+(((0.14850585)*x593))+(((-0.160905)*x533))+(((-0.7845)*gclwh9_0*x506))+(((1.569)*gclwh11_0*x512)));
op[57]=((0.17125635)+((gclwh5_10*x581))+((gclwh13_10*x554))+(((-1.0)*gclwh11_10*x608))+(((-1.0)*gclwh15_10*x586))+(((-1.0)*x503*x522))+((x502*x573))+(((-1.0)*x506*x547))+(((4.0)*gclwh11_10*x512))+((gclwh7_10*x524))+(((-4.0)*gclwh7_10*x507))+(((4.0)*gclwh9_10*x530))+(((-1.0)*gclwh9_10*x590)));
op[58]=((((-1.0)*gclwh11_10*x503))+((gclwh7_10*x502))+(((-1.0)*x912))+(((-1.0)*x888))+(((-1.0)*gclwh13_1*x515))+(((-1.0)*gclwh9_10*x506))+(((0.00076243651125)*x604))+x914+x900+(((-0.00076243651125)*x596)));
op[59]=((((-0.0655)*gclwh9_13*x530))+(((0.03275)*gclwh9_13*x506))+(((-1.0)*x687))+(((-0.03275)*gclwh7_13*x502))+(((-1.0)*x909))+(((-0.0655)*gclwh11_13*x512))+(((-1.0)*gclwh15_9*x559))+(((0.0655)*gclwh7_13*x507))+(((0.006199575)*x533))+(((-1.0)*gclwh7_13*x592))+x886+x896+((gclwh9_13*x605))+((gclwh13_9*x587))+((gclwh11_13*x595))+(((0.03275)*gclwh11_13*x503)));
op[60]=((((-1.0)*gclwh4_8*x540))+(((1.6345)*gclwh12_8*x507))+(((-1.0)*x905))+((gclwh6_12*x517))+(((-0.81725)*gclwh4_8*x503))+(((-0.007321434238125)*x526))+(((-1.0)*gclwh8_12*x597))+(((-1.0)*x700))+(((-0.81725)*gclwh12_8*x502))+((gclwh14_8*x529))+(((0.81725)*gclwh14_8*x506))+(((1.6345)*gclwh4_8*x512))+x885+x894+(((-1.0)*gclwh10_12*x521))+(((-1.6345)*gclwh14_8*x530)));
op[61]=((0.679811285)+((gclwh3_3*x634))+(((-0.66189404)*gclwh12_3*x502))+(((-1.0)*gclwh14_11*x506))+(((-0.00600991575645741)*x647))+(((1.341705325)*gclwh12_3*x507))+(((-1.0)*x890))+(((-1.0)*x918))+((gclwh14_3*x516))+(((0.66189404)*gclwh14_3*x506))+(((-0.66189404)*gclwh4_3*x503))+(((1.341705325)*gclwh3_3*x507))+((gclwh12_11*x502))+(((1.341705325)*gclwh1_3*x530))+x899+(((-0.679811285)*gclwh3_3*x502))+(((-1.0)*gclwh12_3*x634))+(((1.341705325)*gclwh4_3*x512))+(((-0.679811285)*gclwh1_3*x506))+(((-1.341705325)*gclwh14_3*x530))+x917+((gclwh4_11*x503))+((gclwh1_3*x516)));
op[62]=((0.07735732)+(((-1.0)*x902))+x911);
op[63]=((((-0.14850585)*x560))+(((-1.569)*gclwh12_2*x507))+(((-1.569)*gclwh1_2*x530))+(((-0.85)*gclwh14_8*x506))+(((0.7845)*gclwh12_2*x502))+(((0.14850585)*x580))+(((0.85)*gclwh4_8*x503))+(((-1.569)*gclwh4_2*x512))+(((-1.0)*gclwh12_8*npy*x500))+(((-1.0)*gclwh4_8*npz*x500))+(((-1.0)*gclwh1_2*x637))+(((0.14850585)*x514))+(((-1.0)*x895))+(((0.7845)*gclwh3_2*x502))+(((-0.7845)*gclwh14_2*x506))+((gclwh12_2*x504))+(((0.85)*gclwh12_8*x502))+(((1.569)*npx*x525))+(((0.007614829125)*x526))+(((0.7845)*gclwh1_2*x506))+((x500*x588))+(((-0.007614829125)*x618))+(((0.7845)*gclwh4_2*x503))+x903+(((0.007614829125)*x632))+(((-1.0)*gclwh14_2*x637))+(((-1.0)*gclwh3_2*x504))+((gclwh4_2*x624))+(((-1.569)*gclwh3_2*x507)));
op[64]=((((-1.0)*gclwh14_8*x605))+(((-0.0655)*gclwh4_8*x512))+(((0.0655)*gclwh14_8*x530))+(((0.000293394886875)*x526))+(((-1.0)*x894))+(((0.03275)*gclwh12_8*x502))+((gclwh4_8*x595))+(((-0.0655)*gclwh12_8*x507))+(((-1.0)*gclwh8_12*x559))+(((-1.0)*x700))+((gclwh6_12*x587))+x885+(((-0.03275)*gclwh14_8*x506))+(((-1.0)*gclwh10_12*x614))+x905+(((0.03275)*gclwh4_8*x503)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x507))+(((3.60823078949063e-5)*x565))+(((-1.0)*gclwh12_11*x502))+(((0.00493096)*gclwh12_3*x502))+((gclwh14_11*x506))+(((-1.0)*x899))+((gclwh3_3*x584))+(((-1.0)*x918))+(((-1.0)*gclwh12_3*x584))+(((-1.0)*gclwh4_11*x503))+(((-0.008055325)*gclwh14_3*x530))+(((0.008055325)*gclwh12_3*x507))+(((0.008055325)*gclwh1_3*x530))+(((-0.00493096)*gclwh14_3*x506))+(((0.00493096)*gclwh4_3*x503))+(((-1.0)*gclwh4_3*x509))+x890+(((0.008055325)*gclwh4_3*x512))+(((-0.012986285)*gclwh3_3*x502))+x917+((gclwh14_3*x623))+(((-0.012986285)*gclwh1_3*x506)));
op[66]=((-0.679811285)+((gclwh0_1*x516))+((gclwh13_1*x634))+(((1.341705325)*gclwh15_1*x530))+(((-1.0)*gclwh15_1*x516))+(((1.341705325)*gclwh0_1*x530))+(((-1.0)*x891))+(((-1.0)*gclwh15_10*x506))+(((-1.0)*x916))+(((-0.679811285)*gclwh0_1*x506))+(((0.00600991575645741)*x574))+(((-0.66189404)*gclwh15_1*x506))+(((-1.341705325)*gclwh13_1*x507))+((gclwh5_10*x503))+(((-0.679811285)*gclwh2_1*x502))+(((0.66189404)*gclwh13_1*x502))+(((-1.341705325)*gclwh5_1*x512))+x898+((gclwh13_10*x502))+x919+(((0.66189404)*gclwh5_1*x503))+(((0.00600991575645741)*x626))+(((1.341705325)*gclwh2_1*x507)));
op[67]=((((0.81725)*gclwh13_9*x502))+((gclwh9_13*x597))+(((-1.0)*x897))+(((-1.0)*x887))+((gclwh13_9*x535))+(((-1.0)*x505*x539))+(((0.81725)*gclwh5_9*x503))+(((-1.0)*gclwh15_9*x529))+((gclwh11_13*x521))+((x501*x539))+x721+(((-0.81725)*gclwh15_9*x506))+((gclwh5_9*x540))+x906+(((-1.6345)*gclwh13_9*x507))+(((-1.0)*gclwh7_13*x517)));
op[68]=((((-1.0)*gclwh13_0*x504))+(((0.85)*gclwh13_9*x502))+(((-0.14850585)*x567))+(((-0.85)*gclwh15_9*x506))+((x500*x501))+(((-1.569)*gclwh0_0*x530))+(((-1.569)*gclwh2_0*x507))+(((0.7845)*gclwh2_0*x502))+(((-1.0)*x892))+(((-0.7845)*gclwh5_0*x503))+(((1.569)*gclwh5_0*x512))+(((-1.0)*gclwh13_9*npy*x500))+(((0.007614829125)*x601))+(((0.00702803935125)*x609))+(((-0.00702803935125)*x569))+(((-0.14850585)*x579))+(((0.85)*gclwh5_9*x503))+(((0.14850585)*x520))+(((0.007614829125)*x556))+(((-1.569)*gclwh15_0*x530))+(((-0.7845)*gclwh13_0*x502))+(((0.7845)*gclwh15_0*x506))+(((-0.007614829125)*x585))+(((-1.0)*gclwh2_0*x504))+(((1.569)*gclwh13_0*x507))+(((0.7845)*gclwh0_0*x506))+x908+(((-1.0)*x500*x505))+(((-0.00702803935125)*x536)));
op[69]=((0.07735732)+(((-1.0)*x910))+x904);
op[70]=((0.012986285)+((gclwh5_1*x509))+((gclwh0_1*x623))+((gclwh13_1*x584))+(((-1.0)*gclwh5_10*x503))+(((0.008055325)*gclwh0_1*x530))+(((-1.0)*x898))+(((-1.0)*x916))+(((-0.00493096)*gclwh13_1*x502))+(((3.60823078949063e-5)*x574))+(((0.00493096)*gclwh15_1*x506))+(((-0.012986285)*gclwh0_1*x506))+(((0.008055325)*gclwh2_1*x507))+(((0.008055325)*gclwh15_1*x530))+(((-0.008055325)*gclwh5_1*x512))+(((-3.60823078949063e-5)*x557))+(((-0.00493096)*gclwh5_1*x503))+x891+(((-1.0)*gclwh13_10*x502))+(((-0.012986285)*gclwh2_1*x502))+x919+(((-0.008055325)*gclwh13_1*x507))+((gclwh15_10*x506)));
op[71]=((((-1.0)*gclwh7_13*x587))+((gclwh9_13*x559))+(((0.0655)*gclwh13_9*x507))+((gclwh11_13*x614))+(((-1.0)*x906))+(((-1.0)*x887))+(((-0.03275)*gclwh13_9*x502))+(((0.03275)*gclwh15_9*x506))+(((-1.0)*x501*x613))+(((-1.0)*gclwh5_9*x595))+(((0.000293394886875)*x585))+((x505*x613))+x721+x897+(((-0.000293394886875)*x556))+(((-0.03275)*gclwh5_9*x503)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x920=htj1*htj1;
CheckValue<IkReal> x921=IKPowWithIntegerCheck(((1.0)+x920),-1);
if(!x921.valid){
continue;
}
cj1array[numsolutions]=((x921.value)*(((1.0)+(((-1.0)*x920)))));
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x922.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x922.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x923=htj2*htj2;
CheckValue<IkReal> x924=IKPowWithIntegerCheck(((1.0)+x923),-1);
if(!x924.valid){
continue;
}
cj2array[numsolutions]=((x924.value)*(((1.0)+(((-1.0)*x923)))));
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x925.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x925.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x926=htj3*htj3;
CheckValue<IkReal> x927=IKPowWithIntegerCheck(((1.0)+x926),-1);
if(!x927.valid){
continue;
}
cj3array[numsolutions]=((x927.value)*(((1.0)+(((-1.0)*x926)))));
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x928.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x928.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x929=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x929);
rxp1_0=(pz*r11);
rxp1_1=(r01*x929);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x930=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x930);
rxp1_0=(pz*r11);
rxp1_1=(r01*x930);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x931=IKPowWithIntegerCheck(r22,-1);
if(!x931.valid){
continue;
}
CheckValue<IkReal> x932=IKPowWithIntegerCheck(sj3,-1);
if(!x932.valid){
continue;
}
sj4array[0]=((x931.value)*(x932.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x933=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x933);
rxp1_0=(pz*r11);
rxp1_1=(r01*x933);
IkReal x934=((16.0)*sj4);
IkReal x935=(cj1*cj2);
IkReal x936=((4.0)*sj3);
IkReal x937=((8.0)*sj4);
IkReal x938=((4.0)*cj4);
IkReal x939=(sj1*sj2);
IkReal x940=((4.0)*sj4);
IkReal x941=(cj3*r02);
IkReal x942=((16.0)*sj3);
IkReal x943=((8.0)*sj3);
IkReal x944=((12.0)*cj4);
IkReal x945=((12.0)*sj4);
IkReal x946=(cj3*r12);
IkReal x947=(r11*x936);
IkReal x948=(r01*x936);
IkReal x949=(r01*x939);
IkReal x950=(cj3*cj4*r01);
IkReal x951=(cj3*cj4*r11);
IkReal x952=(cj3*r10*x938);
IkReal x953=(x945*x946);
IkReal x954=(cj3*r00*x938);
IkReal x955=(x941*x945);
IkReal x956=(r00*x939*x940);
IkReal x957=(r02*x939*x944);
IkReal x958=(r00*x935*x940);
IkReal x959=(r02*x935*x944);
IkReal x960=(r10*x939*x940);
IkReal x961=(r12*x935*x944);
IkReal x962=(r12*x939*x944);
IkReal x963=(r10*x935*x940);
IkReal x964=(x958+x947);
IkReal x965=(x960+x948);
IkReal x966=(x956+x952);
IkReal x967=(x959+x953);
IkReal x968=(x963+x954);
IkReal x969=(x962+x955);
j5eval[0]=((((0.5)*(IKabs((x964+x957+(((-1.0)*x967))+(((-1.0)*x966)))))))+(IKabs(((((-1.0)*r00*x943))+(((-8.0)*x950))+(((-1.0)*r11*x935*x937))+((r11*x937*x939)))))+(((0.5)*(IKabs(((((-1.0)*r02*x935*x938))+((r02*x938*x939))+x964+(((-1.0)*x966))+(((-1.0)*x940*x946)))))))+(((0.5)*(IKabs((((r01*x934*x935))+(((-16.0)*x951))+(((-1.0)*r10*x942))+(((-1.0)*x934*x949)))))))+(((0.5)*(IKabs((x961+x965+(((-1.0)*x969))+(((-1.0)*x968)))))))+(((0.5)*(IKabs((x961+x968+(((-1.0)*x965))+(((-1.0)*x969)))))))+(((0.5)*(IKabs((x966+x957+(((-1.0)*x964))+(((-1.0)*x967)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x942))+((r11*x934*x939))+(((-16.0)*x950))+(((-1.0)*r11*x934*x935)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x938*x939))+((r12*x935*x938))+x965+(((-1.0)*x968))+(((-1.0)*x940*x941)))))))+(IKabs((((r01*x935*x937))+(((-8.0)*x951))+(((-1.0)*r10*x943))+(((-1.0)*x937*x949))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x970=(r10*sj3);
IkReal x971=(r01*sj4);
IkReal x972=(cj1*cj2);
IkReal x973=(cj3*cj4);
IkReal x974=(sj1*sj2);
IkReal x975=(cj4*r02);
IkReal x976=((4.0)*r11*sj3);
IkReal x977=(cj3*r12*sj4);
IkReal x978=((4.0)*r00*sj4);
IkReal x979=((4.0)*r10*x973);
IkReal x980=((12.0)*x977);
IkReal x981=((4.0)*x977);
IkReal x982=(x972*x978);
IkReal x983=(x974*x978);
IkReal x984=((12.0)*x974*x975);
IkReal x985=((12.0)*x972*x975);
IkReal x986=((4.0)*x974*x975);
IkReal x987=((4.0)*x972*x975);
IkReal x988=(x982+x976);
IkReal x989=(x983+x979);
IkReal x990=(x987+x981);
IkReal x991=(x985+x980);
IkReal x992=((((8.0)*x971*x972))+(((-8.0)*x970))+(((-8.0)*x971*x974))+(((-8.0)*r11*x973)));
op[0]=((((-1.0)*x989))+(((-1.0)*x990))+x988+x986);
op[1]=x992;
op[2]=((((-1.0)*x989))+(((-1.0)*x991))+x988+x984);
op[3]=((((-16.0)*r11*x973))+(((-16.0)*x970))+(((16.0)*x971*x972))+(((-16.0)*x971*x974)));
op[4]=((((-1.0)*x988))+(((-1.0)*x991))+x989+x984);
op[5]=x992;
op[6]=((((-1.0)*x988))+(((-1.0)*x990))+x989+x986);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x993=(cj1*cj2);
IkReal x994=((4.0)*cj4);
IkReal x995=(sj1*sj2);
IkReal x996=((4.0)*sj4);
IkReal x997=(r00*sj3);
IkReal x998=(cj3*r02);
IkReal x999=((4.0)*r01*sj3);
IkReal x1000=((16.0)*r11*sj4);
IkReal x1001=(cj3*cj4*r01);
IkReal x1002=((12.0)*cj4*r12);
IkReal x1003=((8.0)*r11*sj4);
IkReal x1004=(cj3*r00*x994);
IkReal x1005=((12.0)*sj4*x998);
IkReal x1006=(x996*x998);
IkReal x1007=(r10*x993*x996);
IkReal x1008=(r10*x995*x996);
IkReal x1009=(x1002*x993);
IkReal x1010=(x1002*x995);
IkReal x1011=(r12*x993*x994);
IkReal x1012=(r12*x994*x995);
IkReal x1013=(x1008+x999);
IkReal x1014=(x1007+x1004);
IkReal x1015=(x1012+x1006);
IkReal x1016=(x1010+x1005);
IkReal x1017=((((-1.0)*x1003*x993))+((x1003*x995))+(((-8.0)*x1001))+(((-8.0)*x997)));
j5evalpoly[0]=(x1014+x1011+(((-1.0)*x1015))+(((-1.0)*x1013))+(((htj5*htj5)*((x1014+x1009+(((-1.0)*x1016))+(((-1.0)*x1013))))))+(((htj5*htj5*htj5*htj5)*((x1013+x1009+(((-1.0)*x1016))+(((-1.0)*x1014))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1011+x1013+(((-1.0)*x1015))+(((-1.0)*x1014))))))+((x1017*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1017))+(((htj5*htj5*htj5)*((((x1000*x995))+(((-16.0)*x1001))+(((-16.0)*x997))+(((-1.0)*x1000*x993)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1018=(cj5*sj4);
IkReal x1019=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1018))+((r01*x1019)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1018))+((cj4*r12))+(((-1.0)*r11*x1019)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1018))+((r01*x1019))))+IKsqr((((r10*x1018))+((cj4*r12))+(((-1.0)*r11*x1019))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1018))+((r01*x1019))), (((r10*x1018))+((cj4*r12))+(((-1.0)*r11*x1019))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1020=IKcos(j0);
IkReal x1021=IKsin(j0);
IkReal x1022=(r02*sj4);
IkReal x1023=((1.0)*sj3);
IkReal x1024=(r12*sj4);
IkReal x1025=(cj3*cj4);
IkReal x1026=((1.0)*cj5);
IkReal x1027=(r11*sj5);
IkReal x1028=((1.0)*cj1);
IkReal x1029=((0.39225)*sj1);
IkReal x1030=(cj5*r01);
IkReal x1031=(r01*sj5);
IkReal x1032=(r00*sj5);
IkReal x1033=((1.0)*sj1);
IkReal x1034=((0.39225)*cj2);
IkReal x1035=(cj5*r11);
IkReal x1036=(r10*sj5);
IkReal x1037=((1.0)*cj4);
IkReal x1038=(sj2*x1020);
IkReal x1039=(sj2*x1021);
IkReal x1040=(cj4*cj5*sj3);
IkReal x1041=(cj1*x1020);
IkReal x1042=(cj2*x1020);
IkReal x1043=(cj1*x1021);
IkReal x1044=(cj2*x1021);
evalcond[0]=(x1020+((sj4*x1027))+(((-1.0)*r12*x1037))+(((-1.0)*r10*sj4*x1026)));
evalcond[1]=(((sj4*x1031))+(((-1.0)*r00*sj4*x1026))+(((-1.0)*x1021))+(((-1.0)*r02*x1037)));
evalcond[2]=((((-0.10915)*x1021))+((x1034*x1041))+(((-1.0)*x1029*x1038))+(((-1.0)*px))+(((-0.09465)*x1032))+(((-0.09465)*x1030))+(((0.425)*x1041)));
evalcond[3]=(((x1034*x1043))+(((0.10915)*x1020))+(((-1.0)*x1029*x1039))+(((-1.0)*py))+(((-0.09465)*x1035))+(((-0.09465)*x1036))+(((0.425)*x1043)));
evalcond[4]=((((-1.0)*x1028*x1042))+((sj1*x1038))+(((-1.0)*r00*x1025*x1026))+((sj3*x1032))+((sj3*x1030))+((x1025*x1031))+((cj3*x1022)));
evalcond[5]=((((-1.0)*x1028*x1044))+((sj1*x1039))+(((-1.0)*r10*x1025*x1026))+((sj3*x1036))+((sj3*x1035))+((x1025*x1027))+((cj3*x1024)));
evalcond[6]=((((-1.0)*x1028*x1038))+((cj3*x1032))+((cj3*x1030))+(((-1.0)*x1033*x1042))+(((-1.0)*x1022*x1023))+((r00*x1040))+(((-1.0)*cj4*x1023*x1031)));
evalcond[7]=((((-1.0)*x1028*x1039))+(((-1.0)*x1023*x1024))+((cj3*x1035))+((cj3*x1036))+(((-1.0)*x1033*x1044))+(((-1.0)*cj4*x1023*x1027))+((r10*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1045=IKPowWithIntegerCheck(cj3,-1);
if(!x1045.valid){
continue;
}
CheckValue<IkReal> x1046=IKPowWithIntegerCheck(r22,-1);
if(!x1046.valid){
continue;
}
sj4array[0]=((-1.0)*(x1045.value)*(x1046.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1047=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1047);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1047);
IkReal x1048=((16.0)*sj4);
IkReal x1049=(cj1*cj2);
IkReal x1050=((4.0)*sj3);
IkReal x1051=((8.0)*sj4);
IkReal x1052=((4.0)*cj4);
IkReal x1053=(sj1*sj2);
IkReal x1054=((4.0)*sj4);
IkReal x1055=(cj3*r02);
IkReal x1056=((16.0)*sj3);
IkReal x1057=((8.0)*sj3);
IkReal x1058=((12.0)*cj4);
IkReal x1059=((12.0)*sj4);
IkReal x1060=(cj3*r12);
IkReal x1061=(r11*x1050);
IkReal x1062=(r01*x1050);
IkReal x1063=(r01*x1053);
IkReal x1064=(cj3*cj4*r01);
IkReal x1065=(cj3*cj4*r11);
IkReal x1066=(cj3*r10*x1052);
IkReal x1067=(x1059*x1060);
IkReal x1068=(cj3*r00*x1052);
IkReal x1069=(x1055*x1059);
IkReal x1070=(r00*x1053*x1054);
IkReal x1071=(r02*x1053*x1058);
IkReal x1072=(r00*x1049*x1054);
IkReal x1073=(r02*x1049*x1058);
IkReal x1074=(r10*x1053*x1054);
IkReal x1075=(r12*x1049*x1058);
IkReal x1076=(r12*x1053*x1058);
IkReal x1077=(r10*x1049*x1054);
IkReal x1078=(x1072+x1061);
IkReal x1079=(x1074+x1062);
IkReal x1080=(x1070+x1066);
IkReal x1081=(x1073+x1067);
IkReal x1082=(x1077+x1068);
IkReal x1083=(x1076+x1069);
j5eval[0]=((((0.5)*(IKabs((((r02*x1052*x1053))+x1078+(((-1.0)*r02*x1049*x1052))+(((-1.0)*x1054*x1060))+(((-1.0)*x1080)))))))+(((0.5)*(IKabs((x1071+x1080+(((-1.0)*x1081))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1078+x1071+(((-1.0)*x1080))+(((-1.0)*x1081)))))))+(IKabs((((r01*x1049*x1051))+(((-1.0)*r10*x1057))+(((-1.0)*x1051*x1063))+(((-8.0)*x1065)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1056))+(((-1.0)*r11*x1048*x1049))+((r11*x1048*x1053))+(((-16.0)*x1064)))))))+(((0.5)*(IKabs((x1075+x1082+(((-1.0)*x1083))+(((-1.0)*x1079)))))))+(((0.5)*(IKabs((x1079+x1075+(((-1.0)*x1083))+(((-1.0)*x1082)))))))+(IKabs(((((-1.0)*r00*x1057))+(((-1.0)*r11*x1049*x1051))+((r11*x1051*x1053))+(((-8.0)*x1064)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1056))+(((-1.0)*x1048*x1063))+((r01*x1048*x1049))+(((-16.0)*x1065)))))))+(((0.5)*(IKabs((x1079+(((-1.0)*x1054*x1055))+(((-1.0)*r12*x1052*x1053))+(((-1.0)*x1082))+((r12*x1049*x1052))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1084=(r10*sj3);
IkReal x1085=(r01*sj4);
IkReal x1086=(cj1*cj2);
IkReal x1087=(cj3*cj4);
IkReal x1088=(sj1*sj2);
IkReal x1089=(cj4*r02);
IkReal x1090=((4.0)*r11*sj3);
IkReal x1091=(cj3*r12*sj4);
IkReal x1092=((4.0)*r00*sj4);
IkReal x1093=((4.0)*r10*x1087);
IkReal x1094=((12.0)*x1091);
IkReal x1095=((4.0)*x1091);
IkReal x1096=(x1086*x1092);
IkReal x1097=(x1088*x1092);
IkReal x1098=((12.0)*x1088*x1089);
IkReal x1099=((12.0)*x1086*x1089);
IkReal x1100=((4.0)*x1088*x1089);
IkReal x1101=((4.0)*x1086*x1089);
IkReal x1102=(x1096+x1090);
IkReal x1103=(x1097+x1093);
IkReal x1104=(x1101+x1095);
IkReal x1105=(x1094+x1099);
IkReal x1106=((((-8.0)*x1085*x1088))+(((-8.0)*r11*x1087))+(((8.0)*x1085*x1086))+(((-8.0)*x1084)));
op[0]=(x1102+x1100+(((-1.0)*x1103))+(((-1.0)*x1104)));
op[1]=x1106;
op[2]=(x1102+x1098+(((-1.0)*x1103))+(((-1.0)*x1105)));
op[3]=((((-16.0)*x1084))+(((16.0)*x1085*x1086))+(((-16.0)*x1085*x1088))+(((-16.0)*r11*x1087)));
op[4]=(x1103+x1098+(((-1.0)*x1102))+(((-1.0)*x1105)));
op[5]=x1106;
op[6]=(x1103+x1100+(((-1.0)*x1102))+(((-1.0)*x1104)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1107=(cj1*cj2);
IkReal x1108=((4.0)*cj4);
IkReal x1109=(sj1*sj2);
IkReal x1110=((4.0)*sj4);
IkReal x1111=(r00*sj3);
IkReal x1112=(cj3*r02);
IkReal x1113=((4.0)*r01*sj3);
IkReal x1114=((16.0)*r11*sj4);
IkReal x1115=(cj3*cj4*r01);
IkReal x1116=((12.0)*cj4*r12);
IkReal x1117=((8.0)*r11*sj4);
IkReal x1118=(cj3*r00*x1108);
IkReal x1119=((12.0)*sj4*x1112);
IkReal x1120=(x1110*x1112);
IkReal x1121=(r10*x1107*x1110);
IkReal x1122=(r10*x1109*x1110);
IkReal x1123=(x1107*x1116);
IkReal x1124=(x1109*x1116);
IkReal x1125=(r12*x1107*x1108);
IkReal x1126=(r12*x1108*x1109);
IkReal x1127=(x1113+x1122);
IkReal x1128=(x1118+x1121);
IkReal x1129=(x1120+x1126);
IkReal x1130=(x1119+x1124);
IkReal x1131=(((x1109*x1117))+(((-1.0)*x1107*x1117))+(((-8.0)*x1115))+(((-8.0)*x1111)));
j5evalpoly[0]=(x1128+x1125+(((htj5*htj5*htj5)*((((x1109*x1114))+(((-16.0)*x1115))+(((-16.0)*x1111))+(((-1.0)*x1107*x1114))))))+(((htj5*htj5)*((x1128+x1123+(((-1.0)*x1130))+(((-1.0)*x1127))))))+(((-1.0)*x1127))+(((-1.0)*x1129))+((x1131*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1125+x1127+(((-1.0)*x1128))+(((-1.0)*x1129))))))+((htj5*x1131))+(((htj5*htj5*htj5*htj5)*((x1123+x1127+(((-1.0)*x1130))+(((-1.0)*x1128)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1132=(cj5*sj4);
IkReal x1133=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1133))+(((-1.0)*r00*x1132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1133))+((r10*x1132))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1133))+(((-1.0)*r00*x1132))))+IKsqr(((((-1.0)*r11*x1133))+((r10*x1132))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1133))+(((-1.0)*r00*x1132))), ((((-1.0)*r11*x1133))+((r10*x1132))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1134=IKcos(j0);
IkReal x1135=IKsin(j0);
IkReal x1136=(r02*sj4);
IkReal x1137=((1.0)*sj3);
IkReal x1138=(r12*sj4);
IkReal x1139=(cj3*cj4);
IkReal x1140=((1.0)*cj5);
IkReal x1141=(r11*sj5);
IkReal x1142=((1.0)*cj1);
IkReal x1143=((0.39225)*sj1);
IkReal x1144=(cj5*r01);
IkReal x1145=(r01*sj5);
IkReal x1146=(r00*sj5);
IkReal x1147=((1.0)*sj1);
IkReal x1148=((0.39225)*cj2);
IkReal x1149=(cj5*r11);
IkReal x1150=(r10*sj5);
IkReal x1151=((1.0)*cj4);
IkReal x1152=(sj2*x1134);
IkReal x1153=(sj2*x1135);
IkReal x1154=(cj4*cj5*sj3);
IkReal x1155=(cj1*x1134);
IkReal x1156=(cj2*x1134);
IkReal x1157=(cj1*x1135);
IkReal x1158=(cj2*x1135);
evalcond[0]=(((sj4*x1141))+x1134+(((-1.0)*r10*sj4*x1140))+(((-1.0)*r12*x1151)));
evalcond[1]=(((sj4*x1145))+(((-1.0)*r02*x1151))+(((-1.0)*r00*sj4*x1140))+(((-1.0)*x1135)));
evalcond[2]=((((0.425)*x1155))+(((-1.0)*x1143*x1152))+(((-1.0)*px))+(((-0.10915)*x1135))+((x1148*x1155))+(((-0.09465)*x1146))+(((-0.09465)*x1144)));
evalcond[3]=((((0.425)*x1157))+(((0.10915)*x1134))+(((-1.0)*x1143*x1153))+(((-1.0)*py))+((x1148*x1157))+(((-0.09465)*x1149))+(((-0.09465)*x1150)));
evalcond[4]=(((cj3*x1136))+((sj3*x1146))+((sj3*x1144))+((x1139*x1145))+((sj1*x1152))+(((-1.0)*r00*x1139*x1140))+(((-1.0)*x1142*x1156)));
evalcond[5]=(((cj3*x1138))+((sj3*x1150))+((sj3*x1149))+(((-1.0)*r10*x1139*x1140))+((x1139*x1141))+((sj1*x1153))+(((-1.0)*x1142*x1158)));
evalcond[6]=(((r00*x1154))+((cj3*x1146))+((cj3*x1144))+(((-1.0)*x1147*x1156))+(((-1.0)*x1136*x1137))+(((-1.0)*cj4*x1137*x1145))+(((-1.0)*x1142*x1152)));
evalcond[7]=(((cj3*x1150))+((cj3*x1149))+(((-1.0)*x1147*x1158))+(((-1.0)*x1137*x1138))+(((-1.0)*cj4*x1137*x1141))+(((-1.0)*x1142*x1153))+((r10*x1154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1159=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1159);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1159);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1160=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1161=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(r22,-1);
if(!x1162.valid){
continue;
}
sj4array[0]=((-1.0)*(x1162.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1165 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1165.valid){
continue;
}
IkReal x1164=x1165.value;
j5array[0]=((-1.0)*x1164);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1164)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1166=(cj5*sj4);
IkReal x1167=(sj4*sj5);
if( IKabs((((r01*x1167))+(((-1.0)*r00*x1166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1166))+(((-1.0)*r11*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1167))+(((-1.0)*r00*x1166))))+IKsqr((((r10*x1166))+(((-1.0)*r11*x1167))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1167))+(((-1.0)*r00*x1166))), (((r10*x1166))+(((-1.0)*r11*x1167))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1168=IKcos(j0);
IkReal x1169=IKsin(j0);
IkReal x1170=(cj5*r01);
IkReal x1171=(sj4*sj5);
IkReal x1172=(cj5*r11);
IkReal x1173=((0.425)*cj1);
IkReal x1174=(r00*sj5);
IkReal x1175=(r10*sj5);
IkReal x1176=((1.0)*cj1*sj2);
IkReal x1177=((1.0)*cj2*sj1);
IkReal x1178=((1.0)*cj5*sj4);
evalcond[0]=(x1168+((r11*x1171))+(((-1.0)*r10*x1178)));
evalcond[1]=(((r01*x1171))+(((-1.0)*r00*x1178))+(((-1.0)*x1169)));
evalcond[2]=(x1174+x1170+(((-1.0)*x1168*x1177))+(((-1.0)*x1168*x1176)));
evalcond[3]=(x1175+x1172+(((-1.0)*x1169*x1176))+(((-1.0)*x1169*x1177)));
evalcond[4]=((((-0.10915)*x1169))+((x1168*x1173))+(((-0.09465)*x1174))+(((-0.09465)*x1170))+(((-1.0)*px)));
evalcond[5]=((((-0.09465)*x1172))+(((-0.09465)*x1175))+(((0.10915)*x1168))+(((-1.0)*py))+((x1169*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1179=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1180=IKPowWithIntegerCheck(r22,-1);
if(!x1180.valid){
continue;
}
sj4array[0]=((x1180.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1181=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1181);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1181);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1183 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1183.valid){
continue;
}
IkReal x1182=x1183.value;
j5array[0]=((-1.0)*x1182);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1182)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1184=(cj5*sj4);
IkReal x1185=(sj4*sj5);
if( IKabs((((r01*x1185))+(((-1.0)*r00*x1184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1184))+(((-1.0)*r11*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1185))+(((-1.0)*r00*x1184))))+IKsqr((((r10*x1184))+(((-1.0)*r11*x1185))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1185))+(((-1.0)*r00*x1184))), (((r10*x1184))+(((-1.0)*r11*x1185))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1186=IKcos(j0);
IkReal x1187=IKsin(j0);
IkReal x1188=(sj4*sj5);
IkReal x1189=(cj5*r11);
IkReal x1190=((1.0)*sj5);
IkReal x1191=((0.425)*cj1);
IkReal x1192=((0.09465)*sj5);
IkReal x1193=((1.0)*cj5);
IkReal x1194=((1.0)*cj1*sj2);
IkReal x1195=((1.0)*cj2*sj1);
evalcond[0]=(x1186+((r11*x1188))+(((-1.0)*r10*sj4*x1193)));
evalcond[1]=((((-1.0)*r00*sj4*x1193))+((r01*x1188))+(((-1.0)*x1187)));
evalcond[2]=((((-1.0)*r00*x1192))+((x1186*x1191))+(((-0.09465)*cj5*r01))+(((-0.10915)*x1187))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x1189))+((x1187*x1191))+(((0.10915)*x1186))+(((-1.0)*r10*x1192))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*r00*x1190))+(((-1.0)*x1186*x1195))+(((-1.0)*x1186*x1194))+(((-1.0)*r01*x1193)));
evalcond[5]=((((-1.0)*r10*x1190))+(((-1.0)*x1187*x1195))+(((-1.0)*x1187*x1194))+(((-1.0)*x1189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1196=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1196);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1196);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1197=IKPowWithIntegerCheck(r22,-1);
if(!x1197.valid){
continue;
}
sj4array[0]=((x1197.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1198=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1198);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1198);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1200 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
IkReal x1199=x1200.value;
j5array[0]=((-1.0)*x1199);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1199)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1201=(cj5*sj4);
IkReal x1202=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1201))+((r01*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1201))+(((-1.0)*r11*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1201))+((r01*x1202))))+IKsqr((((r10*x1201))+(((-1.0)*r11*x1202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1201))+((r01*x1202))), (((r10*x1201))+(((-1.0)*r11*x1202))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1203=IKcos(j0);
IkReal x1204=IKsin(j0);
IkReal x1205=(cj5*r01);
IkReal x1206=(sj4*sj5);
IkReal x1207=(r00*sj5);
IkReal x1208=(sj1*sj2);
IkReal x1209=(cj5*r11);
IkReal x1210=((0.39225)*cj2);
IkReal x1211=(r10*sj5);
IkReal x1212=((0.39225)*x1208);
IkReal x1213=(cj1*x1203);
IkReal x1214=((1.0)*x1204);
IkReal x1215=((1.0)*cj5*sj4);
IkReal x1216=(cj1*x1204);
evalcond[0]=(x1203+((r11*x1206))+(((-1.0)*r10*x1215)));
evalcond[1]=((((-1.0)*r00*x1215))+((r01*x1206))+(((-1.0)*x1214)));
evalcond[2]=(x1205+x1207+(((-1.0)*cj2*x1213))+((x1203*x1208)));
evalcond[3]=(((x1204*x1208))+x1209+x1211+(((-1.0)*cj1*cj2*x1214)));
evalcond[4]=((((0.425)*x1213))+((x1210*x1213))+(((-1.0)*x1203*x1212))+(((-0.10915)*x1204))+(((-1.0)*px))+(((-0.09465)*x1205))+(((-0.09465)*x1207)));
evalcond[5]=((((-1.0)*x1204*x1212))+(((0.425)*x1216))+((x1210*x1216))+(((-0.09465)*x1211))+(((0.10915)*x1203))+(((-1.0)*py))+(((-0.09465)*x1209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1217=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1217);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1217);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1218=IKPowWithIntegerCheck(r22,-1);
if(!x1218.valid){
continue;
}
sj4array[0]=((-1.0)*(x1218.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1219=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1219);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1219);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1221 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1221.valid){
continue;
}
IkReal x1220=x1221.value;
j5array[0]=((-1.0)*x1220);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1220)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1222=(cj5*sj4);
IkReal x1223=(sj4*sj5);
if( IKabs((((r01*x1223))+(((-1.0)*r00*x1222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1223))+((r10*x1222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1223))+(((-1.0)*r00*x1222))))+IKsqr(((((-1.0)*r11*x1223))+((r10*x1222))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1223))+(((-1.0)*r00*x1222))), ((((-1.0)*r11*x1223))+((r10*x1222))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1224=IKcos(j0);
IkReal x1225=IKsin(j0);
IkReal x1226=(sj4*sj5);
IkReal x1227=(cj5*r11);
IkReal x1228=(cj5*r01);
IkReal x1229=((1.0)*sj5);
IkReal x1230=((0.09465)*sj5);
IkReal x1231=(sj1*sj2);
IkReal x1232=((0.39225)*cj2);
IkReal x1233=((0.39225)*x1231);
IkReal x1234=((1.0)*x1225);
IkReal x1235=(cj1*x1224);
IkReal x1236=((1.0)*cj5*sj4);
IkReal x1237=(cj1*x1225);
evalcond[0]=(x1224+(((-1.0)*r10*x1236))+((r11*x1226)));
evalcond[1]=((((-1.0)*r00*x1236))+((r01*x1226))+(((-1.0)*x1234)));
evalcond[2]=((((-1.0)*r00*x1229))+(((-1.0)*x1228))+((x1224*x1231))+(((-1.0)*cj2*x1235)));
evalcond[3]=((((-1.0)*cj1*cj2*x1234))+(((-1.0)*x1227))+((x1225*x1231))+(((-1.0)*r10*x1229)));
evalcond[4]=((((-1.0)*r00*x1230))+(((-1.0)*x1224*x1233))+(((-1.0)*px))+(((-0.09465)*x1228))+(((0.425)*x1235))+((x1232*x1235))+(((-0.10915)*x1225)));
evalcond[5]=((((-1.0)*x1225*x1233))+(((-1.0)*py))+(((-0.09465)*x1227))+(((0.425)*x1237))+(((0.10915)*x1224))+(((-1.0)*r10*x1230))+((x1232*x1237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1238=IKPowWithIntegerCheck(r22,-1);
if(!x1238.valid){
continue;
}
CheckValue<IkReal> x1239=IKPowWithIntegerCheck(sj3,-1);
if(!x1239.valid){
continue;
}
sj4array[0]=((x1238.value)*(x1239.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1240=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1240);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1240);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1241=((4.0)*r01);
IkReal x1242=((16.0)*r00);
IkReal x1243=(cj3*sj2);
IkReal x1244=((8.0)*r00);
IkReal x1245=(cj2*cj3);
IkReal x1246=(cj4*r01);
IkReal x1247=((16.0)*cj1);
IkReal x1248=((8.0)*sj1);
IkReal x1249=((16.0)*sj1);
IkReal x1250=((8.0)*cj1);
IkReal x1251=(sj2*sj3);
IkReal x1252=(cj2*sj3);
IkReal x1253=(sj1*x1252);
IkReal x1254=((4.0)*cj4*r00);
IkReal x1255=(((sj1*x1241*x1243))+((cj1*x1241*x1251))+((x1241*x1253))+((sj1*x1251*x1254)));
IkReal x1256=(((cj1*x1252*x1254))+((cj1*x1241*x1245))+((sj1*x1245*x1254))+((cj1*x1243*x1254)));
IkReal x1257=((((-1.0)*x1255))+x1256);
IkReal x1258=(((x1246*x1250*x1252))+((cj1*x1244*x1251))+(((-1.0)*cj1*x1244*x1245))+((sj1*x1243*x1244))+(((-1.0)*x1246*x1248*x1251))+((x1245*x1246*x1248))+((x1243*x1246*x1250))+((x1244*x1253)));
IkReal x1259=((((-1.0)*x1256))+x1255);
op[0]=x1257;
op[1]=x1258;
op[2]=x1257;
op[3]=(((x1243*x1246*x1247))+((sj1*x1242*x1243))+((cj1*x1242*x1251))+(((-1.0)*cj1*x1242*x1245))+((x1245*x1246*x1249))+((x1246*x1247*x1252))+((x1242*x1253))+(((-1.0)*x1246*x1249*x1251)));
op[4]=x1259;
op[5]=x1258;
op[6]=x1259;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1260=(cj5*sj4);
IkReal x1261=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1260))+((r01*x1261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1260))+(((-1.0)*r11*x1261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1260))+((r01*x1261))))+IKsqr((((r10*x1260))+(((-1.0)*r11*x1261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1260))+((r01*x1261))), (((r10*x1260))+(((-1.0)*r11*x1261))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1262=IKcos(j0);
IkReal x1263=IKsin(j0);
IkReal x1264=((0.39225)*sj1);
IkReal x1265=((1.0)*cj3);
IkReal x1266=((1.0)*cj1);
IkReal x1267=(r11*sj5);
IkReal x1268=(cj5*r01);
IkReal x1269=(cj5*r11);
IkReal x1270=(r01*sj5);
IkReal x1271=(cj3*cj4);
IkReal x1272=(r00*sj5);
IkReal x1273=((0.39225)*cj2);
IkReal x1274=((1.0)*sj1);
IkReal x1275=(r10*sj5);
IkReal x1276=(sj2*x1262);
IkReal x1277=(cj4*cj5*r00);
IkReal x1278=(cj1*x1263);
IkReal x1279=(sj2*x1263);
IkReal x1280=(cj4*cj5*r10);
IkReal x1281=((1.0)*cj4*sj3);
IkReal x1282=(cj1*x1262);
IkReal x1283=(cj2*x1262);
IkReal x1284=((1.0)*cj5*sj4);
evalcond[0]=(x1262+((sj4*x1267))+(((-1.0)*r10*x1284)));
evalcond[1]=(((sj4*x1270))+(((-1.0)*r00*x1284))+(((-1.0)*x1263)));
evalcond[2]=(((sj3*x1272))+((sj1*x1276))+(((-1.0)*x1266*x1283))+((x1270*x1271))+(((-1.0)*x1265*x1277))+((sj3*x1268)));
evalcond[3]=(((sj3*x1275))+((sj1*x1279))+((x1267*x1271))+(((-1.0)*cj2*x1263*x1266))+((sj3*x1269))+(((-1.0)*x1265*x1280)));
evalcond[4]=(((sj3*x1277))+(((-1.0)*x1266*x1276))+(((-1.0)*x1270*x1281))+((cj3*x1268))+((cj3*x1272))+(((-1.0)*x1274*x1283)));
evalcond[5]=((((-1.0)*x1266*x1279))+((cj3*x1269))+(((-1.0)*x1267*x1281))+((cj3*x1275))+((sj3*x1280))+(((-1.0)*cj2*x1263*x1274)));
evalcond[6]=((((0.425)*x1282))+(((-0.09465)*x1272))+(((-0.10915)*x1263))+(((-0.09465)*x1268))+(((-1.0)*px))+((x1273*x1282))+(((-1.0)*x1264*x1276)));
evalcond[7]=((((-0.09465)*x1275))+(((-0.09465)*x1269))+((x1273*x1278))+(((0.10915)*x1262))+(((-1.0)*py))+(((0.425)*x1278))+(((-1.0)*x1264*x1279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(cj3,-1);
if(!x1285.valid){
continue;
}
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(r22,-1);
if(!x1286.valid){
continue;
}
sj4array[0]=((-1.0)*(x1285.value)*(x1286.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1287=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1287);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1287);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1288=((4.0)*r01);
IkReal x1289=((16.0)*r00);
IkReal x1290=(cj3*sj2);
IkReal x1291=((8.0)*r00);
IkReal x1292=(cj2*cj3);
IkReal x1293=(cj4*r01);
IkReal x1294=((16.0)*cj1);
IkReal x1295=((8.0)*sj1);
IkReal x1296=((16.0)*sj1);
IkReal x1297=((8.0)*cj1);
IkReal x1298=(sj2*sj3);
IkReal x1299=(cj2*sj3);
IkReal x1300=(sj1*x1299);
IkReal x1301=((4.0)*cj4*r00);
IkReal x1302=(((x1288*x1300))+((sj1*x1288*x1290))+((sj1*x1298*x1301))+((cj1*x1288*x1298)));
IkReal x1303=(((cj1*x1299*x1301))+((sj1*x1292*x1301))+((cj1*x1290*x1301))+((cj1*x1288*x1292)));
IkReal x1304=(x1303+(((-1.0)*x1302)));
IkReal x1305=(((x1291*x1300))+(((-1.0)*x1293*x1295*x1298))+(((-1.0)*cj1*x1291*x1292))+((x1290*x1293*x1297))+((cj1*x1291*x1298))+((x1293*x1297*x1299))+((sj1*x1290*x1291))+((x1292*x1293*x1295)));
IkReal x1306=(x1302+(((-1.0)*x1303)));
op[0]=x1304;
op[1]=x1305;
op[2]=x1304;
op[3]=(((sj1*x1289*x1290))+(((-1.0)*x1293*x1296*x1298))+((x1290*x1293*x1294))+((cj1*x1289*x1298))+((x1289*x1300))+((x1293*x1294*x1299))+(((-1.0)*cj1*x1289*x1292))+((x1292*x1293*x1296)));
op[4]=x1306;
op[5]=x1305;
op[6]=x1306;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1307=(cj5*sj4);
IkReal x1308=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1307))+((r01*x1308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1307))+(((-1.0)*r11*x1308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1307))+((r01*x1308))))+IKsqr((((r10*x1307))+(((-1.0)*r11*x1308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1307))+((r01*x1308))), (((r10*x1307))+(((-1.0)*r11*x1308))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1309=IKcos(j0);
IkReal x1310=IKsin(j0);
IkReal x1311=((0.39225)*sj1);
IkReal x1312=((1.0)*cj3);
IkReal x1313=((1.0)*cj1);
IkReal x1314=(r11*sj5);
IkReal x1315=(cj5*r01);
IkReal x1316=(cj5*r11);
IkReal x1317=(r01*sj5);
IkReal x1318=(cj3*cj4);
IkReal x1319=(r00*sj5);
IkReal x1320=((0.39225)*cj2);
IkReal x1321=((1.0)*sj1);
IkReal x1322=(r10*sj5);
IkReal x1323=(sj2*x1309);
IkReal x1324=(cj4*cj5*r00);
IkReal x1325=(cj1*x1310);
IkReal x1326=(sj2*x1310);
IkReal x1327=(cj4*cj5*r10);
IkReal x1328=((1.0)*cj4*sj3);
IkReal x1329=(cj1*x1309);
IkReal x1330=(cj2*x1309);
IkReal x1331=((1.0)*cj5*sj4);
evalcond[0]=(x1309+((sj4*x1314))+(((-1.0)*r10*x1331)));
evalcond[1]=((((-1.0)*x1310))+((sj4*x1317))+(((-1.0)*r00*x1331)));
evalcond[2]=((((-1.0)*x1312*x1324))+((x1317*x1318))+((sj3*x1315))+((sj3*x1319))+(((-1.0)*x1313*x1330))+((sj1*x1323)));
evalcond[3]=((((-1.0)*x1312*x1327))+((sj3*x1316))+((x1314*x1318))+((sj3*x1322))+(((-1.0)*cj2*x1310*x1313))+((sj1*x1326)));
evalcond[4]=(((sj3*x1324))+(((-1.0)*x1313*x1323))+((cj3*x1315))+((cj3*x1319))+(((-1.0)*x1321*x1330))+(((-1.0)*x1317*x1328)));
evalcond[5]=(((sj3*x1327))+(((-1.0)*x1313*x1326))+(((-1.0)*x1314*x1328))+(((-1.0)*cj2*x1310*x1321))+((cj3*x1316))+((cj3*x1322)));
evalcond[6]=(((x1320*x1329))+(((-0.10915)*x1310))+(((-1.0)*px))+(((-0.09465)*x1315))+(((-0.09465)*x1319))+(((0.425)*x1329))+(((-1.0)*x1311*x1323)));
evalcond[7]=(((x1320*x1325))+(((0.10915)*x1309))+(((-1.0)*py))+(((-0.09465)*x1316))+(((-0.09465)*x1322))+(((0.425)*x1325))+(((-1.0)*x1311*x1326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1334 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1334.valid){
continue;
}
IkReal x1332=((1.0)*(x1334.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1335=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1335.valid){
continue;
}
if( (((-1.0)*(x1335.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1335.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1333=((-1.0)*(IKasin(((-1.0)*(x1335.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1332))+(((-1.0)*x1333)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1333))+(((-1.0)*x1332)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1336=cj5*cj5;
IkReal x1337=r21*r21;
IkReal x1338=(sj3*x1336);
IkReal x1339=(((sj3*(r22*r22)))+(((-1.0)*x1337*x1338))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1338*(r20*r20)))+((sj3*x1337)));
j4eval[0]=x1339;
j4eval[1]=IKsign(x1339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1340=cj5*cj5;
IkReal x1341=r21*r21;
IkReal x1342=((1.0)*cj3);
IkReal x1343=(cj3*x1340);
IkReal x1344=((((-1.0)*x1341*x1342))+(((-1.0)*x1340*x1342*(r20*r20)))+((x1341*x1343))+(((-1.0)*x1342*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1344;
j4eval[1]=IKsign(x1344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1345=cj1*cj1;
IkReal x1346=cj2*cj2;
IkReal x1347=(cj1*sj1*sj2);
IkReal x1348=(cj2*x1345);
IkReal x1349=(x1345*x1346);
j0eval[0]=((6.19369221392727)+x1345+(((-11.4971359451148)*cj2*x1347))+(((-5.74856797255738)*x1346))+(((12.4570625281677)*x1348))+(((11.4971359451148)*x1349))+(((-12.4570625281677)*x1347)));
j0eval[1]=IKsign(((66309514.0)+(((-61544025.0)*x1346))+(((133365000.0)*x1348))+(((123088050.0)*x1349))+(((-123088050.0)*cj2*x1347))+(((10705975.0)*x1345))+(((-133365000.0)*x1347))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1350=((1.0)*cj5);
IkReal x1351=((1.0)*sj5);
IkReal x1352=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1352;
j0eval[1]=((IKabs(((((-1.0)*r10*x1351))+(((-1.0)*r11*x1350)))))+(IKabs(((((-1.0)*r00*x1351))+(((-1.0)*r01*x1350))))));
j0eval[2]=IKsign(x1352);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1353=cj5*cj5;
IkReal x1354=r21*r21;
IkReal x1355=(sj1*sj2);
IkReal x1356=(r21*sj5);
IkReal x1357=(cj5*r20);
IkReal x1358=(cj1*cj2);
IkReal x1359=(((x1353*(r20*r20)))+x1354+(r22*r22)+(((-1.0)*x1353*x1354))+(((-2.0)*x1356*x1357)));
j4eval[0]=x1359;
j4eval[1]=IKsign(x1359);
j4eval[2]=((IKabs((((r22*x1355))+(((-1.0)*r22*x1358)))))+(IKabs((((x1357*x1358))+((x1355*x1356))+(((-1.0)*x1356*x1358))+(((-1.0)*x1355*x1357))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1360=IKsin(j0);
IkReal x1361=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x1360))+(((0.425)*x1361)));
evalcond[1]=((((0.10915)*x1361))+(((-1.0)*py))+(((0.425)*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1362=((1.0)*cj5);
IkReal x1363=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1362)));
j4eval[0]=x1363;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1362)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1364=((1.0)*cj5);
IkReal x1365=((((-1.0)*r11*x1364))+(((-1.0)*r10*sj5)));
j4eval[0]=x1365;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1364))))));
j4eval[2]=IKsign(x1365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1366=cj5*cj5;
IkReal x1367=((1.0)*sj5);
IkReal x1368=(cj5*r20);
IkReal x1369=(r11*r21);
IkReal x1370=(x1369+((r10*r20*x1366))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1367))+(((-1.0)*r11*x1367*x1368))+(((-1.0)*x1366*x1369)));
j4eval[0]=x1370;
j4eval[1]=IKsign(x1370);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1367))+((cj0*x1368))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1371=cj5*cj5;
IkReal x1372=((1.0)*sj5);
IkReal x1373=(cj5*r20);
IkReal x1374=(r11*r21);
CheckValue<IkReal> x1375 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1372))+((cj0*x1373)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign((x1374+((r10*r20*x1371))+(((-1.0)*r11*x1372*x1373))+(((-1.0)*x1371*x1374))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1372)))),-1);
if(!x1376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1375.value)+(((1.5707963267949)*(x1376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1377=IKsin(j4);
IkReal x1378=IKcos(j4);
IkReal x1379=((1.0)*sj0);
IkReal x1380=(cj5*r00);
IkReal x1381=(r11*sj5);
IkReal x1382=(cj5*r10);
IkReal x1383=(r21*sj5);
IkReal x1384=(cj5*r20);
IkReal x1385=(r01*sj5);
IkReal x1386=((1.0)*x1378);
IkReal x1387=((1.0)*x1377);
evalcond[0]=((((-1.0)*x1384*x1387))+((x1377*x1383))+(((-1.0)*r22*x1386)));
evalcond[1]=((((-1.0)*x1383*x1386))+(((-1.0)*r22*x1387))+((x1378*x1384)));
evalcond[2]=((((-1.0)*r12*x1386))+cj0+(((-1.0)*x1382*x1387))+((x1377*x1381)));
evalcond[3]=((((-1.0)*r02*x1386))+(((-1.0)*x1379))+(((-1.0)*x1380*x1387))+((x1377*x1385)));
evalcond[4]=((((-1.0)*r02*x1387))+((x1378*x1380))+(((-1.0)*cj0))+(((-1.0)*x1385*x1386)));
evalcond[5]=((((-1.0)*r12*x1387))+(((-1.0)*x1379))+(((-1.0)*x1381*x1386))+((x1378*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1388=((1.0)*cj5);
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1388))+(((-1.0)*r10*sj5)))),-1);
if(!x1389.valid){
continue;
}
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1389.value)))+(x1390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1391=IKsin(j4);
IkReal x1392=IKcos(j4);
IkReal x1393=((1.0)*sj0);
IkReal x1394=(cj5*r00);
IkReal x1395=(r11*sj5);
IkReal x1396=(cj5*r10);
IkReal x1397=(r21*sj5);
IkReal x1398=(cj5*r20);
IkReal x1399=(r01*sj5);
IkReal x1400=((1.0)*x1392);
IkReal x1401=((1.0)*x1391);
evalcond[0]=((((-1.0)*x1398*x1401))+(((-1.0)*r22*x1400))+((x1391*x1397)));
evalcond[1]=((((-1.0)*r22*x1401))+((x1392*x1398))+(((-1.0)*x1397*x1400)));
evalcond[2]=((((-1.0)*r12*x1400))+cj0+((x1391*x1395))+(((-1.0)*x1396*x1401)));
evalcond[3]=((((-1.0)*r02*x1400))+((x1391*x1399))+(((-1.0)*x1394*x1401))+(((-1.0)*x1393)));
evalcond[4]=((((-1.0)*x1399*x1400))+(((-1.0)*r02*x1401))+((x1392*x1394))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1401))+((x1392*x1396))+(((-1.0)*x1395*x1400))+(((-1.0)*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1402=((1.0)*cj5);
CheckValue<IkReal> x1403 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1403.valid){
continue;
}
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1402)))),-1);
if(!x1404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1403.value)+(((1.5707963267949)*(x1404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1405=IKsin(j4);
IkReal x1406=IKcos(j4);
IkReal x1407=((1.0)*sj0);
IkReal x1408=(cj5*r00);
IkReal x1409=(r11*sj5);
IkReal x1410=(cj5*r10);
IkReal x1411=(r21*sj5);
IkReal x1412=(cj5*r20);
IkReal x1413=(r01*sj5);
IkReal x1414=((1.0)*x1406);
IkReal x1415=((1.0)*x1405);
evalcond[0]=((((-1.0)*x1412*x1415))+(((-1.0)*r22*x1414))+((x1405*x1411)));
evalcond[1]=((((-1.0)*r22*x1415))+(((-1.0)*x1411*x1414))+((x1406*x1412)));
evalcond[2]=(cj0+((x1405*x1409))+(((-1.0)*x1410*x1415))+(((-1.0)*r12*x1414)));
evalcond[3]=((((-1.0)*r02*x1414))+(((-1.0)*x1407))+((x1405*x1413))+(((-1.0)*x1408*x1415)));
evalcond[4]=((((-1.0)*x1413*x1414))+(((-1.0)*r02*x1415))+((x1406*x1408))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1407))+((x1406*x1410))+(((-1.0)*r12*x1415))+(((-1.0)*x1409*x1414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1416=IKsin(j0);
IkReal x1417=IKcos(j0);
evalcond[0]=((((-0.10915)*x1416))+(((0.425)*x1417))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x1417))+(((0.425)*x1416))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1418=((1.0)*cj5);
IkReal x1419=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1418)));
j4eval[0]=x1419;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1418)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1419);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1420=cj5*cj5;
IkReal x1421=((1.0)*r21);
IkReal x1422=(cj5*sj5);
IkReal x1423=((1.0)*r20);
IkReal x1424=((((-1.0)*r01*x1420*x1421))+(((-1.0)*r01*x1422*x1423))+((r00*r20*x1420))+((r01*r21))+((r02*r22))+(((-1.0)*r00*x1421*x1422)));
j4eval[0]=x1424;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1423)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1425=cj5*cj5;
IkReal x1426=(r21*sj5);
IkReal x1427=(r11*r21);
IkReal x1428=((1.0)*cj5*r20);
IkReal x1429=((((-1.0)*r11*sj5*x1428))+(((-1.0)*x1425*x1427))+((r12*r22))+(((-1.0)*cj5*r10*x1426))+x1427+((r10*r20*x1425)));
j4eval[0]=x1429;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1428))+((sj0*x1426))))));
j4eval[2]=IKsign(x1429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1430=cj5*cj5;
IkReal x1431=(r21*sj5);
IkReal x1432=(r11*r21);
IkReal x1433=((1.0)*cj5*r20);
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1431))+((r10*r20*x1430))+(((-1.0)*r11*sj5*x1433))+((r12*r22))+(((-1.0)*x1430*x1432))+x1432)),-1);
if(!x1434.valid){
continue;
}
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1433))+((sj0*x1431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1434.value)))+(x1435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1436=IKsin(j4);
IkReal x1437=IKcos(j4);
IkReal x1438=(r11*sj5);
IkReal x1439=(cj5*r00);
IkReal x1440=(cj5*r10);
IkReal x1441=(r21*sj5);
IkReal x1442=(cj5*r20);
IkReal x1443=(r01*sj5);
IkReal x1444=((1.0)*x1437);
IkReal x1445=((1.0)*x1436);
evalcond[0]=((((-1.0)*r22*x1444))+((x1436*x1441))+(((-1.0)*x1442*x1445)));
evalcond[1]=(((x1437*x1442))+(((-1.0)*r22*x1445))+(((-1.0)*x1441*x1444)));
evalcond[2]=(((x1436*x1438))+cj0+(((-1.0)*r12*x1444))+(((-1.0)*x1440*x1445)));
evalcond[3]=(cj0+((x1437*x1439))+(((-1.0)*r02*x1445))+(((-1.0)*x1443*x1444)));
evalcond[4]=(((x1437*x1440))+sj0+(((-1.0)*x1438*x1444))+(((-1.0)*r12*x1445)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1439*x1445))+((x1436*x1443))+(((-1.0)*r02*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1446=cj5*cj5;
IkReal x1447=((1.0)*r21);
IkReal x1448=(cj5*sj5);
IkReal x1449=((1.0)*r20);
CheckValue<IkReal> x1450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1450.valid){
continue;
}
CheckValue<IkReal> x1451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1446*x1447))+((r00*r20*x1446))+((r01*r21))+(((-1.0)*r01*x1448*x1449))+(((-1.0)*r00*x1447*x1448))+((r02*r22)))),-1);
if(!x1451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1450.value)+(((1.5707963267949)*(x1451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1452=IKsin(j4);
IkReal x1453=IKcos(j4);
IkReal x1454=(r11*sj5);
IkReal x1455=(cj5*r00);
IkReal x1456=(cj5*r10);
IkReal x1457=(r21*sj5);
IkReal x1458=(cj5*r20);
IkReal x1459=(r01*sj5);
IkReal x1460=((1.0)*x1453);
IkReal x1461=((1.0)*x1452);
evalcond[0]=((((-1.0)*x1458*x1461))+(((-1.0)*r22*x1460))+((x1452*x1457)));
evalcond[1]=((((-1.0)*r22*x1461))+(((-1.0)*x1457*x1460))+((x1453*x1458)));
evalcond[2]=(cj0+(((-1.0)*x1456*x1461))+(((-1.0)*r12*x1460))+((x1452*x1454)));
evalcond[3]=((((-1.0)*r02*x1461))+cj0+(((-1.0)*x1459*x1460))+((x1453*x1455)));
evalcond[4]=(sj0+(((-1.0)*x1454*x1460))+(((-1.0)*r12*x1461))+((x1453*x1456)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1460))+(((-1.0)*x1455*x1461))+((x1452*x1459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1462=((1.0)*cj5);
CheckValue<IkReal> x1463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1462)))),-1);
if(!x1463.valid){
continue;
}
CheckValue<IkReal> x1464 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1463.value)))+(x1464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1465=IKsin(j4);
IkReal x1466=IKcos(j4);
IkReal x1467=(r11*sj5);
IkReal x1468=(cj5*r00);
IkReal x1469=(cj5*r10);
IkReal x1470=(r21*sj5);
IkReal x1471=(cj5*r20);
IkReal x1472=(r01*sj5);
IkReal x1473=((1.0)*x1466);
IkReal x1474=((1.0)*x1465);
evalcond[0]=((((-1.0)*r22*x1473))+(((-1.0)*x1471*x1474))+((x1465*x1470)));
evalcond[1]=((((-1.0)*r22*x1474))+((x1466*x1471))+(((-1.0)*x1470*x1473)));
evalcond[2]=(cj0+((x1465*x1467))+(((-1.0)*r12*x1473))+(((-1.0)*x1469*x1474)));
evalcond[3]=(cj0+((x1466*x1468))+(((-1.0)*r02*x1474))+(((-1.0)*x1472*x1473)));
evalcond[4]=(sj0+(((-1.0)*r12*x1474))+((x1466*x1469))+(((-1.0)*x1467*x1473)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1468*x1474))+((x1465*x1472))+(((-1.0)*r02*x1473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1475=((1.0)*cj5);
IkReal x1476=((((-1.0)*r01*x1475))+(((-1.0)*r00*sj5)));
j4eval[0]=x1476;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1475))))));
j4eval[2]=IKsign(x1476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1477=((1.0)*cj5);
IkReal x1478=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1477)));
j4eval[0]=x1478;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1477))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1479=cj5*cj5;
IkReal x1480=((1.0)*sj5);
IkReal x1481=(cj5*r20);
IkReal x1482=(r11*r21);
IkReal x1483=((((-1.0)*r11*x1480*x1481))+(((-1.0)*x1479*x1482))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1480))+x1482+((r10*r20*x1479)));
j4eval[0]=x1483;
j4eval[1]=IKsign(x1483);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1480))+((cj0*x1481)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1484=cj5*cj5;
IkReal x1485=((1.0)*sj5);
IkReal x1486=(cj5*r20);
IkReal x1487=(r11*r21);
CheckValue<IkReal> x1488 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1485))+((cj0*x1486)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1488.valid){
continue;
}
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1484*x1487))+(((-1.0)*r11*x1485*x1486))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1485))+x1487+((r10*r20*x1484)))),-1);
if(!x1489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1488.value)+(((1.5707963267949)*(x1489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1490=IKsin(j4);
IkReal x1491=IKcos(j4);
IkReal x1492=((1.0)*sj0);
IkReal x1493=(cj5*r00);
IkReal x1494=(r11*sj5);
IkReal x1495=(cj5*r10);
IkReal x1496=(r21*sj5);
IkReal x1497=(cj5*r20);
IkReal x1498=(r01*sj5);
IkReal x1499=((1.0)*x1491);
IkReal x1500=((1.0)*x1490);
evalcond[0]=((((-1.0)*x1497*x1500))+(((-1.0)*r22*x1499))+((x1490*x1496)));
evalcond[1]=((((-1.0)*r22*x1500))+(((-1.0)*x1496*x1499))+((x1491*x1497)));
evalcond[2]=((((-1.0)*r12*x1499))+cj0+(((-1.0)*x1495*x1500))+((x1490*x1494)));
evalcond[3]=((((-1.0)*x1492))+(((-1.0)*r02*x1499))+(((-1.0)*x1493*x1500))+((x1490*x1498)));
evalcond[4]=(((x1491*x1493))+(((-1.0)*r02*x1500))+(((-1.0)*x1498*x1499))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1494*x1499))+(((-1.0)*x1492))+((x1491*x1495))+(((-1.0)*r12*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1501=((1.0)*cj5);
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1501)))),-1);
if(!x1503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1502.value)+(((1.5707963267949)*(x1503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1504=IKsin(j4);
IkReal x1505=IKcos(j4);
IkReal x1506=((1.0)*sj0);
IkReal x1507=(cj5*r00);
IkReal x1508=(r11*sj5);
IkReal x1509=(cj5*r10);
IkReal x1510=(r21*sj5);
IkReal x1511=(cj5*r20);
IkReal x1512=(r01*sj5);
IkReal x1513=((1.0)*x1505);
IkReal x1514=((1.0)*x1504);
evalcond[0]=((((-1.0)*r22*x1513))+((x1504*x1510))+(((-1.0)*x1511*x1514)));
evalcond[1]=((((-1.0)*r22*x1514))+(((-1.0)*x1510*x1513))+((x1505*x1511)));
evalcond[2]=(cj0+((x1504*x1508))+(((-1.0)*x1509*x1514))+(((-1.0)*r12*x1513)));
evalcond[3]=((((-1.0)*x1506))+((x1504*x1512))+(((-1.0)*x1507*x1514))+(((-1.0)*r02*x1513)));
evalcond[4]=((((-1.0)*r02*x1514))+(((-1.0)*x1512*x1513))+((x1505*x1507))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1506))+((x1505*x1509))+(((-1.0)*x1508*x1513))+(((-1.0)*r12*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1515=((1.0)*cj5);
CheckValue<IkReal> x1516=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1515))+(((-1.0)*r00*sj5)))),-1);
if(!x1516.valid){
continue;
}
CheckValue<IkReal> x1517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1515))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1516.value)))+(x1517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1518=IKsin(j4);
IkReal x1519=IKcos(j4);
IkReal x1520=((1.0)*sj0);
IkReal x1521=(cj5*r00);
IkReal x1522=(r11*sj5);
IkReal x1523=(cj5*r10);
IkReal x1524=(r21*sj5);
IkReal x1525=(cj5*r20);
IkReal x1526=(r01*sj5);
IkReal x1527=((1.0)*x1519);
IkReal x1528=((1.0)*x1518);
evalcond[0]=((((-1.0)*x1525*x1528))+((x1518*x1524))+(((-1.0)*r22*x1527)));
evalcond[1]=((((-1.0)*x1524*x1527))+((x1519*x1525))+(((-1.0)*r22*x1528)));
evalcond[2]=((((-1.0)*r12*x1527))+cj0+((x1518*x1522))+(((-1.0)*x1523*x1528)));
evalcond[3]=(((x1518*x1526))+(((-1.0)*x1520))+(((-1.0)*r02*x1527))+(((-1.0)*x1521*x1528)));
evalcond[4]=(((x1519*x1521))+(((-1.0)*r02*x1528))+(((-1.0)*x1526*x1527))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1528))+((x1519*x1523))+(((-1.0)*x1520))+(((-1.0)*x1522*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1529=((1.0)*cj5);
IkReal x1530=((((-1.0)*r01*x1529))+(((-1.0)*r00*sj5)));
j4eval[0]=x1530;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1529))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1530);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1531=cj5*cj5;
IkReal x1532=((1.0)*r21);
IkReal x1533=(cj5*sj5);
IkReal x1534=((1.0)*r20);
IkReal x1535=((((-1.0)*r01*x1533*x1534))+(((-1.0)*r01*x1531*x1532))+((r01*r21))+((r02*r22))+(((-1.0)*r00*x1532*x1533))+((r00*r20*x1531)));
j4eval[0]=x1535;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1534))))));
j4eval[2]=IKsign(x1535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1536=cj5*cj5;
IkReal x1537=(r21*sj5);
IkReal x1538=(r11*r21);
IkReal x1539=((1.0)*cj5*r20);
IkReal x1540=(((r12*r22))+x1538+(((-1.0)*cj5*r10*x1537))+(((-1.0)*r11*sj5*x1539))+((r10*r20*x1536))+(((-1.0)*x1536*x1538)));
j4eval[0]=x1540;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1539))+((sj0*x1537))))));
j4eval[2]=IKsign(x1540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1541=cj5*cj5;
IkReal x1542=(r21*sj5);
IkReal x1543=(r11*r21);
IkReal x1544=((1.0)*cj5*r20);
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1542))+(((-1.0)*sj0*x1544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1541*x1543))+(((-1.0)*cj5*r10*x1542))+(((-1.0)*r11*sj5*x1544))+((r12*r22))+x1543+((r10*r20*x1541)))),-1);
if(!x1546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1545.value)+(((1.5707963267949)*(x1546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1547=IKsin(j4);
IkReal x1548=IKcos(j4);
IkReal x1549=(r11*sj5);
IkReal x1550=(cj5*r00);
IkReal x1551=(cj5*r10);
IkReal x1552=(r21*sj5);
IkReal x1553=(cj5*r20);
IkReal x1554=(r01*sj5);
IkReal x1555=((1.0)*x1548);
IkReal x1556=((1.0)*x1547);
evalcond[0]=(((x1547*x1552))+(((-1.0)*r22*x1555))+(((-1.0)*x1553*x1556)));
evalcond[1]=((((-1.0)*r22*x1556))+(((-1.0)*x1552*x1555))+((x1548*x1553)));
evalcond[2]=(cj0+((x1547*x1549))+(((-1.0)*r12*x1555))+(((-1.0)*x1551*x1556)));
evalcond[3]=(cj0+(((-1.0)*r02*x1556))+((x1548*x1550))+(((-1.0)*x1554*x1555)));
evalcond[4]=(sj0+(((-1.0)*x1549*x1555))+(((-1.0)*r12*x1556))+((x1548*x1551)));
evalcond[5]=((((-1.0)*sj0))+((x1547*x1554))+(((-1.0)*r02*x1555))+(((-1.0)*x1550*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1557=cj5*cj5;
IkReal x1558=((1.0)*r21);
IkReal x1559=(cj5*sj5);
IkReal x1560=((1.0)*r20);
CheckValue<IkReal> x1561 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1561.valid){
continue;
}
CheckValue<IkReal> x1562=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1557))+(((-1.0)*r01*x1559*x1560))+(((-1.0)*r00*x1558*x1559))+(((-1.0)*r01*x1557*x1558))+((r02*r22)))),-1);
if(!x1562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1561.value)+(((1.5707963267949)*(x1562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1563=IKsin(j4);
IkReal x1564=IKcos(j4);
IkReal x1565=(r11*sj5);
IkReal x1566=(cj5*r00);
IkReal x1567=(cj5*r10);
IkReal x1568=(r21*sj5);
IkReal x1569=(cj5*r20);
IkReal x1570=(r01*sj5);
IkReal x1571=((1.0)*x1564);
IkReal x1572=((1.0)*x1563);
evalcond[0]=((((-1.0)*r22*x1571))+(((-1.0)*x1569*x1572))+((x1563*x1568)));
evalcond[1]=((((-1.0)*r22*x1572))+(((-1.0)*x1568*x1571))+((x1564*x1569)));
evalcond[2]=(cj0+(((-1.0)*x1567*x1572))+(((-1.0)*r12*x1571))+((x1563*x1565)));
evalcond[3]=((((-1.0)*r02*x1572))+cj0+(((-1.0)*x1570*x1571))+((x1564*x1566)));
evalcond[4]=((((-1.0)*x1565*x1571))+sj0+(((-1.0)*r12*x1572))+((x1564*x1567)));
evalcond[5]=((((-1.0)*r02*x1571))+(((-1.0)*sj0))+(((-1.0)*x1566*x1572))+((x1563*x1570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1573=((1.0)*cj5);
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1573)))),-1);
if(!x1575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1574.value)+(((1.5707963267949)*(x1575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1576=IKsin(j4);
IkReal x1577=IKcos(j4);
IkReal x1578=(r11*sj5);
IkReal x1579=(cj5*r00);
IkReal x1580=(cj5*r10);
IkReal x1581=(r21*sj5);
IkReal x1582=(cj5*r20);
IkReal x1583=(r01*sj5);
IkReal x1584=((1.0)*x1577);
IkReal x1585=((1.0)*x1576);
evalcond[0]=(((x1576*x1581))+(((-1.0)*r22*x1584))+(((-1.0)*x1582*x1585)));
evalcond[1]=((((-1.0)*r22*x1585))+((x1577*x1582))+(((-1.0)*x1581*x1584)));
evalcond[2]=(((x1576*x1578))+(((-1.0)*x1580*x1585))+cj0+(((-1.0)*r12*x1584)));
evalcond[3]=(cj0+(((-1.0)*r02*x1585))+((x1577*x1579))+(((-1.0)*x1583*x1584)));
evalcond[4]=((((-1.0)*x1578*x1584))+sj0+((x1577*x1580))+(((-1.0)*r12*x1585)));
evalcond[5]=((((-1.0)*sj0))+((x1576*x1583))+(((-1.0)*r02*x1584))+(((-1.0)*x1579*x1585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1586=IKcos(j0);
IkReal x1587=IKsin(j0);
evalcond[0]=((((-0.425)*x1586))+(((-1.0)*px))+(((-0.10915)*x1587)));
evalcond[1]=((((-0.425)*x1587))+(((-1.0)*py))+(((0.10915)*x1586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1588=((1.0)*cj5);
IkReal x1589=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1588)));
j4eval[0]=x1589;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1588))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1590=cj5*cj5;
IkReal x1591=((1.0)*r21);
IkReal x1592=(cj5*sj5);
IkReal x1593=((1.0)*r20);
IkReal x1594=(((r01*r21))+(((-1.0)*r01*x1590*x1591))+(((-1.0)*r01*x1592*x1593))+((r00*r20*x1590))+((r02*r22))+(((-1.0)*r00*x1591*x1592)));
j4eval[0]=x1594;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1593)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1594);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1595=cj5*cj5;
IkReal x1596=(r21*sj5);
IkReal x1597=(r11*r21);
IkReal x1598=((1.0)*cj5*r20);
IkReal x1599=(((r10*r20*x1595))+((r12*r22))+x1597+(((-1.0)*r11*sj5*x1598))+(((-1.0)*x1595*x1597))+(((-1.0)*cj5*r10*x1596)));
j4eval[0]=x1599;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1598))+((sj0*x1596))))));
j4eval[2]=IKsign(x1599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1600=cj5*cj5;
IkReal x1601=(r21*sj5);
IkReal x1602=(r11*r21);
IkReal x1603=((1.0)*cj5*r20);
CheckValue<IkReal> x1604 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1603))+((sj0*x1601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1604.valid){
continue;
}
CheckValue<IkReal> x1605=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1600*x1602))+(((-1.0)*cj5*r10*x1601))+((r10*r20*x1600))+x1602+(((-1.0)*r11*sj5*x1603))+((r12*r22)))),-1);
if(!x1605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1604.value)+(((1.5707963267949)*(x1605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1606=IKsin(j4);
IkReal x1607=IKcos(j4);
IkReal x1608=(r11*sj5);
IkReal x1609=(cj5*r00);
IkReal x1610=(cj5*r10);
IkReal x1611=(r21*sj5);
IkReal x1612=(cj5*r20);
IkReal x1613=(r01*sj5);
IkReal x1614=((1.0)*x1607);
IkReal x1615=((1.0)*x1606);
evalcond[0]=((((-1.0)*r22*x1614))+((x1606*x1611))+(((-1.0)*x1612*x1615)));
evalcond[1]=((((-1.0)*x1611*x1614))+(((-1.0)*r22*x1615))+((x1607*x1612)));
evalcond[2]=((((-1.0)*r12*x1614))+cj0+(((-1.0)*x1610*x1615))+((x1606*x1608)));
evalcond[3]=(cj0+(((-1.0)*r02*x1615))+((x1607*x1609))+(((-1.0)*x1613*x1614)));
evalcond[4]=((((-1.0)*r12*x1615))+sj0+((x1607*x1610))+(((-1.0)*x1608*x1614)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1614))+(((-1.0)*x1609*x1615))+((x1606*x1613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1616=cj5*cj5;
IkReal x1617=((1.0)*r21);
IkReal x1618=(cj5*sj5);
IkReal x1619=((1.0)*r20);
CheckValue<IkReal> x1620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1620.valid){
continue;
}
CheckValue<IkReal> x1621=IKPowWithIntegerCheck(IKsign((((r00*r20*x1616))+(((-1.0)*r01*x1616*x1617))+((r01*r21))+(((-1.0)*r00*x1617*x1618))+(((-1.0)*r01*x1618*x1619))+((r02*r22)))),-1);
if(!x1621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1620.value)+(((1.5707963267949)*(x1621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1622=IKsin(j4);
IkReal x1623=IKcos(j4);
IkReal x1624=(r11*sj5);
IkReal x1625=(cj5*r00);
IkReal x1626=(cj5*r10);
IkReal x1627=(r21*sj5);
IkReal x1628=(cj5*r20);
IkReal x1629=(r01*sj5);
IkReal x1630=((1.0)*x1623);
IkReal x1631=((1.0)*x1622);
evalcond[0]=((((-1.0)*r22*x1630))+((x1622*x1627))+(((-1.0)*x1628*x1631)));
evalcond[1]=((((-1.0)*r22*x1631))+((x1623*x1628))+(((-1.0)*x1627*x1630)));
evalcond[2]=(cj0+(((-1.0)*r12*x1630))+((x1622*x1624))+(((-1.0)*x1626*x1631)));
evalcond[3]=(cj0+((x1623*x1625))+(((-1.0)*x1629*x1630))+(((-1.0)*r02*x1631)));
evalcond[4]=(sj0+(((-1.0)*r12*x1631))+((x1623*x1626))+(((-1.0)*x1624*x1630)));
evalcond[5]=((((-1.0)*sj0))+((x1622*x1629))+(((-1.0)*x1625*x1631))+(((-1.0)*r02*x1630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1632=((1.0)*cj5);
CheckValue<IkReal> x1633 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1633.valid){
continue;
}
CheckValue<IkReal> x1634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1632))+(((-1.0)*r00*sj5)))),-1);
if(!x1634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1633.value)+(((1.5707963267949)*(x1634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1635=IKsin(j4);
IkReal x1636=IKcos(j4);
IkReal x1637=(r11*sj5);
IkReal x1638=(cj5*r00);
IkReal x1639=(cj5*r10);
IkReal x1640=(r21*sj5);
IkReal x1641=(cj5*r20);
IkReal x1642=(r01*sj5);
IkReal x1643=((1.0)*x1636);
IkReal x1644=((1.0)*x1635);
evalcond[0]=((((-1.0)*x1641*x1644))+(((-1.0)*r22*x1643))+((x1635*x1640)));
evalcond[1]=(((x1636*x1641))+(((-1.0)*r22*x1644))+(((-1.0)*x1640*x1643)));
evalcond[2]=(cj0+(((-1.0)*r12*x1643))+(((-1.0)*x1639*x1644))+((x1635*x1637)));
evalcond[3]=(((x1636*x1638))+cj0+(((-1.0)*x1642*x1643))+(((-1.0)*r02*x1644)));
evalcond[4]=(sj0+((x1636*x1639))+(((-1.0)*r12*x1644))+(((-1.0)*x1637*x1643)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1638*x1644))+((x1635*x1642))+(((-1.0)*r02*x1643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1645=IKcos(j0);
IkReal x1646=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x1645))+(((-0.10915)*x1646)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x1645))+(((-0.425)*x1646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1647=((1.0)*cj5);
IkReal x1648=((((-1.0)*r01*x1647))+(((-1.0)*r00*sj5)));
j4eval[0]=x1648;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1647)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1649=((1.0)*cj5);
IkReal x1650=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1649)));
j4eval[0]=x1650;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1649))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1650);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1651=cj5*cj5;
IkReal x1652=((1.0)*sj5);
IkReal x1653=(cj5*r20);
IkReal x1654=(r11*r21);
IkReal x1655=((((-1.0)*x1651*x1654))+(((-1.0)*cj5*r10*r21*x1652))+x1654+((r12*r22))+(((-1.0)*r11*x1652*x1653))+((r10*r20*x1651)));
j4eval[0]=x1655;
j4eval[1]=IKsign(x1655);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1652))+((cj0*x1653))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1656=cj5*cj5;
IkReal x1657=((1.0)*sj5);
IkReal x1658=(cj5*r20);
IkReal x1659=(r11*r21);
CheckValue<IkReal> x1660 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1657))+((cj0*x1658)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1660.valid){
continue;
}
CheckValue<IkReal> x1661=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1657))+x1659+((r12*r22))+(((-1.0)*r11*x1657*x1658))+(((-1.0)*x1656*x1659))+((r10*r20*x1656)))),-1);
if(!x1661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1660.value)+(((1.5707963267949)*(x1661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1662=IKsin(j4);
IkReal x1663=IKcos(j4);
IkReal x1664=((1.0)*sj0);
IkReal x1665=(cj5*r00);
IkReal x1666=(r11*sj5);
IkReal x1667=(cj5*r10);
IkReal x1668=(r21*sj5);
IkReal x1669=(cj5*r20);
IkReal x1670=(r01*sj5);
IkReal x1671=((1.0)*x1663);
IkReal x1672=((1.0)*x1662);
evalcond[0]=((((-1.0)*x1669*x1672))+((x1662*x1668))+(((-1.0)*r22*x1671)));
evalcond[1]=((((-1.0)*x1668*x1671))+((x1663*x1669))+(((-1.0)*r22*x1672)));
evalcond[2]=((((-1.0)*x1667*x1672))+cj0+((x1662*x1666))+(((-1.0)*r12*x1671)));
evalcond[3]=((((-1.0)*r02*x1671))+((x1662*x1670))+(((-1.0)*x1664))+(((-1.0)*x1665*x1672)));
evalcond[4]=((((-1.0)*r02*x1672))+(((-1.0)*x1670*x1671))+(((-1.0)*cj0))+((x1663*x1665)));
evalcond[5]=((((-1.0)*r12*x1672))+(((-1.0)*x1664))+(((-1.0)*x1666*x1671))+((x1663*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1673=((1.0)*cj5);
CheckValue<IkReal> x1674=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1673)))),-1);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1673))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1674.value)))+(x1675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1676=IKsin(j4);
IkReal x1677=IKcos(j4);
IkReal x1678=((1.0)*sj0);
IkReal x1679=(cj5*r00);
IkReal x1680=(r11*sj5);
IkReal x1681=(cj5*r10);
IkReal x1682=(r21*sj5);
IkReal x1683=(cj5*r20);
IkReal x1684=(r01*sj5);
IkReal x1685=((1.0)*x1677);
IkReal x1686=((1.0)*x1676);
evalcond[0]=((((-1.0)*x1683*x1686))+((x1676*x1682))+(((-1.0)*r22*x1685)));
evalcond[1]=(((x1677*x1683))+(((-1.0)*x1682*x1685))+(((-1.0)*r22*x1686)));
evalcond[2]=((((-1.0)*r12*x1685))+(((-1.0)*x1681*x1686))+cj0+((x1676*x1680)));
evalcond[3]=(((x1676*x1684))+(((-1.0)*x1679*x1686))+(((-1.0)*r02*x1685))+(((-1.0)*x1678)));
evalcond[4]=((((-1.0)*r02*x1686))+(((-1.0)*cj0))+((x1677*x1679))+(((-1.0)*x1684*x1685)));
evalcond[5]=((((-1.0)*r12*x1686))+((x1677*x1681))+(((-1.0)*x1680*x1685))+(((-1.0)*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1687=((1.0)*cj5);
CheckValue<IkReal> x1688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1688.valid){
continue;
}
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1687))+(((-1.0)*r00*sj5)))),-1);
if(!x1689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1688.value)+(((1.5707963267949)*(x1689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1690=IKsin(j4);
IkReal x1691=IKcos(j4);
IkReal x1692=((1.0)*sj0);
IkReal x1693=(cj5*r00);
IkReal x1694=(r11*sj5);
IkReal x1695=(cj5*r10);
IkReal x1696=(r21*sj5);
IkReal x1697=(cj5*r20);
IkReal x1698=(r01*sj5);
IkReal x1699=((1.0)*x1691);
IkReal x1700=((1.0)*x1690);
evalcond[0]=(((x1690*x1696))+(((-1.0)*r22*x1699))+(((-1.0)*x1697*x1700)));
evalcond[1]=((((-1.0)*x1696*x1699))+((x1691*x1697))+(((-1.0)*r22*x1700)));
evalcond[2]=(((x1690*x1694))+cj0+(((-1.0)*r12*x1699))+(((-1.0)*x1695*x1700)));
evalcond[3]=(((x1690*x1698))+(((-1.0)*x1692))+(((-1.0)*r02*x1699))+(((-1.0)*x1693*x1700)));
evalcond[4]=((((-1.0)*x1698*x1699))+((x1691*x1693))+(((-1.0)*r02*x1700))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1692))+(((-1.0)*x1694*x1699))+((x1691*x1695))+(((-1.0)*r12*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1701=((1.0)*cj5);
IkReal x1702=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1701)));
j4eval[0]=x1702;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1701))))));
j4eval[2]=IKsign(x1702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1703=cj5*cj5;
IkReal x1704=((1.0)*r21);
IkReal x1705=(cj5*sj5);
IkReal x1706=((1.0)*r20);
IkReal x1707=((((-1.0)*r01*x1703*x1704))+(((-1.0)*r01*x1705*x1706))+((r01*r21))+((r00*r20*x1703))+(((-1.0)*r00*x1704*x1705))+((r02*r22)));
j4eval[0]=x1707;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1706)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1708=cj5*cj5;
IkReal x1709=(r21*sj5);
IkReal x1710=(r11*r21);
IkReal x1711=((1.0)*cj5*r20);
IkReal x1712=((((-1.0)*x1708*x1710))+x1710+(((-1.0)*r11*sj5*x1711))+((r12*r22))+((r10*r20*x1708))+(((-1.0)*cj5*r10*x1709)));
j4eval[0]=x1712;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1711))+((sj0*x1709))))));
j4eval[2]=IKsign(x1712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1713=cj5*cj5;
IkReal x1714=(r21*sj5);
IkReal x1715=(r11*r21);
IkReal x1716=((1.0)*cj5*r20);
CheckValue<IkReal> x1717 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1716))+((sj0*x1714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1717.valid){
continue;
}
CheckValue<IkReal> x1718=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1713*x1715))+x1715+(((-1.0)*r11*sj5*x1716))+((r10*r20*x1713))+((r12*r22))+(((-1.0)*cj5*r10*x1714)))),-1);
if(!x1718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1717.value)+(((1.5707963267949)*(x1718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1719=IKsin(j4);
IkReal x1720=IKcos(j4);
IkReal x1721=(r11*sj5);
IkReal x1722=(cj5*r00);
IkReal x1723=(cj5*r10);
IkReal x1724=(r21*sj5);
IkReal x1725=(cj5*r20);
IkReal x1726=(r01*sj5);
IkReal x1727=((1.0)*x1720);
IkReal x1728=((1.0)*x1719);
evalcond[0]=((((-1.0)*r22*x1727))+(((-1.0)*x1725*x1728))+((x1719*x1724)));
evalcond[1]=((((-1.0)*r22*x1728))+((x1720*x1725))+(((-1.0)*x1724*x1727)));
evalcond[2]=(cj0+(((-1.0)*r12*x1727))+(((-1.0)*x1723*x1728))+((x1719*x1721)));
evalcond[3]=(cj0+(((-1.0)*x1726*x1727))+((x1720*x1722))+(((-1.0)*r02*x1728)));
evalcond[4]=(sj0+(((-1.0)*r12*x1728))+((x1720*x1723))+(((-1.0)*x1721*x1727)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1722*x1728))+((x1719*x1726))+(((-1.0)*r02*x1727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1729=cj5*cj5;
IkReal x1730=((1.0)*r21);
IkReal x1731=(cj5*sj5);
IkReal x1732=((1.0)*r20);
CheckValue<IkReal> x1733=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1729*x1730))+((r01*r21))+(((-1.0)*r01*x1731*x1732))+((r02*r22))+((r00*r20*x1729))+(((-1.0)*r00*x1730*x1731)))),-1);
if(!x1733.valid){
continue;
}
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1733.value)))+(x1734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1735=IKsin(j4);
IkReal x1736=IKcos(j4);
IkReal x1737=(r11*sj5);
IkReal x1738=(cj5*r00);
IkReal x1739=(cj5*r10);
IkReal x1740=(r21*sj5);
IkReal x1741=(cj5*r20);
IkReal x1742=(r01*sj5);
IkReal x1743=((1.0)*x1736);
IkReal x1744=((1.0)*x1735);
evalcond[0]=((((-1.0)*x1741*x1744))+(((-1.0)*r22*x1743))+((x1735*x1740)));
evalcond[1]=(((x1736*x1741))+(((-1.0)*x1740*x1743))+(((-1.0)*r22*x1744)));
evalcond[2]=((((-1.0)*r12*x1743))+cj0+(((-1.0)*x1739*x1744))+((x1735*x1737)));
evalcond[3]=(cj0+((x1736*x1738))+(((-1.0)*x1742*x1743))+(((-1.0)*r02*x1744)));
evalcond[4]=((((-1.0)*r12*x1744))+sj0+((x1736*x1739))+(((-1.0)*x1737*x1743)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1738*x1744))+((x1735*x1742))+(((-1.0)*r02*x1743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1745=((1.0)*cj5);
CheckValue<IkReal> x1746=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1745)))),-1);
if(!x1746.valid){
continue;
}
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1746.value)))+(x1747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1748=IKsin(j4);
IkReal x1749=IKcos(j4);
IkReal x1750=(r11*sj5);
IkReal x1751=(cj5*r00);
IkReal x1752=(cj5*r10);
IkReal x1753=(r21*sj5);
IkReal x1754=(cj5*r20);
IkReal x1755=(r01*sj5);
IkReal x1756=((1.0)*x1749);
IkReal x1757=((1.0)*x1748);
evalcond[0]=((((-1.0)*r22*x1756))+((x1748*x1753))+(((-1.0)*x1754*x1757)));
evalcond[1]=(((x1749*x1754))+(((-1.0)*r22*x1757))+(((-1.0)*x1753*x1756)));
evalcond[2]=((((-1.0)*r12*x1756))+cj0+((x1748*x1750))+(((-1.0)*x1752*x1757)));
evalcond[3]=(((x1749*x1751))+cj0+(((-1.0)*r02*x1757))+(((-1.0)*x1755*x1756)));
evalcond[4]=(sj0+(((-1.0)*r12*x1757))+((x1749*x1752))+(((-1.0)*x1750*x1756)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1751*x1757))+((x1748*x1755))+(((-1.0)*r02*x1756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1758=((1.0)*cj5);
IkReal x1759=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1758)));
j4eval[0]=x1759;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1758)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1760=((1.0)*cj5);
IkReal x1761=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1760)));
j4eval[0]=x1761;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1760))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1762=cj5*cj5;
IkReal x1763=((1.0)*sj5);
IkReal x1764=(cj5*r20);
IkReal x1765=(r11*r21);
IkReal x1766=(x1765+(((-1.0)*r11*x1763*x1764))+(((-1.0)*x1762*x1765))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1763))+((r10*r20*x1762)));
j4eval[0]=x1766;
j4eval[1]=IKsign(x1766);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1763))+((cj0*x1764)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1767=cj5*cj5;
IkReal x1768=((1.0)*sj5);
IkReal x1769=(cj5*r20);
IkReal x1770=(r11*r21);
CheckValue<IkReal> x1771 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1768))+((cj0*x1769)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1771.valid){
continue;
}
CheckValue<IkReal> x1772=IKPowWithIntegerCheck(IKsign((x1770+(((-1.0)*x1767*x1770))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1768))+((r10*r20*x1767))+(((-1.0)*r11*x1768*x1769)))),-1);
if(!x1772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1771.value)+(((1.5707963267949)*(x1772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1773=IKsin(j4);
IkReal x1774=IKcos(j4);
IkReal x1775=((1.0)*sj0);
IkReal x1776=(cj5*r00);
IkReal x1777=(r11*sj5);
IkReal x1778=(cj5*r10);
IkReal x1779=(r21*sj5);
IkReal x1780=(cj5*r20);
IkReal x1781=(r01*sj5);
IkReal x1782=((1.0)*x1774);
IkReal x1783=((1.0)*x1773);
evalcond[0]=((((-1.0)*r22*x1782))+((x1773*x1779))+(((-1.0)*x1780*x1783)));
evalcond[1]=((((-1.0)*r22*x1783))+((x1774*x1780))+(((-1.0)*x1779*x1782)));
evalcond[2]=(cj0+(((-1.0)*r12*x1782))+((x1773*x1777))+(((-1.0)*x1778*x1783)));
evalcond[3]=((((-1.0)*x1775))+(((-1.0)*x1776*x1783))+((x1773*x1781))+(((-1.0)*r02*x1782)));
evalcond[4]=(((x1774*x1776))+(((-1.0)*x1781*x1782))+(((-1.0)*r02*x1783))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1783))+(((-1.0)*x1777*x1782))+(((-1.0)*x1775))+((x1774*x1778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1784=((1.0)*cj5);
CheckValue<IkReal> x1785 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1785.valid){
continue;
}
CheckValue<IkReal> x1786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1784)))),-1);
if(!x1786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1785.value)+(((1.5707963267949)*(x1786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1787=IKsin(j4);
IkReal x1788=IKcos(j4);
IkReal x1789=((1.0)*sj0);
IkReal x1790=(cj5*r00);
IkReal x1791=(r11*sj5);
IkReal x1792=(cj5*r10);
IkReal x1793=(r21*sj5);
IkReal x1794=(cj5*r20);
IkReal x1795=(r01*sj5);
IkReal x1796=((1.0)*x1788);
IkReal x1797=((1.0)*x1787);
evalcond[0]=((((-1.0)*r22*x1796))+((x1787*x1793))+(((-1.0)*x1794*x1797)));
evalcond[1]=((((-1.0)*r22*x1797))+(((-1.0)*x1793*x1796))+((x1788*x1794)));
evalcond[2]=((((-1.0)*x1792*x1797))+cj0+(((-1.0)*r12*x1796))+((x1787*x1791)));
evalcond[3]=((((-1.0)*x1789))+(((-1.0)*x1790*x1797))+((x1787*x1795))+(((-1.0)*r02*x1796)));
evalcond[4]=((((-1.0)*x1795*x1796))+(((-1.0)*r02*x1797))+((x1788*x1790))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1789))+(((-1.0)*r12*x1797))+((x1788*x1792))+(((-1.0)*x1791*x1796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1798=((1.0)*cj5);
CheckValue<IkReal> x1799 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1798))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1799.valid){
continue;
}
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1798))+(((-1.0)*r00*sj5)))),-1);
if(!x1800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1799.value)+(((1.5707963267949)*(x1800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1801=IKsin(j4);
IkReal x1802=IKcos(j4);
IkReal x1803=((1.0)*sj0);
IkReal x1804=(cj5*r00);
IkReal x1805=(r11*sj5);
IkReal x1806=(cj5*r10);
IkReal x1807=(r21*sj5);
IkReal x1808=(cj5*r20);
IkReal x1809=(r01*sj5);
IkReal x1810=((1.0)*x1802);
IkReal x1811=((1.0)*x1801);
evalcond[0]=(((x1801*x1807))+(((-1.0)*x1808*x1811))+(((-1.0)*r22*x1810)));
evalcond[1]=(((x1802*x1808))+(((-1.0)*x1807*x1810))+(((-1.0)*r22*x1811)));
evalcond[2]=(((x1801*x1805))+cj0+(((-1.0)*r12*x1810))+(((-1.0)*x1806*x1811)));
evalcond[3]=(((x1801*x1809))+(((-1.0)*x1804*x1811))+(((-1.0)*r02*x1810))+(((-1.0)*x1803)));
evalcond[4]=(((x1802*x1804))+(((-1.0)*x1809*x1810))+(((-1.0)*r02*x1811))+(((-1.0)*cj0)));
evalcond[5]=(((x1802*x1806))+(((-1.0)*x1805*x1810))+(((-1.0)*x1803))+(((-1.0)*r12*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1812=(sj1*sj2);
IkReal x1813=(cj5*r01);
IkReal x1814=(cj1*cj2);
IkReal x1815=(r00*sj5);
IkReal x1816=((20000.0)*px);
IkReal x1817=((8500.0)*cj1);
CheckValue<IkReal> x1818=IKPowWithIntegerCheck(((((2183.0)*x1812))+(((-2183.0)*x1814))),-1);
if(!x1818.valid){
continue;
}
CheckValue<IkReal> x1819=IKPowWithIntegerCheck((x1812+(((-1.0)*x1814))),-1);
if(!x1819.valid){
continue;
}
if( IKabs(((x1818.value)*(((((-1.0)*x1813*x1817))+(((-1.0)*x1812*x1816))+(((-5952.0)*x1814*x1815))+(((5952.0)*x1812*x1815))+(((5952.0)*x1812*x1813))+((x1814*x1816))+(((-1.0)*x1815*x1817))+(((-5952.0)*x1813*x1814)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1819.value)*(((((-1.0)*x1815))+(((-1.0)*x1813)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1818.value)*(((((-1.0)*x1813*x1817))+(((-1.0)*x1812*x1816))+(((-5952.0)*x1814*x1815))+(((5952.0)*x1812*x1815))+(((5952.0)*x1812*x1813))+((x1814*x1816))+(((-1.0)*x1815*x1817))+(((-5952.0)*x1813*x1814))))))+IKsqr(((x1819.value)*(((((-1.0)*x1815))+(((-1.0)*x1813))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1818.value)*(((((-1.0)*x1813*x1817))+(((-1.0)*x1812*x1816))+(((-5952.0)*x1814*x1815))+(((5952.0)*x1812*x1815))+(((5952.0)*x1812*x1813))+((x1814*x1816))+(((-1.0)*x1815*x1817))+(((-5952.0)*x1813*x1814))))), ((x1819.value)*(((((-1.0)*x1815))+(((-1.0)*x1813))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1820=IKcos(j0);
IkReal x1821=IKsin(j0);
IkReal x1822=(cj5*r01);
IkReal x1823=(cj5*r11);
IkReal x1824=(r00*sj5);
IkReal x1825=(sj1*sj2);
IkReal x1826=((0.39225)*cj2);
IkReal x1827=((1.0)*cj2);
IkReal x1828=(r10*sj5);
IkReal x1829=((0.39225)*x1825);
IkReal x1830=(cj1*x1820);
IkReal x1831=(cj1*x1821);
evalcond[0]=((((-1.0)*x1827*x1830))+x1824+x1822+((x1820*x1825)));
evalcond[1]=(((x1821*x1825))+(((-1.0)*x1827*x1831))+x1828+x1823);
evalcond[2]=((((-0.09465)*x1824))+(((-0.09465)*x1822))+((x1826*x1830))+(((-1.0)*px))+(((-0.10915)*x1821))+(((-1.0)*x1820*x1829))+(((0.425)*x1830)));
evalcond[3]=((((-0.09465)*x1828))+(((-0.09465)*x1823))+(((-1.0)*x1821*x1829))+(((0.10915)*x1820))+((x1826*x1831))+(((-1.0)*py))+(((0.425)*x1831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1832=((1.0)*cj5);
IkReal x1833=((((-1.0)*r01*x1832))+(((-1.0)*r00*sj5)));
j4eval[0]=x1833;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1832)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1834=((1.0)*cj5);
IkReal x1835=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1834)));
j4eval[0]=x1835;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1834))))));
j4eval[2]=IKsign(x1835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1836=((1.0)*sj0);
IkReal x1837=((1.0)*cj0);
IkReal x1838=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1838;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1836))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1837)))))+(IKabs(((((-1.0)*r02*x1837))+(((-1.0)*r12*x1836))))));
j4eval[2]=IKsign(x1838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1839=((-1.0)*r20);
IkReal x1841 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1841)==0){
continue;
}
IkReal x1840=pow(x1841,-0.5);
CheckValue<IkReal> x1842 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1839),IKFAST_ATAN2_MAGTHRESH);
if(!x1842.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1842.value));
IkReal gconst79=(r21*x1840);
IkReal gconst80=(x1839*x1840);
CheckValue<IkReal> x1843 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1843.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1843.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1844=((-1.0)*r20);
IkReal x1845=x1840;
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1844),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
IkReal x1846=((-1.0)*(x1847.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1846;
IkReal gconst78=x1846;
IkReal gconst79=(r21*x1845);
IkReal gconst80=(x1844*x1845);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1848=((-1.0)*r20);
IkReal x1849=x1840;
CheckValue<IkReal> x1851 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1848),IKFAST_ATAN2_MAGTHRESH);
if(!x1851.valid){
continue;
}
IkReal x1850=((-1.0)*(x1851.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1850;
IkReal gconst78=x1850;
IkReal gconst79=(r21*x1849);
IkReal gconst80=(x1848*x1849);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1852=((-1.0)*r20);
IkReal x1853=x1840;
CheckValue<IkReal> x1855 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1852),IKFAST_ATAN2_MAGTHRESH);
if(!x1855.valid){
continue;
}
IkReal x1854=((-1.0)*(x1855.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1854;
IkReal gconst78=x1854;
IkReal gconst79=(r21*x1853);
IkReal gconst80=(x1852*x1853);
IkReal x1856=r22*r22;
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1856))),-1);
if(!x1859.valid){
continue;
}
IkReal x1857=x1859.value;
IkReal x1858=(((x1857*(r21*r21*r21*r21)))+(((2.0)*x1857*(r20*r20)*(r21*r21)))+x1856+((x1857*(r20*r20*r20*r20))));
j4eval[0]=x1858;
j4eval[1]=IKsign(x1858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1860=(sj1*sj2);
IkReal x1861=(gconst80*r20);
IkReal x1862=(gconst79*r21);
IkReal x1863=(cj1*cj2);
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal((((r22*x1860))+(((-1.0)*r22*x1863)))),IkReal((((x1860*x1862))+(((-1.0)*x1862*x1863))+((x1861*x1863))+(((-1.0)*x1860*x1861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
CheckValue<IkReal> x1865=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1861*x1861)+(x1862*x1862)+(((-2.0)*x1861*x1862)))),-1);
if(!x1865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1864.value)+(((1.5707963267949)*(x1865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1866=IKsin(j4);
IkReal x1867=IKcos(j4);
IkReal x1868=(gconst79*r01);
IkReal x1869=(gconst79*r21);
IkReal x1870=((1.0)*cj2);
IkReal x1871=(gconst79*r11);
IkReal x1872=((1.0)*sj0);
IkReal x1873=(cj1*sj2);
IkReal x1874=((1.0)*x1867);
IkReal x1875=(gconst80*x1867);
IkReal x1876=((1.0)*x1866);
IkReal x1877=(gconst80*x1876);
evalcond[0]=((((-1.0)*r22*x1874))+((x1866*x1869))+(((-1.0)*r20*x1877)));
evalcond[1]=(((x1866*x1871))+cj0+(((-1.0)*r10*x1877))+(((-1.0)*r12*x1874)));
evalcond[2]=((((-1.0)*x1872))+(((-1.0)*r02*x1874))+((x1866*x1868))+(((-1.0)*r00*x1877)));
evalcond[3]=((((-1.0)*r22*x1876))+(((-1.0)*x1869*x1874))+((sj1*sj2))+((r20*x1875))+(((-1.0)*cj1*x1870)));
evalcond[4]=((((-1.0)*x1868*x1874))+(((-1.0)*cj0*x1873))+(((-1.0)*r02*x1876))+(((-1.0)*cj0*sj1*x1870))+((r00*x1875)));
evalcond[5]=((((-1.0)*x1872*x1873))+(((-1.0)*sj0*sj1*x1870))+(((-1.0)*x1871*x1874))+(((-1.0)*r12*x1876))+((r10*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1878=((1.0)*gconst80);
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1878)))),-1);
if(!x1879.valid){
continue;
}
CheckValue<IkReal> x1880 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1878))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1879.value)))+(x1880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1881=IKsin(j4);
IkReal x1882=IKcos(j4);
IkReal x1883=(gconst79*r01);
IkReal x1884=(gconst79*r21);
IkReal x1885=((1.0)*cj2);
IkReal x1886=(gconst79*r11);
IkReal x1887=((1.0)*sj0);
IkReal x1888=(cj1*sj2);
IkReal x1889=((1.0)*x1882);
IkReal x1890=(gconst80*x1882);
IkReal x1891=((1.0)*x1881);
IkReal x1892=(gconst80*x1891);
evalcond[0]=(((x1881*x1884))+(((-1.0)*r22*x1889))+(((-1.0)*r20*x1892)));
evalcond[1]=(((x1881*x1886))+cj0+(((-1.0)*r12*x1889))+(((-1.0)*r10*x1892)));
evalcond[2]=(((x1881*x1883))+(((-1.0)*r02*x1889))+(((-1.0)*r00*x1892))+(((-1.0)*x1887)));
evalcond[3]=(((r20*x1890))+(((-1.0)*cj1*x1885))+((sj1*sj2))+(((-1.0)*r22*x1891))+(((-1.0)*x1884*x1889)));
evalcond[4]=((((-1.0)*r02*x1891))+(((-1.0)*cj0*sj1*x1885))+(((-1.0)*cj0*x1888))+(((-1.0)*x1883*x1889))+((r00*x1890)));
evalcond[5]=((((-1.0)*sj0*sj1*x1885))+((r10*x1890))+(((-1.0)*r12*x1891))+(((-1.0)*x1887*x1888))+(((-1.0)*x1886*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1893=((1.0)*gconst80);
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1893))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
CheckValue<IkReal> x1895=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1893)))),-1);
if(!x1895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1894.value)+(((1.5707963267949)*(x1895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1896=IKsin(j4);
IkReal x1897=IKcos(j4);
IkReal x1898=(gconst79*r01);
IkReal x1899=(gconst79*r21);
IkReal x1900=((1.0)*cj2);
IkReal x1901=(gconst79*r11);
IkReal x1902=((1.0)*sj0);
IkReal x1903=(cj1*sj2);
IkReal x1904=((1.0)*x1897);
IkReal x1905=(gconst80*x1897);
IkReal x1906=((1.0)*x1896);
IkReal x1907=(gconst80*x1906);
evalcond[0]=(((x1896*x1899))+(((-1.0)*r22*x1904))+(((-1.0)*r20*x1907)));
evalcond[1]=(cj0+(((-1.0)*r10*x1907))+(((-1.0)*r12*x1904))+((x1896*x1901)));
evalcond[2]=(((x1896*x1898))+(((-1.0)*r02*x1904))+(((-1.0)*x1902))+(((-1.0)*r00*x1907)));
evalcond[3]=((((-1.0)*x1899*x1904))+(((-1.0)*cj1*x1900))+(((-1.0)*r22*x1906))+((sj1*sj2))+((r20*x1905)));
evalcond[4]=(((r00*x1905))+(((-1.0)*x1898*x1904))+(((-1.0)*cj0*x1903))+(((-1.0)*cj0*sj1*x1900))+(((-1.0)*r02*x1906)));
evalcond[5]=((((-1.0)*x1902*x1903))+(((-1.0)*x1901*x1904))+(((-1.0)*r12*x1906))+(((-1.0)*sj0*sj1*x1900))+((r10*x1905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1908=((-1.0)*r21);
IkReal x1910 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1910)==0){
continue;
}
IkReal x1909=pow(x1910,-0.5);
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal(x1908),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1911.value))));
IkReal gconst82=(x1908*x1909);
IkReal gconst83=((1.0)*r20*x1909);
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1912.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1913=((-1.0)*r21);
CheckValue<IkReal> x1916 = IKatan2WithCheck(IkReal(x1913),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1916.valid){
continue;
}
IkReal x1914=((1.0)*(x1916.value));
IkReal x1915=x1909;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1914)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1914)));
IkReal gconst82=(x1913*x1915);
IkReal gconst83=((1.0)*r20*x1915);
IkReal x1917=r22*r22;
IkReal x1918=((1.0)*x1917);
CheckValue<IkReal> x1922=IKPowWithIntegerCheck(((-1.0)+x1917),-1);
if(!x1922.valid){
continue;
}
IkReal x1919=x1922.value;
if((((1.0)+(((-1.0)*x1918)))) < -0.00001)
continue;
IkReal x1920=IKsqrt(((1.0)+(((-1.0)*x1918))));
IkReal x1921=(cj0*x1919*x1920);
j4eval[0]=((IKabs(((((-1.0)*x1918*x1921))+x1921)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1923=((-1.0)*r21);
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal(x1923),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
IkReal x1924=((1.0)*(x1926.value));
IkReal x1925=x1909;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1924)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1924)));
IkReal gconst82=(x1923*x1925);
IkReal gconst83=((1.0)*r20*x1925);
IkReal x1927=r22*r22;
IkReal x1928=((1.0)*x1927);
CheckValue<IkReal> x1932=IKPowWithIntegerCheck(((-1.0)+x1927),-1);
if(!x1932.valid){
continue;
}
IkReal x1929=x1932.value;
if((((1.0)+(((-1.0)*x1928)))) < -0.00001)
continue;
IkReal x1930=IKsqrt(((1.0)+(((-1.0)*x1928))));
IkReal x1931=(sj0*x1929*x1930);
j4eval[0]=((IKabs(((((-1.0)*x1928*x1931))+x1931)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1933=((-1.0)*r21);
CheckValue<IkReal> x1936 = IKatan2WithCheck(IkReal(x1933),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1936.valid){
continue;
}
IkReal x1934=((1.0)*(x1936.value));
IkReal x1935=x1909;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1934)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1934)));
IkReal gconst82=(x1933*x1935);
IkReal gconst83=((1.0)*r20*x1935);
IkReal x1937=r22*r22;
IkReal x1938=(r12*sj0);
IkReal x1939=(cj0*r02);
CheckValue<IkReal> x1943=IKPowWithIntegerCheck(((-1.0)+x1937),-1);
if(!x1943.valid){
continue;
}
IkReal x1940=x1943.value;
if((((1.0)+(((-1.0)*x1937)))) < -0.00001)
continue;
IkReal x1941=IKsqrt(((1.0)+(((-1.0)*x1937))));
IkReal x1942=(r22*x1940*x1941);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1938*x1942))+((x1939*x1942)))))+(IKabs(((((-1.0)*x1939))+(((-1.0)*x1938))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1944=((1.0)*sj0);
IkReal x1945=((1.0)*cj0);
CheckValue<IkReal> x1946=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1946.valid){
continue;
}
CheckValue<IkReal> x1947 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1945))+(((-1.0)*r12*x1944)))),IkReal(((((-1.0)*gconst82*r01*x1945))+(((-1.0)*gconst82*r11*x1944))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1946.value)))+(x1947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1948=IKsin(j4);
IkReal x1949=IKcos(j4);
IkReal x1950=(gconst82*r11);
IkReal x1951=((1.0)*cj2);
IkReal x1952=((1.0)*sj0);
IkReal x1953=(cj1*sj2);
IkReal x1954=((1.0)*x1949);
IkReal x1955=(gconst83*x1949);
IkReal x1956=(gconst82*x1948);
IkReal x1957=((1.0)*x1948);
evalcond[0]=((((-1.0)*r22*x1954))+((r21*x1956))+(((-1.0)*gconst83*r20*x1957)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1957))+((x1948*x1950))+(((-1.0)*r12*x1954)));
evalcond[2]=((((-1.0)*x1952))+(((-1.0)*r02*x1954))+((r01*x1956))+(((-1.0)*gconst83*r00*x1957)));
evalcond[3]=((((-1.0)*r22*x1957))+((r20*x1955))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1954))+(((-1.0)*cj1*x1951)));
evalcond[4]=((((-1.0)*cj0*sj1*x1951))+(((-1.0)*cj0*x1953))+(((-1.0)*r02*x1957))+(((-1.0)*gconst82*r01*x1954))+((r00*x1955)));
evalcond[5]=((((-1.0)*x1952*x1953))+(((-1.0)*x1950*x1954))+((r10*x1955))+(((-1.0)*r12*x1957))+(((-1.0)*sj0*sj1*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1958=((1.0)*gconst83);
CheckValue<IkReal> x1959=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1958)))),-1);
if(!x1959.valid){
continue;
}
CheckValue<IkReal> x1960 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1959.value)))+(x1960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1961=IKsin(j4);
IkReal x1962=IKcos(j4);
IkReal x1963=(gconst82*r11);
IkReal x1964=((1.0)*cj2);
IkReal x1965=((1.0)*sj0);
IkReal x1966=(cj1*sj2);
IkReal x1967=((1.0)*x1962);
IkReal x1968=(gconst83*x1962);
IkReal x1969=(gconst82*x1961);
IkReal x1970=((1.0)*x1961);
evalcond[0]=((((-1.0)*r22*x1967))+((r21*x1969))+(((-1.0)*gconst83*r20*x1970)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1970))+((x1961*x1963))+(((-1.0)*r12*x1967)));
evalcond[2]=((((-1.0)*r02*x1967))+(((-1.0)*x1965))+((r01*x1969))+(((-1.0)*gconst83*r00*x1970)));
evalcond[3]=((((-1.0)*r22*x1970))+((r20*x1968))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1967))+(((-1.0)*cj1*x1964)));
evalcond[4]=((((-1.0)*cj0*x1966))+(((-1.0)*cj0*sj1*x1964))+(((-1.0)*r02*x1970))+((r00*x1968))+(((-1.0)*gconst82*r01*x1967)));
evalcond[5]=((((-1.0)*sj0*sj1*x1964))+((r10*x1968))+(((-1.0)*x1965*x1966))+(((-1.0)*r12*x1970))+(((-1.0)*x1963*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1971=((1.0)*gconst83);
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1971))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
CheckValue<IkReal> x1973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1971))+(((-1.0)*gconst82*r00)))),-1);
if(!x1973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1972.value)+(((1.5707963267949)*(x1973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1974=IKsin(j4);
IkReal x1975=IKcos(j4);
IkReal x1976=(gconst82*r11);
IkReal x1977=((1.0)*cj2);
IkReal x1978=((1.0)*sj0);
IkReal x1979=(cj1*sj2);
IkReal x1980=((1.0)*x1975);
IkReal x1981=(gconst83*x1975);
IkReal x1982=(gconst82*x1974);
IkReal x1983=((1.0)*x1974);
evalcond[0]=(((r21*x1982))+(((-1.0)*gconst83*r20*x1983))+(((-1.0)*r22*x1980)));
evalcond[1]=(cj0+(((-1.0)*r12*x1980))+((x1974*x1976))+(((-1.0)*gconst83*r10*x1983)));
evalcond[2]=((((-1.0)*r02*x1980))+(((-1.0)*gconst83*r00*x1983))+(((-1.0)*x1978))+((r01*x1982)));
evalcond[3]=((((-1.0)*gconst82*r21*x1980))+((sj1*sj2))+(((-1.0)*cj1*x1977))+(((-1.0)*r22*x1983))+((r20*x1981)));
evalcond[4]=((((-1.0)*cj0*x1979))+(((-1.0)*cj0*sj1*x1977))+(((-1.0)*r02*x1983))+(((-1.0)*gconst82*r01*x1980))+((r00*x1981)));
evalcond[5]=((((-1.0)*x1976*x1980))+(((-1.0)*sj0*sj1*x1977))+((r10*x1981))+(((-1.0)*x1978*x1979))+(((-1.0)*r12*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1984=((-1.0)*r10);
IkReal x1986 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1986)==0){
continue;
}
IkReal x1985=pow(x1986,-0.5);
CheckValue<IkReal> x1987 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1984),IKFAST_ATAN2_MAGTHRESH);
if(!x1987.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1987.value));
IkReal gconst85=(r11*x1985);
IkReal gconst86=(x1984*x1985);
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1988.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1989=((-1.0)*r10);
IkReal x1990=x1985;
CheckValue<IkReal> x1992 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1989),IKFAST_ATAN2_MAGTHRESH);
if(!x1992.valid){
continue;
}
IkReal x1991=((-1.0)*(x1992.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1991;
IkReal gconst84=x1991;
IkReal gconst85=(r11*x1990);
IkReal gconst86=(x1989*x1990);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1993=((1.0)*sj0);
IkReal x1994=((1.0)*gconst85);
CheckValue<IkReal> x1995=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1994)))),-1);
if(!x1995.valid){
continue;
}
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1993)))),IkReal((((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1994))+(((-1.0)*gconst85*r11*x1993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1995.value)))+(x1996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1997=IKsin(j4);
IkReal x1998=IKcos(j4);
IkReal x1999=(gconst85*r21);
IkReal x2000=(gconst86*r00);
IkReal x2001=(gconst86*r10);
IkReal x2002=((1.0)*cj2);
IkReal x2003=(gconst85*r11);
IkReal x2004=(gconst85*r01);
IkReal x2005=((1.0)*sj0);
IkReal x2006=(gconst86*r20);
IkReal x2007=(cj1*sj2);
IkReal x2008=((1.0)*x1998);
IkReal x2009=((1.0)*x1997);
evalcond[0]=((((-1.0)*x2006*x2009))+(((-1.0)*r22*x2008))+((x1997*x1999)));
evalcond[1]=(((x1997*x2003))+cj0+(((-1.0)*r12*x2008))+(((-1.0)*x2001*x2009)));
evalcond[2]=(((x1997*x2004))+(((-1.0)*x2000*x2009))+(((-1.0)*r02*x2008))+(((-1.0)*x2005)));
evalcond[3]=((((-1.0)*r22*x2009))+((sj1*sj2))+(((-1.0)*cj1*x2002))+(((-1.0)*x1999*x2008))+((x1998*x2006)));
evalcond[4]=((((-1.0)*x2004*x2008))+(((-1.0)*r02*x2009))+(((-1.0)*cj0*x2007))+(((-1.0)*cj0*sj1*x2002))+((x1998*x2000)));
evalcond[5]=((((-1.0)*x2005*x2007))+(((-1.0)*x2003*x2008))+(((-1.0)*r12*x2009))+(((-1.0)*sj0*sj1*x2002))+((x1998*x2001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2010=((1.0)*gconst86);
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2010))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
CheckValue<IkReal> x2012=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2010)))),-1);
if(!x2012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2011.value)+(((1.5707963267949)*(x2012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2013=IKsin(j4);
IkReal x2014=IKcos(j4);
IkReal x2015=(gconst85*r21);
IkReal x2016=(gconst86*r00);
IkReal x2017=(gconst86*r10);
IkReal x2018=((1.0)*cj2);
IkReal x2019=(gconst85*r11);
IkReal x2020=(gconst85*r01);
IkReal x2021=((1.0)*sj0);
IkReal x2022=(gconst86*r20);
IkReal x2023=(cj1*sj2);
IkReal x2024=((1.0)*x2014);
IkReal x2025=((1.0)*x2013);
evalcond[0]=((((-1.0)*x2022*x2025))+(((-1.0)*r22*x2024))+((x2013*x2015)));
evalcond[1]=(cj0+(((-1.0)*r12*x2024))+(((-1.0)*x2017*x2025))+((x2013*x2019)));
evalcond[2]=((((-1.0)*x2016*x2025))+(((-1.0)*r02*x2024))+((x2013*x2020))+(((-1.0)*x2021)));
evalcond[3]=((((-1.0)*r22*x2025))+((sj1*sj2))+(((-1.0)*cj1*x2018))+(((-1.0)*x2015*x2024))+((x2014*x2022)));
evalcond[4]=(((x2014*x2016))+(((-1.0)*cj0*sj1*x2018))+(((-1.0)*r02*x2025))+(((-1.0)*cj0*x2023))+(((-1.0)*x2020*x2024)));
evalcond[5]=((((-1.0)*x2021*x2023))+((x2014*x2017))+(((-1.0)*r12*x2025))+(((-1.0)*x2019*x2024))+(((-1.0)*sj0*sj1*x2018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2026=((-1.0)*r11);
IkReal x2028 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2028)==0){
continue;
}
IkReal x2027=pow(x2028,-0.5);
CheckValue<IkReal> x2029 = IKatan2WithCheck(IkReal(x2026),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2029.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2029.value))));
IkReal gconst88=(x2026*x2027);
IkReal gconst89=((1.0)*r10*x2027);
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2030.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2031=((-1.0)*r11);
CheckValue<IkReal> x2034 = IKatan2WithCheck(IkReal(x2031),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2034.valid){
continue;
}
IkReal x2032=((1.0)*(x2034.value));
IkReal x2033=x2027;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2032)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2032)));
IkReal gconst88=(x2031*x2033);
IkReal gconst89=((1.0)*r10*x2033);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2035=((-1.0)*r11);
CheckValue<IkReal> x2038 = IKatan2WithCheck(IkReal(x2035),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2038.valid){
continue;
}
IkReal x2036=((1.0)*(x2038.value));
IkReal x2037=x2027;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2036)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2036)));
IkReal gconst88=(x2035*x2037);
IkReal gconst89=((1.0)*r10*x2037);
IkReal x2039=r12*r12;
IkReal x2040=((1.0)*sj0);
IkReal x2041=(cj0*r02);
IkReal x2042=x2027;
j4eval[0]=((IKabs((((sj0*x2039*x2042))+(((-1.0)*x2040*x2042))+((r12*x2041*x2042)))))+(IKabs(((((-1.0)*x2041))+(((-1.0)*r12*x2040))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2043=((-1.0)*r11);
CheckValue<IkReal> x2046 = IKatan2WithCheck(IkReal(x2043),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2046.valid){
continue;
}
IkReal x2044=((1.0)*(x2046.value));
IkReal x2045=x2027;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2044)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2044)));
IkReal gconst88=(x2043*x2045);
IkReal gconst89=((1.0)*r10*x2045);
IkReal x2047=r12*r12;
IkReal x2048=(cj1*cj2*r22);
IkReal x2049=(r22*sj1*sj2);
CheckValue<IkReal> x2053=IKPowWithIntegerCheck(((-1.0)+x2047),-1);
if(!x2053.valid){
continue;
}
IkReal x2050=x2053.value;
if((((1.0)+(((-1.0)*x2047)))) < -0.00001)
continue;
IkReal x2051=IKsqrt(((1.0)+(((-1.0)*x2047))));
IkReal x2052=(r12*x2050*x2051);
j4eval[0]=((IKabs((x2049+(((-1.0)*x2048)))))+(IKabs((((x2048*x2052))+(((-1.0)*x2049*x2052))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2054=(cj1*cj2);
IkReal x2055=(gconst89*r20);
IkReal x2056=(gconst88*r21);
IkReal x2057=(sj1*sj2);
CheckValue<IkReal> x2058=IKPowWithIntegerCheck(IKsign(((x2055*x2055)+(r22*r22)+(((-2.0)*x2055*x2056))+(x2056*x2056))),-1);
if(!x2058.valid){
continue;
}
CheckValue<IkReal> x2059 = IKatan2WithCheck(IkReal((((r22*x2057))+(((-1.0)*r22*x2054)))),IkReal(((((-1.0)*x2055*x2057))+(((-1.0)*x2054*x2056))+((x2054*x2055))+((x2056*x2057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2058.value)))+(x2059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2060=IKsin(j4);
IkReal x2061=IKcos(j4);
IkReal x2062=((1.0)*sj0);
IkReal x2063=((1.0)*cj2);
IkReal x2064=(gconst89*r20);
IkReal x2065=(gconst89*r10);
IkReal x2066=(gconst89*r00);
IkReal x2067=(cj1*sj2);
IkReal x2068=((1.0)*x2061);
IkReal x2069=((1.0)*x2060);
IkReal x2070=(gconst88*x2060);
evalcond[0]=((((-1.0)*x2064*x2069))+(((-1.0)*r22*x2068))+((r21*x2070)));
evalcond[1]=((((-1.0)*r12*x2068))+cj0+((r11*x2070))+(((-1.0)*x2065*x2069)));
evalcond[2]=((((-1.0)*r02*x2068))+(((-1.0)*x2062))+((r01*x2070))+(((-1.0)*x2066*x2069)));
evalcond[3]=((((-1.0)*gconst88*r21*x2068))+(((-1.0)*r22*x2069))+((sj1*sj2))+(((-1.0)*cj1*x2063))+((x2061*x2064)));
evalcond[4]=((((-1.0)*cj0*x2067))+(((-1.0)*r02*x2069))+(((-1.0)*cj0*sj1*x2063))+(((-1.0)*gconst88*r01*x2068))+((x2061*x2066)));
evalcond[5]=((((-1.0)*r12*x2069))+(((-1.0)*x2062*x2067))+(((-1.0)*gconst88*r11*x2068))+(((-1.0)*cj2*sj1*x2062))+((x2061*x2065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2071=((1.0)*sj0);
IkReal x2072=((1.0)*cj0);
CheckValue<IkReal> x2073 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2072))+(((-1.0)*r12*x2071)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2071))+(((-1.0)*gconst88*r01*x2072))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2073.valid){
continue;
}
CheckValue<IkReal> x2074=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2073.value)+(((1.5707963267949)*(x2074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2075=IKsin(j4);
IkReal x2076=IKcos(j4);
IkReal x2077=((1.0)*sj0);
IkReal x2078=((1.0)*cj2);
IkReal x2079=(gconst89*r20);
IkReal x2080=(gconst89*r10);
IkReal x2081=(gconst89*r00);
IkReal x2082=(cj1*sj2);
IkReal x2083=((1.0)*x2076);
IkReal x2084=((1.0)*x2075);
IkReal x2085=(gconst88*x2075);
evalcond[0]=((((-1.0)*r22*x2083))+((r21*x2085))+(((-1.0)*x2079*x2084)));
evalcond[1]=(cj0+(((-1.0)*r12*x2083))+(((-1.0)*x2080*x2084))+((r11*x2085)));
evalcond[2]=((((-1.0)*r02*x2083))+(((-1.0)*x2077))+(((-1.0)*x2081*x2084))+((r01*x2085)));
evalcond[3]=((((-1.0)*r22*x2084))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2083))+((x2076*x2079))+(((-1.0)*cj1*x2078)));
evalcond[4]=((((-1.0)*r02*x2084))+(((-1.0)*gconst88*r01*x2083))+((x2076*x2081))+(((-1.0)*cj0*x2082))+(((-1.0)*cj0*sj1*x2078)));
evalcond[5]=((((-1.0)*gconst88*r11*x2083))+(((-1.0)*x2077*x2082))+((x2076*x2080))+(((-1.0)*r12*x2084))+(((-1.0)*cj2*sj1*x2077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2086=((1.0)*gconst89);
CheckValue<IkReal> x2087 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2086))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2087.valid){
continue;
}
CheckValue<IkReal> x2088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2086))+(((-1.0)*gconst88*r00)))),-1);
if(!x2088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2087.value)+(((1.5707963267949)*(x2088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2089=IKsin(j4);
IkReal x2090=IKcos(j4);
IkReal x2091=((1.0)*sj0);
IkReal x2092=((1.0)*cj2);
IkReal x2093=(gconst89*r20);
IkReal x2094=(gconst89*r10);
IkReal x2095=(gconst89*r00);
IkReal x2096=(cj1*sj2);
IkReal x2097=((1.0)*x2090);
IkReal x2098=((1.0)*x2089);
IkReal x2099=(gconst88*x2089);
evalcond[0]=((((-1.0)*x2093*x2098))+((r21*x2099))+(((-1.0)*r22*x2097)));
evalcond[1]=(cj0+(((-1.0)*x2094*x2098))+(((-1.0)*r12*x2097))+((r11*x2099)));
evalcond[2]=((((-1.0)*x2091))+((r01*x2099))+(((-1.0)*x2095*x2098))+(((-1.0)*r02*x2097)));
evalcond[3]=((((-1.0)*gconst88*r21*x2097))+((sj1*sj2))+((x2090*x2093))+(((-1.0)*cj1*x2092))+(((-1.0)*r22*x2098)));
evalcond[4]=((((-1.0)*gconst88*r01*x2097))+(((-1.0)*cj0*sj1*x2092))+((x2090*x2095))+(((-1.0)*r02*x2098))+(((-1.0)*cj0*x2096)));
evalcond[5]=((((-1.0)*cj2*sj1*x2091))+(((-1.0)*gconst88*r11*x2097))+(((-1.0)*x2091*x2096))+((x2090*x2094))+(((-1.0)*r12*x2098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2100=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2100;
j4eval[1]=IKsign(x2100);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2101=((1.0)*cj5);
IkReal x2102=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2101)));
j4eval[0]=x2102;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2101)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2103=cj5*cj5;
IkReal x2104=r11*r11;
IkReal x2105=(r11*sj5);
IkReal x2106=(cj5*r10);
IkReal x2107=((r12*r12)+(((-1.0)*x2103*x2104))+x2104+((x2103*(r10*r10)))+(((-2.0)*x2105*x2106)));
j4eval[0]=x2107;
j4eval[1]=IKsign(x2107);
j4eval[2]=((IKabs((x2106+(((-1.0)*x2105)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2108=cj5*cj5;
IkReal x2109=r11*r11;
IkReal x2110=(cj5*r10);
IkReal x2111=(r11*sj5);
CheckValue<IkReal> x2112 = IKatan2WithCheck(IkReal((x2110+(((-1.0)*x2111)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2112.valid){
continue;
}
CheckValue<IkReal> x2113=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x2110*x2111))+x2109+(((-1.0)*x2108*x2109))+((x2108*(r10*r10))))),-1);
if(!x2113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2112.value)+(((1.5707963267949)*(x2113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2114=IKsin(j4);
IkReal x2115=IKcos(j4);
IkReal x2116=(cj5*r10);
IkReal x2117=(r01*sj5);
IkReal x2118=((1.0)*cj2);
IkReal x2119=(cj5*r00);
IkReal x2120=(cj5*r20);
IkReal x2121=((1.0)*x2115);
IkReal x2122=((1.0)*x2114);
IkReal x2123=(sj5*x2114);
evalcond[0]=((((-1.0)*r22*x2121))+(((-1.0)*x2120*x2122))+((r21*x2123)));
evalcond[1]=((((-1.0)*x2119*x2122))+(((-1.0)*r02*x2121))+((x2114*x2117)));
evalcond[2]=((((-1.0)*r12*x2122))+(((-1.0)*r11*sj5*x2121))+((x2115*x2116)));
evalcond[3]=((1.0)+(((-1.0)*x2116*x2122))+((r11*x2123))+(((-1.0)*r12*x2121)));
evalcond[4]=((((-1.0)*r22*x2122))+((x2115*x2120))+((sj1*sj2))+(((-1.0)*cj1*x2118))+(((-1.0)*r21*sj5*x2121)));
evalcond[5]=((((-1.0)*x2117*x2121))+(((-1.0)*sj1*x2118))+(((-1.0)*r02*x2122))+(((-1.0)*cj1*sj2))+((x2115*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2124=((1.0)*cj5);
CheckValue<IkReal> x2125=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2124))+(((-1.0)*r00*sj5)))),-1);
if(!x2125.valid){
continue;
}
CheckValue<IkReal> x2126 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2125.value)))+(x2126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2127=IKsin(j4);
IkReal x2128=IKcos(j4);
IkReal x2129=(cj5*r10);
IkReal x2130=(r01*sj5);
IkReal x2131=((1.0)*cj2);
IkReal x2132=(cj5*r00);
IkReal x2133=(cj5*r20);
IkReal x2134=((1.0)*x2128);
IkReal x2135=((1.0)*x2127);
IkReal x2136=(sj5*x2127);
evalcond[0]=((((-1.0)*r22*x2134))+((r21*x2136))+(((-1.0)*x2133*x2135)));
evalcond[1]=(((x2127*x2130))+(((-1.0)*x2132*x2135))+(((-1.0)*r02*x2134)));
evalcond[2]=((((-1.0)*r12*x2135))+((x2128*x2129))+(((-1.0)*r11*sj5*x2134)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2134))+((r11*x2136))+(((-1.0)*x2129*x2135)));
evalcond[4]=((((-1.0)*r22*x2135))+((sj1*sj2))+(((-1.0)*cj1*x2131))+(((-1.0)*r21*sj5*x2134))+((x2128*x2133)));
evalcond[5]=((((-1.0)*sj1*x2131))+(((-1.0)*cj1*sj2))+((x2128*x2132))+(((-1.0)*x2130*x2134))+(((-1.0)*r02*x2135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2137=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2137.valid){
continue;
}
CheckValue<IkReal> x2138 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2137.value)))+(x2138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2139=IKsin(j4);
IkReal x2140=IKcos(j4);
IkReal x2141=(cj5*r10);
IkReal x2142=(r01*sj5);
IkReal x2143=((1.0)*cj2);
IkReal x2144=(cj5*r00);
IkReal x2145=(cj5*r20);
IkReal x2146=((1.0)*x2140);
IkReal x2147=((1.0)*x2139);
IkReal x2148=(sj5*x2139);
evalcond[0]=((((-1.0)*r22*x2146))+((r21*x2148))+(((-1.0)*x2145*x2147)));
evalcond[1]=((((-1.0)*x2144*x2147))+(((-1.0)*r02*x2146))+((x2139*x2142)));
evalcond[2]=((((-1.0)*r11*sj5*x2146))+(((-1.0)*r12*x2147))+((x2140*x2141)));
evalcond[3]=((1.0)+((r11*x2148))+(((-1.0)*r12*x2146))+(((-1.0)*x2141*x2147)));
evalcond[4]=(((sj1*sj2))+((x2140*x2145))+(((-1.0)*r22*x2147))+(((-1.0)*cj1*x2143))+(((-1.0)*r21*sj5*x2146)));
evalcond[5]=((((-1.0)*x2142*x2146))+(((-1.0)*r02*x2147))+(((-1.0)*sj1*x2143))+(((-1.0)*cj1*sj2))+((x2140*x2144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2149=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2149;
j4eval[1]=IKsign(x2149);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2150=((1.0)*cj5);
IkReal x2151=((((-1.0)*r21*x2150))+(((-1.0)*r20*sj5)));
j4eval[0]=x2151;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2150))+((r01*sj5))))));
j4eval[2]=IKsign(x2151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2152=cj5*cj5;
IkReal x2153=r11*r11;
IkReal x2154=(cj5*r10);
IkReal x2155=(r11*sj5);
IkReal x2156=(((x2152*x2153))+(((-1.0)*(r12*r12)))+(((2.0)*x2154*x2155))+(((-1.0)*x2152*(r10*r10)))+(((-1.0)*x2153)));
j4eval[0]=x2156;
j4eval[1]=((IKabs(r12))+(IKabs((x2154+(((-1.0)*x2155))))));
j4eval[2]=IKsign(x2156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2157=cj5*cj5;
IkReal x2158=r11*r11;
IkReal x2159=(cj5*r10);
IkReal x2160=(r11*sj5);
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2157*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2159*x2160))+((x2157*x2158))+(((-1.0)*x2158)))),-1);
if(!x2161.valid){
continue;
}
CheckValue<IkReal> x2162 = IKatan2WithCheck(IkReal((x2159+(((-1.0)*x2160)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2161.value)))+(x2162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2163=IKsin(j4);
IkReal x2164=IKcos(j4);
IkReal x2165=(cj5*r10);
IkReal x2166=(r01*sj5);
IkReal x2167=(cj5*r00);
IkReal x2168=(cj5*r20);
IkReal x2169=((1.0)*x2164);
IkReal x2170=((1.0)*x2163);
IkReal x2171=(sj5*x2163);
evalcond[0]=((((-1.0)*x2168*x2170))+((r21*x2171))+(((-1.0)*r22*x2169)));
evalcond[1]=(((x2163*x2166))+(((-1.0)*r02*x2169))+(((-1.0)*x2167*x2170)));
evalcond[2]=((((-1.0)*r11*sj5*x2169))+((x2164*x2165))+(((-1.0)*r12*x2170)));
evalcond[3]=((-1.0)+((r11*x2171))+(((-1.0)*r12*x2169))+(((-1.0)*x2165*x2170)));
evalcond[4]=(((cj2*sj1))+((x2164*x2167))+((cj1*sj2))+(((-1.0)*x2166*x2169))+(((-1.0)*r02*x2170)));
evalcond[5]=((((-1.0)*r21*sj5*x2169))+((x2164*x2168))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2172=((1.0)*cj5);
CheckValue<IkReal> x2173 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2173.valid){
continue;
}
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2172))+(((-1.0)*r20*sj5)))),-1);
if(!x2174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2173.value)+(((1.5707963267949)*(x2174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2175=IKsin(j4);
IkReal x2176=IKcos(j4);
IkReal x2177=(cj5*r10);
IkReal x2178=(r01*sj5);
IkReal x2179=(cj5*r00);
IkReal x2180=(cj5*r20);
IkReal x2181=((1.0)*x2176);
IkReal x2182=((1.0)*x2175);
IkReal x2183=(sj5*x2175);
evalcond[0]=((((-1.0)*x2180*x2182))+((r21*x2183))+(((-1.0)*r22*x2181)));
evalcond[1]=(((x2175*x2178))+(((-1.0)*r02*x2181))+(((-1.0)*x2179*x2182)));
evalcond[2]=((((-1.0)*r11*sj5*x2181))+((x2176*x2177))+(((-1.0)*r12*x2182)));
evalcond[3]=((-1.0)+(((-1.0)*x2177*x2182))+((r11*x2183))+(((-1.0)*r12*x2181)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2176*x2179))+(((-1.0)*r02*x2182))+(((-1.0)*x2178*x2181)));
evalcond[5]=((((-1.0)*r21*sj5*x2181))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2182))+((x2176*x2180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
CheckValue<IkReal> x2185=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2184.value)+(((1.5707963267949)*(x2185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2186=IKsin(j4);
IkReal x2187=IKcos(j4);
IkReal x2188=(cj5*r10);
IkReal x2189=(r01*sj5);
IkReal x2190=(cj5*r00);
IkReal x2191=(cj5*r20);
IkReal x2192=((1.0)*x2187);
IkReal x2193=((1.0)*x2186);
IkReal x2194=(sj5*x2186);
evalcond[0]=((((-1.0)*x2191*x2193))+((r21*x2194))+(((-1.0)*r22*x2192)));
evalcond[1]=(((x2186*x2189))+(((-1.0)*r02*x2192))+(((-1.0)*x2190*x2193)));
evalcond[2]=(((x2187*x2188))+(((-1.0)*r12*x2193))+(((-1.0)*r11*sj5*x2192)));
evalcond[3]=((-1.0)+(((-1.0)*x2188*x2193))+((r11*x2194))+(((-1.0)*r12*x2192)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2189*x2192))+((cj1*sj2))+((x2187*x2190))+(((-1.0)*r02*x2193)));
evalcond[5]=((((-1.0)*r21*sj5*x2192))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2187*x2191))+(((-1.0)*r22*x2193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2195=((-1.0)*r00);
IkReal x2197 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2197)==0){
continue;
}
IkReal x2196=pow(x2197,-0.5);
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2195),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2198.value));
IkReal gconst91=(r01*x2196);
IkReal gconst92=(x2195*x2196);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2199.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2200=((-1.0)*r00);
IkReal x2201=x2196;
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2200),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
IkReal x2202=((-1.0)*(x2203.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2202;
IkReal gconst90=x2202;
IkReal gconst91=(r01*x2201);
IkReal gconst92=(x2200*x2201);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2204=((1.0)*sj0);
IkReal x2205=((1.0)*cj0);
CheckValue<IkReal> x2206=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2206.valid){
continue;
}
CheckValue<IkReal> x2207 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2204))+(((-1.0)*r02*x2205)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2205))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2206.value)))+(x2207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2208=IKsin(j4);
IkReal x2209=IKcos(j4);
IkReal x2210=((1.0)*cj2);
IkReal x2211=(gconst92*r00);
IkReal x2212=(gconst92*r20);
IkReal x2213=((1.0)*sj0);
IkReal x2214=(gconst92*r10);
IkReal x2215=(cj1*sj2);
IkReal x2216=((1.0)*x2209);
IkReal x2217=(gconst91*x2208);
IkReal x2218=((1.0)*x2208);
evalcond[0]=((((-1.0)*r22*x2216))+((r21*x2217))+(((-1.0)*x2212*x2218)));
evalcond[1]=((((-1.0)*x2214*x2218))+cj0+(((-1.0)*r12*x2216))+((r11*x2217)));
evalcond[2]=(((r01*x2217))+(((-1.0)*x2213))+(((-1.0)*x2211*x2218))+(((-1.0)*r02*x2216)));
evalcond[3]=((((-1.0)*cj1*x2210))+(((-1.0)*r22*x2218))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2216))+((x2209*x2212)));
evalcond[4]=((((-1.0)*gconst91*r01*x2216))+(((-1.0)*cj0*sj1*x2210))+(((-1.0)*r02*x2218))+((x2209*x2211))+(((-1.0)*cj0*x2215)));
evalcond[5]=((((-1.0)*r12*x2218))+(((-1.0)*x2213*x2215))+(((-1.0)*gconst91*r11*x2216))+((x2209*x2214))+(((-1.0)*sj0*sj1*x2210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2219=((1.0)*gconst92);
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2219))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
CheckValue<IkReal> x2221=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2219)))),-1);
if(!x2221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2220.value)+(((1.5707963267949)*(x2221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2222=IKsin(j4);
IkReal x2223=IKcos(j4);
IkReal x2224=((1.0)*cj2);
IkReal x2225=(gconst92*r00);
IkReal x2226=(gconst92*r20);
IkReal x2227=((1.0)*sj0);
IkReal x2228=(gconst92*r10);
IkReal x2229=(cj1*sj2);
IkReal x2230=((1.0)*x2223);
IkReal x2231=(gconst91*x2222);
IkReal x2232=((1.0)*x2222);
evalcond[0]=((((-1.0)*x2226*x2232))+((r21*x2231))+(((-1.0)*r22*x2230)));
evalcond[1]=(cj0+(((-1.0)*x2228*x2232))+(((-1.0)*r12*x2230))+((r11*x2231)));
evalcond[2]=((((-1.0)*x2225*x2232))+(((-1.0)*r02*x2230))+(((-1.0)*x2227))+((r01*x2231)));
evalcond[3]=((((-1.0)*gconst91*r21*x2230))+((sj1*sj2))+(((-1.0)*r22*x2232))+((x2223*x2226))+(((-1.0)*cj1*x2224)));
evalcond[4]=((((-1.0)*r02*x2232))+(((-1.0)*gconst91*r01*x2230))+(((-1.0)*cj0*x2229))+(((-1.0)*cj0*sj1*x2224))+((x2223*x2225)));
evalcond[5]=((((-1.0)*x2227*x2229))+(((-1.0)*sj0*sj1*x2224))+(((-1.0)*r12*x2232))+(((-1.0)*gconst91*r11*x2230))+((x2223*x2228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2233=((-1.0)*r01);
IkReal x2235 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2235)==0){
continue;
}
IkReal x2234=pow(x2235,-0.5);
CheckValue<IkReal> x2236 = IKatan2WithCheck(IkReal(x2233),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2236.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2236.value))));
IkReal gconst94=(x2233*x2234);
IkReal gconst95=((1.0)*r00*x2234);
CheckValue<IkReal> x2237 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2237.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2238=((-1.0)*r01);
CheckValue<IkReal> x2241 = IKatan2WithCheck(IkReal(x2238),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2241.valid){
continue;
}
IkReal x2239=((1.0)*(x2241.value));
IkReal x2240=x2234;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2239)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2239)));
IkReal gconst94=(x2238*x2240);
IkReal gconst95=((1.0)*r00*x2240);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2242=((-1.0)*r01);
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal(x2242),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
IkReal x2243=((1.0)*(x2245.value));
IkReal x2244=x2234;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2243)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2243)));
IkReal gconst94=(x2242*x2244);
IkReal gconst95=((1.0)*r00*x2244);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2246=((-1.0)*r01);
CheckValue<IkReal> x2249 = IKatan2WithCheck(IkReal(x2246),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
IkReal x2247=((1.0)*(x2249.value));
IkReal x2248=x2234;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2247)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2247)));
IkReal gconst94=(x2246*x2248);
IkReal gconst95=((1.0)*r00*x2248);
IkReal x2250=r02*r02;
IkReal x2251=(r12*sj0);
IkReal x2252=((1.0)*cj0);
IkReal x2253=x2234;
j4eval[0]=((IKabs((((cj0*x2250*x2253))+(((-1.0)*x2252*x2253))+((r02*x2251*x2253)))))+(IKabs(((((-1.0)*x2251))+(((-1.0)*r02*x2252))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2254=((1.0)*sj0);
IkReal x2255=((1.0)*cj0);
CheckValue<IkReal> x2256=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2256.valid){
continue;
}
CheckValue<IkReal> x2257 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2255))+(((-1.0)*r12*x2254)))),IkReal(((((-1.0)*gconst94*r11*x2254))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2255))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2256.value)))+(x2257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2258=IKsin(j4);
IkReal x2259=IKcos(j4);
IkReal x2260=(gconst94*r11);
IkReal x2261=((1.0)*cj2);
IkReal x2262=(gconst94*r21);
IkReal x2263=((1.0)*sj0);
IkReal x2264=(gconst94*r01);
IkReal x2265=(cj1*sj2);
IkReal x2266=((1.0)*x2259);
IkReal x2267=(gconst95*x2259);
IkReal x2268=((1.0)*x2258);
IkReal x2269=(gconst95*x2268);
evalcond[0]=(((x2258*x2262))+(((-1.0)*r20*x2269))+(((-1.0)*r22*x2266)));
evalcond[1]=(((x2258*x2260))+cj0+(((-1.0)*r10*x2269))+(((-1.0)*r12*x2266)));
evalcond[2]=(((x2258*x2264))+(((-1.0)*r00*x2269))+(((-1.0)*r02*x2266))+(((-1.0)*x2263)));
evalcond[3]=((((-1.0)*cj1*x2261))+((sj1*sj2))+(((-1.0)*r22*x2268))+((r20*x2267))+(((-1.0)*x2262*x2266)));
evalcond[4]=(((r00*x2267))+(((-1.0)*cj0*sj1*x2261))+(((-1.0)*r02*x2268))+(((-1.0)*cj0*x2265))+(((-1.0)*x2264*x2266)));
evalcond[5]=((((-1.0)*x2260*x2266))+(((-1.0)*x2263*x2265))+(((-1.0)*sj0*sj1*x2261))+((r10*x2267))+(((-1.0)*r12*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2270=((1.0)*gconst95);
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
CheckValue<IkReal> x2272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2270)))),-1);
if(!x2272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2271.value)+(((1.5707963267949)*(x2272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2273=IKsin(j4);
IkReal x2274=IKcos(j4);
IkReal x2275=(gconst94*r11);
IkReal x2276=((1.0)*cj2);
IkReal x2277=(gconst94*r21);
IkReal x2278=((1.0)*sj0);
IkReal x2279=(gconst94*r01);
IkReal x2280=(cj1*sj2);
IkReal x2281=((1.0)*x2274);
IkReal x2282=(gconst95*x2274);
IkReal x2283=((1.0)*x2273);
IkReal x2284=(gconst95*x2283);
evalcond[0]=(((x2273*x2277))+(((-1.0)*r20*x2284))+(((-1.0)*r22*x2281)));
evalcond[1]=(((x2273*x2275))+cj0+(((-1.0)*r12*x2281))+(((-1.0)*r10*x2284)));
evalcond[2]=((((-1.0)*r02*x2281))+((x2273*x2279))+(((-1.0)*x2278))+(((-1.0)*r00*x2284)));
evalcond[3]=((((-1.0)*x2277*x2281))+(((-1.0)*cj1*x2276))+((r20*x2282))+((sj1*sj2))+(((-1.0)*r22*x2283)));
evalcond[4]=((((-1.0)*r02*x2283))+(((-1.0)*cj0*sj1*x2276))+(((-1.0)*cj0*x2280))+(((-1.0)*x2279*x2281))+((r00*x2282)));
evalcond[5]=(((r10*x2282))+(((-1.0)*r12*x2283))+(((-1.0)*sj0*sj1*x2276))+(((-1.0)*x2278*x2280))+(((-1.0)*x2275*x2281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2285=((1.0)*gconst95);
CheckValue<IkReal> x2286 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2286.valid){
continue;
}
CheckValue<IkReal> x2287=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2285)))),-1);
if(!x2287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2286.value)+(((1.5707963267949)*(x2287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2288=IKsin(j4);
IkReal x2289=IKcos(j4);
IkReal x2290=(gconst94*r11);
IkReal x2291=((1.0)*cj2);
IkReal x2292=(gconst94*r21);
IkReal x2293=((1.0)*sj0);
IkReal x2294=(gconst94*r01);
IkReal x2295=(cj1*sj2);
IkReal x2296=((1.0)*x2289);
IkReal x2297=(gconst95*x2289);
IkReal x2298=((1.0)*x2288);
IkReal x2299=(gconst95*x2298);
evalcond[0]=((((-1.0)*r22*x2296))+(((-1.0)*r20*x2299))+((x2288*x2292)));
evalcond[1]=(cj0+(((-1.0)*r12*x2296))+((x2288*x2290))+(((-1.0)*r10*x2299)));
evalcond[2]=((((-1.0)*r00*x2299))+(((-1.0)*r02*x2296))+(((-1.0)*x2293))+((x2288*x2294)));
evalcond[3]=((((-1.0)*x2292*x2296))+((sj1*sj2))+((r20*x2297))+(((-1.0)*cj1*x2291))+(((-1.0)*r22*x2298)));
evalcond[4]=((((-1.0)*r02*x2298))+(((-1.0)*cj0*x2295))+((r00*x2297))+(((-1.0)*cj0*sj1*x2291))+(((-1.0)*x2294*x2296)));
evalcond[5]=(((r10*x2297))+(((-1.0)*x2293*x2295))+(((-1.0)*sj0*sj1*x2291))+(((-1.0)*r12*x2298))+(((-1.0)*x2290*x2296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2300=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2300;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2300);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2301=((1.0)*cj5);
IkReal x2302=((((-1.0)*r11*x2301))+(((-1.0)*r10*sj5)));
j4eval[0]=x2302;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2301))+((r21*sj5))))));
j4eval[2]=IKsign(x2302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2303=cj5*cj5;
IkReal x2304=r01*r01;
IkReal x2305=(r01*sj5);
IkReal x2306=(cj5*r00);
IkReal x2307=((((-1.0)*x2304))+(((2.0)*x2305*x2306))+((x2303*x2304))+(((-1.0)*(r02*r02)))+(((-1.0)*x2303*(r00*r00))));
j4eval[0]=x2307;
j4eval[1]=IKsign(x2307);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2305))+x2306))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2308=cj5*cj5;
IkReal x2309=r01*r01;
IkReal x2310=(r01*sj5);
IkReal x2311=(cj5*r00);
CheckValue<IkReal> x2312=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2309))+((x2308*x2309))+(((-1.0)*(r02*r02)))+(((-1.0)*x2308*(r00*r00)))+(((2.0)*x2310*x2311)))),-1);
if(!x2312.valid){
continue;
}
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(((((-1.0)*x2310))+x2311)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2312.value)))+(x2313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2314=IKsin(j4);
IkReal x2315=IKcos(j4);
IkReal x2316=(cj5*r10);
IkReal x2317=(r01*sj5);
IkReal x2318=((1.0)*cj2);
IkReal x2319=(cj5*r00);
IkReal x2320=(cj5*r20);
IkReal x2321=((1.0)*x2315);
IkReal x2322=((1.0)*x2314);
IkReal x2323=(sj5*x2314);
evalcond[0]=((((-1.0)*r22*x2321))+((r21*x2323))+(((-1.0)*x2320*x2322)));
evalcond[1]=(((r11*x2323))+(((-1.0)*r12*x2321))+(((-1.0)*x2316*x2322)));
evalcond[2]=(((x2315*x2319))+(((-1.0)*x2317*x2321))+(((-1.0)*r02*x2322)));
evalcond[3]=((-1.0)+(((-1.0)*x2319*x2322))+((x2314*x2317))+(((-1.0)*r02*x2321)));
evalcond[4]=(((x2315*x2320))+(((-1.0)*r22*x2322))+((sj1*sj2))+(((-1.0)*cj1*x2318))+(((-1.0)*r21*sj5*x2321)));
evalcond[5]=(((x2315*x2316))+(((-1.0)*r11*sj5*x2321))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2322))+(((-1.0)*sj1*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2324=((1.0)*cj5);
CheckValue<IkReal> x2325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2324)))),-1);
if(!x2325.valid){
continue;
}
CheckValue<IkReal> x2326 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2325.value)))+(x2326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2327=IKsin(j4);
IkReal x2328=IKcos(j4);
IkReal x2329=(cj5*r10);
IkReal x2330=(r01*sj5);
IkReal x2331=((1.0)*cj2);
IkReal x2332=(cj5*r00);
IkReal x2333=(cj5*r20);
IkReal x2334=((1.0)*x2328);
IkReal x2335=((1.0)*x2327);
IkReal x2336=(sj5*x2327);
evalcond[0]=(((r21*x2336))+(((-1.0)*r22*x2334))+(((-1.0)*x2333*x2335)));
evalcond[1]=(((r11*x2336))+(((-1.0)*x2329*x2335))+(((-1.0)*r12*x2334)));
evalcond[2]=((((-1.0)*r02*x2335))+(((-1.0)*x2330*x2334))+((x2328*x2332)));
evalcond[3]=((-1.0)+(((-1.0)*x2332*x2335))+((x2327*x2330))+(((-1.0)*r02*x2334)));
evalcond[4]=((((-1.0)*r22*x2335))+((sj1*sj2))+(((-1.0)*cj1*x2331))+((x2328*x2333))+(((-1.0)*r21*sj5*x2334)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2334))+(((-1.0)*sj1*x2331))+(((-1.0)*r12*x2335))+((x2328*x2329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2337=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2337.valid){
continue;
}
CheckValue<IkReal> x2338 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2337.value)))+(x2338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2339=IKsin(j4);
IkReal x2340=IKcos(j4);
IkReal x2341=(cj5*r10);
IkReal x2342=(r01*sj5);
IkReal x2343=((1.0)*cj2);
IkReal x2344=(cj5*r00);
IkReal x2345=(cj5*r20);
IkReal x2346=((1.0)*x2340);
IkReal x2347=((1.0)*x2339);
IkReal x2348=(sj5*x2339);
evalcond[0]=((((-1.0)*x2345*x2347))+(((-1.0)*r22*x2346))+((r21*x2348)));
evalcond[1]=((((-1.0)*x2341*x2347))+((r11*x2348))+(((-1.0)*r12*x2346)));
evalcond[2]=(((x2340*x2344))+(((-1.0)*r02*x2347))+(((-1.0)*x2342*x2346)));
evalcond[3]=((-1.0)+(((-1.0)*x2344*x2347))+(((-1.0)*r02*x2346))+((x2339*x2342)));
evalcond[4]=(((x2340*x2345))+((sj1*sj2))+(((-1.0)*cj1*x2343))+(((-1.0)*r22*x2347))+(((-1.0)*r21*sj5*x2346)));
evalcond[5]=(((x2340*x2341))+(((-1.0)*r11*sj5*x2346))+(((-1.0)*sj1*x2343))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2349=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2349;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2350=((1.0)*cj5);
IkReal x2351=((((-1.0)*r21*x2350))+(((-1.0)*r20*sj5)));
j4eval[0]=x2351;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2350))))));
j4eval[2]=IKsign(x2351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2352=cj5*cj5;
IkReal x2353=r01*r01;
IkReal x2354=(cj5*r00);
IkReal x2355=(r01*sj5);
IkReal x2356=((((-2.0)*x2354*x2355))+x2353+(((-1.0)*x2352*x2353))+((x2352*(r00*r00)))+(r02*r02));
j4eval[0]=x2356;
j4eval[1]=((IKabs(r02))+(IKabs((x2354+(((-1.0)*x2355))))));
j4eval[2]=IKsign(x2356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2357=cj5*cj5;
IkReal x2358=r01*r01;
IkReal x2359=(r01*sj5);
IkReal x2360=(cj5*r00);
CheckValue<IkReal> x2361=IKPowWithIntegerCheck(IKsign((((x2357*(r00*r00)))+x2358+(((-1.0)*x2357*x2358))+(((-2.0)*x2359*x2360))+(r02*r02))),-1);
if(!x2361.valid){
continue;
}
CheckValue<IkReal> x2362 = IKatan2WithCheck(IkReal((x2360+(((-1.0)*x2359)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2361.value)))+(x2362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2363=IKsin(j4);
IkReal x2364=IKcos(j4);
IkReal x2365=(cj5*r10);
IkReal x2366=(r01*sj5);
IkReal x2367=(cj5*r00);
IkReal x2368=(cj5*r20);
IkReal x2369=((1.0)*x2364);
IkReal x2370=((1.0)*x2363);
IkReal x2371=(sj5*x2363);
evalcond[0]=((((-1.0)*x2368*x2370))+(((-1.0)*r22*x2369))+((r21*x2371)));
evalcond[1]=((((-1.0)*x2365*x2370))+(((-1.0)*r12*x2369))+((r11*x2371)));
evalcond[2]=((((-1.0)*r02*x2370))+((x2364*x2367))+(((-1.0)*x2366*x2369)));
evalcond[3]=((1.0)+(((-1.0)*x2367*x2370))+((x2363*x2366))+(((-1.0)*r02*x2369)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2369))+((x2364*x2365))+((cj1*sj2))+(((-1.0)*r12*x2370)));
evalcond[5]=(((x2364*x2368))+(((-1.0)*r21*sj5*x2369))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2372=((1.0)*cj5);
CheckValue<IkReal> x2373 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2372))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2373.valid){
continue;
}
CheckValue<IkReal> x2374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2372))+(((-1.0)*r20*sj5)))),-1);
if(!x2374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2373.value)+(((1.5707963267949)*(x2374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2375=IKsin(j4);
IkReal x2376=IKcos(j4);
IkReal x2377=(cj5*r10);
IkReal x2378=(r01*sj5);
IkReal x2379=(cj5*r00);
IkReal x2380=(cj5*r20);
IkReal x2381=((1.0)*x2376);
IkReal x2382=((1.0)*x2375);
IkReal x2383=(sj5*x2375);
evalcond[0]=((((-1.0)*x2380*x2382))+(((-1.0)*r22*x2381))+((r21*x2383)));
evalcond[1]=((((-1.0)*r12*x2381))+(((-1.0)*x2377*x2382))+((r11*x2383)));
evalcond[2]=((((-1.0)*r02*x2382))+(((-1.0)*x2378*x2381))+((x2376*x2379)));
evalcond[3]=((1.0)+((x2375*x2378))+(((-1.0)*r02*x2381))+(((-1.0)*x2379*x2382)));
evalcond[4]=((((-1.0)*r12*x2382))+(((-1.0)*r11*sj5*x2381))+((cj2*sj1))+((cj1*sj2))+((x2376*x2377)));
evalcond[5]=(((x2376*x2380))+(((-1.0)*r21*sj5*x2381))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2384 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2384.valid){
continue;
}
CheckValue<IkReal> x2385=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2384.value)+(((1.5707963267949)*(x2385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2386=IKsin(j4);
IkReal x2387=IKcos(j4);
IkReal x2388=(cj5*r10);
IkReal x2389=(r01*sj5);
IkReal x2390=(cj5*r00);
IkReal x2391=(cj5*r20);
IkReal x2392=((1.0)*x2387);
IkReal x2393=((1.0)*x2386);
IkReal x2394=(sj5*x2386);
evalcond[0]=((((-1.0)*r22*x2392))+(((-1.0)*x2391*x2393))+((r21*x2394)));
evalcond[1]=((((-1.0)*x2388*x2393))+((r11*x2394))+(((-1.0)*r12*x2392)));
evalcond[2]=(((x2387*x2390))+(((-1.0)*r02*x2393))+(((-1.0)*x2389*x2392)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2392))+(((-1.0)*x2390*x2393))+((x2386*x2389)));
evalcond[4]=(((cj2*sj1))+((x2387*x2388))+((cj1*sj2))+(((-1.0)*r11*sj5*x2392))+(((-1.0)*r12*x2393)));
evalcond[5]=(((x2387*x2391))+(((-1.0)*r21*sj5*x2392))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2395=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2395);
rxp1_1=(px*r21);
rxp1_2=(r11*x2395);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2396=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2396);
rxp1_1=(px*r21);
rxp1_2=(r11*x2396);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2397=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2397);
rxp1_1=(px*r21);
rxp1_2=(r11*x2397);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2400=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2400.valid){
continue;
}
IkReal x2398=x2400.value;
IkReal x2399=(sj0*x2398);
cj4array[0]=(((cj2*sj1*x2399))+((cj1*sj2*x2399)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2401=IKsin(j4);
IkReal x2402=IKcos(j4);
IkReal x2403=(cj5*r20);
IkReal x2404=(r21*sj5);
IkReal x2405=((1.0)*x2401);
IkReal x2406=((1.0)*x2402);
evalcond[0]=((-1.0)*r02*x2401);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2406)));
evalcond[2]=((((-1.0)*x2403*x2405))+((x2401*x2404)));
evalcond[3]=(((r11*sj5*x2401))+(((-1.0)*cj5*r10*x2405)));
evalcond[4]=((((-1.0)*x2404*x2406))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2402*x2403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2408=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2408.valid){
continue;
}
IkReal x2407=x2408.value;
cj4array[0]=(((cj1*cj2*x2407))+(((-1.0)*sj1*sj2*x2407)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2409=IKsin(j4);
IkReal x2410=IKcos(j4);
IkReal x2411=(r11*sj5);
IkReal x2412=((1.0)*sj0);
IkReal x2413=((1.0)*x2410);
IkReal x2414=((1.0)*cj5*x2409);
evalcond[0]=((-1.0)*r02*x2409);
evalcond[1]=((((-1.0)*r02*x2413))+(((-1.0)*x2412)));
evalcond[2]=((((-1.0)*r20*x2414))+((r21*sj5*x2409)));
evalcond[3]=(((x2409*x2411))+(((-1.0)*r10*x2414)));
evalcond[4]=((((-1.0)*cj1*sj2*x2412))+(((-1.0)*cj2*sj1*x2412))+(((-1.0)*x2411*x2413))+((cj5*r10*x2410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2415=IKPowWithIntegerCheck(r02,-1);
if(!x2415.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2415.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2416=IKsin(j4);
IkReal x2417=IKcos(j4);
IkReal x2418=((1.0)*sj0);
IkReal x2419=(cj5*x2417);
IkReal x2420=(sj5*x2416);
IkReal x2421=((1.0)*sj5*x2417);
IkReal x2422=((1.0)*cj5*x2416);
evalcond[0]=((-1.0)*r02*x2416);
evalcond[1]=(((r21*x2420))+(((-1.0)*r20*x2422)));
evalcond[2]=((((-1.0)*r10*x2422))+((r11*x2420)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2421))+((r20*x2419)));
evalcond[4]=((((-1.0)*cj1*sj2*x2418))+((r10*x2419))+(((-1.0)*r11*x2421))+(((-1.0)*cj2*sj1*x2418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2423=((1.0)*sj0);
IkReal x2424=((1.0)*cj0);
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2425.valid){
continue;
}
CheckValue<IkReal> x2426 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2424))+(((-1.0)*r12*x2423)))),IkReal(((((-1.0)*r11*sj5*x2423))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x2424))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2425.value)))+(x2426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2427=IKsin(j4);
IkReal x2428=IKcos(j4);
IkReal x2429=(cj5*r10);
IkReal x2430=(r01*sj5);
IkReal x2431=((1.0)*cj2);
IkReal x2432=(cj5*r00);
IkReal x2433=((1.0)*sj0);
IkReal x2434=(cj5*r20);
IkReal x2435=(cj1*sj2);
IkReal x2436=((1.0)*x2428);
IkReal x2437=((1.0)*x2427);
IkReal x2438=(sj5*x2427);
evalcond[0]=((((-1.0)*r22*x2436))+(((-1.0)*x2434*x2437))+((r21*x2438)));
evalcond[1]=(((r11*x2438))+cj0+(((-1.0)*x2429*x2437))+(((-1.0)*r12*x2436)));
evalcond[2]=((((-1.0)*x2433))+(((-1.0)*r02*x2436))+(((-1.0)*x2432*x2437))+((x2427*x2430)));
evalcond[3]=((((-1.0)*r22*x2437))+((x2428*x2434))+(((-1.0)*r21*sj5*x2436))+((sj1*sj2))+(((-1.0)*cj1*x2431)));
evalcond[4]=((((-1.0)*cj0*x2435))+((x2428*x2432))+(((-1.0)*x2430*x2436))+(((-1.0)*r02*x2437))+(((-1.0)*cj0*sj1*x2431)));
evalcond[5]=((((-1.0)*x2433*x2435))+(((-1.0)*sj0*sj1*x2431))+((x2428*x2429))+(((-1.0)*r11*sj5*x2436))+(((-1.0)*r12*x2437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2439=((1.0)*cj5);
CheckValue<IkReal> x2440 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2440.valid){
continue;
}
CheckValue<IkReal> x2441=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2439)))),-1);
if(!x2441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2440.value)+(((1.5707963267949)*(x2441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2442=IKsin(j4);
IkReal x2443=IKcos(j4);
IkReal x2444=(cj5*r10);
IkReal x2445=(r01*sj5);
IkReal x2446=((1.0)*cj2);
IkReal x2447=(cj5*r00);
IkReal x2448=((1.0)*sj0);
IkReal x2449=(cj5*r20);
IkReal x2450=(cj1*sj2);
IkReal x2451=((1.0)*x2443);
IkReal x2452=((1.0)*x2442);
IkReal x2453=(sj5*x2442);
evalcond[0]=((((-1.0)*x2449*x2452))+(((-1.0)*r22*x2451))+((r21*x2453)));
evalcond[1]=(cj0+(((-1.0)*x2444*x2452))+(((-1.0)*r12*x2451))+((r11*x2453)));
evalcond[2]=(((x2442*x2445))+(((-1.0)*x2447*x2452))+(((-1.0)*x2448))+(((-1.0)*r02*x2451)));
evalcond[3]=(((x2443*x2449))+((sj1*sj2))+(((-1.0)*r22*x2452))+(((-1.0)*cj1*x2446))+(((-1.0)*r21*sj5*x2451)));
evalcond[4]=((((-1.0)*cj0*x2450))+((x2443*x2447))+(((-1.0)*x2445*x2451))+(((-1.0)*cj0*sj1*x2446))+(((-1.0)*r02*x2452)));
evalcond[5]=(((x2443*x2444))+(((-1.0)*x2448*x2450))+(((-1.0)*r11*sj5*x2451))+(((-1.0)*r12*x2452))+(((-1.0)*sj0*sj1*x2446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2454=((1.0)*cj5);
CheckValue<IkReal> x2455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2454)))),-1);
if(!x2455.valid){
continue;
}
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2455.value)))+(x2456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2457=IKsin(j4);
IkReal x2458=IKcos(j4);
IkReal x2459=(cj5*r10);
IkReal x2460=(r01*sj5);
IkReal x2461=((1.0)*cj2);
IkReal x2462=(cj5*r00);
IkReal x2463=((1.0)*sj0);
IkReal x2464=(cj5*r20);
IkReal x2465=(cj1*sj2);
IkReal x2466=((1.0)*x2458);
IkReal x2467=((1.0)*x2457);
IkReal x2468=(sj5*x2457);
evalcond[0]=((((-1.0)*x2464*x2467))+(((-1.0)*r22*x2466))+((r21*x2468)));
evalcond[1]=(cj0+(((-1.0)*r12*x2466))+((r11*x2468))+(((-1.0)*x2459*x2467)));
evalcond[2]=(((x2457*x2460))+(((-1.0)*x2463))+(((-1.0)*r02*x2466))+(((-1.0)*x2462*x2467)));
evalcond[3]=(((x2458*x2464))+(((-1.0)*r22*x2467))+((sj1*sj2))+(((-1.0)*cj1*x2461))+(((-1.0)*r21*sj5*x2466)));
evalcond[4]=(((x2458*x2462))+(((-1.0)*cj0*sj1*x2461))+(((-1.0)*cj0*x2465))+(((-1.0)*x2460*x2466))+(((-1.0)*r02*x2467)));
evalcond[5]=(((x2458*x2459))+(((-1.0)*sj0*sj1*x2461))+(((-1.0)*r11*sj5*x2466))+(((-1.0)*r12*x2467))+(((-1.0)*x2463*x2465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2469=cj5*cj5;
IkReal x2470=r21*r21;
IkReal x2471=(sj1*sj2);
IkReal x2472=(r21*sj5);
IkReal x2473=(cj1*cj2);
IkReal x2474=(cj5*r20);
CheckValue<IkReal> x2475 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2473))+((r22*x2471)))),IkReal((((x2471*x2472))+(((-1.0)*x2471*x2474))+(((-1.0)*x2472*x2473))+((x2473*x2474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2475.valid){
continue;
}
CheckValue<IkReal> x2476=IKPowWithIntegerCheck(IKsign((x2470+(r22*r22)+((x2469*(r20*r20)))+(((-1.0)*x2469*x2470))+(((-2.0)*x2472*x2474)))),-1);
if(!x2476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2475.value)+(((1.5707963267949)*(x2476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2477=IKsin(j4);
IkReal x2478=IKcos(j4);
IkReal x2479=(r21*sj5);
IkReal x2480=(cj5*r20);
IkReal x2481=((1.0)*x2478);
IkReal x2482=((1.0)*x2477);
evalcond[0]=((((-1.0)*r22*x2481))+(((-1.0)*x2480*x2482))+((x2477*x2479)));
evalcond[1]=((((-1.0)*r22*x2482))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2478*x2480))+(((-1.0)*x2479*x2481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2483=(cj5*sj4);
IkReal x2484=(sj4*sj5);
if( IKabs((((r01*x2484))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2483))+((cj4*r12))+(((-1.0)*r11*x2484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2484))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2483))))+IKsqr((((r10*x2483))+((cj4*r12))+(((-1.0)*r11*x2484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2484))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2483))), (((r10*x2483))+((cj4*r12))+(((-1.0)*r11*x2484))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2485=IKcos(j0);
IkReal x2486=IKsin(j0);
IkReal x2487=(cj4*cj5);
IkReal x2488=(cj5*r01);
IkReal x2489=((1.0)*cj1);
IkReal x2490=((0.39225)*sj1);
IkReal x2491=(r11*sj5);
IkReal x2492=((1.0)*sj4);
IkReal x2493=((0.39225)*cj2);
IkReal x2494=((1.0)*sj1);
IkReal x2495=(r00*sj5);
IkReal x2496=(cj5*r11);
IkReal x2497=((1.0)*cj4);
IkReal x2498=(r01*sj5);
IkReal x2499=(r10*sj5);
IkReal x2500=(sj2*x2485);
IkReal x2501=(sj2*x2486);
IkReal x2502=(cj1*x2485);
IkReal x2503=(cj1*x2486);
IkReal x2504=(cj2*x2485);
IkReal x2505=(cj2*x2486);
evalcond[0]=(x2485+(((-1.0)*cj5*r10*x2492))+((sj4*x2491))+(((-1.0)*r12*x2497)));
evalcond[1]=((((-1.0)*x2486))+(((-1.0)*cj5*r00*x2492))+(((-1.0)*r02*x2497))+((sj4*x2498)));
evalcond[2]=(x2488+x2495+((sj1*x2500))+(((-1.0)*x2489*x2504)));
evalcond[3]=(x2499+x2496+((sj1*x2501))+(((-1.0)*x2489*x2505)));
evalcond[4]=((((-1.0)*x2497*x2498))+(((-1.0)*x2494*x2504))+(((-1.0)*r02*x2492))+(((-1.0)*x2489*x2500))+((r00*x2487)));
evalcond[5]=((((-1.0)*x2494*x2505))+(((-1.0)*x2491*x2497))+(((-1.0)*x2489*x2501))+((r10*x2487))+(((-1.0)*r12*x2492)));
evalcond[6]=((((0.425)*x2502))+((x2493*x2502))+(((-0.10915)*x2486))+(((-0.09465)*x2488))+(((-1.0)*px))+(((-0.09465)*x2495))+(((-1.0)*x2490*x2500)));
evalcond[7]=((((0.425)*x2503))+((x2493*x2503))+(((-1.0)*py))+(((-0.09465)*x2499))+(((-0.09465)*x2496))+(((-1.0)*x2490*x2501))+(((0.10915)*x2485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2506=((1.0)*cj5);
IkReal x2507=((1.0)*sj5);
CheckValue<IkReal> x2508 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2506))+(((-1.0)*r10*x2507)))),IkReal(((((-1.0)*r00*x2507))+(((-1.0)*r01*x2506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2508.valid){
continue;
}
CheckValue<IkReal> x2509=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2509.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2508.value)+(((1.5707963267949)*(x2509.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2510=IKcos(j0);
IkReal x2511=IKsin(j0);
IkReal x2512=(cj5*r01);
IkReal x2513=(cj5*r11);
IkReal x2514=(r00*sj5);
IkReal x2515=(sj1*sj2);
IkReal x2516=((0.39225)*cj2);
IkReal x2517=((1.0)*cj2);
IkReal x2518=(r10*sj5);
IkReal x2519=((0.39225)*x2515);
IkReal x2520=(cj1*x2510);
IkReal x2521=(cj1*x2511);
evalcond[0]=(x2514+x2512+((x2510*x2515))+(((-1.0)*x2517*x2520)));
evalcond[1]=(x2518+x2513+((x2511*x2515))+(((-1.0)*x2517*x2521)));
evalcond[2]=(((x2516*x2520))+(((0.425)*x2520))+(((-1.0)*x2510*x2519))+(((-0.10915)*x2511))+(((-1.0)*px))+(((-0.09465)*x2512))+(((-0.09465)*x2514)));
evalcond[3]=(((x2516*x2521))+(((0.425)*x2521))+(((-1.0)*py))+(((-0.09465)*x2513))+(((-0.09465)*x2518))+(((0.10915)*x2510))+(((-1.0)*x2511*x2519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2522=((1.0)*cj5);
IkReal x2523=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2522)));
j4eval[0]=x2523;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2522)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2524=((1.0)*cj5);
IkReal x2525=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2524)));
j4eval[0]=x2525;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2524))))));
j4eval[2]=IKsign(x2525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2526=((1.0)*sj0);
IkReal x2527=((1.0)*cj0);
IkReal x2528=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2528;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2527))+(((-1.0)*r11*sj5*x2526)))))+(IKabs(((((-1.0)*r12*x2526))+(((-1.0)*r02*x2527))))));
j4eval[2]=IKsign(x2528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2529=((-1.0)*r20);
IkReal x2531 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2531)==0){
continue;
}
IkReal x2530=pow(x2531,-0.5);
CheckValue<IkReal> x2532 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2529),IKFAST_ATAN2_MAGTHRESH);
if(!x2532.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2532.value));
IkReal gconst79=(r21*x2530);
IkReal gconst80=(x2529*x2530);
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2533.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2534=((-1.0)*r20);
IkReal x2535=x2530;
CheckValue<IkReal> x2537 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2534),IKFAST_ATAN2_MAGTHRESH);
if(!x2537.valid){
continue;
}
IkReal x2536=((-1.0)*(x2537.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2536;
IkReal gconst78=x2536;
IkReal gconst79=(r21*x2535);
IkReal gconst80=(x2534*x2535);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2538=((-1.0)*r20);
IkReal x2539=x2530;
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2538),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
IkReal x2540=((-1.0)*(x2541.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2540;
IkReal gconst78=x2540;
IkReal gconst79=(r21*x2539);
IkReal gconst80=(x2538*x2539);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2542=((-1.0)*r20);
IkReal x2543=x2530;
CheckValue<IkReal> x2545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2542),IKFAST_ATAN2_MAGTHRESH);
if(!x2545.valid){
continue;
}
IkReal x2544=((-1.0)*(x2545.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2544;
IkReal gconst78=x2544;
IkReal gconst79=(r21*x2543);
IkReal gconst80=(x2542*x2543);
IkReal x2546=r22*r22;
CheckValue<IkReal> x2549=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2546))),-1);
if(!x2549.valid){
continue;
}
IkReal x2547=x2549.value;
IkReal x2548=(((x2547*(r21*r21*r21*r21)))+x2546+((x2547*(r20*r20*r20*r20)))+(((2.0)*x2547*(r20*r20)*(r21*r21))));
j4eval[0]=x2548;
j4eval[1]=IKsign(x2548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2550=(sj1*sj2);
IkReal x2551=(gconst80*r20);
IkReal x2552=(gconst79*r21);
IkReal x2553=(cj1*cj2);
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2553))+((r22*x2550)))),IkReal(((((-1.0)*x2550*x2551))+((x2551*x2553))+((x2550*x2552))+(((-1.0)*x2552*x2553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2551*x2552))+(x2552*x2552)+(x2551*x2551))),-1);
if(!x2555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2554.value)+(((1.5707963267949)*(x2555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2556=IKsin(j4);
IkReal x2557=IKcos(j4);
IkReal x2558=(gconst79*r01);
IkReal x2559=(gconst79*r21);
IkReal x2560=((1.0)*cj2);
IkReal x2561=(gconst79*r11);
IkReal x2562=((1.0)*sj0);
IkReal x2563=(cj1*sj2);
IkReal x2564=((1.0)*x2557);
IkReal x2565=(gconst80*x2557);
IkReal x2566=((1.0)*x2556);
IkReal x2567=(gconst80*x2566);
evalcond[0]=((((-1.0)*r22*x2564))+(((-1.0)*r20*x2567))+((x2556*x2559)));
evalcond[1]=(cj0+((x2556*x2561))+(((-1.0)*r12*x2564))+(((-1.0)*r10*x2567)));
evalcond[2]=((((-1.0)*r00*x2567))+(((-1.0)*r02*x2564))+((x2556*x2558))+(((-1.0)*x2562)));
evalcond[3]=((((-1.0)*cj1*x2560))+(((-1.0)*r22*x2566))+((sj1*sj2))+((r20*x2565))+(((-1.0)*x2559*x2564)));
evalcond[4]=((((-1.0)*cj0*x2563))+((r00*x2565))+(((-1.0)*r02*x2566))+(((-1.0)*x2558*x2564))+(((-1.0)*cj0*sj1*x2560)));
evalcond[5]=((((-1.0)*x2562*x2563))+((r10*x2565))+(((-1.0)*x2561*x2564))+(((-1.0)*sj0*sj1*x2560))+(((-1.0)*r12*x2566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2568=((1.0)*gconst80);
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2568))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
CheckValue<IkReal> x2570=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2568)))),-1);
if(!x2570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2569.value)+(((1.5707963267949)*(x2570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2571=IKsin(j4);
IkReal x2572=IKcos(j4);
IkReal x2573=(gconst79*r01);
IkReal x2574=(gconst79*r21);
IkReal x2575=((1.0)*cj2);
IkReal x2576=(gconst79*r11);
IkReal x2577=((1.0)*sj0);
IkReal x2578=(cj1*sj2);
IkReal x2579=((1.0)*x2572);
IkReal x2580=(gconst80*x2572);
IkReal x2581=((1.0)*x2571);
IkReal x2582=(gconst80*x2581);
evalcond[0]=(((x2571*x2574))+(((-1.0)*r20*x2582))+(((-1.0)*r22*x2579)));
evalcond[1]=(((x2571*x2576))+(((-1.0)*r12*x2579))+cj0+(((-1.0)*r10*x2582)));
evalcond[2]=(((x2571*x2573))+(((-1.0)*r00*x2582))+(((-1.0)*x2577))+(((-1.0)*r02*x2579)));
evalcond[3]=(((r20*x2580))+((sj1*sj2))+(((-1.0)*cj1*x2575))+(((-1.0)*x2574*x2579))+(((-1.0)*r22*x2581)));
evalcond[4]=(((r00*x2580))+(((-1.0)*r02*x2581))+(((-1.0)*cj0*x2578))+(((-1.0)*x2573*x2579))+(((-1.0)*cj0*sj1*x2575)));
evalcond[5]=(((r10*x2580))+(((-1.0)*sj0*sj1*x2575))+(((-1.0)*r12*x2581))+(((-1.0)*x2577*x2578))+(((-1.0)*x2576*x2579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2583=((1.0)*gconst80);
CheckValue<IkReal> x2584 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2584.valid){
continue;
}
CheckValue<IkReal> x2585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2583))+(((-1.0)*gconst79*r00)))),-1);
if(!x2585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2584.value)+(((1.5707963267949)*(x2585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2586=IKsin(j4);
IkReal x2587=IKcos(j4);
IkReal x2588=(gconst79*r01);
IkReal x2589=(gconst79*r21);
IkReal x2590=((1.0)*cj2);
IkReal x2591=(gconst79*r11);
IkReal x2592=((1.0)*sj0);
IkReal x2593=(cj1*sj2);
IkReal x2594=((1.0)*x2587);
IkReal x2595=(gconst80*x2587);
IkReal x2596=((1.0)*x2586);
IkReal x2597=(gconst80*x2596);
evalcond[0]=((((-1.0)*r22*x2594))+(((-1.0)*r20*x2597))+((x2586*x2589)));
evalcond[1]=(cj0+((x2586*x2591))+(((-1.0)*r12*x2594))+(((-1.0)*r10*x2597)));
evalcond[2]=((((-1.0)*r00*x2597))+(((-1.0)*r02*x2594))+(((-1.0)*x2592))+((x2586*x2588)));
evalcond[3]=((((-1.0)*cj1*x2590))+(((-1.0)*r22*x2596))+((sj1*sj2))+((r20*x2595))+(((-1.0)*x2589*x2594)));
evalcond[4]=(((r00*x2595))+(((-1.0)*cj0*x2593))+(((-1.0)*r02*x2596))+(((-1.0)*x2588*x2594))+(((-1.0)*cj0*sj1*x2590)));
evalcond[5]=(((r10*x2595))+(((-1.0)*sj0*sj1*x2590))+(((-1.0)*x2591*x2594))+(((-1.0)*r12*x2596))+(((-1.0)*x2592*x2593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2598=((-1.0)*r21);
IkReal x2600 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2600)==0){
continue;
}
IkReal x2599=pow(x2600,-0.5);
CheckValue<IkReal> x2601 = IKatan2WithCheck(IkReal(x2598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2601.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2601.value))));
IkReal gconst82=(x2598*x2599);
IkReal gconst83=((1.0)*r20*x2599);
CheckValue<IkReal> x2602 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2602.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2602.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2603=((-1.0)*r21);
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal(x2603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
IkReal x2604=((1.0)*(x2606.value));
IkReal x2605=x2599;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2604)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2604)));
IkReal gconst82=(x2603*x2605);
IkReal gconst83=((1.0)*r20*x2605);
IkReal x2607=r22*r22;
IkReal x2608=((1.0)*x2607);
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(((-1.0)+x2607),-1);
if(!x2612.valid){
continue;
}
IkReal x2609=x2612.value;
if((((1.0)+(((-1.0)*x2608)))) < -0.00001)
continue;
IkReal x2610=IKsqrt(((1.0)+(((-1.0)*x2608))));
IkReal x2611=(cj0*x2609*x2610);
j4eval[0]=((IKabs(((((-1.0)*x2608*x2611))+x2611)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2613=((-1.0)*r21);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal(x2613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
IkReal x2614=((1.0)*(x2616.value));
IkReal x2615=x2599;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2614)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2614)));
IkReal gconst82=(x2613*x2615);
IkReal gconst83=((1.0)*r20*x2615);
IkReal x2617=r22*r22;
IkReal x2618=((1.0)*x2617);
CheckValue<IkReal> x2622=IKPowWithIntegerCheck(((-1.0)+x2617),-1);
if(!x2622.valid){
continue;
}
IkReal x2619=x2622.value;
if((((1.0)+(((-1.0)*x2618)))) < -0.00001)
continue;
IkReal x2620=IKsqrt(((1.0)+(((-1.0)*x2618))));
IkReal x2621=(sj0*x2619*x2620);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2618*x2621))+x2621))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2623=((-1.0)*r21);
CheckValue<IkReal> x2626 = IKatan2WithCheck(IkReal(x2623),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2626.valid){
continue;
}
IkReal x2624=((1.0)*(x2626.value));
IkReal x2625=x2599;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2624)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2624)));
IkReal gconst82=(x2623*x2625);
IkReal gconst83=((1.0)*r20*x2625);
IkReal x2627=r22*r22;
IkReal x2628=(r12*sj0);
IkReal x2629=(cj0*r02);
CheckValue<IkReal> x2633=IKPowWithIntegerCheck(((-1.0)+x2627),-1);
if(!x2633.valid){
continue;
}
IkReal x2630=x2633.value;
if((((1.0)+(((-1.0)*x2627)))) < -0.00001)
continue;
IkReal x2631=IKsqrt(((1.0)+(((-1.0)*x2627))));
IkReal x2632=(r22*x2630*x2631);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2629))+(((-1.0)*x2628)))))+(IKabs((((x2628*x2632))+((x2629*x2632))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2634=((1.0)*sj0);
IkReal x2635=((1.0)*cj0);
CheckValue<IkReal> x2636=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2636.valid){
continue;
}
CheckValue<IkReal> x2637 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2635))+(((-1.0)*r12*x2634)))),IkReal(((((-1.0)*gconst82*r11*x2634))+(((-1.0)*gconst82*r01*x2635))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2636.value)))+(x2637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2638=IKsin(j4);
IkReal x2639=IKcos(j4);
IkReal x2640=(gconst82*r11);
IkReal x2641=((1.0)*cj2);
IkReal x2642=((1.0)*sj0);
IkReal x2643=(cj1*sj2);
IkReal x2644=((1.0)*x2639);
IkReal x2645=(gconst83*x2639);
IkReal x2646=(gconst82*x2638);
IkReal x2647=((1.0)*x2638);
evalcond[0]=((((-1.0)*gconst83*r20*x2647))+(((-1.0)*r22*x2644))+((r21*x2646)));
evalcond[1]=((((-1.0)*r12*x2644))+cj0+((x2638*x2640))+(((-1.0)*gconst83*r10*x2647)));
evalcond[2]=((((-1.0)*r02*x2644))+((r01*x2646))+(((-1.0)*x2642))+(((-1.0)*gconst83*r00*x2647)));
evalcond[3]=((((-1.0)*r22*x2647))+(((-1.0)*cj1*x2641))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2644))+((r20*x2645)));
evalcond[4]=((((-1.0)*r02*x2647))+(((-1.0)*cj0*sj1*x2641))+(((-1.0)*gconst82*r01*x2644))+((r00*x2645))+(((-1.0)*cj0*x2643)));
evalcond[5]=((((-1.0)*r12*x2647))+((r10*x2645))+(((-1.0)*x2640*x2644))+(((-1.0)*x2642*x2643))+(((-1.0)*sj0*sj1*x2641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2648=((1.0)*gconst83);
CheckValue<IkReal> x2649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2648))+(((-1.0)*gconst82*r10)))),-1);
if(!x2649.valid){
continue;
}
CheckValue<IkReal> x2650 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2649.value)))+(x2650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2651=IKsin(j4);
IkReal x2652=IKcos(j4);
IkReal x2653=(gconst82*r11);
IkReal x2654=((1.0)*cj2);
IkReal x2655=((1.0)*sj0);
IkReal x2656=(cj1*sj2);
IkReal x2657=((1.0)*x2652);
IkReal x2658=(gconst83*x2652);
IkReal x2659=(gconst82*x2651);
IkReal x2660=((1.0)*x2651);
evalcond[0]=((((-1.0)*r22*x2657))+((r21*x2659))+(((-1.0)*gconst83*r20*x2660)));
evalcond[1]=(cj0+(((-1.0)*r12*x2657))+(((-1.0)*gconst83*r10*x2660))+((x2651*x2653)));
evalcond[2]=((((-1.0)*r02*x2657))+((r01*x2659))+(((-1.0)*x2655))+(((-1.0)*gconst83*r00*x2660)));
evalcond[3]=((((-1.0)*cj1*x2654))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2657))+(((-1.0)*r22*x2660))+((r20*x2658)));
evalcond[4]=((((-1.0)*r02*x2660))+(((-1.0)*cj0*sj1*x2654))+(((-1.0)*gconst82*r01*x2657))+((r00*x2658))+(((-1.0)*cj0*x2656)));
evalcond[5]=((((-1.0)*r12*x2660))+((r10*x2658))+(((-1.0)*sj0*sj1*x2654))+(((-1.0)*x2655*x2656))+(((-1.0)*x2653*x2657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2661=((1.0)*gconst83);
CheckValue<IkReal> x2662 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2661)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2662.valid){
continue;
}
CheckValue<IkReal> x2663=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2661))+(((-1.0)*gconst82*r00)))),-1);
if(!x2663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2662.value)+(((1.5707963267949)*(x2663.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2664=IKsin(j4);
IkReal x2665=IKcos(j4);
IkReal x2666=(gconst82*r11);
IkReal x2667=((1.0)*cj2);
IkReal x2668=((1.0)*sj0);
IkReal x2669=(cj1*sj2);
IkReal x2670=((1.0)*x2665);
IkReal x2671=(gconst83*x2665);
IkReal x2672=(gconst82*x2664);
IkReal x2673=((1.0)*x2664);
evalcond[0]=(((r21*x2672))+(((-1.0)*r22*x2670))+(((-1.0)*gconst83*r20*x2673)));
evalcond[1]=((((-1.0)*r12*x2670))+cj0+((x2664*x2666))+(((-1.0)*gconst83*r10*x2673)));
evalcond[2]=((((-1.0)*r02*x2670))+(((-1.0)*x2668))+((r01*x2672))+(((-1.0)*gconst83*r00*x2673)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2667))+(((-1.0)*gconst82*r21*x2670))+((r20*x2671))+(((-1.0)*r22*x2673)));
evalcond[4]=((((-1.0)*cj0*x2669))+(((-1.0)*cj0*sj1*x2667))+(((-1.0)*gconst82*r01*x2670))+(((-1.0)*r02*x2673))+((r00*x2671)));
evalcond[5]=((((-1.0)*r12*x2673))+(((-1.0)*sj0*sj1*x2667))+((r10*x2671))+(((-1.0)*x2666*x2670))+(((-1.0)*x2668*x2669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2674=((-1.0)*r10);
IkReal x2676 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2676)==0){
continue;
}
IkReal x2675=pow(x2676,-0.5);
CheckValue<IkReal> x2677 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2674),IKFAST_ATAN2_MAGTHRESH);
if(!x2677.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2677.value));
IkReal gconst85=(r11*x2675);
IkReal gconst86=(x2674*x2675);
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2678.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2679=((-1.0)*r10);
IkReal x2680=x2675;
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2679),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
IkReal x2681=((-1.0)*(x2682.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2681;
IkReal gconst84=x2681;
IkReal gconst85=(r11*x2680);
IkReal gconst86=(x2679*x2680);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2683=((1.0)*sj0);
IkReal x2684=((1.0)*gconst85);
CheckValue<IkReal> x2685 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2683))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst85*r11*x2683))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2684))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2685.valid){
continue;
}
CheckValue<IkReal> x2686=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2684)))),-1);
if(!x2686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2685.value)+(((1.5707963267949)*(x2686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2687=IKsin(j4);
IkReal x2688=IKcos(j4);
IkReal x2689=(gconst85*r21);
IkReal x2690=(gconst86*r00);
IkReal x2691=(gconst86*r10);
IkReal x2692=((1.0)*cj2);
IkReal x2693=(gconst85*r11);
IkReal x2694=(gconst85*r01);
IkReal x2695=((1.0)*sj0);
IkReal x2696=(gconst86*r20);
IkReal x2697=(cj1*sj2);
IkReal x2698=((1.0)*x2688);
IkReal x2699=((1.0)*x2687);
evalcond[0]=((((-1.0)*x2696*x2699))+((x2687*x2689))+(((-1.0)*r22*x2698)));
evalcond[1]=((((-1.0)*x2691*x2699))+cj0+((x2687*x2693))+(((-1.0)*r12*x2698)));
evalcond[2]=((((-1.0)*r02*x2698))+((x2687*x2694))+(((-1.0)*x2695))+(((-1.0)*x2690*x2699)));
evalcond[3]=((((-1.0)*cj1*x2692))+((sj1*sj2))+(((-1.0)*r22*x2699))+(((-1.0)*x2689*x2698))+((x2688*x2696)));
evalcond[4]=((((-1.0)*cj0*x2697))+(((-1.0)*r02*x2699))+(((-1.0)*cj0*sj1*x2692))+((x2688*x2690))+(((-1.0)*x2694*x2698)));
evalcond[5]=((((-1.0)*r12*x2699))+(((-1.0)*x2693*x2698))+(((-1.0)*sj0*sj1*x2692))+(((-1.0)*x2695*x2697))+((x2688*x2691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2700=((1.0)*gconst86);
CheckValue<IkReal> x2701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2700))+(((-1.0)*gconst85*r00)))),-1);
if(!x2701.valid){
continue;
}
CheckValue<IkReal> x2702 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2700))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2701.value)))+(x2702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2703=IKsin(j4);
IkReal x2704=IKcos(j4);
IkReal x2705=(gconst85*r21);
IkReal x2706=(gconst86*r00);
IkReal x2707=(gconst86*r10);
IkReal x2708=((1.0)*cj2);
IkReal x2709=(gconst85*r11);
IkReal x2710=(gconst85*r01);
IkReal x2711=((1.0)*sj0);
IkReal x2712=(gconst86*r20);
IkReal x2713=(cj1*sj2);
IkReal x2714=((1.0)*x2704);
IkReal x2715=((1.0)*x2703);
evalcond[0]=((((-1.0)*x2712*x2715))+((x2703*x2705))+(((-1.0)*r22*x2714)));
evalcond[1]=(cj0+((x2703*x2709))+(((-1.0)*r12*x2714))+(((-1.0)*x2707*x2715)));
evalcond[2]=((((-1.0)*x2711))+((x2703*x2710))+(((-1.0)*r02*x2714))+(((-1.0)*x2706*x2715)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2708))+(((-1.0)*r22*x2715))+((x2704*x2712))+(((-1.0)*x2705*x2714)));
evalcond[4]=(((x2704*x2706))+(((-1.0)*r02*x2715))+(((-1.0)*cj0*sj1*x2708))+(((-1.0)*x2710*x2714))+(((-1.0)*cj0*x2713)));
evalcond[5]=(((x2704*x2707))+(((-1.0)*x2709*x2714))+(((-1.0)*sj0*sj1*x2708))+(((-1.0)*r12*x2715))+(((-1.0)*x2711*x2713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2716=((-1.0)*r11);
IkReal x2718 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2718)==0){
continue;
}
IkReal x2717=pow(x2718,-0.5);
CheckValue<IkReal> x2719 = IKatan2WithCheck(IkReal(x2716),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2719.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2719.value))));
IkReal gconst88=(x2716*x2717);
IkReal gconst89=((1.0)*r10*x2717);
CheckValue<IkReal> x2720 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2720.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2720.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2721=((-1.0)*r11);
CheckValue<IkReal> x2724 = IKatan2WithCheck(IkReal(x2721),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2724.valid){
continue;
}
IkReal x2722=((1.0)*(x2724.value));
IkReal x2723=x2717;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2722)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2722)));
IkReal gconst88=(x2721*x2723);
IkReal gconst89=((1.0)*r10*x2723);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2725=((-1.0)*r11);
CheckValue<IkReal> x2728 = IKatan2WithCheck(IkReal(x2725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2728.valid){
continue;
}
IkReal x2726=((1.0)*(x2728.value));
IkReal x2727=x2717;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2726)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2726)));
IkReal gconst88=(x2725*x2727);
IkReal gconst89=((1.0)*r10*x2727);
IkReal x2729=r12*r12;
IkReal x2730=((1.0)*sj0);
IkReal x2731=(cj0*r02);
IkReal x2732=x2717;
j4eval[0]=((IKabs(((((-1.0)*x2731))+(((-1.0)*r12*x2730)))))+(IKabs(((((-1.0)*x2730*x2732))+((r12*x2731*x2732))+((sj0*x2729*x2732))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2733=((-1.0)*r11);
CheckValue<IkReal> x2736 = IKatan2WithCheck(IkReal(x2733),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2736.valid){
continue;
}
IkReal x2734=((1.0)*(x2736.value));
IkReal x2735=x2717;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2734)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2734)));
IkReal gconst88=(x2733*x2735);
IkReal gconst89=((1.0)*r10*x2735);
IkReal x2737=r12*r12;
IkReal x2738=(cj1*cj2*r22);
IkReal x2739=(r22*sj1*sj2);
CheckValue<IkReal> x2743=IKPowWithIntegerCheck(((-1.0)+x2737),-1);
if(!x2743.valid){
continue;
}
IkReal x2740=x2743.value;
if((((1.0)+(((-1.0)*x2737)))) < -0.00001)
continue;
IkReal x2741=IKsqrt(((1.0)+(((-1.0)*x2737))));
IkReal x2742=(r12*x2740*x2741);
j4eval[0]=((IKabs((x2739+(((-1.0)*x2738)))))+(IKabs((((x2738*x2742))+(((-1.0)*x2739*x2742))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2744=(cj1*cj2);
IkReal x2745=(gconst89*r20);
IkReal x2746=(gconst88*r21);
IkReal x2747=(sj1*sj2);
CheckValue<IkReal> x2748=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2745*x2746))+(r22*r22)+(x2746*x2746)+(x2745*x2745))),-1);
if(!x2748.valid){
continue;
}
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2744))+((r22*x2747)))),IkReal((((x2746*x2747))+((x2744*x2745))+(((-1.0)*x2744*x2746))+(((-1.0)*x2745*x2747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2748.value)))+(x2749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2750=IKsin(j4);
IkReal x2751=IKcos(j4);
IkReal x2752=((1.0)*sj0);
IkReal x2753=((1.0)*cj2);
IkReal x2754=(gconst89*r20);
IkReal x2755=(gconst89*r10);
IkReal x2756=(gconst89*r00);
IkReal x2757=(cj1*sj2);
IkReal x2758=((1.0)*x2751);
IkReal x2759=((1.0)*x2750);
IkReal x2760=(gconst88*x2750);
evalcond[0]=((((-1.0)*r22*x2758))+(((-1.0)*x2754*x2759))+((r21*x2760)));
evalcond[1]=(cj0+(((-1.0)*r12*x2758))+(((-1.0)*x2755*x2759))+((r11*x2760)));
evalcond[2]=(((r01*x2760))+(((-1.0)*x2756*x2759))+(((-1.0)*x2752))+(((-1.0)*r02*x2758)));
evalcond[3]=((((-1.0)*r22*x2759))+(((-1.0)*gconst88*r21*x2758))+((sj1*sj2))+(((-1.0)*cj1*x2753))+((x2751*x2754)));
evalcond[4]=((((-1.0)*gconst88*r01*x2758))+(((-1.0)*cj0*x2757))+(((-1.0)*cj0*sj1*x2753))+((x2751*x2756))+(((-1.0)*r02*x2759)));
evalcond[5]=((((-1.0)*gconst88*r11*x2758))+(((-1.0)*x2752*x2757))+(((-1.0)*cj2*sj1*x2752))+(((-1.0)*r12*x2759))+((x2751*x2755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2761=((1.0)*sj0);
IkReal x2762=((1.0)*cj0);
CheckValue<IkReal> x2763=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2763.valid){
continue;
}
CheckValue<IkReal> x2764 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2761))+(((-1.0)*r02*x2762)))),IkReal(((((-1.0)*gconst88*r01*x2762))+(((-1.0)*gconst88*r11*x2761))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2763.value)))+(x2764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2765=IKsin(j4);
IkReal x2766=IKcos(j4);
IkReal x2767=((1.0)*sj0);
IkReal x2768=((1.0)*cj2);
IkReal x2769=(gconst89*r20);
IkReal x2770=(gconst89*r10);
IkReal x2771=(gconst89*r00);
IkReal x2772=(cj1*sj2);
IkReal x2773=((1.0)*x2766);
IkReal x2774=((1.0)*x2765);
IkReal x2775=(gconst88*x2765);
evalcond[0]=((((-1.0)*x2769*x2774))+((r21*x2775))+(((-1.0)*r22*x2773)));
evalcond[1]=(((r11*x2775))+cj0+(((-1.0)*x2770*x2774))+(((-1.0)*r12*x2773)));
evalcond[2]=(((r01*x2775))+(((-1.0)*r02*x2773))+(((-1.0)*x2767))+(((-1.0)*x2771*x2774)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst88*r21*x2773))+(((-1.0)*cj1*x2768))+((x2766*x2769))+(((-1.0)*r22*x2774)));
evalcond[4]=(((x2766*x2771))+(((-1.0)*cj0*x2772))+(((-1.0)*r02*x2774))+(((-1.0)*gconst88*r01*x2773))+(((-1.0)*cj0*sj1*x2768)));
evalcond[5]=(((x2766*x2770))+(((-1.0)*gconst88*r11*x2773))+(((-1.0)*r12*x2774))+(((-1.0)*cj2*sj1*x2767))+(((-1.0)*x2767*x2772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2776=((1.0)*gconst89);
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2776))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
CheckValue<IkReal> x2778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2776))+(((-1.0)*gconst88*r00)))),-1);
if(!x2778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2777.value)+(((1.5707963267949)*(x2778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2779=IKsin(j4);
IkReal x2780=IKcos(j4);
IkReal x2781=((1.0)*sj0);
IkReal x2782=((1.0)*cj2);
IkReal x2783=(gconst89*r20);
IkReal x2784=(gconst89*r10);
IkReal x2785=(gconst89*r00);
IkReal x2786=(cj1*sj2);
IkReal x2787=((1.0)*x2780);
IkReal x2788=((1.0)*x2779);
IkReal x2789=(gconst88*x2779);
evalcond[0]=(((r21*x2789))+(((-1.0)*x2783*x2788))+(((-1.0)*r22*x2787)));
evalcond[1]=((((-1.0)*r12*x2787))+(((-1.0)*x2784*x2788))+cj0+((r11*x2789)));
evalcond[2]=((((-1.0)*x2781))+(((-1.0)*x2785*x2788))+((r01*x2789))+(((-1.0)*r02*x2787)));
evalcond[3]=((((-1.0)*cj1*x2782))+((x2780*x2783))+(((-1.0)*gconst88*r21*x2787))+((sj1*sj2))+(((-1.0)*r22*x2788)));
evalcond[4]=(((x2780*x2785))+(((-1.0)*cj0*sj1*x2782))+(((-1.0)*cj0*x2786))+(((-1.0)*gconst88*r01*x2787))+(((-1.0)*r02*x2788)));
evalcond[5]=((((-1.0)*cj2*sj1*x2781))+((x2780*x2784))+(((-1.0)*r12*x2788))+(((-1.0)*x2781*x2786))+(((-1.0)*gconst88*r11*x2787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2790=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2790;
j4eval[1]=IKsign(x2790);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2791=((1.0)*cj5);
IkReal x2792=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2791)));
j4eval[0]=x2792;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2791))+((r21*sj5))))));
j4eval[2]=IKsign(x2792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2793=cj5*cj5;
IkReal x2794=r11*r11;
IkReal x2795=(r11*sj5);
IkReal x2796=(cj5*r10);
IkReal x2797=(x2794+(((-2.0)*x2795*x2796))+(r12*r12)+(((-1.0)*x2793*x2794))+((x2793*(r10*r10))));
j4eval[0]=x2797;
j4eval[1]=IKsign(x2797);
j4eval[2]=((IKabs(r12))+(IKabs((x2796+(((-1.0)*x2795))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2798=cj5*cj5;
IkReal x2799=r11*r11;
IkReal x2800=(cj5*r10);
IkReal x2801=(r11*sj5);
CheckValue<IkReal> x2802=IKPowWithIntegerCheck(IKsign((x2799+(r12*r12)+(((-1.0)*x2798*x2799))+((x2798*(r10*r10)))+(((-2.0)*x2800*x2801)))),-1);
if(!x2802.valid){
continue;
}
CheckValue<IkReal> x2803 = IKatan2WithCheck(IkReal(((((-1.0)*x2801))+x2800)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2802.value)))+(x2803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2804=IKsin(j4);
IkReal x2805=IKcos(j4);
IkReal x2806=(cj5*r10);
IkReal x2807=(r01*sj5);
IkReal x2808=((1.0)*cj2);
IkReal x2809=(cj5*r00);
IkReal x2810=(cj5*r20);
IkReal x2811=((1.0)*x2805);
IkReal x2812=((1.0)*x2804);
IkReal x2813=(sj5*x2804);
evalcond[0]=((((-1.0)*x2810*x2812))+((r21*x2813))+(((-1.0)*r22*x2811)));
evalcond[1]=((((-1.0)*r02*x2811))+(((-1.0)*x2809*x2812))+((x2804*x2807)));
evalcond[2]=((((-1.0)*r12*x2812))+((x2805*x2806))+(((-1.0)*r11*sj5*x2811)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2811))+(((-1.0)*x2806*x2812))+((r11*x2813)));
evalcond[4]=((((-1.0)*cj1*x2808))+((sj1*sj2))+(((-1.0)*r22*x2812))+((x2805*x2810))+(((-1.0)*r21*sj5*x2811)));
evalcond[5]=((((-1.0)*sj1*x2808))+(((-1.0)*r02*x2812))+((x2805*x2809))+(((-1.0)*cj1*sj2))+(((-1.0)*x2807*x2811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2814=((1.0)*cj5);
CheckValue<IkReal> x2815 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2815.valid){
continue;
}
CheckValue<IkReal> x2816=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2814)))),-1);
if(!x2816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2815.value)+(((1.5707963267949)*(x2816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2817=IKsin(j4);
IkReal x2818=IKcos(j4);
IkReal x2819=(cj5*r10);
IkReal x2820=(r01*sj5);
IkReal x2821=((1.0)*cj2);
IkReal x2822=(cj5*r00);
IkReal x2823=(cj5*r20);
IkReal x2824=((1.0)*x2818);
IkReal x2825=((1.0)*x2817);
IkReal x2826=(sj5*x2817);
evalcond[0]=(((r21*x2826))+(((-1.0)*r22*x2824))+(((-1.0)*x2823*x2825)));
evalcond[1]=(((x2817*x2820))+(((-1.0)*x2822*x2825))+(((-1.0)*r02*x2824)));
evalcond[2]=((((-1.0)*r12*x2825))+(((-1.0)*r11*sj5*x2824))+((x2818*x2819)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2824))+(((-1.0)*x2819*x2825))+((r11*x2826)));
evalcond[4]=((((-1.0)*cj1*x2821))+((x2818*x2823))+((sj1*sj2))+(((-1.0)*r22*x2825))+(((-1.0)*r21*sj5*x2824)));
evalcond[5]=((((-1.0)*x2820*x2824))+(((-1.0)*sj1*x2821))+((x2818*x2822))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2827=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2827.valid){
continue;
}
CheckValue<IkReal> x2828 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2827.value)))+(x2828.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2829=IKsin(j4);
IkReal x2830=IKcos(j4);
IkReal x2831=(cj5*r10);
IkReal x2832=(r01*sj5);
IkReal x2833=((1.0)*cj2);
IkReal x2834=(cj5*r00);
IkReal x2835=(cj5*r20);
IkReal x2836=((1.0)*x2830);
IkReal x2837=((1.0)*x2829);
IkReal x2838=(sj5*x2829);
evalcond[0]=((((-1.0)*r22*x2836))+(((-1.0)*x2835*x2837))+((r21*x2838)));
evalcond[1]=(((x2829*x2832))+(((-1.0)*x2834*x2837))+(((-1.0)*r02*x2836)));
evalcond[2]=(((x2830*x2831))+(((-1.0)*r12*x2837))+(((-1.0)*r11*sj5*x2836)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2836))+((r11*x2838))+(((-1.0)*x2831*x2837)));
evalcond[4]=((((-1.0)*cj1*x2833))+(((-1.0)*r21*sj5*x2836))+((sj1*sj2))+((x2830*x2835))+(((-1.0)*r22*x2837)));
evalcond[5]=((((-1.0)*sj1*x2833))+(((-1.0)*cj1*sj2))+((x2830*x2834))+(((-1.0)*x2832*x2836))+(((-1.0)*r02*x2837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2839=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2839;
j4eval[1]=IKsign(x2839);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2840=((1.0)*cj5);
IkReal x2841=((((-1.0)*r21*x2840))+(((-1.0)*r20*sj5)));
j4eval[0]=x2841;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2840))))));
j4eval[2]=IKsign(x2841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2842=cj5*cj5;
IkReal x2843=r11*r11;
IkReal x2844=(cj5*r10);
IkReal x2845=(r11*sj5);
IkReal x2846=((((-1.0)*x2842*(r10*r10)))+(((2.0)*x2844*x2845))+((x2842*x2843))+(((-1.0)*(r12*r12)))+(((-1.0)*x2843)));
j4eval[0]=x2846;
j4eval[1]=((IKabs(((((-1.0)*x2845))+x2844)))+(IKabs(r12)));
j4eval[2]=IKsign(x2846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2847=cj5*cj5;
IkReal x2848=r11*r11;
IkReal x2849=(cj5*r10);
IkReal x2850=(r11*sj5);
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal(((((-1.0)*x2850))+x2849)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(IKsign((((x2847*x2848))+(((-1.0)*x2847*(r10*r10)))+(((2.0)*x2849*x2850))+(((-1.0)*(r12*r12)))+(((-1.0)*x2848)))),-1);
if(!x2852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2851.value)+(((1.5707963267949)*(x2852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2853=IKsin(j4);
IkReal x2854=IKcos(j4);
IkReal x2855=(cj5*r10);
IkReal x2856=(r01*sj5);
IkReal x2857=(cj5*r00);
IkReal x2858=(cj5*r20);
IkReal x2859=((1.0)*x2854);
IkReal x2860=((1.0)*x2853);
IkReal x2861=(sj5*x2853);
evalcond[0]=(((r21*x2861))+(((-1.0)*x2858*x2860))+(((-1.0)*r22*x2859)));
evalcond[1]=((((-1.0)*x2857*x2860))+((x2853*x2856))+(((-1.0)*r02*x2859)));
evalcond[2]=((((-1.0)*r11*sj5*x2859))+(((-1.0)*r12*x2860))+((x2854*x2855)));
evalcond[3]=((-1.0)+(((-1.0)*x2855*x2860))+(((-1.0)*r12*x2859))+((r11*x2861)));
evalcond[4]=((((-1.0)*r02*x2860))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2856*x2859))+((x2854*x2857)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2860))+(((-1.0)*r21*sj5*x2859))+((x2854*x2858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2862=((1.0)*cj5);
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2862))+(((-1.0)*r20*sj5)))),-1);
if(!x2863.valid){
continue;
}
CheckValue<IkReal> x2864 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2863.value)))+(x2864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2865=IKsin(j4);
IkReal x2866=IKcos(j4);
IkReal x2867=(cj5*r10);
IkReal x2868=(r01*sj5);
IkReal x2869=(cj5*r00);
IkReal x2870=(cj5*r20);
IkReal x2871=((1.0)*x2866);
IkReal x2872=((1.0)*x2865);
IkReal x2873=(sj5*x2865);
evalcond[0]=((((-1.0)*r22*x2871))+(((-1.0)*x2870*x2872))+((r21*x2873)));
evalcond[1]=(((x2865*x2868))+(((-1.0)*r02*x2871))+(((-1.0)*x2869*x2872)));
evalcond[2]=((((-1.0)*r11*sj5*x2871))+((x2866*x2867))+(((-1.0)*r12*x2872)));
evalcond[3]=((-1.0)+((r11*x2873))+(((-1.0)*x2867*x2872))+(((-1.0)*r12*x2871)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2872))+((cj1*sj2))+((x2866*x2869))+(((-1.0)*x2868*x2871)));
evalcond[5]=(((x2866*x2870))+(((-1.0)*r22*x2872))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
CheckValue<IkReal> x2875=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2874.value)+(((1.5707963267949)*(x2875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2876=IKsin(j4);
IkReal x2877=IKcos(j4);
IkReal x2878=(cj5*r10);
IkReal x2879=(r01*sj5);
IkReal x2880=(cj5*r00);
IkReal x2881=(cj5*r20);
IkReal x2882=((1.0)*x2877);
IkReal x2883=((1.0)*x2876);
IkReal x2884=(sj5*x2876);
evalcond[0]=((((-1.0)*r22*x2882))+((r21*x2884))+(((-1.0)*x2881*x2883)));
evalcond[1]=(((x2876*x2879))+(((-1.0)*r02*x2882))+(((-1.0)*x2880*x2883)));
evalcond[2]=((((-1.0)*r11*sj5*x2882))+((x2877*x2878))+(((-1.0)*r12*x2883)));
evalcond[3]=((-1.0)+((r11*x2884))+(((-1.0)*x2878*x2883))+(((-1.0)*r12*x2882)));
evalcond[4]=(((x2877*x2880))+((cj2*sj1))+(((-1.0)*r02*x2883))+((cj1*sj2))+(((-1.0)*x2879*x2882)));
evalcond[5]=(((x2877*x2881))+(((-1.0)*r22*x2883))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2885=((-1.0)*r00);
IkReal x2887 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2887)==0){
continue;
}
IkReal x2886=pow(x2887,-0.5);
CheckValue<IkReal> x2888 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2885),IKFAST_ATAN2_MAGTHRESH);
if(!x2888.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2888.value));
IkReal gconst91=(r01*x2886);
IkReal gconst92=(x2885*x2886);
CheckValue<IkReal> x2889 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2889.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2889.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2890=((-1.0)*r00);
IkReal x2891=x2886;
CheckValue<IkReal> x2893 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2890),IKFAST_ATAN2_MAGTHRESH);
if(!x2893.valid){
continue;
}
IkReal x2892=((-1.0)*(x2893.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2892;
IkReal gconst90=x2892;
IkReal gconst91=(r01*x2891);
IkReal gconst92=(x2890*x2891);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2894=((1.0)*sj0);
IkReal x2895=((1.0)*cj0);
CheckValue<IkReal> x2896=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2896.valid){
continue;
}
CheckValue<IkReal> x2897 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2895))+(((-1.0)*r12*x2894)))),IkReal(((((-1.0)*gconst91*r11*x2894))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2896.value)))+(x2897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2898=IKsin(j4);
IkReal x2899=IKcos(j4);
IkReal x2900=((1.0)*cj2);
IkReal x2901=(gconst92*r00);
IkReal x2902=(gconst92*r20);
IkReal x2903=((1.0)*sj0);
IkReal x2904=(gconst92*r10);
IkReal x2905=(cj1*sj2);
IkReal x2906=((1.0)*x2899);
IkReal x2907=(gconst91*x2898);
IkReal x2908=((1.0)*x2898);
evalcond[0]=((((-1.0)*x2902*x2908))+((r21*x2907))+(((-1.0)*r22*x2906)));
evalcond[1]=(cj0+(((-1.0)*x2904*x2908))+(((-1.0)*r12*x2906))+((r11*x2907)));
evalcond[2]=((((-1.0)*r02*x2906))+(((-1.0)*x2901*x2908))+((r01*x2907))+(((-1.0)*x2903)));
evalcond[3]=(((x2899*x2902))+((sj1*sj2))+(((-1.0)*cj1*x2900))+(((-1.0)*gconst91*r21*x2906))+(((-1.0)*r22*x2908)));
evalcond[4]=((((-1.0)*r02*x2908))+((x2899*x2901))+(((-1.0)*cj0*x2905))+(((-1.0)*cj0*sj1*x2900))+(((-1.0)*gconst91*r01*x2906)));
evalcond[5]=(((x2899*x2904))+(((-1.0)*gconst91*r11*x2906))+(((-1.0)*sj0*sj1*x2900))+(((-1.0)*x2903*x2905))+(((-1.0)*r12*x2908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2909=((1.0)*gconst92);
CheckValue<IkReal> x2910 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2910.valid){
continue;
}
CheckValue<IkReal> x2911=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2909)))),-1);
if(!x2911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2910.value)+(((1.5707963267949)*(x2911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2912=IKsin(j4);
IkReal x2913=IKcos(j4);
IkReal x2914=((1.0)*cj2);
IkReal x2915=(gconst92*r00);
IkReal x2916=(gconst92*r20);
IkReal x2917=((1.0)*sj0);
IkReal x2918=(gconst92*r10);
IkReal x2919=(cj1*sj2);
IkReal x2920=((1.0)*x2913);
IkReal x2921=(gconst91*x2912);
IkReal x2922=((1.0)*x2912);
evalcond[0]=((((-1.0)*x2916*x2922))+((r21*x2921))+(((-1.0)*r22*x2920)));
evalcond[1]=(cj0+(((-1.0)*x2918*x2922))+(((-1.0)*r12*x2920))+((r11*x2921)));
evalcond[2]=((((-1.0)*r02*x2920))+(((-1.0)*x2915*x2922))+((r01*x2921))+(((-1.0)*x2917)));
evalcond[3]=((((-1.0)*gconst91*r21*x2920))+((sj1*sj2))+(((-1.0)*cj1*x2914))+((x2913*x2916))+(((-1.0)*r22*x2922)));
evalcond[4]=((((-1.0)*cj0*sj1*x2914))+(((-1.0)*r02*x2922))+((x2913*x2915))+(((-1.0)*gconst91*r01*x2920))+(((-1.0)*cj0*x2919)));
evalcond[5]=((((-1.0)*x2917*x2919))+(((-1.0)*r12*x2922))+((x2913*x2918))+(((-1.0)*gconst91*r11*x2920))+(((-1.0)*sj0*sj1*x2914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2923=((-1.0)*r01);
IkReal x2925 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2925)==0){
continue;
}
IkReal x2924=pow(x2925,-0.5);
CheckValue<IkReal> x2926 = IKatan2WithCheck(IkReal(x2923),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2926.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2926.value))));
IkReal gconst94=(x2923*x2924);
IkReal gconst95=((1.0)*r00*x2924);
CheckValue<IkReal> x2927 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2927.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2927.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2928=((-1.0)*r01);
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal(x2928),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
IkReal x2929=((1.0)*(x2931.value));
IkReal x2930=x2924;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2929)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2929)));
IkReal gconst94=(x2928*x2930);
IkReal gconst95=((1.0)*r00*x2930);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2932=((-1.0)*r01);
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal(x2932),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
IkReal x2933=((1.0)*(x2935.value));
IkReal x2934=x2924;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2933)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2933)));
IkReal gconst94=(x2932*x2934);
IkReal gconst95=((1.0)*r00*x2934);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2936=((-1.0)*r01);
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal(x2936),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
IkReal x2937=((1.0)*(x2939.value));
IkReal x2938=x2924;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2937)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2937)));
IkReal gconst94=(x2936*x2938);
IkReal gconst95=((1.0)*r00*x2938);
IkReal x2940=r02*r02;
IkReal x2941=(r12*sj0);
IkReal x2942=((1.0)*cj0);
IkReal x2943=x2924;
j4eval[0]=((IKabs(((((-1.0)*x2941))+(((-1.0)*r02*x2942)))))+(IKabs((((cj0*x2940*x2943))+((r02*x2941*x2943))+(((-1.0)*x2942*x2943))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2944=((1.0)*sj0);
IkReal x2945=((1.0)*cj0);
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2944))+(((-1.0)*r02*x2945)))),IkReal(((((-1.0)*gconst94*r01*x2945))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2944))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2946.value)))+(x2947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2948=IKsin(j4);
IkReal x2949=IKcos(j4);
IkReal x2950=(gconst94*r11);
IkReal x2951=((1.0)*cj2);
IkReal x2952=(gconst94*r21);
IkReal x2953=((1.0)*sj0);
IkReal x2954=(gconst94*r01);
IkReal x2955=(cj1*sj2);
IkReal x2956=((1.0)*x2949);
IkReal x2957=(gconst95*x2949);
IkReal x2958=((1.0)*x2948);
IkReal x2959=(gconst95*x2958);
evalcond[0]=((((-1.0)*r20*x2959))+((x2948*x2952))+(((-1.0)*r22*x2956)));
evalcond[1]=((((-1.0)*r10*x2959))+cj0+((x2948*x2950))+(((-1.0)*r12*x2956)));
evalcond[2]=((((-1.0)*r02*x2956))+(((-1.0)*x2953))+((x2948*x2954))+(((-1.0)*r00*x2959)));
evalcond[3]=((((-1.0)*x2952*x2956))+((sj1*sj2))+((r20*x2957))+(((-1.0)*r22*x2958))+(((-1.0)*cj1*x2951)));
evalcond[4]=((((-1.0)*r02*x2958))+(((-1.0)*cj0*x2955))+(((-1.0)*cj0*sj1*x2951))+((r00*x2957))+(((-1.0)*x2954*x2956)));
evalcond[5]=((((-1.0)*x2953*x2955))+((r10*x2957))+(((-1.0)*sj0*sj1*x2951))+(((-1.0)*r12*x2958))+(((-1.0)*x2950*x2956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2960=((1.0)*gconst95);
CheckValue<IkReal> x2961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2960))+(((-1.0)*gconst94*r10)))),-1);
if(!x2961.valid){
continue;
}
CheckValue<IkReal> x2962 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2961.value)))+(x2962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2963=IKsin(j4);
IkReal x2964=IKcos(j4);
IkReal x2965=(gconst94*r11);
IkReal x2966=((1.0)*cj2);
IkReal x2967=(gconst94*r21);
IkReal x2968=((1.0)*sj0);
IkReal x2969=(gconst94*r01);
IkReal x2970=(cj1*sj2);
IkReal x2971=((1.0)*x2964);
IkReal x2972=(gconst95*x2964);
IkReal x2973=((1.0)*x2963);
IkReal x2974=(gconst95*x2973);
evalcond[0]=((((-1.0)*r20*x2974))+(((-1.0)*r22*x2971))+((x2963*x2967)));
evalcond[1]=(cj0+(((-1.0)*r12*x2971))+(((-1.0)*r10*x2974))+((x2963*x2965)));
evalcond[2]=((((-1.0)*r02*x2971))+(((-1.0)*r00*x2974))+(((-1.0)*x2968))+((x2963*x2969)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2973))+(((-1.0)*x2967*x2971))+(((-1.0)*cj1*x2966))+((r20*x2972)));
evalcond[4]=((((-1.0)*cj0*x2970))+(((-1.0)*r02*x2973))+(((-1.0)*x2969*x2971))+((r00*x2972))+(((-1.0)*cj0*sj1*x2966)));
evalcond[5]=((((-1.0)*r12*x2973))+(((-1.0)*x2965*x2971))+((r10*x2972))+(((-1.0)*x2968*x2970))+(((-1.0)*sj0*sj1*x2966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2975=((1.0)*gconst95);
CheckValue<IkReal> x2976 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2976.valid){
continue;
}
CheckValue<IkReal> x2977=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2975)))),-1);
if(!x2977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2976.value)+(((1.5707963267949)*(x2977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2978=IKsin(j4);
IkReal x2979=IKcos(j4);
IkReal x2980=(gconst94*r11);
IkReal x2981=((1.0)*cj2);
IkReal x2982=(gconst94*r21);
IkReal x2983=((1.0)*sj0);
IkReal x2984=(gconst94*r01);
IkReal x2985=(cj1*sj2);
IkReal x2986=((1.0)*x2979);
IkReal x2987=(gconst95*x2979);
IkReal x2988=((1.0)*x2978);
IkReal x2989=(gconst95*x2988);
evalcond[0]=(((x2978*x2982))+(((-1.0)*r20*x2989))+(((-1.0)*r22*x2986)));
evalcond[1]=(cj0+(((-1.0)*r10*x2989))+(((-1.0)*r12*x2986))+((x2978*x2980)));
evalcond[2]=((((-1.0)*r00*x2989))+(((-1.0)*x2983))+((x2978*x2984))+(((-1.0)*r02*x2986)));
evalcond[3]=((((-1.0)*x2982*x2986))+(((-1.0)*cj1*x2981))+((sj1*sj2))+((r20*x2987))+(((-1.0)*r22*x2988)));
evalcond[4]=((((-1.0)*x2984*x2986))+(((-1.0)*cj0*x2985))+((r00*x2987))+(((-1.0)*cj0*sj1*x2981))+(((-1.0)*r02*x2988)));
evalcond[5]=((((-1.0)*r12*x2988))+(((-1.0)*sj0*sj1*x2981))+(((-1.0)*x2980*x2986))+(((-1.0)*x2983*x2985))+((r10*x2987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2990=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2990;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2991=((1.0)*cj5);
IkReal x2992=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2991)));
j4eval[0]=x2992;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2991))))));
j4eval[2]=IKsign(x2992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2993=cj5*cj5;
IkReal x2994=r01*r01;
IkReal x2995=(r01*sj5);
IkReal x2996=(cj5*r00);
IkReal x2997=((((2.0)*x2995*x2996))+(((-1.0)*(r02*r02)))+((x2993*x2994))+(((-1.0)*x2994))+(((-1.0)*x2993*(r00*r00))));
j4eval[0]=x2997;
j4eval[1]=IKsign(x2997);
j4eval[2]=((IKabs(((((-1.0)*x2995))+x2996)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2998=cj5*cj5;
IkReal x2999=r01*r01;
IkReal x3000=(r01*sj5);
IkReal x3001=(cj5*r00);
CheckValue<IkReal> x3002 = IKatan2WithCheck(IkReal(((((-1.0)*x3000))+x3001)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3002.valid){
continue;
}
CheckValue<IkReal> x3003=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2998*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2998*x2999))+(((-1.0)*x2999))+(((2.0)*x3000*x3001)))),-1);
if(!x3003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3002.value)+(((1.5707963267949)*(x3003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3004=IKsin(j4);
IkReal x3005=IKcos(j4);
IkReal x3006=(cj5*r10);
IkReal x3007=(r01*sj5);
IkReal x3008=((1.0)*cj2);
IkReal x3009=(cj5*r00);
IkReal x3010=(cj5*r20);
IkReal x3011=((1.0)*x3005);
IkReal x3012=((1.0)*x3004);
IkReal x3013=(sj5*x3004);
evalcond[0]=((((-1.0)*r22*x3011))+(((-1.0)*x3010*x3012))+((r21*x3013)));
evalcond[1]=((((-1.0)*r12*x3011))+((r11*x3013))+(((-1.0)*x3006*x3012)));
evalcond[2]=((((-1.0)*r02*x3012))+(((-1.0)*x3007*x3011))+((x3005*x3009)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3011))+((x3004*x3007))+(((-1.0)*x3009*x3012)));
evalcond[4]=((((-1.0)*r22*x3012))+(((-1.0)*r21*sj5*x3011))+((sj1*sj2))+(((-1.0)*cj1*x3008))+((x3005*x3010)));
evalcond[5]=((((-1.0)*r11*sj5*x3011))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3012))+((x3005*x3006))+(((-1.0)*sj1*x3008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3014=((1.0)*cj5);
CheckValue<IkReal> x3015 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3015.valid){
continue;
}
CheckValue<IkReal> x3016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3014)))),-1);
if(!x3016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3015.value)+(((1.5707963267949)*(x3016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3017=IKsin(j4);
IkReal x3018=IKcos(j4);
IkReal x3019=(cj5*r10);
IkReal x3020=(r01*sj5);
IkReal x3021=((1.0)*cj2);
IkReal x3022=(cj5*r00);
IkReal x3023=(cj5*r20);
IkReal x3024=((1.0)*x3018);
IkReal x3025=((1.0)*x3017);
IkReal x3026=(sj5*x3017);
evalcond[0]=(((r21*x3026))+(((-1.0)*x3023*x3025))+(((-1.0)*r22*x3024)));
evalcond[1]=((((-1.0)*r12*x3024))+((r11*x3026))+(((-1.0)*x3019*x3025)));
evalcond[2]=((((-1.0)*x3020*x3024))+((x3018*x3022))+(((-1.0)*r02*x3025)));
evalcond[3]=((-1.0)+((x3017*x3020))+(((-1.0)*x3022*x3025))+(((-1.0)*r02*x3024)));
evalcond[4]=((((-1.0)*cj1*x3021))+((sj1*sj2))+((x3018*x3023))+(((-1.0)*r22*x3025))+(((-1.0)*r21*sj5*x3024)));
evalcond[5]=((((-1.0)*r12*x3025))+((x3018*x3019))+(((-1.0)*r11*sj5*x3024))+(((-1.0)*sj1*x3021))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3027=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3027.valid){
continue;
}
CheckValue<IkReal> x3028 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3027.value)))+(x3028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3029=IKsin(j4);
IkReal x3030=IKcos(j4);
IkReal x3031=(cj5*r10);
IkReal x3032=(r01*sj5);
IkReal x3033=((1.0)*cj2);
IkReal x3034=(cj5*r00);
IkReal x3035=(cj5*r20);
IkReal x3036=((1.0)*x3030);
IkReal x3037=((1.0)*x3029);
IkReal x3038=(sj5*x3029);
evalcond[0]=((((-1.0)*x3035*x3037))+((r21*x3038))+(((-1.0)*r22*x3036)));
evalcond[1]=(((r11*x3038))+(((-1.0)*r12*x3036))+(((-1.0)*x3031*x3037)));
evalcond[2]=(((x3030*x3034))+(((-1.0)*r02*x3037))+(((-1.0)*x3032*x3036)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3036))+(((-1.0)*x3034*x3037))+((x3029*x3032)));
evalcond[4]=((((-1.0)*cj1*x3033))+((x3030*x3035))+(((-1.0)*r21*sj5*x3036))+((sj1*sj2))+(((-1.0)*r22*x3037)));
evalcond[5]=(((x3030*x3031))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3037))+(((-1.0)*r11*sj5*x3036))+(((-1.0)*sj1*x3033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3039=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3039;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3040=((1.0)*cj5);
IkReal x3041=((((-1.0)*r21*x3040))+(((-1.0)*r20*sj5)));
j4eval[0]=x3041;
j4eval[1]=((IKabs(((((-1.0)*r10*x3040))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3042=cj5*cj5;
IkReal x3043=r01*r01;
IkReal x3044=(cj5*r00);
IkReal x3045=(r01*sj5);
IkReal x3046=((((-2.0)*x3044*x3045))+x3043+((x3042*(r00*r00)))+(r02*r02)+(((-1.0)*x3042*x3043)));
j4eval[0]=x3046;
j4eval[1]=((IKabs(r02))+(IKabs((x3044+(((-1.0)*x3045))))));
j4eval[2]=IKsign(x3046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3047=cj5*cj5;
IkReal x3048=r01*r01;
IkReal x3049=(r01*sj5);
IkReal x3050=(cj5*r00);
CheckValue<IkReal> x3051=IKPowWithIntegerCheck(IKsign((x3048+((x3047*(r00*r00)))+(((-1.0)*x3047*x3048))+(((-2.0)*x3049*x3050))+(r02*r02))),-1);
if(!x3051.valid){
continue;
}
CheckValue<IkReal> x3052 = IKatan2WithCheck(IkReal((x3050+(((-1.0)*x3049)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3051.value)))+(x3052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3053=IKsin(j4);
IkReal x3054=IKcos(j4);
IkReal x3055=(cj5*r10);
IkReal x3056=(r01*sj5);
IkReal x3057=(cj5*r00);
IkReal x3058=(cj5*r20);
IkReal x3059=((1.0)*x3054);
IkReal x3060=((1.0)*x3053);
IkReal x3061=(sj5*x3053);
evalcond[0]=((((-1.0)*x3058*x3060))+(((-1.0)*r22*x3059))+((r21*x3061)));
evalcond[1]=(((r11*x3061))+(((-1.0)*x3055*x3060))+(((-1.0)*r12*x3059)));
evalcond[2]=((((-1.0)*x3056*x3059))+(((-1.0)*r02*x3060))+((x3054*x3057)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3059))+((x3053*x3056))+(((-1.0)*x3057*x3060)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x3060))+((x3054*x3055))+(((-1.0)*r11*sj5*x3059)));
evalcond[5]=((((-1.0)*r22*x3060))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3059))+((x3054*x3058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3062=((1.0)*cj5);
CheckValue<IkReal> x3063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3062))+(((-1.0)*r20*sj5)))),-1);
if(!x3063.valid){
continue;
}
CheckValue<IkReal> x3064 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3062))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3063.value)))+(x3064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3065=IKsin(j4);
IkReal x3066=IKcos(j4);
IkReal x3067=(cj5*r10);
IkReal x3068=(r01*sj5);
IkReal x3069=(cj5*r00);
IkReal x3070=(cj5*r20);
IkReal x3071=((1.0)*x3066);
IkReal x3072=((1.0)*x3065);
IkReal x3073=(sj5*x3065);
evalcond[0]=((((-1.0)*r22*x3071))+(((-1.0)*x3070*x3072))+((r21*x3073)));
evalcond[1]=((((-1.0)*x3067*x3072))+(((-1.0)*r12*x3071))+((r11*x3073)));
evalcond[2]=((((-1.0)*r02*x3072))+((x3066*x3069))+(((-1.0)*x3068*x3071)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3071))+((x3065*x3068))+(((-1.0)*x3069*x3072)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3071))+(((-1.0)*r12*x3072))+((x3066*x3067)));
evalcond[5]=((((-1.0)*r21*sj5*x3071))+(((-1.0)*r22*x3072))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3066*x3070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3074 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3074.valid){
continue;
}
CheckValue<IkReal> x3075=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3074.value)+(((1.5707963267949)*(x3075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3076=IKsin(j4);
IkReal x3077=IKcos(j4);
IkReal x3078=(cj5*r10);
IkReal x3079=(r01*sj5);
IkReal x3080=(cj5*r00);
IkReal x3081=(cj5*r20);
IkReal x3082=((1.0)*x3077);
IkReal x3083=((1.0)*x3076);
IkReal x3084=(sj5*x3076);
evalcond[0]=(((r21*x3084))+(((-1.0)*r22*x3082))+(((-1.0)*x3081*x3083)));
evalcond[1]=(((r11*x3084))+(((-1.0)*x3078*x3083))+(((-1.0)*r12*x3082)));
evalcond[2]=((((-1.0)*x3079*x3082))+(((-1.0)*r02*x3083))+((x3077*x3080)));
evalcond[3]=((1.0)+(((-1.0)*x3080*x3083))+((x3076*x3079))+(((-1.0)*r02*x3082)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3077*x3078))+(((-1.0)*r12*x3083))+(((-1.0)*r11*sj5*x3082)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3082))+(((-1.0)*r22*x3083))+((x3077*x3081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3085=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3085);
rxp1_1=(px*r21);
rxp1_2=(r11*x3085);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3086=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3086);
rxp1_1=(px*r21);
rxp1_2=(r11*x3086);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3087=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3087);
rxp1_1=(px*r21);
rxp1_2=(r11*x3087);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3090=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3090.valid){
continue;
}
IkReal x3088=x3090.value;
IkReal x3089=(sj0*x3088);
cj4array[0]=(((cj2*sj1*x3089))+((cj1*sj2*x3089)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3091=IKsin(j4);
IkReal x3092=IKcos(j4);
IkReal x3093=(cj5*r20);
IkReal x3094=(r21*sj5);
IkReal x3095=((1.0)*x3091);
IkReal x3096=((1.0)*x3092);
evalcond[0]=((-1.0)*r02*x3091);
evalcond[1]=((((-1.0)*r02*x3096))+(((-1.0)*sj0)));
evalcond[2]=(((x3091*x3094))+(((-1.0)*x3093*x3095)));
evalcond[3]=(((r11*sj5*x3091))+(((-1.0)*cj5*r10*x3095)));
evalcond[4]=(((x3092*x3093))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3094*x3096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3098=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3098.valid){
continue;
}
IkReal x3097=x3098.value;
cj4array[0]=(((cj1*cj2*x3097))+(((-1.0)*sj1*sj2*x3097)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3099=IKsin(j4);
IkReal x3100=IKcos(j4);
IkReal x3101=(r11*sj5);
IkReal x3102=((1.0)*sj0);
IkReal x3103=((1.0)*x3100);
IkReal x3104=((1.0)*cj5*x3099);
evalcond[0]=((-1.0)*r02*x3099);
evalcond[1]=((((-1.0)*x3102))+(((-1.0)*r02*x3103)));
evalcond[2]=((((-1.0)*r20*x3104))+((r21*sj5*x3099)));
evalcond[3]=(((x3099*x3101))+(((-1.0)*r10*x3104)));
evalcond[4]=((((-1.0)*cj1*sj2*x3102))+(((-1.0)*cj2*sj1*x3102))+((cj5*r10*x3100))+(((-1.0)*x3101*x3103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3105=IKPowWithIntegerCheck(r02,-1);
if(!x3105.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3105.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3106=IKsin(j4);
IkReal x3107=IKcos(j4);
IkReal x3108=((1.0)*sj0);
IkReal x3109=(cj5*x3107);
IkReal x3110=(sj5*x3106);
IkReal x3111=((1.0)*sj5*x3107);
IkReal x3112=((1.0)*cj5*x3106);
evalcond[0]=((-1.0)*r02*x3106);
evalcond[1]=((((-1.0)*r20*x3112))+((r21*x3110)));
evalcond[2]=((((-1.0)*r10*x3112))+((r11*x3110)));
evalcond[3]=((((-1.0)*r21*x3111))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3109)));
evalcond[4]=((((-1.0)*cj1*sj2*x3108))+(((-1.0)*cj2*sj1*x3108))+(((-1.0)*r11*x3111))+((r10*x3109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3113=((1.0)*sj0);
IkReal x3114=((1.0)*cj0);
CheckValue<IkReal> x3115 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3114))+(((-1.0)*r12*x3113)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3113))+(((-1.0)*r01*sj5*x3114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3115.valid){
continue;
}
CheckValue<IkReal> x3116=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3115.value)+(((1.5707963267949)*(x3116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3117=IKsin(j4);
IkReal x3118=IKcos(j4);
IkReal x3119=(cj5*r10);
IkReal x3120=(r01*sj5);
IkReal x3121=((1.0)*cj2);
IkReal x3122=(cj5*r00);
IkReal x3123=((1.0)*sj0);
IkReal x3124=(cj5*r20);
IkReal x3125=(cj1*sj2);
IkReal x3126=((1.0)*x3118);
IkReal x3127=((1.0)*x3117);
IkReal x3128=(sj5*x3117);
evalcond[0]=((((-1.0)*x3124*x3127))+((r21*x3128))+(((-1.0)*r22*x3126)));
evalcond[1]=(cj0+(((-1.0)*r12*x3126))+((r11*x3128))+(((-1.0)*x3119*x3127)));
evalcond[2]=((((-1.0)*r02*x3126))+(((-1.0)*x3122*x3127))+(((-1.0)*x3123))+((x3117*x3120)));
evalcond[3]=((((-1.0)*r21*sj5*x3126))+((sj1*sj2))+((x3118*x3124))+(((-1.0)*cj1*x3121))+(((-1.0)*r22*x3127)));
evalcond[4]=((((-1.0)*cj0*sj1*x3121))+(((-1.0)*r02*x3127))+(((-1.0)*cj0*x3125))+((x3118*x3122))+(((-1.0)*x3120*x3126)));
evalcond[5]=(((x3118*x3119))+(((-1.0)*x3123*x3125))+(((-1.0)*r12*x3127))+(((-1.0)*r11*sj5*x3126))+(((-1.0)*sj0*sj1*x3121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3129=((1.0)*cj5);
CheckValue<IkReal> x3130 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3129))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3130.valid){
continue;
}
CheckValue<IkReal> x3131=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3129)))),-1);
if(!x3131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3130.value)+(((1.5707963267949)*(x3131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3132=IKsin(j4);
IkReal x3133=IKcos(j4);
IkReal x3134=(cj5*r10);
IkReal x3135=(r01*sj5);
IkReal x3136=((1.0)*cj2);
IkReal x3137=(cj5*r00);
IkReal x3138=((1.0)*sj0);
IkReal x3139=(cj5*r20);
IkReal x3140=(cj1*sj2);
IkReal x3141=((1.0)*x3133);
IkReal x3142=((1.0)*x3132);
IkReal x3143=(sj5*x3132);
evalcond[0]=((((-1.0)*r22*x3141))+((r21*x3143))+(((-1.0)*x3139*x3142)));
evalcond[1]=((((-1.0)*r12*x3141))+cj0+((r11*x3143))+(((-1.0)*x3134*x3142)));
evalcond[2]=(((x3132*x3135))+(((-1.0)*r02*x3141))+(((-1.0)*x3137*x3142))+(((-1.0)*x3138)));
evalcond[3]=((((-1.0)*r22*x3142))+((x3133*x3139))+((sj1*sj2))+(((-1.0)*r21*sj5*x3141))+(((-1.0)*cj1*x3136)));
evalcond[4]=((((-1.0)*cj0*sj1*x3136))+((x3133*x3137))+(((-1.0)*x3135*x3141))+(((-1.0)*r02*x3142))+(((-1.0)*cj0*x3140)));
evalcond[5]=((((-1.0)*r12*x3142))+((x3133*x3134))+(((-1.0)*x3138*x3140))+(((-1.0)*sj0*sj1*x3136))+(((-1.0)*r11*sj5*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3144=((1.0)*cj5);
CheckValue<IkReal> x3145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3144)))),-1);
if(!x3145.valid){
continue;
}
CheckValue<IkReal> x3146 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3145.value)))+(x3146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3147=IKsin(j4);
IkReal x3148=IKcos(j4);
IkReal x3149=(cj5*r10);
IkReal x3150=(r01*sj5);
IkReal x3151=((1.0)*cj2);
IkReal x3152=(cj5*r00);
IkReal x3153=((1.0)*sj0);
IkReal x3154=(cj5*r20);
IkReal x3155=(cj1*sj2);
IkReal x3156=((1.0)*x3148);
IkReal x3157=((1.0)*x3147);
IkReal x3158=(sj5*x3147);
evalcond[0]=((((-1.0)*r22*x3156))+(((-1.0)*x3154*x3157))+((r21*x3158)));
evalcond[1]=(cj0+((r11*x3158))+(((-1.0)*x3149*x3157))+(((-1.0)*r12*x3156)));
evalcond[2]=((((-1.0)*x3153))+((x3147*x3150))+(((-1.0)*r02*x3156))+(((-1.0)*x3152*x3157)));
evalcond[3]=((((-1.0)*r22*x3157))+(((-1.0)*cj1*x3151))+((x3148*x3154))+((sj1*sj2))+(((-1.0)*r21*sj5*x3156)));
evalcond[4]=((((-1.0)*x3150*x3156))+((x3148*x3152))+(((-1.0)*cj0*sj1*x3151))+(((-1.0)*r02*x3157))+(((-1.0)*cj0*x3155)));
evalcond[5]=((((-1.0)*x3153*x3155))+((x3148*x3149))+(((-1.0)*sj0*sj1*x3151))+(((-1.0)*r11*sj5*x3156))+(((-1.0)*r12*x3157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3159=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3159;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3159);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3160=r21*r21;
IkReal x3161=cj5*cj5;
IkReal x3162=(sj1*sj2);
IkReal x3163=(r21*sj5);
IkReal x3164=(cj5*r20);
IkReal x3165=(cj1*cj2);
IkReal x3166=((((-1.0)*x3161*(r20*r20)))+(((-1.0)*x3160))+(((-1.0)*(r22*r22)))+(((2.0)*x3163*x3164))+((x3160*x3161)));
j4eval[0]=x3166;
j4eval[1]=((IKabs((((x3162*x3163))+(((-1.0)*x3163*x3165))+(((-1.0)*x3162*x3164))+((x3164*x3165)))))+(IKabs((((r22*x3162))+(((-1.0)*r22*x3165))))));
j4eval[2]=IKsign(x3166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3167=IKsin(j0);
IkReal x3168=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3167))+(((0.425)*x3168)));
evalcond[1]=((((0.10915)*x3168))+(((-1.0)*py))+(((0.425)*x3167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3169=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3169;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3170=((1.0)*cj5);
IkReal x3171=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3170)));
j4eval[0]=x3171;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3170)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3172=((1.0)*cj5);
IkReal x3173=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3172)));
j4eval[0]=x3173;
j4eval[1]=IKsign(x3173);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3172))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3174=((1.0)*cj5);
CheckValue<IkReal> x3175 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3174))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3175.valid){
continue;
}
CheckValue<IkReal> x3176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3174)))),-1);
if(!x3176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3175.value)+(((1.5707963267949)*(x3176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3177=IKcos(j4);
IkReal x3178=IKsin(j4);
IkReal x3179=((1.0)*sj0);
IkReal x3180=(cj5*r00);
IkReal x3181=(cj5*r10);
IkReal x3182=(cj5*r20);
IkReal x3183=((1.0)*x3177);
IkReal x3184=((1.0)*x3178);
IkReal x3185=(sj5*x3177);
IkReal x3186=(sj5*x3178);
evalcond[0]=(((r22*x3178))+(((-1.0)*x3182*x3183))+((r21*x3185)));
evalcond[1]=((((-1.0)*r22*x3183))+(((-1.0)*x3182*x3184))+((r21*x3186)));
evalcond[2]=(cj0+(((-1.0)*x3181*x3184))+((r11*x3186))+(((-1.0)*r12*x3183)));
evalcond[3]=((((-1.0)*x3180*x3183))+((r01*x3185))+((r02*x3178))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3181*x3183))+(((-1.0)*x3179))+((r11*x3185))+((r12*x3178)));
evalcond[5]=((((-1.0)*x3180*x3184))+(((-1.0)*r02*x3183))+((r01*x3186))+(((-1.0)*x3179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3187=((1.0)*cj5);
CheckValue<IkReal> x3188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3187)))),-1);
if(!x3188.valid){
continue;
}
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3187))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3188.value)))+(x3189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3190=IKcos(j4);
IkReal x3191=IKsin(j4);
IkReal x3192=((1.0)*sj0);
IkReal x3193=(cj5*r00);
IkReal x3194=(cj5*r10);
IkReal x3195=(cj5*r20);
IkReal x3196=((1.0)*x3190);
IkReal x3197=((1.0)*x3191);
IkReal x3198=(sj5*x3190);
IkReal x3199=(sj5*x3191);
evalcond[0]=(((r21*x3198))+((r22*x3191))+(((-1.0)*x3195*x3196)));
evalcond[1]=((((-1.0)*r22*x3196))+((r21*x3199))+(((-1.0)*x3195*x3197)));
evalcond[2]=(cj0+((r11*x3199))+(((-1.0)*r12*x3196))+(((-1.0)*x3194*x3197)));
evalcond[3]=((((-1.0)*x3193*x3196))+((r01*x3198))+((r02*x3191))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3198))+((r12*x3191))+(((-1.0)*x3192))+(((-1.0)*x3194*x3196)));
evalcond[5]=((((-1.0)*x3193*x3197))+((r01*x3199))+(((-1.0)*r02*x3196))+(((-1.0)*x3192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3200 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3200.valid){
continue;
}
CheckValue<IkReal> x3201=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3200.value)+(((1.5707963267949)*(x3201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3202=IKcos(j4);
IkReal x3203=IKsin(j4);
IkReal x3204=((1.0)*sj0);
IkReal x3205=(cj5*r00);
IkReal x3206=(cj5*r10);
IkReal x3207=(cj5*r20);
IkReal x3208=((1.0)*x3202);
IkReal x3209=((1.0)*x3203);
IkReal x3210=(sj5*x3202);
IkReal x3211=(sj5*x3203);
evalcond[0]=((((-1.0)*x3207*x3208))+((r22*x3203))+((r21*x3210)));
evalcond[1]=((((-1.0)*x3207*x3209))+(((-1.0)*r22*x3208))+((r21*x3211)));
evalcond[2]=(cj0+(((-1.0)*r12*x3208))+((r11*x3211))+(((-1.0)*x3206*x3209)));
evalcond[3]=(((r01*x3210))+((r02*x3203))+(((-1.0)*cj0))+(((-1.0)*x3205*x3208)));
evalcond[4]=(((r12*x3203))+((r11*x3210))+(((-1.0)*x3204))+(((-1.0)*x3206*x3208)));
evalcond[5]=((((-1.0)*r02*x3208))+((r01*x3211))+(((-1.0)*x3204))+(((-1.0)*x3205*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3212=IKsin(j0);
IkReal x3213=IKcos(j0);
evalcond[0]=((((-0.10915)*x3212))+(((-1.0)*px))+(((0.425)*x3213)));
evalcond[1]=((((0.10915)*x3213))+(((-1.0)*py))+(((0.425)*x3212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3214=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3214;
j4eval[1]=IKsign(x3214);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3215=((1.0)*cj5);
IkReal x3216=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3215)));
j4eval[0]=x3216;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3215)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3217=cj5*cj5;
IkReal x3218=((1.0)*r20);
IkReal x3219=(r01*r21);
IkReal x3220=(r21*sj5);
IkReal x3221=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3219))+((cj5*r00*x3220))+(((-1.0)*r00*x3217*x3218))+((x3217*x3219)));
j4eval[0]=x3221;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3218))+((cj0*x3220))))));
j4eval[2]=IKsign(x3221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3222=cj5*cj5;
IkReal x3223=((1.0)*r20);
IkReal x3224=(r01*r21);
IkReal x3225=(r21*sj5);
CheckValue<IkReal> x3226 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3225))+(((-1.0)*cj0*cj5*x3223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3226.valid){
continue;
}
CheckValue<IkReal> x3227=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3222*x3224))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3222*x3223))+((cj5*r00*x3225))+(((-1.0)*x3224)))),-1);
if(!x3227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3226.value)+(((1.5707963267949)*(x3227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3228=IKcos(j4);
IkReal x3229=IKsin(j4);
IkReal x3230=(cj5*r00);
IkReal x3231=(cj5*r10);
IkReal x3232=(cj5*r20);
IkReal x3233=((1.0)*x3228);
IkReal x3234=((1.0)*x3229);
IkReal x3235=(sj5*x3228);
IkReal x3236=(sj5*x3229);
evalcond[0]=((((-1.0)*x3232*x3233))+((r22*x3229))+((r21*x3235)));
evalcond[1]=((((-1.0)*x3232*x3234))+(((-1.0)*r22*x3233))+((r21*x3236)));
evalcond[2]=(cj0+((r02*x3229))+((r01*x3235))+(((-1.0)*x3230*x3233)));
evalcond[3]=(((r12*x3229))+sj0+(((-1.0)*x3231*x3233))+((r11*x3235)));
evalcond[4]=(cj0+(((-1.0)*x3231*x3234))+((r11*x3236))+(((-1.0)*r12*x3233)));
evalcond[5]=((((-1.0)*r02*x3233))+(((-1.0)*sj0))+((r01*x3236))+(((-1.0)*x3230*x3234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3237=((1.0)*cj5);
CheckValue<IkReal> x3238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3237)))),-1);
if(!x3238.valid){
continue;
}
CheckValue<IkReal> x3239 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3237)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3238.value)))+(x3239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3240=IKcos(j4);
IkReal x3241=IKsin(j4);
IkReal x3242=(cj5*r00);
IkReal x3243=(cj5*r10);
IkReal x3244=(cj5*r20);
IkReal x3245=((1.0)*x3240);
IkReal x3246=((1.0)*x3241);
IkReal x3247=(sj5*x3240);
IkReal x3248=(sj5*x3241);
evalcond[0]=(((r22*x3241))+((r21*x3247))+(((-1.0)*x3244*x3245)));
evalcond[1]=(((r21*x3248))+(((-1.0)*x3244*x3246))+(((-1.0)*r22*x3245)));
evalcond[2]=(((r01*x3247))+cj0+((r02*x3241))+(((-1.0)*x3242*x3245)));
evalcond[3]=((((-1.0)*x3243*x3245))+sj0+((r12*x3241))+((r11*x3247)));
evalcond[4]=((((-1.0)*x3243*x3246))+cj0+(((-1.0)*r12*x3245))+((r11*x3248)));
evalcond[5]=(((r01*x3248))+(((-1.0)*sj0))+(((-1.0)*r02*x3245))+(((-1.0)*x3242*x3246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3249 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3249.valid){
continue;
}
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3249.value)+(((1.5707963267949)*(x3250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3251=IKcos(j4);
IkReal x3252=IKsin(j4);
IkReal x3253=(cj5*r00);
IkReal x3254=(cj5*r10);
IkReal x3255=(cj5*r20);
IkReal x3256=((1.0)*x3251);
IkReal x3257=((1.0)*x3252);
IkReal x3258=(sj5*x3251);
IkReal x3259=(sj5*x3252);
evalcond[0]=(((r21*x3258))+((r22*x3252))+(((-1.0)*x3255*x3256)));
evalcond[1]=(((r21*x3259))+(((-1.0)*r22*x3256))+(((-1.0)*x3255*x3257)));
evalcond[2]=(cj0+((r02*x3252))+(((-1.0)*x3253*x3256))+((r01*x3258)));
evalcond[3]=(((r12*x3252))+sj0+((r11*x3258))+(((-1.0)*x3254*x3256)));
evalcond[4]=(cj0+((r11*x3259))+(((-1.0)*x3254*x3257))+(((-1.0)*r12*x3256)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3256))+(((-1.0)*x3253*x3257))+((r01*x3259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3260=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3260;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3261=((1.0)*cj5);
IkReal x3262=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3261)));
j4eval[0]=x3262;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3261))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3263=((1.0)*cj5);
IkReal x3264=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3263)));
j4eval[0]=x3264;
j4eval[1]=IKsign(x3264);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3263))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3265=((1.0)*cj5);
CheckValue<IkReal> x3266 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3265)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3266.valid){
continue;
}
CheckValue<IkReal> x3267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3265)))),-1);
if(!x3267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3266.value)+(((1.5707963267949)*(x3267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3268=IKcos(j4);
IkReal x3269=IKsin(j4);
IkReal x3270=((1.0)*sj0);
IkReal x3271=(cj5*r00);
IkReal x3272=(cj5*r10);
IkReal x3273=(cj5*r20);
IkReal x3274=((1.0)*x3268);
IkReal x3275=((1.0)*x3269);
IkReal x3276=(sj5*x3268);
IkReal x3277=(sj5*x3269);
evalcond[0]=((((-1.0)*x3273*x3274))+((r21*x3276))+((r22*x3269)));
evalcond[1]=((((-1.0)*x3273*x3275))+((r21*x3277))+(((-1.0)*r22*x3274)));
evalcond[2]=((((-1.0)*x3272*x3275))+(((-1.0)*r12*x3274))+cj0+((r11*x3277)));
evalcond[3]=(((r01*x3276))+((r02*x3269))+(((-1.0)*x3271*x3274))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3272*x3274))+(((-1.0)*x3270))+((r11*x3276))+((r12*x3269)));
evalcond[5]=(((r01*x3277))+(((-1.0)*x3270))+(((-1.0)*x3271*x3275))+(((-1.0)*r02*x3274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3278=((1.0)*cj5);
CheckValue<IkReal> x3279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3278)))),-1);
if(!x3279.valid){
continue;
}
CheckValue<IkReal> x3280 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3279.value)))+(x3280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3281=IKcos(j4);
IkReal x3282=IKsin(j4);
IkReal x3283=((1.0)*sj0);
IkReal x3284=(cj5*r00);
IkReal x3285=(cj5*r10);
IkReal x3286=(cj5*r20);
IkReal x3287=((1.0)*x3281);
IkReal x3288=((1.0)*x3282);
IkReal x3289=(sj5*x3281);
IkReal x3290=(sj5*x3282);
evalcond[0]=(((r22*x3282))+((r21*x3289))+(((-1.0)*x3286*x3287)));
evalcond[1]=((((-1.0)*r22*x3287))+((r21*x3290))+(((-1.0)*x3286*x3288)));
evalcond[2]=((((-1.0)*r12*x3287))+cj0+((r11*x3290))+(((-1.0)*x3285*x3288)));
evalcond[3]=(((r02*x3282))+(((-1.0)*x3284*x3287))+(((-1.0)*cj0))+((r01*x3289)));
evalcond[4]=((((-1.0)*x3283))+((r11*x3289))+((r12*x3282))+(((-1.0)*x3285*x3287)));
evalcond[5]=(((r01*x3290))+(((-1.0)*x3283))+(((-1.0)*r02*x3287))+(((-1.0)*x3284*x3288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3291 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3291.valid){
continue;
}
CheckValue<IkReal> x3292=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3291.value)+(((1.5707963267949)*(x3292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3293=IKcos(j4);
IkReal x3294=IKsin(j4);
IkReal x3295=((1.0)*sj0);
IkReal x3296=(cj5*r00);
IkReal x3297=(cj5*r10);
IkReal x3298=(cj5*r20);
IkReal x3299=((1.0)*x3293);
IkReal x3300=((1.0)*x3294);
IkReal x3301=(sj5*x3293);
IkReal x3302=(sj5*x3294);
evalcond[0]=(((r21*x3301))+(((-1.0)*x3298*x3299))+((r22*x3294)));
evalcond[1]=(((r21*x3302))+(((-1.0)*r22*x3299))+(((-1.0)*x3298*x3300)));
evalcond[2]=((((-1.0)*r12*x3299))+cj0+((r11*x3302))+(((-1.0)*x3297*x3300)));
evalcond[3]=(((r02*x3294))+(((-1.0)*x3296*x3299))+((r01*x3301))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3295))+((r11*x3301))+(((-1.0)*x3297*x3299))+((r12*x3294)));
evalcond[5]=((((-1.0)*x3295))+(((-1.0)*r02*x3299))+(((-1.0)*x3296*x3300))+((r01*x3302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3303=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3303;
j4eval[1]=IKsign(x3303);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3304=((1.0)*cj5);
IkReal x3305=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3304)));
j4eval[0]=x3305;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3304)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3306=cj5*cj5;
IkReal x3307=((1.0)*r20);
IkReal x3308=(r01*r21);
IkReal x3309=(r21*sj5);
IkReal x3310=(((cj5*r01*r20*sj5))+((cj5*r00*x3309))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3306*x3307))+(((-1.0)*x3308))+((x3306*x3308)));
j4eval[0]=x3310;
j4eval[1]=((IKabs((((cj0*x3309))+(((-1.0)*cj0*cj5*x3307)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3310);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3311=cj5*cj5;
IkReal x3312=((1.0)*r20);
IkReal x3313=(r01*r21);
IkReal x3314=(r21*sj5);
CheckValue<IkReal> x3315=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3314))+(((-1.0)*x3313))+(((-1.0)*r00*x3311*x3312))+((x3311*x3313)))),-1);
if(!x3315.valid){
continue;
}
CheckValue<IkReal> x3316 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3314))+(((-1.0)*cj0*cj5*x3312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3315.value)))+(x3316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3317=IKcos(j4);
IkReal x3318=IKsin(j4);
IkReal x3319=(cj5*r00);
IkReal x3320=(cj5*r10);
IkReal x3321=(cj5*r20);
IkReal x3322=((1.0)*x3317);
IkReal x3323=((1.0)*x3318);
IkReal x3324=(sj5*x3317);
IkReal x3325=(sj5*x3318);
evalcond[0]=((((-1.0)*x3321*x3322))+((r22*x3318))+((r21*x3324)));
evalcond[1]=((((-1.0)*x3321*x3323))+((r21*x3325))+(((-1.0)*r22*x3322)));
evalcond[2]=(cj0+((r01*x3324))+((r02*x3318))+(((-1.0)*x3319*x3322)));
evalcond[3]=(sj0+((r11*x3324))+(((-1.0)*x3320*x3322))+((r12*x3318)));
evalcond[4]=(cj0+((r11*x3325))+(((-1.0)*x3320*x3323))+(((-1.0)*r12*x3322)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3322))+((r01*x3325))+(((-1.0)*x3319*x3323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3326=((1.0)*cj5);
CheckValue<IkReal> x3327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3326)))),-1);
if(!x3327.valid){
continue;
}
CheckValue<IkReal> x3328 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3326)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3327.value)))+(x3328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3329=IKcos(j4);
IkReal x3330=IKsin(j4);
IkReal x3331=(cj5*r00);
IkReal x3332=(cj5*r10);
IkReal x3333=(cj5*r20);
IkReal x3334=((1.0)*x3329);
IkReal x3335=((1.0)*x3330);
IkReal x3336=(sj5*x3329);
IkReal x3337=(sj5*x3330);
evalcond[0]=(((r21*x3336))+((r22*x3330))+(((-1.0)*x3333*x3334)));
evalcond[1]=(((r21*x3337))+(((-1.0)*r22*x3334))+(((-1.0)*x3333*x3335)));
evalcond[2]=((((-1.0)*x3331*x3334))+cj0+((r02*x3330))+((r01*x3336)));
evalcond[3]=(sj0+((r12*x3330))+((r11*x3336))+(((-1.0)*x3332*x3334)));
evalcond[4]=(cj0+((r11*x3337))+(((-1.0)*x3332*x3335))+(((-1.0)*r12*x3334)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3331*x3335))+(((-1.0)*r02*x3334))+((r01*x3337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3338 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3338.valid){
continue;
}
CheckValue<IkReal> x3339=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3338.value)+(((1.5707963267949)*(x3339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3340=IKcos(j4);
IkReal x3341=IKsin(j4);
IkReal x3342=(cj5*r00);
IkReal x3343=(cj5*r10);
IkReal x3344=(cj5*r20);
IkReal x3345=((1.0)*x3340);
IkReal x3346=((1.0)*x3341);
IkReal x3347=(sj5*x3340);
IkReal x3348=(sj5*x3341);
evalcond[0]=(((r22*x3341))+((r21*x3347))+(((-1.0)*x3344*x3345)));
evalcond[1]=(((r21*x3348))+(((-1.0)*x3344*x3346))+(((-1.0)*r22*x3345)));
evalcond[2]=(cj0+((r02*x3341))+(((-1.0)*x3342*x3345))+((r01*x3347)));
evalcond[3]=(sj0+(((-1.0)*x3343*x3345))+((r11*x3347))+((r12*x3341)));
evalcond[4]=((((-1.0)*x3343*x3346))+cj0+(((-1.0)*r12*x3345))+((r11*x3348)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3345))+(((-1.0)*x3342*x3346))+((r01*x3348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3349=IKcos(j0);
IkReal x3350=IKsin(j0);
evalcond[0]=((((-0.10915)*x3350))+(((-1.0)*px))+(((-0.425)*x3349)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3350))+(((0.10915)*x3349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3351=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3351;
j4eval[1]=IKsign(x3351);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3352=((1.0)*cj5);
IkReal x3353=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3352)));
j4eval[0]=x3353;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3352)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3354=cj5*cj5;
IkReal x3355=((1.0)*r20);
IkReal x3356=(r01*r21);
IkReal x3357=(r21*sj5);
IkReal x3358=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3357))+((x3354*x3356))+(((-1.0)*r00*x3354*x3355))+(((-1.0)*x3356)));
j4eval[0]=x3358;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3355))+((cj0*x3357))))));
j4eval[2]=IKsign(x3358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3359=cj5*cj5;
IkReal x3360=((1.0)*r20);
IkReal x3361=(r01*r21);
IkReal x3362=(r21*sj5);
CheckValue<IkReal> x3363=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3361))+(((-1.0)*r00*x3359*x3360))+((x3359*x3361))+((cj5*r00*x3362)))),-1);
if(!x3363.valid){
continue;
}
CheckValue<IkReal> x3364 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3362))+(((-1.0)*cj0*cj5*x3360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3363.value)))+(x3364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3365=IKcos(j4);
IkReal x3366=IKsin(j4);
IkReal x3367=(cj5*r00);
IkReal x3368=(cj5*r10);
IkReal x3369=(cj5*r20);
IkReal x3370=((1.0)*x3365);
IkReal x3371=((1.0)*x3366);
IkReal x3372=(sj5*x3365);
IkReal x3373=(sj5*x3366);
evalcond[0]=(((r22*x3366))+((r21*x3372))+(((-1.0)*x3369*x3370)));
evalcond[1]=((((-1.0)*r22*x3370))+((r21*x3373))+(((-1.0)*x3369*x3371)));
evalcond[2]=(((r01*x3372))+((r02*x3366))+cj0+(((-1.0)*x3367*x3370)));
evalcond[3]=(sj0+((r12*x3366))+((r11*x3372))+(((-1.0)*x3368*x3370)));
evalcond[4]=(cj0+(((-1.0)*r12*x3370))+((r11*x3373))+(((-1.0)*x3368*x3371)));
evalcond[5]=(((r01*x3373))+(((-1.0)*sj0))+(((-1.0)*x3367*x3371))+(((-1.0)*r02*x3370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3374=((1.0)*cj5);
CheckValue<IkReal> x3375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3374)))),-1);
if(!x3375.valid){
continue;
}
CheckValue<IkReal> x3376 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3374)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3375.value)))+(x3376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3377=IKcos(j4);
IkReal x3378=IKsin(j4);
IkReal x3379=(cj5*r00);
IkReal x3380=(cj5*r10);
IkReal x3381=(cj5*r20);
IkReal x3382=((1.0)*x3377);
IkReal x3383=((1.0)*x3378);
IkReal x3384=(sj5*x3377);
IkReal x3385=(sj5*x3378);
evalcond[0]=(((r22*x3378))+(((-1.0)*x3381*x3382))+((r21*x3384)));
evalcond[1]=((((-1.0)*r22*x3382))+(((-1.0)*x3381*x3383))+((r21*x3385)));
evalcond[2]=(((r01*x3384))+cj0+((r02*x3378))+(((-1.0)*x3379*x3382)));
evalcond[3]=(((r12*x3378))+sj0+(((-1.0)*x3380*x3382))+((r11*x3384)));
evalcond[4]=(cj0+(((-1.0)*x3380*x3383))+((r11*x3385))+(((-1.0)*r12*x3382)));
evalcond[5]=(((r01*x3385))+(((-1.0)*sj0))+(((-1.0)*r02*x3382))+(((-1.0)*x3379*x3383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
CheckValue<IkReal> x3387=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3386.value)+(((1.5707963267949)*(x3387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3388=IKcos(j4);
IkReal x3389=IKsin(j4);
IkReal x3390=(cj5*r00);
IkReal x3391=(cj5*r10);
IkReal x3392=(cj5*r20);
IkReal x3393=((1.0)*x3388);
IkReal x3394=((1.0)*x3389);
IkReal x3395=(sj5*x3388);
IkReal x3396=(sj5*x3389);
evalcond[0]=((((-1.0)*x3392*x3393))+((r21*x3395))+((r22*x3389)));
evalcond[1]=((((-1.0)*r22*x3393))+(((-1.0)*x3392*x3394))+((r21*x3396)));
evalcond[2]=(cj0+((r01*x3395))+((r02*x3389))+(((-1.0)*x3390*x3393)));
evalcond[3]=(sj0+((r11*x3395))+((r12*x3389))+(((-1.0)*x3391*x3393)));
evalcond[4]=(cj0+((r11*x3396))+(((-1.0)*r12*x3393))+(((-1.0)*x3391*x3394)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3396))+(((-1.0)*r02*x3393))+(((-1.0)*x3390*x3394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3397=IKcos(j0);
IkReal x3398=IKsin(j0);
evalcond[0]=((((-0.10915)*x3398))+(((-1.0)*px))+(((-0.425)*x3397)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3398))+(((0.10915)*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3399=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3399;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3400=((1.0)*cj5);
IkReal x3401=((((-1.0)*r01*x3400))+(((-1.0)*r00*sj5)));
j4eval[0]=x3401;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3400))))));
j4eval[2]=IKsign(x3401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3402=((1.0)*cj5);
IkReal x3403=((((-1.0)*r01*x3402))+(((-1.0)*r00*sj5)));
j4eval[0]=x3403;
j4eval[1]=IKsign(x3403);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3402))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3404=((1.0)*cj5);
CheckValue<IkReal> x3405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3404))+(((-1.0)*r00*sj5)))),-1);
if(!x3405.valid){
continue;
}
CheckValue<IkReal> x3406 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3404))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3405.value)))+(x3406.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3407=IKcos(j4);
IkReal x3408=IKsin(j4);
IkReal x3409=((1.0)*sj0);
IkReal x3410=(cj5*r00);
IkReal x3411=(cj5*r10);
IkReal x3412=(cj5*r20);
IkReal x3413=((1.0)*x3407);
IkReal x3414=((1.0)*x3408);
IkReal x3415=(sj5*x3407);
IkReal x3416=(sj5*x3408);
evalcond[0]=(((r22*x3408))+(((-1.0)*x3412*x3413))+((r21*x3415)));
evalcond[1]=((((-1.0)*r22*x3413))+(((-1.0)*x3412*x3414))+((r21*x3416)));
evalcond[2]=(cj0+(((-1.0)*x3411*x3414))+((r11*x3416))+(((-1.0)*r12*x3413)));
evalcond[3]=(((r02*x3408))+((r01*x3415))+(((-1.0)*x3410*x3413))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3411*x3413))+((r11*x3415))+((r12*x3408))+(((-1.0)*x3409)));
evalcond[5]=((((-1.0)*r02*x3413))+((r01*x3416))+(((-1.0)*x3410*x3414))+(((-1.0)*x3409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3417=((1.0)*cj5);
CheckValue<IkReal> x3418 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3418.valid){
continue;
}
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3417)))),-1);
if(!x3419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3418.value)+(((1.5707963267949)*(x3419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3420=IKcos(j4);
IkReal x3421=IKsin(j4);
IkReal x3422=((1.0)*sj0);
IkReal x3423=(cj5*r00);
IkReal x3424=(cj5*r10);
IkReal x3425=(cj5*r20);
IkReal x3426=((1.0)*x3420);
IkReal x3427=((1.0)*x3421);
IkReal x3428=(sj5*x3420);
IkReal x3429=(sj5*x3421);
evalcond[0]=((((-1.0)*x3425*x3426))+((r21*x3428))+((r22*x3421)));
evalcond[1]=((((-1.0)*x3425*x3427))+(((-1.0)*r22*x3426))+((r21*x3429)));
evalcond[2]=((((-1.0)*r12*x3426))+cj0+(((-1.0)*x3424*x3427))+((r11*x3429)));
evalcond[3]=(((r02*x3421))+(((-1.0)*x3423*x3426))+(((-1.0)*cj0))+((r01*x3428)));
evalcond[4]=((((-1.0)*x3424*x3426))+(((-1.0)*x3422))+((r12*x3421))+((r11*x3428)));
evalcond[5]=((((-1.0)*x3422))+(((-1.0)*x3423*x3427))+(((-1.0)*r02*x3426))+((r01*x3429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3430 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3430.valid){
continue;
}
CheckValue<IkReal> x3431=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3430.value)+(((1.5707963267949)*(x3431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3432=IKcos(j4);
IkReal x3433=IKsin(j4);
IkReal x3434=((1.0)*sj0);
IkReal x3435=(cj5*r00);
IkReal x3436=(cj5*r10);
IkReal x3437=(cj5*r20);
IkReal x3438=((1.0)*x3432);
IkReal x3439=((1.0)*x3433);
IkReal x3440=(sj5*x3432);
IkReal x3441=(sj5*x3433);
evalcond[0]=(((r21*x3440))+(((-1.0)*x3437*x3438))+((r22*x3433)));
evalcond[1]=(((r21*x3441))+(((-1.0)*x3437*x3439))+(((-1.0)*r22*x3438)));
evalcond[2]=(((r11*x3441))+(((-1.0)*r12*x3438))+cj0+(((-1.0)*x3436*x3439)));
evalcond[3]=((((-1.0)*x3435*x3438))+((r01*x3440))+((r02*x3433))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3440))+(((-1.0)*x3436*x3438))+(((-1.0)*x3434))+((r12*x3433)));
evalcond[5]=((((-1.0)*x3434))+(((-1.0)*x3435*x3439))+((r01*x3441))+(((-1.0)*r02*x3438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3442=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3442;
j4eval[1]=IKsign(x3442);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3443=((1.0)*cj5);
IkReal x3444=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3443)));
j4eval[0]=x3444;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3443))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3445=cj5*cj5;
IkReal x3446=((1.0)*r20);
IkReal x3447=(r01*r21);
IkReal x3448=(r21*sj5);
IkReal x3449=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3447))+((x3445*x3447))+((cj5*r00*x3448))+(((-1.0)*r00*x3445*x3446)));
j4eval[0]=x3449;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3448))+(((-1.0)*cj0*cj5*x3446))))));
j4eval[2]=IKsign(x3449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3450=cj5*cj5;
IkReal x3451=((1.0)*r20);
IkReal x3452=(r01*r21);
IkReal x3453=(r21*sj5);
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3453))+(((-1.0)*cj0*cj5*x3451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
CheckValue<IkReal> x3455=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3450*x3451))+(((-1.0)*x3452))+((cj5*r00*x3453))+((x3450*x3452)))),-1);
if(!x3455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3454.value)+(((1.5707963267949)*(x3455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3456=IKcos(j4);
IkReal x3457=IKsin(j4);
IkReal x3458=(cj5*r00);
IkReal x3459=(cj5*r10);
IkReal x3460=(cj5*r20);
IkReal x3461=((1.0)*x3456);
IkReal x3462=((1.0)*x3457);
IkReal x3463=(sj5*x3456);
IkReal x3464=(sj5*x3457);
evalcond[0]=((((-1.0)*x3460*x3461))+((r22*x3457))+((r21*x3463)));
evalcond[1]=((((-1.0)*x3460*x3462))+(((-1.0)*r22*x3461))+((r21*x3464)));
evalcond[2]=(cj0+(((-1.0)*x3458*x3461))+((r01*x3463))+((r02*x3457)));
evalcond[3]=(sj0+((r12*x3457))+(((-1.0)*x3459*x3461))+((r11*x3463)));
evalcond[4]=(cj0+(((-1.0)*r12*x3461))+(((-1.0)*x3459*x3462))+((r11*x3464)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3461))+(((-1.0)*x3458*x3462))+((r01*x3464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3465=((1.0)*cj5);
CheckValue<IkReal> x3466 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3465)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3466.valid){
continue;
}
CheckValue<IkReal> x3467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3465)))),-1);
if(!x3467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3466.value)+(((1.5707963267949)*(x3467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3468=IKcos(j4);
IkReal x3469=IKsin(j4);
IkReal x3470=(cj5*r00);
IkReal x3471=(cj5*r10);
IkReal x3472=(cj5*r20);
IkReal x3473=((1.0)*x3468);
IkReal x3474=((1.0)*x3469);
IkReal x3475=(sj5*x3468);
IkReal x3476=(sj5*x3469);
evalcond[0]=((((-1.0)*x3472*x3473))+((r21*x3475))+((r22*x3469)));
evalcond[1]=((((-1.0)*x3472*x3474))+(((-1.0)*r22*x3473))+((r21*x3476)));
evalcond[2]=(cj0+((r01*x3475))+(((-1.0)*x3470*x3473))+((r02*x3469)));
evalcond[3]=(sj0+(((-1.0)*x3471*x3473))+((r12*x3469))+((r11*x3475)));
evalcond[4]=(cj0+(((-1.0)*x3471*x3474))+(((-1.0)*r12*x3473))+((r11*x3476)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3473))+((r01*x3476))+(((-1.0)*x3470*x3474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
CheckValue<IkReal> x3478=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3477.value)+(((1.5707963267949)*(x3478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3479=IKcos(j4);
IkReal x3480=IKsin(j4);
IkReal x3481=(cj5*r00);
IkReal x3482=(cj5*r10);
IkReal x3483=(cj5*r20);
IkReal x3484=((1.0)*x3479);
IkReal x3485=((1.0)*x3480);
IkReal x3486=(sj5*x3479);
IkReal x3487=(sj5*x3480);
evalcond[0]=((((-1.0)*x3483*x3484))+((r21*x3486))+((r22*x3480)));
evalcond[1]=((((-1.0)*x3483*x3485))+(((-1.0)*r22*x3484))+((r21*x3487)));
evalcond[2]=(cj0+(((-1.0)*x3481*x3484))+((r01*x3486))+((r02*x3480)));
evalcond[3]=(sj0+(((-1.0)*x3482*x3484))+((r12*x3480))+((r11*x3486)));
evalcond[4]=((((-1.0)*x3482*x3485))+cj0+(((-1.0)*r12*x3484))+((r11*x3487)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3481*x3485))+(((-1.0)*r02*x3484))+((r01*x3487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3488=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3488;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3489=((1.0)*cj5);
IkReal x3490=((((-1.0)*r01*x3489))+(((-1.0)*r00*sj5)));
j4eval[0]=x3490;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3489)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3491=((1.0)*cj5);
IkReal x3492=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3491)));
j4eval[0]=x3492;
j4eval[1]=IKsign(x3492);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3491))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3493=((1.0)*cj5);
CheckValue<IkReal> x3494 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3493))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3494.valid){
continue;
}
CheckValue<IkReal> x3495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3493)))),-1);
if(!x3495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3494.value)+(((1.5707963267949)*(x3495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3496=IKcos(j4);
IkReal x3497=IKsin(j4);
IkReal x3498=((1.0)*sj0);
IkReal x3499=(cj5*r00);
IkReal x3500=(cj5*r10);
IkReal x3501=(cj5*r20);
IkReal x3502=((1.0)*x3496);
IkReal x3503=((1.0)*x3497);
IkReal x3504=(sj5*x3496);
IkReal x3505=(sj5*x3497);
evalcond[0]=((((-1.0)*x3501*x3502))+((r22*x3497))+((r21*x3504)));
evalcond[1]=((((-1.0)*r22*x3502))+(((-1.0)*x3501*x3503))+((r21*x3505)));
evalcond[2]=((((-1.0)*r12*x3502))+cj0+((r11*x3505))+(((-1.0)*x3500*x3503)));
evalcond[3]=(((r01*x3504))+((r02*x3497))+(((-1.0)*x3499*x3502))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3498))+((r11*x3504))+((r12*x3497))+(((-1.0)*x3500*x3502)));
evalcond[5]=(((r01*x3505))+(((-1.0)*x3498))+(((-1.0)*x3499*x3503))+(((-1.0)*r02*x3502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3506=((1.0)*cj5);
CheckValue<IkReal> x3507=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3506)))),-1);
if(!x3507.valid){
continue;
}
CheckValue<IkReal> x3508 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3507.value)))+(x3508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3509=IKcos(j4);
IkReal x3510=IKsin(j4);
IkReal x3511=((1.0)*sj0);
IkReal x3512=(cj5*r00);
IkReal x3513=(cj5*r10);
IkReal x3514=(cj5*r20);
IkReal x3515=((1.0)*x3509);
IkReal x3516=((1.0)*x3510);
IkReal x3517=(sj5*x3509);
IkReal x3518=(sj5*x3510);
evalcond[0]=((((-1.0)*x3514*x3515))+((r21*x3517))+((r22*x3510)));
evalcond[1]=((((-1.0)*x3514*x3516))+((r21*x3518))+(((-1.0)*r22*x3515)));
evalcond[2]=(cj0+(((-1.0)*x3513*x3516))+((r11*x3518))+(((-1.0)*r12*x3515)));
evalcond[3]=((((-1.0)*x3512*x3515))+((r01*x3517))+((r02*x3510))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3513*x3515))+(((-1.0)*x3511))+((r11*x3517))+((r12*x3510)));
evalcond[5]=((((-1.0)*x3512*x3516))+(((-1.0)*r02*x3515))+(((-1.0)*x3511))+((r01*x3518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3519 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3519.valid){
continue;
}
CheckValue<IkReal> x3520=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3519.value)+(((1.5707963267949)*(x3520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3521=IKcos(j4);
IkReal x3522=IKsin(j4);
IkReal x3523=((1.0)*sj0);
IkReal x3524=(cj5*r00);
IkReal x3525=(cj5*r10);
IkReal x3526=(cj5*r20);
IkReal x3527=((1.0)*x3521);
IkReal x3528=((1.0)*x3522);
IkReal x3529=(sj5*x3521);
IkReal x3530=(sj5*x3522);
evalcond[0]=(((r21*x3529))+(((-1.0)*x3526*x3527))+((r22*x3522)));
evalcond[1]=((((-1.0)*x3526*x3528))+(((-1.0)*r22*x3527))+((r21*x3530)));
evalcond[2]=((((-1.0)*x3525*x3528))+((r11*x3530))+cj0+(((-1.0)*r12*x3527)));
evalcond[3]=((((-1.0)*x3524*x3527))+((r01*x3529))+((r02*x3522))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3525*x3527))+(((-1.0)*x3523))+((r11*x3529))+((r12*x3522)));
evalcond[5]=((((-1.0)*r02*x3527))+(((-1.0)*x3524*x3528))+(((-1.0)*x3523))+((r01*x3530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3531=(r00*sj5);
IkReal x3532=(cj5*r01);
IkReal x3533=(sj1*sj2);
IkReal x3534=(cj1*cj2);
IkReal x3535=((20000.0)*px);
IkReal x3536=((8500.0)*cj1);
IkReal x3537=((9738.0)*x3534);
CheckValue<IkReal> x3538=IKPowWithIntegerCheck(((((-2183.0)*x3534))+(((2183.0)*x3533))),-1);
if(!x3538.valid){
continue;
}
CheckValue<IkReal> x3539=IKPowWithIntegerCheck((x3533+(((-1.0)*x3534))),-1);
if(!x3539.valid){
continue;
}
if( IKabs(((x3538.value)*((((x3534*x3535))+(((-9738.0)*x3531*x3533))+((x3531*x3536))+((x3531*x3537))+((x3532*x3537))+((x3532*x3536))+(((-1.0)*x3533*x3535))+(((-9738.0)*x3532*x3533)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3539.value)*((x3531+x3532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3538.value)*((((x3534*x3535))+(((-9738.0)*x3531*x3533))+((x3531*x3536))+((x3531*x3537))+((x3532*x3537))+((x3532*x3536))+(((-1.0)*x3533*x3535))+(((-9738.0)*x3532*x3533))))))+IKsqr(((x3539.value)*((x3531+x3532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3538.value)*((((x3534*x3535))+(((-9738.0)*x3531*x3533))+((x3531*x3536))+((x3531*x3537))+((x3532*x3537))+((x3532*x3536))+(((-1.0)*x3533*x3535))+(((-9738.0)*x3532*x3533))))), ((x3539.value)*((x3531+x3532))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3540=IKcos(j0);
IkReal x3541=IKsin(j0);
IkReal x3542=(cj5*r11);
IkReal x3543=(cj5*r01);
IkReal x3544=((1.0)*sj5);
IkReal x3545=((0.09465)*sj5);
IkReal x3546=(sj1*sj2);
IkReal x3547=((0.39225)*cj2);
IkReal x3548=((1.0)*cj2);
IkReal x3549=((0.39225)*x3546);
IkReal x3550=(cj1*x3540);
IkReal x3551=(cj1*x3541);
evalcond[0]=((((-1.0)*r00*x3544))+(((-1.0)*x3548*x3550))+(((-1.0)*x3543))+((x3540*x3546)));
evalcond[1]=(((x3541*x3546))+(((-1.0)*r10*x3544))+(((-1.0)*x3548*x3551))+(((-1.0)*x3542)));
evalcond[2]=((((0.425)*x3550))+(((-0.09465)*x3543))+(((-1.0)*r00*x3545))+((x3547*x3550))+(((-1.0)*px))+(((-1.0)*x3540*x3549))+(((-0.10915)*x3541)));
evalcond[3]=((((0.425)*x3551))+(((-0.09465)*x3542))+(((0.10915)*x3540))+(((-1.0)*x3541*x3549))+(((-1.0)*r10*x3545))+((x3547*x3551))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3552=((1.0)*cj5);
IkReal x3553=((((-1.0)*r01*x3552))+(((-1.0)*r00*sj5)));
j4eval[0]=x3553;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3552)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3554=((1.0)*cj5);
IkReal x3555=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3554)));
j4eval[0]=x3555;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3554))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3556=((1.0)*sj0);
IkReal x3557=((1.0)*cj0);
IkReal x3558=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3558;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3557))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3556)))))+(IKabs(((((-1.0)*r12*x3556))+(((-1.0)*r02*x3557))))));
j4eval[2]=IKsign(x3558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3559=((-1.0)*r20);
IkReal x3561 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3561)==0){
continue;
}
IkReal x3560=pow(x3561,-0.5);
CheckValue<IkReal> x3562 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3559),IKFAST_ATAN2_MAGTHRESH);
if(!x3562.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3562.value));
IkReal gconst97=(r21*x3560);
IkReal gconst98=(x3559*x3560);
CheckValue<IkReal> x3563 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3563.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3563.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3564=((-1.0)*r20);
IkReal x3565=x3560;
CheckValue<IkReal> x3567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3564),IKFAST_ATAN2_MAGTHRESH);
if(!x3567.valid){
continue;
}
IkReal x3566=((-1.0)*(x3567.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3566;
IkReal gconst96=x3566;
IkReal gconst97=(r21*x3565);
IkReal gconst98=(x3564*x3565);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3568=((-1.0)*r20);
IkReal x3569=x3560;
CheckValue<IkReal> x3571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3568),IKFAST_ATAN2_MAGTHRESH);
if(!x3571.valid){
continue;
}
IkReal x3570=((-1.0)*(x3571.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3570;
IkReal gconst96=x3570;
IkReal gconst97=(r21*x3569);
IkReal gconst98=(x3568*x3569);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3572=((-1.0)*r20);
IkReal x3573=x3560;
CheckValue<IkReal> x3575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3572),IKFAST_ATAN2_MAGTHRESH);
if(!x3575.valid){
continue;
}
IkReal x3574=((-1.0)*(x3575.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3574;
IkReal gconst96=x3574;
IkReal gconst97=(r21*x3573);
IkReal gconst98=(x3572*x3573);
IkReal x3576=((1.0)*(r22*r22));
CheckValue<IkReal> x3580=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3576))),-1);
if(!x3580.valid){
continue;
}
IkReal x3577=x3580.value;
IkReal x3578=((1.0)*x3577);
IkReal x3579=((((-1.0)*x3578*(r21*r21*r21*r21)))+(((-1.0)*x3578*(r20*r20*r20*r20)))+(((-1.0)*x3576))+(((-2.0)*x3577*(r20*r20)*(r21*r21))));
j4eval[0]=x3579;
j4eval[1]=IKsign(x3579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3581=(cj1*cj2);
IkReal x3582=(gconst98*r20);
IkReal x3583=(sj1*sj2);
IkReal x3584=(gconst97*r21);
CheckValue<IkReal> x3585 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3581))+((r22*x3583)))),IkReal((((x3583*x3584))+(((-1.0)*x3581*x3584))+(((-1.0)*x3582*x3583))+((x3581*x3582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3585.valid){
continue;
}
CheckValue<IkReal> x3586=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3584*x3584)))+(((2.0)*x3582*x3584))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3582*x3582))))),-1);
if(!x3586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3585.value)+(((1.5707963267949)*(x3586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3587=IKsin(j4);
IkReal x3588=IKcos(j4);
IkReal x3589=(gconst98*r10);
IkReal x3590=(gconst97*r21);
IkReal x3591=(gconst98*r20);
IkReal x3592=((1.0)*cj2);
IkReal x3593=((1.0)*sj0);
IkReal x3594=(gconst98*r00);
IkReal x3595=(cj1*sj2);
IkReal x3596=((1.0)*x3588);
IkReal x3597=((1.0)*x3587);
IkReal x3598=(gconst97*x3587);
IkReal x3599=(gconst97*x3588);
evalcond[0]=((((-1.0)*r22*x3596))+((x3587*x3590))+(((-1.0)*x3591*x3597)));
evalcond[1]=((((-1.0)*x3589*x3597))+cj0+((r11*x3598))+(((-1.0)*r12*x3596)));
evalcond[2]=((((-1.0)*x3594*x3597))+(((-1.0)*r02*x3596))+((r01*x3598))+(((-1.0)*x3593)));
evalcond[3]=((((-1.0)*cj1*x3592))+((sj1*sj2))+((x3588*x3590))+(((-1.0)*x3591*x3596))+((r22*x3587)));
evalcond[4]=((((-1.0)*x3594*x3596))+((r02*x3587))+(((-1.0)*cj0*x3595))+((r01*x3599))+(((-1.0)*cj0*sj1*x3592)));
evalcond[5]=((((-1.0)*x3589*x3596))+((r12*x3587))+((r11*x3599))+(((-1.0)*x3593*x3595))+(((-1.0)*sj0*sj1*x3592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3600=((1.0)*gconst98);
CheckValue<IkReal> x3601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3600))+(((-1.0)*gconst97*r10)))),-1);
if(!x3601.valid){
continue;
}
CheckValue<IkReal> x3602 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3601.value)))+(x3602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3603=IKsin(j4);
IkReal x3604=IKcos(j4);
IkReal x3605=(gconst98*r10);
IkReal x3606=(gconst97*r21);
IkReal x3607=(gconst98*r20);
IkReal x3608=((1.0)*cj2);
IkReal x3609=((1.0)*sj0);
IkReal x3610=(gconst98*r00);
IkReal x3611=(cj1*sj2);
IkReal x3612=((1.0)*x3604);
IkReal x3613=((1.0)*x3603);
IkReal x3614=(gconst97*x3603);
IkReal x3615=(gconst97*x3604);
evalcond[0]=((((-1.0)*x3607*x3613))+(((-1.0)*r22*x3612))+((x3603*x3606)));
evalcond[1]=(((r11*x3614))+(((-1.0)*x3605*x3613))+cj0+(((-1.0)*r12*x3612)));
evalcond[2]=((((-1.0)*r02*x3612))+((r01*x3614))+(((-1.0)*x3609))+(((-1.0)*x3610*x3613)));
evalcond[3]=(((x3604*x3606))+((r22*x3603))+((sj1*sj2))+(((-1.0)*x3607*x3612))+(((-1.0)*cj1*x3608)));
evalcond[4]=(((r02*x3603))+((r01*x3615))+(((-1.0)*cj0*sj1*x3608))+(((-1.0)*x3610*x3612))+(((-1.0)*cj0*x3611)));
evalcond[5]=(((r11*x3615))+(((-1.0)*x3605*x3612))+(((-1.0)*x3609*x3611))+(((-1.0)*sj0*sj1*x3608))+((r12*x3603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3616=((1.0)*gconst98);
CheckValue<IkReal> x3617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3616))+(((-1.0)*gconst97*r00)))),-1);
if(!x3617.valid){
continue;
}
CheckValue<IkReal> x3618 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3617.value)))+(x3618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3619=IKsin(j4);
IkReal x3620=IKcos(j4);
IkReal x3621=(gconst98*r10);
IkReal x3622=(gconst97*r21);
IkReal x3623=(gconst98*r20);
IkReal x3624=((1.0)*cj2);
IkReal x3625=((1.0)*sj0);
IkReal x3626=(gconst98*r00);
IkReal x3627=(cj1*sj2);
IkReal x3628=((1.0)*x3620);
IkReal x3629=((1.0)*x3619);
IkReal x3630=(gconst97*x3619);
IkReal x3631=(gconst97*x3620);
evalcond[0]=(((x3619*x3622))+(((-1.0)*x3623*x3629))+(((-1.0)*r22*x3628)));
evalcond[1]=(((r11*x3630))+(((-1.0)*x3621*x3629))+cj0+(((-1.0)*r12*x3628)));
evalcond[2]=((((-1.0)*x3625))+(((-1.0)*x3626*x3629))+((r01*x3630))+(((-1.0)*r02*x3628)));
evalcond[3]=(((r22*x3619))+((sj1*sj2))+(((-1.0)*x3623*x3628))+((x3620*x3622))+(((-1.0)*cj1*x3624)));
evalcond[4]=(((r02*x3619))+(((-1.0)*x3626*x3628))+(((-1.0)*cj0*x3627))+((r01*x3631))+(((-1.0)*cj0*sj1*x3624)));
evalcond[5]=(((r11*x3631))+(((-1.0)*x3621*x3628))+(((-1.0)*x3625*x3627))+(((-1.0)*sj0*sj1*x3624))+((r12*x3619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3632=((-1.0)*r21);
IkReal x3634 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3634)==0){
continue;
}
IkReal x3633=pow(x3634,-0.5);
CheckValue<IkReal> x3635 = IKatan2WithCheck(IkReal(x3632),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3635.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3635.value))));
IkReal gconst100=(x3632*x3633);
IkReal gconst101=((1.0)*r20*x3633);
CheckValue<IkReal> x3636 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3636.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3636.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3637=((-1.0)*r21);
CheckValue<IkReal> x3640 = IKatan2WithCheck(IkReal(x3637),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3640.valid){
continue;
}
IkReal x3638=((1.0)*(x3640.value));
IkReal x3639=x3633;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3638)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3638)));
IkReal gconst100=(x3637*x3639);
IkReal gconst101=((1.0)*r20*x3639);
IkReal x3641=r22*r22;
IkReal x3642=((1.0)*x3641);
CheckValue<IkReal> x3646=IKPowWithIntegerCheck(((-1.0)+x3641),-1);
if(!x3646.valid){
continue;
}
IkReal x3643=x3646.value;
if((((1.0)+(((-1.0)*x3642)))) < -0.00001)
continue;
IkReal x3644=IKsqrt(((1.0)+(((-1.0)*x3642))));
IkReal x3645=(cj0*x3643*x3644);
j4eval[0]=((IKabs((x3645+(((-1.0)*x3642*x3645)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3647=((-1.0)*r21);
CheckValue<IkReal> x3650 = IKatan2WithCheck(IkReal(x3647),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3650.valid){
continue;
}
IkReal x3648=((1.0)*(x3650.value));
IkReal x3649=x3633;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3648)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3648)));
IkReal gconst100=(x3647*x3649);
IkReal gconst101=((1.0)*r20*x3649);
IkReal x3651=r22*r22;
IkReal x3652=((1.0)*x3651);
CheckValue<IkReal> x3656=IKPowWithIntegerCheck(((-1.0)+x3651),-1);
if(!x3656.valid){
continue;
}
IkReal x3653=x3656.value;
if((((1.0)+(((-1.0)*x3652)))) < -0.00001)
continue;
IkReal x3654=IKsqrt(((1.0)+(((-1.0)*x3652))));
IkReal x3655=(sj0*x3653*x3654);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3655+(((-1.0)*x3652*x3655))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3657=((-1.0)*r21);
CheckValue<IkReal> x3660 = IKatan2WithCheck(IkReal(x3657),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3660.valid){
continue;
}
IkReal x3658=((1.0)*(x3660.value));
IkReal x3659=x3633;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3658)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3658)));
IkReal gconst100=(x3657*x3659);
IkReal gconst101=((1.0)*r20*x3659);
IkReal x3661=r22*r22;
IkReal x3662=(r12*sj0);
IkReal x3663=(cj0*r02);
CheckValue<IkReal> x3667=IKPowWithIntegerCheck(((-1.0)+x3661),-1);
if(!x3667.valid){
continue;
}
IkReal x3664=x3667.value;
if((((1.0)+(((-1.0)*x3661)))) < -0.00001)
continue;
IkReal x3665=IKsqrt(((1.0)+(((-1.0)*x3661))));
IkReal x3666=(r22*x3664*x3665);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3662*x3666))+((x3663*x3666)))))+(IKabs(((((-1.0)*x3662))+(((-1.0)*x3663))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3668=((1.0)*sj0);
IkReal x3669=((1.0)*gconst100);
CheckValue<IkReal> x3670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3669))+(((-1.0)*gconst101*r21)))),-1);
if(!x3670.valid){
continue;
}
CheckValue<IkReal> x3671 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3668)))),IkReal(((((-1.0)*gconst100*r11*x3668))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3670.value)))+(x3671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3672=IKsin(j4);
IkReal x3673=IKcos(j4);
IkReal x3674=(gconst101*r20);
IkReal x3675=(gconst101*r10);
IkReal x3676=((1.0)*cj2);
IkReal x3677=(gconst101*r00);
IkReal x3678=((1.0)*sj0);
IkReal x3679=(cj1*sj2);
IkReal x3680=((1.0)*x3673);
IkReal x3681=((1.0)*x3672);
IkReal x3682=(gconst100*x3672);
IkReal x3683=(gconst100*x3673);
evalcond[0]=((((-1.0)*r22*x3680))+((r21*x3682))+(((-1.0)*x3674*x3681)));
evalcond[1]=(cj0+(((-1.0)*x3675*x3681))+(((-1.0)*r12*x3680))+((r11*x3682)));
evalcond[2]=(((r01*x3682))+(((-1.0)*x3677*x3681))+(((-1.0)*x3678))+(((-1.0)*r02*x3680)));
evalcond[3]=(((r21*x3683))+((sj1*sj2))+(((-1.0)*x3674*x3680))+((r22*x3672))+(((-1.0)*cj1*x3676)));
evalcond[4]=(((r01*x3683))+(((-1.0)*cj0*x3679))+(((-1.0)*x3677*x3680))+((r02*x3672))+(((-1.0)*cj0*sj1*x3676)));
evalcond[5]=(((r12*x3672))+(((-1.0)*x3675*x3680))+(((-1.0)*x3678*x3679))+((r11*x3683))+(((-1.0)*sj0*sj1*x3676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3684=((1.0)*gconst101);
CheckValue<IkReal> x3685 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3684))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3685.valid){
continue;
}
CheckValue<IkReal> x3686=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3684)))),-1);
if(!x3686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3685.value)+(((1.5707963267949)*(x3686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3687=IKsin(j4);
IkReal x3688=IKcos(j4);
IkReal x3689=(gconst101*r20);
IkReal x3690=(gconst101*r10);
IkReal x3691=((1.0)*cj2);
IkReal x3692=(gconst101*r00);
IkReal x3693=((1.0)*sj0);
IkReal x3694=(cj1*sj2);
IkReal x3695=((1.0)*x3688);
IkReal x3696=((1.0)*x3687);
IkReal x3697=(gconst100*x3687);
IkReal x3698=(gconst100*x3688);
evalcond[0]=((((-1.0)*x3689*x3696))+(((-1.0)*r22*x3695))+((r21*x3697)));
evalcond[1]=(cj0+(((-1.0)*r12*x3695))+((r11*x3697))+(((-1.0)*x3690*x3696)));
evalcond[2]=(((r01*x3697))+(((-1.0)*r02*x3695))+(((-1.0)*x3693))+(((-1.0)*x3692*x3696)));
evalcond[3]=((((-1.0)*x3689*x3695))+(((-1.0)*cj1*x3691))+((sj1*sj2))+((r21*x3698))+((r22*x3687)));
evalcond[4]=(((r01*x3698))+(((-1.0)*cj0*x3694))+(((-1.0)*cj0*sj1*x3691))+((r02*x3687))+(((-1.0)*x3692*x3695)));
evalcond[5]=(((r12*x3687))+(((-1.0)*sj0*sj1*x3691))+((r11*x3698))+(((-1.0)*x3693*x3694))+(((-1.0)*x3690*x3695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3699=((1.0)*gconst101);
CheckValue<IkReal> x3700 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3700.valid){
continue;
}
CheckValue<IkReal> x3701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3699)))),-1);
if(!x3701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3700.value)+(((1.5707963267949)*(x3701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3702=IKsin(j4);
IkReal x3703=IKcos(j4);
IkReal x3704=(gconst101*r20);
IkReal x3705=(gconst101*r10);
IkReal x3706=((1.0)*cj2);
IkReal x3707=(gconst101*r00);
IkReal x3708=((1.0)*sj0);
IkReal x3709=(cj1*sj2);
IkReal x3710=((1.0)*x3703);
IkReal x3711=((1.0)*x3702);
IkReal x3712=(gconst100*x3702);
IkReal x3713=(gconst100*x3703);
evalcond[0]=((((-1.0)*x3704*x3711))+((r21*x3712))+(((-1.0)*r22*x3710)));
evalcond[1]=(((r11*x3712))+cj0+(((-1.0)*x3705*x3711))+(((-1.0)*r12*x3710)));
evalcond[2]=((((-1.0)*x3707*x3711))+(((-1.0)*r02*x3710))+(((-1.0)*x3708))+((r01*x3712)));
evalcond[3]=((((-1.0)*x3704*x3710))+(((-1.0)*cj1*x3706))+((sj1*sj2))+((r21*x3713))+((r22*x3702)));
evalcond[4]=((((-1.0)*cj0*x3709))+(((-1.0)*cj0*sj1*x3706))+(((-1.0)*x3707*x3710))+((r01*x3713))+((r02*x3702)));
evalcond[5]=(((r11*x3713))+((r12*x3702))+(((-1.0)*x3705*x3710))+(((-1.0)*sj0*sj1*x3706))+(((-1.0)*x3708*x3709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3714=((-1.0)*r10);
IkReal x3716 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3716)==0){
continue;
}
IkReal x3715=pow(x3716,-0.5);
CheckValue<IkReal> x3717 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3714),IKFAST_ATAN2_MAGTHRESH);
if(!x3717.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3717.value));
IkReal gconst103=(r11*x3715);
IkReal gconst104=(x3714*x3715);
CheckValue<IkReal> x3718 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3718.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3718.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3719=((-1.0)*r10);
IkReal x3720=x3715;
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3719),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
IkReal x3721=((-1.0)*(x3722.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3721;
IkReal gconst102=x3721;
IkReal gconst103=(r11*x3720);
IkReal gconst104=(x3719*x3720);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3723=((1.0)*sj0);
IkReal x3724=((1.0)*gconst103);
CheckValue<IkReal> x3725 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3723))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3724))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3723))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3725.valid){
continue;
}
CheckValue<IkReal> x3726=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3724)))),-1);
if(!x3726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3725.value)+(((1.5707963267949)*(x3726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3727=IKsin(j4);
IkReal x3728=IKcos(j4);
IkReal x3729=(gconst103*r11);
IkReal x3730=((1.0)*cj2);
IkReal x3731=((1.0)*sj0);
IkReal x3732=(cj1*sj2);
IkReal x3733=((1.0)*x3728);
IkReal x3734=(gconst103*x3728);
IkReal x3735=(gconst103*x3727);
IkReal x3736=((1.0)*gconst104*x3727);
evalcond[0]=((((-1.0)*r20*x3736))+(((-1.0)*r22*x3733))+((r21*x3735)));
evalcond[1]=(((x3727*x3729))+cj0+(((-1.0)*r12*x3733))+(((-1.0)*r10*x3736)));
evalcond[2]=((((-1.0)*x3731))+((r01*x3735))+(((-1.0)*r00*x3736))+(((-1.0)*r02*x3733)));
evalcond[3]=((((-1.0)*cj1*x3730))+((r22*x3727))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3733))+((r21*x3734)));
evalcond[4]=((((-1.0)*gconst104*r00*x3733))+((r01*x3734))+(((-1.0)*cj0*x3732))+((r02*x3727))+(((-1.0)*cj0*sj1*x3730)));
evalcond[5]=((((-1.0)*sj0*sj1*x3730))+((r12*x3727))+(((-1.0)*x3731*x3732))+((x3728*x3729))+(((-1.0)*gconst104*r10*x3733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3737=((1.0)*gconst104);
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3737))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
CheckValue<IkReal> x3739=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3737)))),-1);
if(!x3739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3738.value)+(((1.5707963267949)*(x3739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3740=IKsin(j4);
IkReal x3741=IKcos(j4);
IkReal x3742=(gconst103*r11);
IkReal x3743=((1.0)*cj2);
IkReal x3744=((1.0)*sj0);
IkReal x3745=(cj1*sj2);
IkReal x3746=((1.0)*x3741);
IkReal x3747=(gconst103*x3741);
IkReal x3748=(gconst103*x3740);
IkReal x3749=((1.0)*gconst104*x3740);
evalcond[0]=((((-1.0)*r22*x3746))+(((-1.0)*r20*x3749))+((r21*x3748)));
evalcond[1]=(cj0+(((-1.0)*r12*x3746))+(((-1.0)*r10*x3749))+((x3740*x3742)));
evalcond[2]=(((r01*x3748))+(((-1.0)*r00*x3749))+(((-1.0)*x3744))+(((-1.0)*r02*x3746)));
evalcond[3]=((((-1.0)*gconst104*r20*x3746))+((sj1*sj2))+((r22*x3740))+((r21*x3747))+(((-1.0)*cj1*x3743)));
evalcond[4]=((((-1.0)*gconst104*r00*x3746))+((r01*x3747))+(((-1.0)*cj0*x3745))+((r02*x3740))+(((-1.0)*cj0*sj1*x3743)));
evalcond[5]=((((-1.0)*sj0*sj1*x3743))+((r12*x3740))+(((-1.0)*x3744*x3745))+(((-1.0)*gconst104*r10*x3746))+((x3741*x3742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3750=((-1.0)*r11);
IkReal x3752 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3752)==0){
continue;
}
IkReal x3751=pow(x3752,-0.5);
CheckValue<IkReal> x3753 = IKatan2WithCheck(IkReal(x3750),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3753.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3753.value))));
IkReal gconst106=(x3750*x3751);
IkReal gconst107=((1.0)*r10*x3751);
CheckValue<IkReal> x3754 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3754.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3754.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3755=((-1.0)*r11);
CheckValue<IkReal> x3758 = IKatan2WithCheck(IkReal(x3755),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3758.valid){
continue;
}
IkReal x3756=((1.0)*(x3758.value));
IkReal x3757=x3751;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3756)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3756)));
IkReal gconst106=(x3755*x3757);
IkReal gconst107=((1.0)*r10*x3757);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3759=((-1.0)*r11);
CheckValue<IkReal> x3762 = IKatan2WithCheck(IkReal(x3759),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3762.valid){
continue;
}
IkReal x3760=((1.0)*(x3762.value));
IkReal x3761=x3751;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3760)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3760)));
IkReal gconst106=(x3759*x3761);
IkReal gconst107=((1.0)*r10*x3761);
IkReal x3763=r12*r12;
IkReal x3764=((1.0)*sj0);
IkReal x3765=(cj0*r02);
IkReal x3766=x3751;
j4eval[0]=((IKabs((((sj0*x3763*x3766))+(((-1.0)*x3764*x3766))+((r12*x3765*x3766)))))+(IKabs(((((-1.0)*x3765))+(((-1.0)*r12*x3764))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3767=((-1.0)*r11);
CheckValue<IkReal> x3770 = IKatan2WithCheck(IkReal(x3767),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3770.valid){
continue;
}
IkReal x3768=((1.0)*(x3770.value));
IkReal x3769=x3751;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3768)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3768)));
IkReal gconst106=(x3767*x3769);
IkReal gconst107=((1.0)*r10*x3769);
IkReal x3771=r12*r12;
IkReal x3772=((1.0)+(((-1.0)*x3771)));
IkReal x3773=(r22*sj1*sj2);
IkReal x3774=(cj1*cj2*r22);
CheckValue<IkReal> x3781=IKPowWithIntegerCheck(x3772,-1);
if(!x3781.valid){
continue;
}
IkReal x3775=x3781.value;
CheckValue<IkReal> x3782=IKPowWithIntegerCheck(((-1.0)+x3771),-1);
if(!x3782.valid){
continue;
}
IkReal x3776=x3782.value;
IkReal x3777=((1.0)*x3775);
if((x3772) < -0.00001)
continue;
IkReal x3778=IKsqrt(x3772);
IkReal x3779=(r12*x3776*x3778);
IkReal x3780=((((-2.0)*r10*r11*r20*r21*x3775))+(((-1.0)*(r22*r22)))+(((-1.0)*x3777*(r11*r11)*(r21*r21)))+(((-1.0)*x3777*(r10*r10)*(r20*r20))));
j4eval[0]=x3780;
j4eval[1]=((IKabs(((((-1.0)*x3773*x3779))+((x3774*x3779)))))+(IKabs(((((-1.0)*x3774))+x3773))));
j4eval[2]=IKsign(x3780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3783=(sj1*sj2);
IkReal x3784=(gconst106*r21);
IkReal x3785=(gconst107*r20);
IkReal x3786=(cj1*cj2);
CheckValue<IkReal> x3787 = IKatan2WithCheck(IkReal((((r22*x3783))+(((-1.0)*r22*x3786)))),IkReal((((x3785*x3786))+(((-1.0)*x3784*x3786))+(((-1.0)*x3783*x3785))+((x3783*x3784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3787.valid){
continue;
}
CheckValue<IkReal> x3788=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3784*x3784)))+(((-1.0)*(r22*r22)))+(((2.0)*x3784*x3785))+(((-1.0)*(x3785*x3785))))),-1);
if(!x3788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3787.value)+(((1.5707963267949)*(x3788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3789=IKsin(j4);
IkReal x3790=IKcos(j4);
IkReal x3791=(gconst107*r10);
IkReal x3792=(gconst107*r00);
IkReal x3793=((1.0)*cj2);
IkReal x3794=(gconst107*r20);
IkReal x3795=((1.0)*sj0);
IkReal x3796=(cj1*sj2);
IkReal x3797=((1.0)*x3790);
IkReal x3798=(gconst106*x3790);
IkReal x3799=(gconst106*x3789);
IkReal x3800=((1.0)*x3789);
evalcond[0]=(((r21*x3799))+(((-1.0)*r22*x3797))+(((-1.0)*x3794*x3800)));
evalcond[1]=((((-1.0)*r12*x3797))+cj0+(((-1.0)*x3791*x3800))+((r11*x3799)));
evalcond[2]=((((-1.0)*x3795))+(((-1.0)*r02*x3797))+(((-1.0)*x3792*x3800))+((r01*x3799)));
evalcond[3]=(((r21*x3798))+((r22*x3789))+((sj1*sj2))+(((-1.0)*cj1*x3793))+(((-1.0)*x3794*x3797)));
evalcond[4]=(((r02*x3789))+(((-1.0)*cj0*sj1*x3793))+(((-1.0)*cj0*x3796))+(((-1.0)*x3792*x3797))+((r01*x3798)));
evalcond[5]=((((-1.0)*sj0*sj1*x3793))+((r12*x3789))+(((-1.0)*x3791*x3797))+(((-1.0)*x3795*x3796))+((r11*x3798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3801=((1.0)*sj0);
IkReal x3802=((1.0)*gconst106);
CheckValue<IkReal> x3803 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3801)))),IkReal(((((-1.0)*gconst106*r11*x3801))+(((-1.0)*cj0*r01*x3802))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3803.valid){
continue;
}
CheckValue<IkReal> x3804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3802)))),-1);
if(!x3804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3803.value)+(((1.5707963267949)*(x3804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3805=IKsin(j4);
IkReal x3806=IKcos(j4);
IkReal x3807=(gconst107*r10);
IkReal x3808=(gconst107*r00);
IkReal x3809=((1.0)*cj2);
IkReal x3810=(gconst107*r20);
IkReal x3811=((1.0)*sj0);
IkReal x3812=(cj1*sj2);
IkReal x3813=((1.0)*x3806);
IkReal x3814=(gconst106*x3806);
IkReal x3815=(gconst106*x3805);
IkReal x3816=((1.0)*x3805);
evalcond[0]=((((-1.0)*r22*x3813))+((r21*x3815))+(((-1.0)*x3810*x3816)));
evalcond[1]=((((-1.0)*x3807*x3816))+(((-1.0)*r12*x3813))+cj0+((r11*x3815)));
evalcond[2]=((((-1.0)*r02*x3813))+(((-1.0)*x3808*x3816))+(((-1.0)*x3811))+((r01*x3815)));
evalcond[3]=(((r21*x3814))+((r22*x3805))+((sj1*sj2))+(((-1.0)*x3810*x3813))+(((-1.0)*cj1*x3809)));
evalcond[4]=((((-1.0)*cj0*x3812))+(((-1.0)*x3808*x3813))+((r02*x3805))+(((-1.0)*cj0*sj1*x3809))+((r01*x3814)));
evalcond[5]=((((-1.0)*sj0*sj1*x3809))+(((-1.0)*x3807*x3813))+((r11*x3814))+((r12*x3805))+(((-1.0)*x3811*x3812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3817=((1.0)*gconst107);
CheckValue<IkReal> x3818 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3818.valid){
continue;
}
CheckValue<IkReal> x3819=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3817))+(((-1.0)*gconst106*r00)))),-1);
if(!x3819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3818.value)+(((1.5707963267949)*(x3819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3820=IKsin(j4);
IkReal x3821=IKcos(j4);
IkReal x3822=(gconst107*r10);
IkReal x3823=(gconst107*r00);
IkReal x3824=((1.0)*cj2);
IkReal x3825=(gconst107*r20);
IkReal x3826=((1.0)*sj0);
IkReal x3827=(cj1*sj2);
IkReal x3828=((1.0)*x3821);
IkReal x3829=(gconst106*x3821);
IkReal x3830=(gconst106*x3820);
IkReal x3831=((1.0)*x3820);
evalcond[0]=((((-1.0)*r22*x3828))+((r21*x3830))+(((-1.0)*x3825*x3831)));
evalcond[1]=((((-1.0)*r12*x3828))+cj0+((r11*x3830))+(((-1.0)*x3822*x3831)));
evalcond[2]=((((-1.0)*r02*x3828))+((r01*x3830))+(((-1.0)*x3826))+(((-1.0)*x3823*x3831)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3824))+(((-1.0)*x3825*x3828))+((r22*x3820))+((r21*x3829)));
evalcond[4]=((((-1.0)*cj0*x3827))+(((-1.0)*x3823*x3828))+((r02*x3820))+(((-1.0)*cj0*sj1*x3824))+((r01*x3829)));
evalcond[5]=(((r12*x3820))+(((-1.0)*sj0*sj1*x3824))+((r11*x3829))+(((-1.0)*x3826*x3827))+(((-1.0)*x3822*x3828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3832=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3832;
j4eval[1]=IKsign(x3832);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3833=((1.0)*cj5);
IkReal x3834=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3833)));
j4eval[0]=x3834;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3833))+((r21*sj5))))));
j4eval[2]=IKsign(x3834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3835=(sj1*sj2);
IkReal x3836=(cj5*r10);
IkReal x3837=(r11*sj5);
IkReal x3838=(cj1*cj2);
IkReal x3839=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3839;
j4eval[1]=((IKabs(((((-1.0)*r12*x3835))+((r12*x3838)))))+(IKabs(((((-1.0)*x3837*x3838))+((x3835*x3837))+(((-1.0)*x3835*x3836))+((x3836*x3838))))));
j4eval[2]=IKsign(x3839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3840=(sj1*sj2);
IkReal x3841=(cj5*r10);
IkReal x3842=(r11*sj5);
IkReal x3843=(cj1*cj2);
CheckValue<IkReal> x3844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3844.valid){
continue;
}
CheckValue<IkReal> x3845 = IKatan2WithCheck(IkReal((((x3841*x3843))+(((-1.0)*x3840*x3841))+((x3840*x3842))+(((-1.0)*x3842*x3843)))),IkReal((((r12*x3843))+(((-1.0)*r12*x3840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3844.value)))+(x3845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3846=IKcos(j4);
IkReal x3847=IKsin(j4);
IkReal x3848=(cj5*r00);
IkReal x3849=(cj5*r10);
IkReal x3850=(r21*sj5);
IkReal x3851=((1.0)*cj2);
IkReal x3852=(cj5*r20);
IkReal x3853=((1.0)*x3846);
IkReal x3854=((1.0)*x3847);
IkReal x3855=(sj5*x3847);
IkReal x3856=(sj5*x3846);
evalcond[0]=(((r12*x3847))+((r11*x3856))+(((-1.0)*x3849*x3853)));
evalcond[1]=(((x3847*x3850))+(((-1.0)*x3852*x3854))+(((-1.0)*r22*x3853)));
evalcond[2]=((((-1.0)*x3848*x3854))+((r01*x3855))+(((-1.0)*r02*x3853)));
evalcond[3]=((1.0)+((r11*x3855))+(((-1.0)*r12*x3853))+(((-1.0)*x3849*x3854)));
evalcond[4]=(((x3846*x3850))+((sj1*sj2))+(((-1.0)*cj1*x3851))+(((-1.0)*x3852*x3853))+((r22*x3847)));
evalcond[5]=((((-1.0)*x3848*x3853))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3851))+((r01*x3856))+((r02*x3847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3857=((1.0)*cj5);
CheckValue<IkReal> x3858 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3857))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3858.valid){
continue;
}
CheckValue<IkReal> x3859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3857)))),-1);
if(!x3859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3858.value)+(((1.5707963267949)*(x3859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3860=IKcos(j4);
IkReal x3861=IKsin(j4);
IkReal x3862=(cj5*r00);
IkReal x3863=(cj5*r10);
IkReal x3864=(r21*sj5);
IkReal x3865=((1.0)*cj2);
IkReal x3866=(cj5*r20);
IkReal x3867=((1.0)*x3860);
IkReal x3868=((1.0)*x3861);
IkReal x3869=(sj5*x3861);
IkReal x3870=(sj5*x3860);
evalcond[0]=((((-1.0)*x3863*x3867))+((r11*x3870))+((r12*x3861)));
evalcond[1]=((((-1.0)*x3866*x3868))+((x3861*x3864))+(((-1.0)*r22*x3867)));
evalcond[2]=((((-1.0)*r02*x3867))+((r01*x3869))+(((-1.0)*x3862*x3868)));
evalcond[3]=((1.0)+((r11*x3869))+(((-1.0)*x3863*x3868))+(((-1.0)*r12*x3867)));
evalcond[4]=(((x3860*x3864))+(((-1.0)*x3866*x3867))+((sj1*sj2))+(((-1.0)*cj1*x3865))+((r22*x3861)));
evalcond[5]=(((r02*x3861))+((r01*x3870))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3865))+(((-1.0)*x3862*x3867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3871=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3871.valid){
continue;
}
CheckValue<IkReal> x3872 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3871.value)))+(x3872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3873=IKcos(j4);
IkReal x3874=IKsin(j4);
IkReal x3875=(cj5*r00);
IkReal x3876=(cj5*r10);
IkReal x3877=(r21*sj5);
IkReal x3878=((1.0)*cj2);
IkReal x3879=(cj5*r20);
IkReal x3880=((1.0)*x3873);
IkReal x3881=((1.0)*x3874);
IkReal x3882=(sj5*x3874);
IkReal x3883=(sj5*x3873);
evalcond[0]=(((r11*x3883))+((r12*x3874))+(((-1.0)*x3876*x3880)));
evalcond[1]=((((-1.0)*x3879*x3881))+(((-1.0)*r22*x3880))+((x3874*x3877)));
evalcond[2]=((((-1.0)*r02*x3880))+((r01*x3882))+(((-1.0)*x3875*x3881)));
evalcond[3]=((1.0)+((r11*x3882))+(((-1.0)*r12*x3880))+(((-1.0)*x3876*x3881)));
evalcond[4]=((((-1.0)*x3879*x3880))+((sj1*sj2))+((x3873*x3877))+(((-1.0)*cj1*x3878))+((r22*x3874)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3883))+(((-1.0)*sj1*x3878))+(((-1.0)*x3875*x3880))+((r02*x3874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3884=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3884;
j4eval[1]=IKsign(x3884);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3885=((1.0)*cj5);
IkReal x3886=((((-1.0)*r21*x3885))+(((-1.0)*r20*sj5)));
j4eval[0]=x3886;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3885))))));
j4eval[2]=IKsign(x3886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3887=cj5*cj5;
IkReal x3888=r11*r11;
IkReal x3889=(r11*sj5);
IkReal x3890=(cj5*r10);
IkReal x3891=((r12*r12)+((x3887*(r10*r10)))+(((-1.0)*x3887*x3888))+x3888+(((-2.0)*x3889*x3890)));
j4eval[0]=x3891;
j4eval[1]=IKsign(x3891);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3890))+x3889))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3892=cj5*cj5;
IkReal x3893=r11*r11;
IkReal x3894=(cj5*r10);
IkReal x3895=(r11*sj5);
CheckValue<IkReal> x3896 = IKatan2WithCheck(IkReal(((((-1.0)*x3894))+x3895)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3896.valid){
continue;
}
CheckValue<IkReal> x3897=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3892*x3893))+(((-2.0)*x3894*x3895))+((x3892*(r10*r10)))+x3893)),-1);
if(!x3897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3896.value)+(((1.5707963267949)*(x3897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3898=IKcos(j4);
IkReal x3899=IKsin(j4);
IkReal x3900=(cj5*r00);
IkReal x3901=(cj5*r10);
IkReal x3902=(r21*sj5);
IkReal x3903=(cj5*r20);
IkReal x3904=((1.0)*x3898);
IkReal x3905=((1.0)*x3899);
IkReal x3906=(sj5*x3899);
IkReal x3907=(sj5*x3898);
evalcond[0]=((((-1.0)*x3901*x3904))+((r12*x3899))+((r11*x3907)));
evalcond[1]=((((-1.0)*x3903*x3905))+(((-1.0)*r22*x3904))+((x3899*x3902)));
evalcond[2]=((((-1.0)*x3900*x3905))+((r01*x3906))+(((-1.0)*r02*x3904)));
evalcond[3]=((-1.0)+(((-1.0)*x3901*x3905))+(((-1.0)*r12*x3904))+((r11*x3906)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3900*x3904))+((cj1*sj2))+((r01*x3907))+((r02*x3899)));
evalcond[5]=((((-1.0)*x3903*x3904))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3898*x3902))+((r22*x3899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3908=((1.0)*cj5);
CheckValue<IkReal> x3909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3908))+(((-1.0)*r20*sj5)))),-1);
if(!x3909.valid){
continue;
}
CheckValue<IkReal> x3910 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3909.value)))+(x3910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3911=IKcos(j4);
IkReal x3912=IKsin(j4);
IkReal x3913=(cj5*r00);
IkReal x3914=(cj5*r10);
IkReal x3915=(r21*sj5);
IkReal x3916=(cj5*r20);
IkReal x3917=((1.0)*x3911);
IkReal x3918=((1.0)*x3912);
IkReal x3919=(sj5*x3912);
IkReal x3920=(sj5*x3911);
evalcond[0]=(((r11*x3920))+(((-1.0)*x3914*x3917))+((r12*x3912)));
evalcond[1]=((((-1.0)*r22*x3917))+(((-1.0)*x3916*x3918))+((x3912*x3915)));
evalcond[2]=((((-1.0)*r02*x3917))+((r01*x3919))+(((-1.0)*x3913*x3918)));
evalcond[3]=((-1.0)+(((-1.0)*x3914*x3918))+((r11*x3919))+(((-1.0)*r12*x3917)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3913*x3917))+((r02*x3912))+((r01*x3920)));
evalcond[5]=((((-1.0)*x3916*x3917))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3911*x3915))+((r22*x3912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3921 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3921.valid){
continue;
}
CheckValue<IkReal> x3922=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3921.value)+(((1.5707963267949)*(x3922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3923=IKcos(j4);
IkReal x3924=IKsin(j4);
IkReal x3925=(cj5*r00);
IkReal x3926=(cj5*r10);
IkReal x3927=(r21*sj5);
IkReal x3928=(cj5*r20);
IkReal x3929=((1.0)*x3923);
IkReal x3930=((1.0)*x3924);
IkReal x3931=(sj5*x3924);
IkReal x3932=(sj5*x3923);
evalcond[0]=(((r12*x3924))+(((-1.0)*x3926*x3929))+((r11*x3932)));
evalcond[1]=((((-1.0)*r22*x3929))+(((-1.0)*x3928*x3930))+((x3924*x3927)));
evalcond[2]=(((r01*x3931))+(((-1.0)*r02*x3929))+(((-1.0)*x3925*x3930)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3929))+(((-1.0)*x3926*x3930))+((r11*x3931)));
evalcond[4]=(((cj2*sj1))+((r01*x3932))+(((-1.0)*x3925*x3929))+((cj1*sj2))+((r02*x3924)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3928*x3929))+((r22*x3924))+((x3923*x3927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3933=((-1.0)*r00);
IkReal x3935 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3935)==0){
continue;
}
IkReal x3934=pow(x3935,-0.5);
CheckValue<IkReal> x3936 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3933),IKFAST_ATAN2_MAGTHRESH);
if(!x3936.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3936.value));
IkReal gconst109=(r01*x3934);
IkReal gconst110=(x3933*x3934);
CheckValue<IkReal> x3937 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3937.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3937.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3938=((-1.0)*r00);
IkReal x3939=x3934;
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3938),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
IkReal x3940=((-1.0)*(x3941.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3940;
IkReal gconst108=x3940;
IkReal gconst109=(r01*x3939);
IkReal gconst110=(x3938*x3939);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3942=((1.0)*sj0);
IkReal x3943=((1.0)*gconst109);
CheckValue<IkReal> x3944 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3942)))),IkReal(((((-1.0)*cj0*r01*x3943))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3944.valid){
continue;
}
CheckValue<IkReal> x3945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3943))+(((-1.0)*gconst110*r21)))),-1);
if(!x3945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3944.value)+(((1.5707963267949)*(x3945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3946=IKsin(j4);
IkReal x3947=IKcos(j4);
IkReal x3948=(gconst109*r21);
IkReal x3949=((1.0)*cj2);
IkReal x3950=((1.0)*sj0);
IkReal x3951=(cj1*sj2);
IkReal x3952=((1.0)*x3947);
IkReal x3953=(gconst109*x3946);
IkReal x3954=(gconst109*x3947);
IkReal x3955=((1.0)*gconst110*x3946);
evalcond[0]=((((-1.0)*r22*x3952))+((x3946*x3948))+(((-1.0)*r20*x3955)));
evalcond[1]=(cj0+(((-1.0)*r12*x3952))+((r11*x3953))+(((-1.0)*r10*x3955)));
evalcond[2]=(((r01*x3953))+(((-1.0)*r00*x3955))+(((-1.0)*x3950))+(((-1.0)*r02*x3952)));
evalcond[3]=(((r22*x3946))+(((-1.0)*cj1*x3949))+((sj1*sj2))+((x3947*x3948))+(((-1.0)*gconst110*r20*x3952)));
evalcond[4]=(((r01*x3954))+(((-1.0)*cj0*sj1*x3949))+(((-1.0)*cj0*x3951))+(((-1.0)*gconst110*r00*x3952))+((r02*x3946)));
evalcond[5]=((((-1.0)*x3950*x3951))+((r11*x3954))+((r12*x3946))+(((-1.0)*sj0*sj1*x3949))+(((-1.0)*gconst110*r10*x3952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3956=((1.0)*gconst110);
CheckValue<IkReal> x3957=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3956))+(((-1.0)*gconst109*r10)))),-1);
if(!x3957.valid){
continue;
}
CheckValue<IkReal> x3958 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3956))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3957.value)))+(x3958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3959=IKsin(j4);
IkReal x3960=IKcos(j4);
IkReal x3961=(gconst109*r21);
IkReal x3962=((1.0)*cj2);
IkReal x3963=((1.0)*sj0);
IkReal x3964=(cj1*sj2);
IkReal x3965=((1.0)*x3960);
IkReal x3966=(gconst109*x3959);
IkReal x3967=(gconst109*x3960);
IkReal x3968=((1.0)*gconst110*x3959);
evalcond[0]=((((-1.0)*r20*x3968))+(((-1.0)*r22*x3965))+((x3959*x3961)));
evalcond[1]=(cj0+((r11*x3966))+(((-1.0)*r10*x3968))+(((-1.0)*r12*x3965)));
evalcond[2]=((((-1.0)*x3963))+(((-1.0)*r02*x3965))+((r01*x3966))+(((-1.0)*r00*x3968)));
evalcond[3]=((((-1.0)*gconst110*r20*x3965))+((sj1*sj2))+((x3960*x3961))+((r22*x3959))+(((-1.0)*cj1*x3962)));
evalcond[4]=((((-1.0)*cj0*x3964))+(((-1.0)*gconst110*r00*x3965))+(((-1.0)*cj0*sj1*x3962))+((r02*x3959))+((r01*x3967)));
evalcond[5]=((((-1.0)*x3963*x3964))+(((-1.0)*gconst110*r10*x3965))+((r11*x3967))+(((-1.0)*sj0*sj1*x3962))+((r12*x3959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3969=((-1.0)*r01);
IkReal x3971 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3971)==0){
continue;
}
IkReal x3970=pow(x3971,-0.5);
CheckValue<IkReal> x3972 = IKatan2WithCheck(IkReal(x3969),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3972.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3972.value))));
IkReal gconst112=(x3969*x3970);
IkReal gconst113=((1.0)*r00*x3970);
CheckValue<IkReal> x3973 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3973.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3973.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3974=((-1.0)*r01);
CheckValue<IkReal> x3977 = IKatan2WithCheck(IkReal(x3974),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3977.valid){
continue;
}
IkReal x3975=((1.0)*(x3977.value));
IkReal x3976=x3970;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3975)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3975)));
IkReal gconst112=(x3974*x3976);
IkReal gconst113=((1.0)*r00*x3976);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3978=((-1.0)*r01);
CheckValue<IkReal> x3981 = IKatan2WithCheck(IkReal(x3978),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3981.valid){
continue;
}
IkReal x3979=((1.0)*(x3981.value));
IkReal x3980=x3970;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3979)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3979)));
IkReal gconst112=(x3978*x3980);
IkReal gconst113=((1.0)*r00*x3980);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3982=((-1.0)*r01);
CheckValue<IkReal> x3985 = IKatan2WithCheck(IkReal(x3982),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3985.valid){
continue;
}
IkReal x3983=((1.0)*(x3985.value));
IkReal x3984=x3970;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3983)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3983)));
IkReal gconst112=(x3982*x3984);
IkReal gconst113=((1.0)*r00*x3984);
IkReal x3986=r02*r02;
IkReal x3987=(r12*sj0);
IkReal x3988=((1.0)*cj0);
IkReal x3989=x3970;
j4eval[0]=((IKabs((((cj0*x3986*x3989))+((r02*x3987*x3989))+(((-1.0)*x3988*x3989)))))+(IKabs(((((-1.0)*r02*x3988))+(((-1.0)*x3987))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3990=((1.0)*sj0);
IkReal x3991=((1.0)*gconst112);
CheckValue<IkReal> x3992=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3991)))),-1);
if(!x3992.valid){
continue;
}
CheckValue<IkReal> x3993 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3990))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3991))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3992.value)))+(x3993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3994=IKsin(j4);
IkReal x3995=IKcos(j4);
IkReal x3996=(gconst113*r20);
IkReal x3997=(gconst112*r21);
IkReal x3998=((1.0)*cj2);
IkReal x3999=(gconst113*r00);
IkReal x4000=(gconst113*r10);
IkReal x4001=((1.0)*sj0);
IkReal x4002=(cj1*sj2);
IkReal x4003=((1.0)*x3995);
IkReal x4004=((1.0)*x3994);
IkReal x4005=(gconst112*x3995);
IkReal x4006=(gconst112*x3994);
evalcond[0]=(((x3994*x3997))+(((-1.0)*r22*x4003))+(((-1.0)*x3996*x4004)));
evalcond[1]=(cj0+(((-1.0)*x4000*x4004))+(((-1.0)*r12*x4003))+((r11*x4006)));
evalcond[2]=((((-1.0)*x3999*x4004))+(((-1.0)*r02*x4003))+(((-1.0)*x4001))+((r01*x4006)));
evalcond[3]=(((x3995*x3997))+((sj1*sj2))+((r22*x3994))+(((-1.0)*x3996*x4003))+(((-1.0)*cj1*x3998)));
evalcond[4]=((((-1.0)*x3999*x4003))+(((-1.0)*cj0*x4002))+((r01*x4005))+(((-1.0)*cj0*sj1*x3998))+((r02*x3994)));
evalcond[5]=((((-1.0)*x4001*x4002))+(((-1.0)*x4000*x4003))+((r12*x3994))+(((-1.0)*sj0*sj1*x3998))+((r11*x4005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4007=((1.0)*gconst113);
CheckValue<IkReal> x4008 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4008.valid){
continue;
}
CheckValue<IkReal> x4009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4007))+(((-1.0)*gconst112*r10)))),-1);
if(!x4009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4008.value)+(((1.5707963267949)*(x4009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4010=IKsin(j4);
IkReal x4011=IKcos(j4);
IkReal x4012=(gconst113*r20);
IkReal x4013=(gconst112*r21);
IkReal x4014=((1.0)*cj2);
IkReal x4015=(gconst113*r00);
IkReal x4016=(gconst113*r10);
IkReal x4017=((1.0)*sj0);
IkReal x4018=(cj1*sj2);
IkReal x4019=((1.0)*x4011);
IkReal x4020=((1.0)*x4010);
IkReal x4021=(gconst112*x4011);
IkReal x4022=(gconst112*x4010);
evalcond[0]=(((x4010*x4013))+(((-1.0)*r22*x4019))+(((-1.0)*x4012*x4020)));
evalcond[1]=((((-1.0)*r12*x4019))+cj0+(((-1.0)*x4016*x4020))+((r11*x4022)));
evalcond[2]=(((r01*x4022))+(((-1.0)*r02*x4019))+(((-1.0)*x4017))+(((-1.0)*x4015*x4020)));
evalcond[3]=((((-1.0)*x4012*x4019))+(((-1.0)*cj1*x4014))+((sj1*sj2))+((x4011*x4013))+((r22*x4010)));
evalcond[4]=(((r02*x4010))+(((-1.0)*cj0*x4018))+(((-1.0)*cj0*sj1*x4014))+((r01*x4021))+(((-1.0)*x4015*x4019)));
evalcond[5]=((((-1.0)*sj0*sj1*x4014))+((r12*x4010))+(((-1.0)*x4017*x4018))+((r11*x4021))+(((-1.0)*x4016*x4019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4023=((1.0)*gconst113);
CheckValue<IkReal> x4024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4023))+(((-1.0)*gconst112*r00)))),-1);
if(!x4024.valid){
continue;
}
CheckValue<IkReal> x4025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4024.value)))+(x4025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4026=IKsin(j4);
IkReal x4027=IKcos(j4);
IkReal x4028=(gconst113*r20);
IkReal x4029=(gconst112*r21);
IkReal x4030=((1.0)*cj2);
IkReal x4031=(gconst113*r00);
IkReal x4032=(gconst113*r10);
IkReal x4033=((1.0)*sj0);
IkReal x4034=(cj1*sj2);
IkReal x4035=((1.0)*x4027);
IkReal x4036=((1.0)*x4026);
IkReal x4037=(gconst112*x4027);
IkReal x4038=(gconst112*x4026);
evalcond[0]=((((-1.0)*r22*x4035))+(((-1.0)*x4028*x4036))+((x4026*x4029)));
evalcond[1]=(cj0+(((-1.0)*r12*x4035))+(((-1.0)*x4032*x4036))+((r11*x4038)));
evalcond[2]=((((-1.0)*x4031*x4036))+((r01*x4038))+(((-1.0)*x4033))+(((-1.0)*r02*x4035)));
evalcond[3]=((((-1.0)*cj1*x4030))+((sj1*sj2))+(((-1.0)*x4028*x4035))+((r22*x4026))+((x4027*x4029)));
evalcond[4]=((((-1.0)*x4031*x4035))+(((-1.0)*cj0*x4034))+((r01*x4037))+(((-1.0)*cj0*sj1*x4030))+((r02*x4026)));
evalcond[5]=(((r12*x4026))+(((-1.0)*x4033*x4034))+(((-1.0)*x4032*x4035))+((r11*x4037))+(((-1.0)*sj0*sj1*x4030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4039=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4039;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4040=((1.0)*cj5);
IkReal x4041=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4040)));
j4eval[0]=x4041;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4040))+((r21*sj5))))));
j4eval[2]=IKsign(x4041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4042=cj5*cj5;
IkReal x4043=r01*r01;
IkReal x4044=(cj5*r00);
IkReal x4045=(r01*sj5);
IkReal x4046=((((-1.0)*x4042*x4043))+(((-2.0)*x4044*x4045))+x4043+(r02*r02)+((x4042*(r00*r00))));
j4eval[0]=x4046;
j4eval[1]=IKsign(x4046);
j4eval[2]=((IKabs((x4045+(((-1.0)*x4044)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4047=cj5*cj5;
IkReal x4048=r01*r01;
IkReal x4049=(r01*sj5);
IkReal x4050=(cj5*r00);
CheckValue<IkReal> x4051 = IKatan2WithCheck(IkReal((x4049+(((-1.0)*x4050)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4051.valid){
continue;
}
CheckValue<IkReal> x4052=IKPowWithIntegerCheck(IKsign((((x4047*(r00*r00)))+(((-2.0)*x4049*x4050))+(((-1.0)*x4047*x4048))+x4048+(r02*r02))),-1);
if(!x4052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4051.value)+(((1.5707963267949)*(x4052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4053=IKcos(j4);
IkReal x4054=IKsin(j4);
IkReal x4055=(cj5*r00);
IkReal x4056=(cj5*r10);
IkReal x4057=(r21*sj5);
IkReal x4058=((1.0)*cj2);
IkReal x4059=(cj5*r20);
IkReal x4060=((1.0)*x4053);
IkReal x4061=((1.0)*x4054);
IkReal x4062=(sj5*x4054);
IkReal x4063=(sj5*x4053);
evalcond[0]=((((-1.0)*x4055*x4060))+((r02*x4054))+((r01*x4063)));
evalcond[1]=((((-1.0)*x4059*x4061))+((x4054*x4057))+(((-1.0)*r22*x4060)));
evalcond[2]=((((-1.0)*r12*x4060))+((r11*x4062))+(((-1.0)*x4056*x4061)));
evalcond[3]=((-1.0)+(((-1.0)*x4055*x4061))+(((-1.0)*r02*x4060))+((r01*x4062)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4059*x4060))+(((-1.0)*cj1*x4058))+((x4053*x4057))+((r22*x4054)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4063))+((r12*x4054))+(((-1.0)*x4056*x4060))+(((-1.0)*sj1*x4058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4064=((1.0)*cj5);
CheckValue<IkReal> x4065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4064)))),-1);
if(!x4065.valid){
continue;
}
CheckValue<IkReal> x4066 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4064))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4065.value)))+(x4066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4067=IKcos(j4);
IkReal x4068=IKsin(j4);
IkReal x4069=(cj5*r00);
IkReal x4070=(cj5*r10);
IkReal x4071=(r21*sj5);
IkReal x4072=((1.0)*cj2);
IkReal x4073=(cj5*r20);
IkReal x4074=((1.0)*x4067);
IkReal x4075=((1.0)*x4068);
IkReal x4076=(sj5*x4068);
IkReal x4077=(sj5*x4067);
evalcond[0]=((((-1.0)*x4069*x4074))+((r02*x4068))+((r01*x4077)));
evalcond[1]=((((-1.0)*r22*x4074))+((x4068*x4071))+(((-1.0)*x4073*x4075)));
evalcond[2]=((((-1.0)*x4070*x4075))+(((-1.0)*r12*x4074))+((r11*x4076)));
evalcond[3]=((-1.0)+(((-1.0)*x4069*x4075))+(((-1.0)*r02*x4074))+((r01*x4076)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4072))+((x4067*x4071))+((r22*x4068))+(((-1.0)*x4073*x4074)));
evalcond[5]=((((-1.0)*x4070*x4074))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4072))+((r12*x4068))+((r11*x4077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4078=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4078.valid){
continue;
}
CheckValue<IkReal> x4079 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4078.value)))+(x4079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4080=IKcos(j4);
IkReal x4081=IKsin(j4);
IkReal x4082=(cj5*r00);
IkReal x4083=(cj5*r10);
IkReal x4084=(r21*sj5);
IkReal x4085=((1.0)*cj2);
IkReal x4086=(cj5*r20);
IkReal x4087=((1.0)*x4080);
IkReal x4088=((1.0)*x4081);
IkReal x4089=(sj5*x4081);
IkReal x4090=(sj5*x4080);
evalcond[0]=(((r01*x4090))+(((-1.0)*x4082*x4087))+((r02*x4081)));
evalcond[1]=((((-1.0)*x4086*x4088))+((x4081*x4084))+(((-1.0)*r22*x4087)));
evalcond[2]=((((-1.0)*r12*x4087))+(((-1.0)*x4083*x4088))+((r11*x4089)));
evalcond[3]=((-1.0)+((r01*x4089))+(((-1.0)*r02*x4087))+(((-1.0)*x4082*x4088)));
evalcond[4]=(((sj1*sj2))+((x4080*x4084))+(((-1.0)*x4086*x4087))+(((-1.0)*cj1*x4085))+((r22*x4081)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4090))+(((-1.0)*sj1*x4085))+((r12*x4081))+(((-1.0)*x4083*x4087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4091=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4091;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4092=((1.0)*cj5);
IkReal x4093=((((-1.0)*r21*x4092))+(((-1.0)*r20*sj5)));
j4eval[0]=x4093;
j4eval[1]=((IKabs(((((-1.0)*r10*x4092))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4094=cj5*cj5;
IkReal x4095=r01*r01;
IkReal x4096=(r01*sj5);
IkReal x4097=(cj5*r00);
IkReal x4098=(((x4094*x4095))+(((2.0)*x4096*x4097))+(((-1.0)*(r02*r02)))+(((-1.0)*x4094*(r00*r00)))+(((-1.0)*x4095)));
j4eval[0]=x4098;
j4eval[1]=IKsign(x4098);
j4eval[2]=((IKabs(r02))+(IKabs((x4096+(((-1.0)*x4097))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4099=cj5*cj5;
IkReal x4100=r01*r01;
IkReal x4101=(r01*sj5);
IkReal x4102=(cj5*r00);
CheckValue<IkReal> x4103=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4100))+((x4099*x4100))+(((-1.0)*(r02*r02)))+(((-1.0)*x4099*(r00*r00)))+(((2.0)*x4101*x4102)))),-1);
if(!x4103.valid){
continue;
}
CheckValue<IkReal> x4104 = IKatan2WithCheck(IkReal(((((-1.0)*x4102))+x4101)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4103.value)))+(x4104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4105=IKcos(j4);
IkReal x4106=IKsin(j4);
IkReal x4107=(cj5*r00);
IkReal x4108=(cj5*r10);
IkReal x4109=(r21*sj5);
IkReal x4110=(cj5*r20);
IkReal x4111=((1.0)*x4105);
IkReal x4112=((1.0)*x4106);
IkReal x4113=(sj5*x4106);
IkReal x4114=(sj5*x4105);
evalcond[0]=(((r02*x4106))+(((-1.0)*x4107*x4111))+((r01*x4114)));
evalcond[1]=((((-1.0)*r22*x4111))+(((-1.0)*x4110*x4112))+((x4106*x4109)));
evalcond[2]=((((-1.0)*r12*x4111))+(((-1.0)*x4108*x4112))+((r11*x4113)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4111))+(((-1.0)*x4107*x4112))+((r01*x4113)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4106))+(((-1.0)*x4108*x4111))+((r11*x4114)));
evalcond[5]=(((r22*x4106))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4110*x4111))+((x4105*x4109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4115=((1.0)*cj5);
CheckValue<IkReal> x4116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4115))+(((-1.0)*r20*sj5)))),-1);
if(!x4116.valid){
continue;
}
CheckValue<IkReal> x4117 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4116.value)))+(x4117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4118=IKcos(j4);
IkReal x4119=IKsin(j4);
IkReal x4120=(cj5*r00);
IkReal x4121=(cj5*r10);
IkReal x4122=(r21*sj5);
IkReal x4123=(cj5*r20);
IkReal x4124=((1.0)*x4118);
IkReal x4125=((1.0)*x4119);
IkReal x4126=(sj5*x4119);
IkReal x4127=(sj5*x4118);
evalcond[0]=(((r02*x4119))+(((-1.0)*x4120*x4124))+((r01*x4127)));
evalcond[1]=((((-1.0)*r22*x4124))+(((-1.0)*x4123*x4125))+((x4119*x4122)));
evalcond[2]=((((-1.0)*r12*x4124))+(((-1.0)*x4121*x4125))+((r11*x4126)));
evalcond[3]=((1.0)+(((-1.0)*x4120*x4125))+(((-1.0)*r02*x4124))+((r01*x4126)));
evalcond[4]=(((r12*x4119))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4121*x4124))+((r11*x4127)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4123*x4124))+((r22*x4119))+((x4118*x4122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4128 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4128.valid){
continue;
}
CheckValue<IkReal> x4129=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4128.value)+(((1.5707963267949)*(x4129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4130=IKcos(j4);
IkReal x4131=IKsin(j4);
IkReal x4132=(cj5*r00);
IkReal x4133=(cj5*r10);
IkReal x4134=(r21*sj5);
IkReal x4135=(cj5*r20);
IkReal x4136=((1.0)*x4130);
IkReal x4137=((1.0)*x4131);
IkReal x4138=(sj5*x4131);
IkReal x4139=(sj5*x4130);
evalcond[0]=(((r01*x4139))+(((-1.0)*x4132*x4136))+((r02*x4131)));
evalcond[1]=((((-1.0)*x4135*x4137))+((x4131*x4134))+(((-1.0)*r22*x4136)));
evalcond[2]=(((r11*x4138))+(((-1.0)*x4133*x4137))+(((-1.0)*r12*x4136)));
evalcond[3]=((1.0)+((r01*x4138))+(((-1.0)*r02*x4136))+(((-1.0)*x4132*x4137)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4139))+((r12*x4131))+(((-1.0)*x4133*x4136)));
evalcond[5]=(((r22*x4131))+((x4130*x4134))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4135*x4136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4140=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4140);
rxp1_1=(px*r21);
rxp1_2=(r11*x4140);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4141=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4141);
rxp1_1=(px*r21);
rxp1_2=(r11*x4141);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4142=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4142);
rxp1_1=(px*r21);
rxp1_2=(r11*x4142);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4145=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4145.valid){
continue;
}
IkReal x4143=x4145.value;
IkReal x4144=(sj0*x4143);
cj4array[0]=(((cj1*sj2*x4144))+((cj2*sj1*x4144)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4146=IKsin(j4);
IkReal x4147=IKcos(j4);
IkReal x4148=(r21*sj5);
IkReal x4149=((1.0)*cj5*r20);
evalcond[0]=(r02*x4146);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4147)));
evalcond[2]=((((-1.0)*x4146*x4149))+((x4146*x4148)));
evalcond[3]=((((-1.0)*cj5*r10*x4146))+((r11*sj5*x4146)));
evalcond[4]=((((-1.0)*x4147*x4149))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4147*x4148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4151=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4151.valid){
continue;
}
IkReal x4150=x4151.value;
cj4array[0]=(((cj1*cj2*x4150))+(((-1.0)*sj1*sj2*x4150)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4152=IKsin(j4);
IkReal x4153=IKcos(j4);
IkReal x4154=((1.0)*sj0);
IkReal x4155=((1.0)*cj5);
IkReal x4156=(sj5*x4152);
evalcond[0]=(r02*x4152);
evalcond[1]=((((-1.0)*x4154))+(((-1.0)*r02*x4153)));
evalcond[2]=(((r21*x4156))+(((-1.0)*r20*x4152*x4155)));
evalcond[3]=(((r11*x4156))+(((-1.0)*r10*x4152*x4155)));
evalcond[4]=(((r11*sj5*x4153))+(((-1.0)*cj1*sj2*x4154))+(((-1.0)*r10*x4153*x4155))+(((-1.0)*cj2*sj1*x4154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4157=IKPowWithIntegerCheck(r02,-1);
if(!x4157.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4157.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4158=IKsin(j4);
IkReal x4159=IKcos(j4);
IkReal x4160=((1.0)*cj1);
IkReal x4161=(r21*sj5);
IkReal x4162=((1.0)*cj5);
IkReal x4163=(r11*sj5);
evalcond[0]=(r02*x4158);
evalcond[1]=(((x4158*x4161))+(((-1.0)*r20*x4158*x4162)));
evalcond[2]=(((x4158*x4163))+(((-1.0)*r10*x4158*x4162)));
evalcond[3]=((((-1.0)*cj2*x4160))+((sj1*sj2))+((x4159*x4161))+(((-1.0)*r20*x4159*x4162)));
evalcond[4]=((((-1.0)*sj0*sj2*x4160))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4159*x4162))+((x4159*x4163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4164=((1.0)*sj0);
IkReal x4165=((1.0)*cj0);
CheckValue<IkReal> x4166 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4165))+(((-1.0)*r12*x4164)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4165))+(((-1.0)*r11*sj5*x4164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4166.valid){
continue;
}
CheckValue<IkReal> x4167=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4166.value)+(((1.5707963267949)*(x4167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4168=IKsin(j4);
IkReal x4169=IKcos(j4);
IkReal x4170=(cj5*r00);
IkReal x4171=(cj5*r10);
IkReal x4172=(r21*sj5);
IkReal x4173=((1.0)*cj2);
IkReal x4174=((1.0)*sj0);
IkReal x4175=(cj1*sj2);
IkReal x4176=(cj5*r20);
IkReal x4177=((1.0)*x4169);
IkReal x4178=((1.0)*x4168);
IkReal x4179=(sj5*x4168);
IkReal x4180=(sj5*x4169);
evalcond[0]=((((-1.0)*x4176*x4178))+(((-1.0)*r22*x4177))+((x4168*x4172)));
evalcond[1]=(((r11*x4179))+(((-1.0)*x4171*x4178))+cj0+(((-1.0)*r12*x4177)));
evalcond[2]=((((-1.0)*x4174))+(((-1.0)*x4170*x4178))+((r01*x4179))+(((-1.0)*r02*x4177)));
evalcond[3]=(((r22*x4168))+(((-1.0)*cj1*x4173))+((x4169*x4172))+(((-1.0)*x4176*x4177))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x4170*x4177))+(((-1.0)*cj0*x4175))+((r01*x4180))+((r02*x4168))+(((-1.0)*cj0*sj1*x4173)));
evalcond[5]=((((-1.0)*x4171*x4177))+((r11*x4180))+(((-1.0)*x4174*x4175))+(((-1.0)*sj0*sj1*x4173))+((r12*x4168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4181=((1.0)*cj5);
CheckValue<IkReal> x4182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4181))+(((-1.0)*r10*sj5)))),-1);
if(!x4182.valid){
continue;
}
CheckValue<IkReal> x4183 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4181))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4182.value)))+(x4183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4184=IKsin(j4);
IkReal x4185=IKcos(j4);
IkReal x4186=(cj5*r00);
IkReal x4187=(cj5*r10);
IkReal x4188=(r21*sj5);
IkReal x4189=((1.0)*cj2);
IkReal x4190=((1.0)*sj0);
IkReal x4191=(cj1*sj2);
IkReal x4192=(cj5*r20);
IkReal x4193=((1.0)*x4185);
IkReal x4194=((1.0)*x4184);
IkReal x4195=(sj5*x4184);
IkReal x4196=(sj5*x4185);
evalcond[0]=((((-1.0)*r22*x4193))+((x4184*x4188))+(((-1.0)*x4192*x4194)));
evalcond[1]=((((-1.0)*r12*x4193))+((r11*x4195))+cj0+(((-1.0)*x4187*x4194)));
evalcond[2]=((((-1.0)*x4190))+(((-1.0)*x4186*x4194))+(((-1.0)*r02*x4193))+((r01*x4195)));
evalcond[3]=((((-1.0)*cj1*x4189))+((sj1*sj2))+((r22*x4184))+((x4185*x4188))+(((-1.0)*x4192*x4193)));
evalcond[4]=(((r02*x4184))+(((-1.0)*cj0*sj1*x4189))+(((-1.0)*cj0*x4191))+(((-1.0)*x4186*x4193))+((r01*x4196)));
evalcond[5]=(((r12*x4184))+((r11*x4196))+(((-1.0)*x4187*x4193))+(((-1.0)*x4190*x4191))+(((-1.0)*sj0*sj1*x4189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4197=((1.0)*cj5);
CheckValue<IkReal> x4198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4197))+(((-1.0)*r00*sj5)))),-1);
if(!x4198.valid){
continue;
}
CheckValue<IkReal> x4199 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4197))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4198.value)))+(x4199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4200=IKsin(j4);
IkReal x4201=IKcos(j4);
IkReal x4202=(cj5*r00);
IkReal x4203=(cj5*r10);
IkReal x4204=(r21*sj5);
IkReal x4205=((1.0)*cj2);
IkReal x4206=((1.0)*sj0);
IkReal x4207=(cj1*sj2);
IkReal x4208=(cj5*r20);
IkReal x4209=((1.0)*x4201);
IkReal x4210=((1.0)*x4200);
IkReal x4211=(sj5*x4200);
IkReal x4212=(sj5*x4201);
evalcond[0]=((((-1.0)*r22*x4209))+(((-1.0)*x4208*x4210))+((x4200*x4204)));
evalcond[1]=((((-1.0)*r12*x4209))+cj0+((r11*x4211))+(((-1.0)*x4203*x4210)));
evalcond[2]=((((-1.0)*x4202*x4210))+(((-1.0)*r02*x4209))+(((-1.0)*x4206))+((r01*x4211)));
evalcond[3]=(((r22*x4200))+(((-1.0)*x4208*x4209))+((sj1*sj2))+(((-1.0)*cj1*x4205))+((x4201*x4204)));
evalcond[4]=(((r02*x4200))+(((-1.0)*cj0*x4207))+(((-1.0)*cj0*sj1*x4205))+(((-1.0)*x4202*x4209))+((r01*x4212)));
evalcond[5]=(((r11*x4212))+(((-1.0)*x4206*x4207))+(((-1.0)*sj0*sj1*x4205))+(((-1.0)*x4203*x4209))+((r12*x4200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4213=r21*r21;
IkReal x4214=cj5*cj5;
IkReal x4215=(sj1*sj2);
IkReal x4216=(r21*sj5);
IkReal x4217=(cj1*cj2);
IkReal x4218=(cj5*r20);
CheckValue<IkReal> x4219 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4217))+((r22*x4215)))),IkReal((((x4215*x4216))+((x4217*x4218))+(((-1.0)*x4216*x4217))+(((-1.0)*x4215*x4218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4219.valid){
continue;
}
CheckValue<IkReal> x4220=IKPowWithIntegerCheck(IKsign((((x4213*x4214))+(((-1.0)*x4214*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x4216*x4218))+(((-1.0)*x4213)))),-1);
if(!x4220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4219.value)+(((1.5707963267949)*(x4220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4221=IKsin(j4);
IkReal x4222=IKcos(j4);
IkReal x4223=(r21*sj5);
IkReal x4224=(cj5*r20);
IkReal x4225=((1.0)*x4222);
evalcond[0]=((((-1.0)*r22*x4225))+((x4221*x4223))+(((-1.0)*x4221*x4224)));
evalcond[1]=((((-1.0)*x4224*x4225))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4221))+((x4222*x4223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4226=(cj5*sj4);
IkReal x4227=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4227))+(((-1.0)*r00*x4226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4226))+(((-1.0)*r11*x4227))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4227))+(((-1.0)*r00*x4226))))+IKsqr((((r10*x4226))+(((-1.0)*r11*x4227))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4227))+(((-1.0)*r00*x4226))), (((r10*x4226))+(((-1.0)*r11*x4227))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4228=IKcos(j0);
IkReal x4229=IKsin(j0);
IkReal x4230=((1.0)*cj1);
IkReal x4231=((0.39225)*sj1);
IkReal x4232=(r11*sj5);
IkReal x4233=(cj5*r11);
IkReal x4234=((1.0)*sj5);
IkReal x4235=((1.0)*sj1);
IkReal x4236=((0.09465)*sj5);
IkReal x4237=((1.0)*cj5);
IkReal x4238=((0.425)*cj1);
IkReal x4239=((1.0)*cj4);
IkReal x4240=(r01*sj5);
IkReal x4241=(sj2*x4228);
IkReal x4242=(sj2*x4229);
IkReal x4243=(cj4*x4237);
IkReal x4244=((0.39225)*cj1*cj2);
IkReal x4245=(cj2*x4228);
IkReal x4246=(cj2*x4229);
evalcond[0]=(((sj4*x4232))+(((-1.0)*r12*x4239))+(((-1.0)*r10*sj4*x4237))+x4228);
evalcond[1]=(((sj4*x4240))+(((-1.0)*x4229))+(((-1.0)*r00*sj4*x4237))+(((-1.0)*r02*x4239)));
evalcond[2]=(((sj1*x4241))+(((-1.0)*x4230*x4245))+(((-1.0)*r01*x4237))+(((-1.0)*r00*x4234)));
evalcond[3]=(((sj1*x4242))+(((-1.0)*x4233))+(((-1.0)*x4230*x4246))+(((-1.0)*r10*x4234)));
evalcond[4]=(((cj4*x4240))+(((-1.0)*x4230*x4241))+(((-1.0)*x4235*x4245))+((r02*sj4))+(((-1.0)*r00*x4243)));
evalcond[5]=(((cj4*x4232))+(((-1.0)*x4230*x4242))+(((-1.0)*x4235*x4246))+((r12*sj4))+(((-1.0)*r10*x4243)));
evalcond[6]=((((-1.0)*x4231*x4241))+(((-0.09465)*cj5*r01))+(((-0.10915)*x4229))+(((-1.0)*px))+(((-1.0)*r00*x4236))+((x4228*x4238))+((x4228*x4244)));
evalcond[7]=((((-1.0)*x4231*x4242))+((x4229*x4244))+(((-0.09465)*x4233))+(((0.10915)*x4228))+(((-1.0)*r10*x4236))+(((-1.0)*py))+((x4229*x4238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4247 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4247.valid){
continue;
}
CheckValue<IkReal> x4248=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4248.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4247.value)+(((1.5707963267949)*(x4248.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4249=IKcos(j0);
IkReal x4250=IKsin(j0);
IkReal x4251=(cj5*r11);
IkReal x4252=(cj5*r01);
IkReal x4253=((1.0)*sj5);
IkReal x4254=((0.09465)*sj5);
IkReal x4255=(sj1*sj2);
IkReal x4256=((0.39225)*cj2);
IkReal x4257=((1.0)*cj2);
IkReal x4258=((0.39225)*x4255);
IkReal x4259=(cj1*x4249);
IkReal x4260=(cj1*x4250);
evalcond[0]=((((-1.0)*x4257*x4259))+((x4249*x4255))+(((-1.0)*x4252))+(((-1.0)*r00*x4253)));
evalcond[1]=(((x4250*x4255))+(((-1.0)*x4251))+(((-1.0)*x4257*x4260))+(((-1.0)*r10*x4253)));
evalcond[2]=((((-0.10915)*x4250))+(((0.425)*x4259))+(((-1.0)*px))+(((-0.09465)*x4252))+((x4256*x4259))+(((-1.0)*r00*x4254))+(((-1.0)*x4249*x4258)));
evalcond[3]=((((0.10915)*x4249))+((x4256*x4260))+(((-1.0)*py))+(((-0.09465)*x4251))+(((0.425)*x4260))+(((-1.0)*r10*x4254))+(((-1.0)*x4250*x4258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4261=((1.0)*cj5);
IkReal x4262=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4261)));
j4eval[0]=x4262;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4261)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4263=((1.0)*cj5);
IkReal x4264=((((-1.0)*r11*x4263))+(((-1.0)*r10*sj5)));
j4eval[0]=x4264;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4263))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4265=((1.0)*sj0);
IkReal x4266=((1.0)*cj0);
IkReal x4267=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4267;
j4eval[1]=((IKabs(((((-1.0)*r12*x4265))+(((-1.0)*r02*x4266)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4266))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4265))))));
j4eval[2]=IKsign(x4267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4268=((-1.0)*r20);
IkReal x4270 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4270)==0){
continue;
}
IkReal x4269=pow(x4270,-0.5);
CheckValue<IkReal> x4271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4268),IKFAST_ATAN2_MAGTHRESH);
if(!x4271.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4271.value));
IkReal gconst97=(r21*x4269);
IkReal gconst98=(x4268*x4269);
CheckValue<IkReal> x4272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4272.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4272.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4273=((-1.0)*r20);
IkReal x4274=x4269;
CheckValue<IkReal> x4276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4273),IKFAST_ATAN2_MAGTHRESH);
if(!x4276.valid){
continue;
}
IkReal x4275=((-1.0)*(x4276.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4275;
IkReal gconst96=x4275;
IkReal gconst97=(r21*x4274);
IkReal gconst98=(x4273*x4274);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4277=((-1.0)*r20);
IkReal x4278=x4269;
CheckValue<IkReal> x4280 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4277),IKFAST_ATAN2_MAGTHRESH);
if(!x4280.valid){
continue;
}
IkReal x4279=((-1.0)*(x4280.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4279;
IkReal gconst96=x4279;
IkReal gconst97=(r21*x4278);
IkReal gconst98=(x4277*x4278);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4281=((-1.0)*r20);
IkReal x4282=x4269;
CheckValue<IkReal> x4284 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4281),IKFAST_ATAN2_MAGTHRESH);
if(!x4284.valid){
continue;
}
IkReal x4283=((-1.0)*(x4284.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4283;
IkReal gconst96=x4283;
IkReal gconst97=(r21*x4282);
IkReal gconst98=(x4281*x4282);
IkReal x4285=((1.0)*(r22*r22));
CheckValue<IkReal> x4289=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4285))),-1);
if(!x4289.valid){
continue;
}
IkReal x4286=x4289.value;
IkReal x4287=((1.0)*x4286);
IkReal x4288=((((-1.0)*x4285))+(((-1.0)*x4287*(r20*r20*r20*r20)))+(((-2.0)*x4286*(r20*r20)*(r21*r21)))+(((-1.0)*x4287*(r21*r21*r21*r21))));
j4eval[0]=x4288;
j4eval[1]=IKsign(x4288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4290=(cj1*cj2);
IkReal x4291=(gconst98*r20);
IkReal x4292=(sj1*sj2);
IkReal x4293=(gconst97*r21);
CheckValue<IkReal> x4294 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4290))+((r22*x4292)))),IkReal((((x4292*x4293))+(((-1.0)*x4291*x4292))+(((-1.0)*x4290*x4293))+((x4290*x4291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4294.valid){
continue;
}
CheckValue<IkReal> x4295=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4293*x4293)))+(((-1.0)*(x4291*x4291)))+(((-1.0)*(r22*r22)))+(((2.0)*x4291*x4293)))),-1);
if(!x4295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4294.value)+(((1.5707963267949)*(x4295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4296=IKsin(j4);
IkReal x4297=IKcos(j4);
IkReal x4298=(gconst98*r10);
IkReal x4299=(gconst97*r21);
IkReal x4300=(gconst98*r20);
IkReal x4301=((1.0)*cj2);
IkReal x4302=((1.0)*sj0);
IkReal x4303=(gconst98*r00);
IkReal x4304=(cj1*sj2);
IkReal x4305=((1.0)*x4297);
IkReal x4306=((1.0)*x4296);
IkReal x4307=(gconst97*x4296);
IkReal x4308=(gconst97*x4297);
evalcond[0]=((((-1.0)*r22*x4305))+((x4296*x4299))+(((-1.0)*x4300*x4306)));
evalcond[1]=((((-1.0)*r12*x4305))+((r11*x4307))+cj0+(((-1.0)*x4298*x4306)));
evalcond[2]=((((-1.0)*x4303*x4306))+((r01*x4307))+(((-1.0)*r02*x4305))+(((-1.0)*x4302)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4301))+((x4297*x4299))+((r22*x4296))+(((-1.0)*x4300*x4305)));
evalcond[4]=((((-1.0)*cj0*sj1*x4301))+(((-1.0)*x4303*x4305))+(((-1.0)*cj0*x4304))+((r01*x4308))+((r02*x4296)));
evalcond[5]=(((r11*x4308))+(((-1.0)*sj0*sj1*x4301))+((r12*x4296))+(((-1.0)*x4298*x4305))+(((-1.0)*x4302*x4304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4309=((1.0)*gconst98);
CheckValue<IkReal> x4310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4309))+(((-1.0)*gconst97*r10)))),-1);
if(!x4310.valid){
continue;
}
CheckValue<IkReal> x4311 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4310.value)))+(x4311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4312=IKsin(j4);
IkReal x4313=IKcos(j4);
IkReal x4314=(gconst98*r10);
IkReal x4315=(gconst97*r21);
IkReal x4316=(gconst98*r20);
IkReal x4317=((1.0)*cj2);
IkReal x4318=((1.0)*sj0);
IkReal x4319=(gconst98*r00);
IkReal x4320=(cj1*sj2);
IkReal x4321=((1.0)*x4313);
IkReal x4322=((1.0)*x4312);
IkReal x4323=(gconst97*x4312);
IkReal x4324=(gconst97*x4313);
evalcond[0]=((((-1.0)*x4316*x4322))+(((-1.0)*r22*x4321))+((x4312*x4315)));
evalcond[1]=((((-1.0)*x4314*x4322))+cj0+(((-1.0)*r12*x4321))+((r11*x4323)));
evalcond[2]=((((-1.0)*r02*x4321))+(((-1.0)*x4318))+(((-1.0)*x4319*x4322))+((r01*x4323)));
evalcond[3]=((((-1.0)*cj1*x4317))+(((-1.0)*x4316*x4321))+((sj1*sj2))+((r22*x4312))+((x4313*x4315)));
evalcond[4]=((((-1.0)*cj0*x4320))+(((-1.0)*cj0*sj1*x4317))+((r02*x4312))+(((-1.0)*x4319*x4321))+((r01*x4324)));
evalcond[5]=((((-1.0)*x4314*x4321))+((r12*x4312))+(((-1.0)*sj0*sj1*x4317))+((r11*x4324))+(((-1.0)*x4318*x4320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4325=((1.0)*gconst98);
CheckValue<IkReal> x4326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4325))+(((-1.0)*gconst97*r00)))),-1);
if(!x4326.valid){
continue;
}
CheckValue<IkReal> x4327 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4325))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4326.value)))+(x4327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4328=IKsin(j4);
IkReal x4329=IKcos(j4);
IkReal x4330=(gconst98*r10);
IkReal x4331=(gconst97*r21);
IkReal x4332=(gconst98*r20);
IkReal x4333=((1.0)*cj2);
IkReal x4334=((1.0)*sj0);
IkReal x4335=(gconst98*r00);
IkReal x4336=(cj1*sj2);
IkReal x4337=((1.0)*x4329);
IkReal x4338=((1.0)*x4328);
IkReal x4339=(gconst97*x4328);
IkReal x4340=(gconst97*x4329);
evalcond[0]=((((-1.0)*x4332*x4338))+(((-1.0)*r22*x4337))+((x4328*x4331)));
evalcond[1]=((((-1.0)*x4330*x4338))+cj0+(((-1.0)*r12*x4337))+((r11*x4339)));
evalcond[2]=(((r01*x4339))+(((-1.0)*r02*x4337))+(((-1.0)*x4334))+(((-1.0)*x4335*x4338)));
evalcond[3]=((((-1.0)*x4332*x4337))+((sj1*sj2))+(((-1.0)*cj1*x4333))+((x4329*x4331))+((r22*x4328)));
evalcond[4]=((((-1.0)*cj0*sj1*x4333))+((r02*x4328))+(((-1.0)*cj0*x4336))+((r01*x4340))+(((-1.0)*x4335*x4337)));
evalcond[5]=((((-1.0)*x4334*x4336))+(((-1.0)*x4330*x4337))+(((-1.0)*sj0*sj1*x4333))+((r12*x4328))+((r11*x4340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4341=((-1.0)*r21);
IkReal x4343 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4343)==0){
continue;
}
IkReal x4342=pow(x4343,-0.5);
CheckValue<IkReal> x4344 = IKatan2WithCheck(IkReal(x4341),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4344.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4344.value))));
IkReal gconst100=(x4341*x4342);
IkReal gconst101=((1.0)*r20*x4342);
CheckValue<IkReal> x4345 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4345.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4345.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4346=((-1.0)*r21);
CheckValue<IkReal> x4349 = IKatan2WithCheck(IkReal(x4346),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4349.valid){
continue;
}
IkReal x4347=((1.0)*(x4349.value));
IkReal x4348=x4342;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4347)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4347)));
IkReal gconst100=(x4346*x4348);
IkReal gconst101=((1.0)*r20*x4348);
IkReal x4350=r22*r22;
IkReal x4351=((1.0)*x4350);
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(((-1.0)+x4350),-1);
if(!x4355.valid){
continue;
}
IkReal x4352=x4355.value;
if((((1.0)+(((-1.0)*x4351)))) < -0.00001)
continue;
IkReal x4353=IKsqrt(((1.0)+(((-1.0)*x4351))));
IkReal x4354=(cj0*x4352*x4353);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x4351*x4354))+x4354))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4356=((-1.0)*r21);
CheckValue<IkReal> x4359 = IKatan2WithCheck(IkReal(x4356),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4359.valid){
continue;
}
IkReal x4357=((1.0)*(x4359.value));
IkReal x4358=x4342;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4357)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4357)));
IkReal gconst100=(x4356*x4358);
IkReal gconst101=((1.0)*r20*x4358);
IkReal x4360=r22*r22;
IkReal x4361=((1.0)*x4360);
CheckValue<IkReal> x4365=IKPowWithIntegerCheck(((-1.0)+x4360),-1);
if(!x4365.valid){
continue;
}
IkReal x4362=x4365.value;
if((((1.0)+(((-1.0)*x4361)))) < -0.00001)
continue;
IkReal x4363=IKsqrt(((1.0)+(((-1.0)*x4361))));
IkReal x4364=(sj0*x4362*x4363);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4361*x4364))+x4364))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4366=((-1.0)*r21);
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal(x4366),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
IkReal x4367=((1.0)*(x4369.value));
IkReal x4368=x4342;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4367)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4367)));
IkReal gconst100=(x4366*x4368);
IkReal gconst101=((1.0)*r20*x4368);
IkReal x4370=r22*r22;
IkReal x4371=(r12*sj0);
IkReal x4372=(cj0*r02);
CheckValue<IkReal> x4376=IKPowWithIntegerCheck(((-1.0)+x4370),-1);
if(!x4376.valid){
continue;
}
IkReal x4373=x4376.value;
if((((1.0)+(((-1.0)*x4370)))) < -0.00001)
continue;
IkReal x4374=IKsqrt(((1.0)+(((-1.0)*x4370))));
IkReal x4375=(r22*x4373*x4374);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4371*x4375))+((x4372*x4375)))))+(IKabs(((((-1.0)*x4371))+(((-1.0)*x4372))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4377=((1.0)*sj0);
IkReal x4378=((1.0)*gconst100);
CheckValue<IkReal> x4379=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4378))+(((-1.0)*gconst101*r21)))),-1);
if(!x4379.valid){
continue;
}
CheckValue<IkReal> x4380 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4377)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4378))+(((-1.0)*gconst100*r11*x4377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4379.value)))+(x4380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4381=IKsin(j4);
IkReal x4382=IKcos(j4);
IkReal x4383=(gconst101*r20);
IkReal x4384=(gconst101*r10);
IkReal x4385=((1.0)*cj2);
IkReal x4386=(gconst101*r00);
IkReal x4387=((1.0)*sj0);
IkReal x4388=(cj1*sj2);
IkReal x4389=((1.0)*x4382);
IkReal x4390=((1.0)*x4381);
IkReal x4391=(gconst100*x4381);
IkReal x4392=(gconst100*x4382);
evalcond[0]=((((-1.0)*r22*x4389))+((r21*x4391))+(((-1.0)*x4383*x4390)));
evalcond[1]=((((-1.0)*r12*x4389))+cj0+(((-1.0)*x4384*x4390))+((r11*x4391)));
evalcond[2]=(((r01*x4391))+(((-1.0)*r02*x4389))+(((-1.0)*x4386*x4390))+(((-1.0)*x4387)));
evalcond[3]=(((r22*x4381))+((sj1*sj2))+((r21*x4392))+(((-1.0)*cj1*x4385))+(((-1.0)*x4383*x4389)));
evalcond[4]=(((r01*x4392))+(((-1.0)*cj0*sj1*x4385))+((r02*x4381))+(((-1.0)*x4386*x4389))+(((-1.0)*cj0*x4388)));
evalcond[5]=((((-1.0)*x4387*x4388))+(((-1.0)*x4384*x4389))+((r11*x4392))+((r12*x4381))+(((-1.0)*sj0*sj1*x4385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4393=((1.0)*gconst101);
CheckValue<IkReal> x4394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4393))+(((-1.0)*gconst100*r10)))),-1);
if(!x4394.valid){
continue;
}
CheckValue<IkReal> x4395 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4393))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4394.value)))+(x4395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4396=IKsin(j4);
IkReal x4397=IKcos(j4);
IkReal x4398=(gconst101*r20);
IkReal x4399=(gconst101*r10);
IkReal x4400=((1.0)*cj2);
IkReal x4401=(gconst101*r00);
IkReal x4402=((1.0)*sj0);
IkReal x4403=(cj1*sj2);
IkReal x4404=((1.0)*x4397);
IkReal x4405=((1.0)*x4396);
IkReal x4406=(gconst100*x4396);
IkReal x4407=(gconst100*x4397);
evalcond[0]=(((r21*x4406))+(((-1.0)*x4398*x4405))+(((-1.0)*r22*x4404)));
evalcond[1]=(((r11*x4406))+cj0+(((-1.0)*r12*x4404))+(((-1.0)*x4399*x4405)));
evalcond[2]=((((-1.0)*x4401*x4405))+((r01*x4406))+(((-1.0)*r02*x4404))+(((-1.0)*x4402)));
evalcond[3]=(((r21*x4407))+((r22*x4396))+((sj1*sj2))+(((-1.0)*x4398*x4404))+(((-1.0)*cj1*x4400)));
evalcond[4]=((((-1.0)*cj0*x4403))+((r02*x4396))+(((-1.0)*x4401*x4404))+((r01*x4407))+(((-1.0)*cj0*sj1*x4400)));
evalcond[5]=(((r11*x4407))+(((-1.0)*x4399*x4404))+(((-1.0)*x4402*x4403))+(((-1.0)*sj0*sj1*x4400))+((r12*x4396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4408=((1.0)*gconst101);
CheckValue<IkReal> x4409=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4408)))),-1);
if(!x4409.valid){
continue;
}
CheckValue<IkReal> x4410 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4408))+((cj0*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4409.value)))+(x4410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4411=IKsin(j4);
IkReal x4412=IKcos(j4);
IkReal x4413=(gconst101*r20);
IkReal x4414=(gconst101*r10);
IkReal x4415=((1.0)*cj2);
IkReal x4416=(gconst101*r00);
IkReal x4417=((1.0)*sj0);
IkReal x4418=(cj1*sj2);
IkReal x4419=((1.0)*x4412);
IkReal x4420=((1.0)*x4411);
IkReal x4421=(gconst100*x4411);
IkReal x4422=(gconst100*x4412);
evalcond[0]=((((-1.0)*x4413*x4420))+(((-1.0)*r22*x4419))+((r21*x4421)));
evalcond[1]=((((-1.0)*x4414*x4420))+cj0+(((-1.0)*r12*x4419))+((r11*x4421)));
evalcond[2]=((((-1.0)*r02*x4419))+(((-1.0)*x4417))+((r01*x4421))+(((-1.0)*x4416*x4420)));
evalcond[3]=(((r22*x4411))+((sj1*sj2))+(((-1.0)*x4413*x4419))+((r21*x4422))+(((-1.0)*cj1*x4415)));
evalcond[4]=((((-1.0)*cj0*sj1*x4415))+(((-1.0)*cj0*x4418))+((r01*x4422))+(((-1.0)*x4416*x4419))+((r02*x4411)));
evalcond[5]=(((r12*x4411))+(((-1.0)*x4417*x4418))+(((-1.0)*x4414*x4419))+(((-1.0)*sj0*sj1*x4415))+((r11*x4422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4423=((-1.0)*r10);
IkReal x4425 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4425)==0){
continue;
}
IkReal x4424=pow(x4425,-0.5);
CheckValue<IkReal> x4426 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4423),IKFAST_ATAN2_MAGTHRESH);
if(!x4426.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4426.value));
IkReal gconst103=(r11*x4424);
IkReal gconst104=(x4423*x4424);
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4427.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4428=((-1.0)*r10);
IkReal x4429=x4424;
CheckValue<IkReal> x4431 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4428),IKFAST_ATAN2_MAGTHRESH);
if(!x4431.valid){
continue;
}
IkReal x4430=((-1.0)*(x4431.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4430;
IkReal gconst102=x4430;
IkReal gconst103=(r11*x4429);
IkReal gconst104=(x4428*x4429);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4432=((1.0)*sj0);
IkReal x4433=((1.0)*gconst103);
CheckValue<IkReal> x4434=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4433)))),-1);
if(!x4434.valid){
continue;
}
CheckValue<IkReal> x4435 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4432)))),IkReal(((((-1.0)*gconst103*r11*x4432))+(((-1.0)*cj0*r01*x4433))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4434.value)))+(x4435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4436=IKsin(j4);
IkReal x4437=IKcos(j4);
IkReal x4438=(gconst103*r11);
IkReal x4439=((1.0)*cj2);
IkReal x4440=((1.0)*sj0);
IkReal x4441=(cj1*sj2);
IkReal x4442=((1.0)*x4437);
IkReal x4443=(gconst103*x4437);
IkReal x4444=(gconst103*x4436);
IkReal x4445=((1.0)*gconst104*x4436);
evalcond[0]=(((r21*x4444))+(((-1.0)*r22*x4442))+(((-1.0)*r20*x4445)));
evalcond[1]=(cj0+(((-1.0)*r12*x4442))+((x4436*x4438))+(((-1.0)*r10*x4445)));
evalcond[2]=((((-1.0)*x4440))+((r01*x4444))+(((-1.0)*r02*x4442))+(((-1.0)*r00*x4445)));
evalcond[3]=(((r22*x4436))+((r21*x4443))+((sj1*sj2))+(((-1.0)*cj1*x4439))+(((-1.0)*gconst104*r20*x4442)));
evalcond[4]=((((-1.0)*gconst104*r00*x4442))+((r01*x4443))+(((-1.0)*cj0*sj1*x4439))+(((-1.0)*cj0*x4441))+((r02*x4436)));
evalcond[5]=(((x4437*x4438))+((r12*x4436))+(((-1.0)*gconst104*r10*x4442))+(((-1.0)*x4440*x4441))+(((-1.0)*sj0*sj1*x4439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4446=((1.0)*gconst104);
CheckValue<IkReal> x4447=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4446)))),-1);
if(!x4447.valid){
continue;
}
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4446))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4447.value)))+(x4448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4449=IKsin(j4);
IkReal x4450=IKcos(j4);
IkReal x4451=(gconst103*r11);
IkReal x4452=((1.0)*cj2);
IkReal x4453=((1.0)*sj0);
IkReal x4454=(cj1*sj2);
IkReal x4455=((1.0)*x4450);
IkReal x4456=(gconst103*x4450);
IkReal x4457=(gconst103*x4449);
IkReal x4458=((1.0)*gconst104*x4449);
evalcond[0]=(((r21*x4457))+(((-1.0)*r22*x4455))+(((-1.0)*r20*x4458)));
evalcond[1]=(cj0+(((-1.0)*r12*x4455))+(((-1.0)*r10*x4458))+((x4449*x4451)));
evalcond[2]=((((-1.0)*x4453))+((r01*x4457))+(((-1.0)*r02*x4455))+(((-1.0)*r00*x4458)));
evalcond[3]=((((-1.0)*gconst104*r20*x4455))+((r21*x4456))+((sj1*sj2))+(((-1.0)*cj1*x4452))+((r22*x4449)));
evalcond[4]=((((-1.0)*gconst104*r00*x4455))+((r01*x4456))+(((-1.0)*cj0*sj1*x4452))+(((-1.0)*cj0*x4454))+((r02*x4449)));
evalcond[5]=(((x4450*x4451))+(((-1.0)*gconst104*r10*x4455))+((r12*x4449))+(((-1.0)*sj0*sj1*x4452))+(((-1.0)*x4453*x4454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4459=((-1.0)*r11);
IkReal x4461 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4461)==0){
continue;
}
IkReal x4460=pow(x4461,-0.5);
CheckValue<IkReal> x4462 = IKatan2WithCheck(IkReal(x4459),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4462.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4462.value))));
IkReal gconst106=(x4459*x4460);
IkReal gconst107=((1.0)*r10*x4460);
CheckValue<IkReal> x4463 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4463.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4463.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4464=((-1.0)*r11);
CheckValue<IkReal> x4467 = IKatan2WithCheck(IkReal(x4464),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4467.valid){
continue;
}
IkReal x4465=((1.0)*(x4467.value));
IkReal x4466=x4460;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4465)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4465)));
IkReal gconst106=(x4464*x4466);
IkReal gconst107=((1.0)*r10*x4466);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4468=((-1.0)*r11);
CheckValue<IkReal> x4471 = IKatan2WithCheck(IkReal(x4468),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4471.valid){
continue;
}
IkReal x4469=((1.0)*(x4471.value));
IkReal x4470=x4460;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4469)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4469)));
IkReal gconst106=(x4468*x4470);
IkReal gconst107=((1.0)*r10*x4470);
IkReal x4472=r12*r12;
IkReal x4473=((1.0)*sj0);
IkReal x4474=(cj0*r02);
IkReal x4475=x4460;
j4eval[0]=((IKabs(((((-1.0)*x4473*x4475))+((r12*x4474*x4475))+((sj0*x4472*x4475)))))+(IKabs(((((-1.0)*r12*x4473))+(((-1.0)*x4474))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4476=((-1.0)*r11);
CheckValue<IkReal> x4479 = IKatan2WithCheck(IkReal(x4476),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4479.valid){
continue;
}
IkReal x4477=((1.0)*(x4479.value));
IkReal x4478=x4460;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4477)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4477)));
IkReal gconst106=(x4476*x4478);
IkReal gconst107=((1.0)*r10*x4478);
IkReal x4480=r12*r12;
IkReal x4481=((1.0)+(((-1.0)*x4480)));
IkReal x4482=(r22*sj1*sj2);
IkReal x4483=(cj1*cj2*r22);
CheckValue<IkReal> x4490=IKPowWithIntegerCheck(x4481,-1);
if(!x4490.valid){
continue;
}
IkReal x4484=x4490.value;
CheckValue<IkReal> x4491=IKPowWithIntegerCheck(((-1.0)+x4480),-1);
if(!x4491.valid){
continue;
}
IkReal x4485=x4491.value;
IkReal x4486=((1.0)*x4484);
if((x4481) < -0.00001)
continue;
IkReal x4487=IKsqrt(x4481);
IkReal x4488=(r12*x4485*x4487);
IkReal x4489=((((-1.0)*x4486*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4484))+(((-1.0)*(r22*r22)))+(((-1.0)*x4486*(r10*r10)*(r20*r20))));
j4eval[0]=x4489;
j4eval[1]=((IKabs(((((-1.0)*x4483))+x4482)))+(IKabs((((x4483*x4488))+(((-1.0)*x4482*x4488))))));
j4eval[2]=IKsign(x4489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4492=(sj1*sj2);
IkReal x4493=(gconst106*r21);
IkReal x4494=(gconst107*r20);
IkReal x4495=(cj1*cj2);
CheckValue<IkReal> x4496 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4495))+((r22*x4492)))),IkReal(((((-1.0)*x4493*x4495))+((x4492*x4493))+(((-1.0)*x4492*x4494))+((x4494*x4495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4496.valid){
continue;
}
CheckValue<IkReal> x4497=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4493*x4493)))+(((-1.0)*(r22*r22)))+(((2.0)*x4493*x4494))+(((-1.0)*(x4494*x4494))))),-1);
if(!x4497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4496.value)+(((1.5707963267949)*(x4497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4498=IKsin(j4);
IkReal x4499=IKcos(j4);
IkReal x4500=(gconst107*r10);
IkReal x4501=(gconst107*r00);
IkReal x4502=((1.0)*cj2);
IkReal x4503=(gconst107*r20);
IkReal x4504=((1.0)*sj0);
IkReal x4505=(cj1*sj2);
IkReal x4506=((1.0)*x4499);
IkReal x4507=(gconst106*x4499);
IkReal x4508=(gconst106*x4498);
IkReal x4509=((1.0)*x4498);
evalcond[0]=(((r21*x4508))+(((-1.0)*x4503*x4509))+(((-1.0)*r22*x4506)));
evalcond[1]=(cj0+((r11*x4508))+(((-1.0)*x4500*x4509))+(((-1.0)*r12*x4506)));
evalcond[2]=((((-1.0)*x4504))+(((-1.0)*r02*x4506))+(((-1.0)*x4501*x4509))+((r01*x4508)));
evalcond[3]=((((-1.0)*cj1*x4502))+((r21*x4507))+((sj1*sj2))+(((-1.0)*x4503*x4506))+((r22*x4498)));
evalcond[4]=(((r02*x4498))+(((-1.0)*cj0*x4505))+(((-1.0)*x4501*x4506))+((r01*x4507))+(((-1.0)*cj0*sj1*x4502)));
evalcond[5]=(((r12*x4498))+((r11*x4507))+(((-1.0)*x4500*x4506))+(((-1.0)*sj0*sj1*x4502))+(((-1.0)*x4504*x4505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4510=((1.0)*sj0);
IkReal x4511=((1.0)*gconst106);
CheckValue<IkReal> x4512=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4511)))),-1);
if(!x4512.valid){
continue;
}
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4510))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4511))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x4510))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4512.value)))+(x4513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4514=IKsin(j4);
IkReal x4515=IKcos(j4);
IkReal x4516=(gconst107*r10);
IkReal x4517=(gconst107*r00);
IkReal x4518=((1.0)*cj2);
IkReal x4519=(gconst107*r20);
IkReal x4520=((1.0)*sj0);
IkReal x4521=(cj1*sj2);
IkReal x4522=((1.0)*x4515);
IkReal x4523=(gconst106*x4515);
IkReal x4524=(gconst106*x4514);
IkReal x4525=((1.0)*x4514);
evalcond[0]=(((r21*x4524))+(((-1.0)*r22*x4522))+(((-1.0)*x4519*x4525)));
evalcond[1]=((((-1.0)*r12*x4522))+((r11*x4524))+cj0+(((-1.0)*x4516*x4525)));
evalcond[2]=(((r01*x4524))+(((-1.0)*x4520))+(((-1.0)*x4517*x4525))+(((-1.0)*r02*x4522)));
evalcond[3]=((((-1.0)*cj1*x4518))+((r21*x4523))+((sj1*sj2))+(((-1.0)*x4519*x4522))+((r22*x4514)));
evalcond[4]=(((r02*x4514))+((r01*x4523))+(((-1.0)*cj0*sj1*x4518))+(((-1.0)*x4517*x4522))+(((-1.0)*cj0*x4521)));
evalcond[5]=(((r11*x4523))+(((-1.0)*sj0*sj1*x4518))+(((-1.0)*x4520*x4521))+(((-1.0)*x4516*x4522))+((r12*x4514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4526=((1.0)*gconst107);
CheckValue<IkReal> x4527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4526))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4527.valid){
continue;
}
CheckValue<IkReal> x4528=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4526)))),-1);
if(!x4528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4527.value)+(((1.5707963267949)*(x4528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4529=IKsin(j4);
IkReal x4530=IKcos(j4);
IkReal x4531=(gconst107*r10);
IkReal x4532=(gconst107*r00);
IkReal x4533=((1.0)*cj2);
IkReal x4534=(gconst107*r20);
IkReal x4535=((1.0)*sj0);
IkReal x4536=(cj1*sj2);
IkReal x4537=((1.0)*x4530);
IkReal x4538=(gconst106*x4530);
IkReal x4539=(gconst106*x4529);
IkReal x4540=((1.0)*x4529);
evalcond[0]=(((r21*x4539))+(((-1.0)*x4534*x4540))+(((-1.0)*r22*x4537)));
evalcond[1]=(cj0+(((-1.0)*x4531*x4540))+(((-1.0)*r12*x4537))+((r11*x4539)));
evalcond[2]=((((-1.0)*x4532*x4540))+((r01*x4539))+(((-1.0)*x4535))+(((-1.0)*r02*x4537)));
evalcond[3]=(((r21*x4538))+(((-1.0)*cj1*x4533))+((sj1*sj2))+((r22*x4529))+(((-1.0)*x4534*x4537)));
evalcond[4]=(((r01*x4538))+((r02*x4529))+(((-1.0)*cj0*x4536))+(((-1.0)*x4532*x4537))+(((-1.0)*cj0*sj1*x4533)));
evalcond[5]=(((r12*x4529))+(((-1.0)*x4531*x4537))+(((-1.0)*x4535*x4536))+((r11*x4538))+(((-1.0)*sj0*sj1*x4533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4541=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4541;
j4eval[1]=IKsign(x4541);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4542=((1.0)*cj5);
IkReal x4543=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4542)));
j4eval[0]=x4543;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4542)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4544=(sj1*sj2);
IkReal x4545=(cj5*r10);
IkReal x4546=(r11*sj5);
IkReal x4547=(cj1*cj2);
IkReal x4548=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4548;
j4eval[1]=((IKabs((((x4545*x4547))+((x4544*x4546))+(((-1.0)*x4546*x4547))+(((-1.0)*x4544*x4545)))))+(IKabs((((r12*x4547))+(((-1.0)*r12*x4544))))));
j4eval[2]=IKsign(x4548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4549=(sj1*sj2);
IkReal x4550=(cj5*r10);
IkReal x4551=(r11*sj5);
IkReal x4552=(cj1*cj2);
CheckValue<IkReal> x4553 = IKatan2WithCheck(IkReal((((x4550*x4552))+(((-1.0)*x4551*x4552))+(((-1.0)*x4549*x4550))+((x4549*x4551)))),IkReal((((r12*x4552))+(((-1.0)*r12*x4549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4553.valid){
continue;
}
CheckValue<IkReal> x4554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4553.value)+(((1.5707963267949)*(x4554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4555=IKcos(j4);
IkReal x4556=IKsin(j4);
IkReal x4557=(cj5*r00);
IkReal x4558=(cj5*r10);
IkReal x4559=(r21*sj5);
IkReal x4560=((1.0)*cj2);
IkReal x4561=(cj5*r20);
IkReal x4562=((1.0)*x4555);
IkReal x4563=((1.0)*x4556);
IkReal x4564=(sj5*x4556);
IkReal x4565=(sj5*x4555);
evalcond[0]=(((r11*x4565))+((r12*x4556))+(((-1.0)*x4558*x4562)));
evalcond[1]=(((x4556*x4559))+(((-1.0)*r22*x4562))+(((-1.0)*x4561*x4563)));
evalcond[2]=((((-1.0)*r02*x4562))+((r01*x4564))+(((-1.0)*x4557*x4563)));
evalcond[3]=((1.0)+((r11*x4564))+(((-1.0)*r12*x4562))+(((-1.0)*x4558*x4563)));
evalcond[4]=((((-1.0)*cj1*x4560))+((x4555*x4559))+((sj1*sj2))+((r22*x4556))+(((-1.0)*x4561*x4562)));
evalcond[5]=((((-1.0)*sj1*x4560))+(((-1.0)*cj1*sj2))+((r02*x4556))+((r01*x4565))+(((-1.0)*x4557*x4562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4566=((1.0)*cj5);
CheckValue<IkReal> x4567 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4566))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4567.valid){
continue;
}
CheckValue<IkReal> x4568=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4566))+(((-1.0)*r00*sj5)))),-1);
if(!x4568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4567.value)+(((1.5707963267949)*(x4568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4569=IKcos(j4);
IkReal x4570=IKsin(j4);
IkReal x4571=(cj5*r00);
IkReal x4572=(cj5*r10);
IkReal x4573=(r21*sj5);
IkReal x4574=((1.0)*cj2);
IkReal x4575=(cj5*r20);
IkReal x4576=((1.0)*x4569);
IkReal x4577=((1.0)*x4570);
IkReal x4578=(sj5*x4570);
IkReal x4579=(sj5*x4569);
evalcond[0]=(((r12*x4570))+((r11*x4579))+(((-1.0)*x4572*x4576)));
evalcond[1]=((((-1.0)*x4575*x4577))+((x4570*x4573))+(((-1.0)*r22*x4576)));
evalcond[2]=((((-1.0)*x4571*x4577))+(((-1.0)*r02*x4576))+((r01*x4578)));
evalcond[3]=((1.0)+((r11*x4578))+(((-1.0)*x4572*x4577))+(((-1.0)*r12*x4576)));
evalcond[4]=((((-1.0)*cj1*x4574))+(((-1.0)*x4575*x4576))+((r22*x4570))+((sj1*sj2))+((x4569*x4573)));
evalcond[5]=((((-1.0)*sj1*x4574))+(((-1.0)*x4571*x4576))+((r02*x4570))+(((-1.0)*cj1*sj2))+((r01*x4579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4580=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4580.valid){
continue;
}
CheckValue<IkReal> x4581 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4580.value)))+(x4581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4582=IKcos(j4);
IkReal x4583=IKsin(j4);
IkReal x4584=(cj5*r00);
IkReal x4585=(cj5*r10);
IkReal x4586=(r21*sj5);
IkReal x4587=((1.0)*cj2);
IkReal x4588=(cj5*r20);
IkReal x4589=((1.0)*x4582);
IkReal x4590=((1.0)*x4583);
IkReal x4591=(sj5*x4583);
IkReal x4592=(sj5*x4582);
evalcond[0]=(((r11*x4592))+((r12*x4583))+(((-1.0)*x4585*x4589)));
evalcond[1]=((((-1.0)*r22*x4589))+((x4583*x4586))+(((-1.0)*x4588*x4590)));
evalcond[2]=((((-1.0)*r02*x4589))+(((-1.0)*x4584*x4590))+((r01*x4591)));
evalcond[3]=((1.0)+(((-1.0)*x4585*x4590))+((r11*x4591))+(((-1.0)*r12*x4589)));
evalcond[4]=(((r22*x4583))+((x4582*x4586))+((sj1*sj2))+(((-1.0)*x4588*x4589))+(((-1.0)*cj1*x4587)));
evalcond[5]=(((r02*x4583))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4587))+(((-1.0)*x4584*x4589))+((r01*x4592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4593=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4593;
j4eval[1]=IKsign(x4593);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4594=((1.0)*cj5);
IkReal x4595=((((-1.0)*r21*x4594))+(((-1.0)*r20*sj5)));
j4eval[0]=x4595;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4594))))));
j4eval[2]=IKsign(x4595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4596=cj5*cj5;
IkReal x4597=r11*r11;
IkReal x4598=(r11*sj5);
IkReal x4599=(cj5*r10);
IkReal x4600=((r12*r12)+x4597+((x4596*(r10*r10)))+(((-2.0)*x4598*x4599))+(((-1.0)*x4596*x4597)));
j4eval[0]=x4600;
j4eval[1]=IKsign(x4600);
j4eval[2]=((IKabs(r12))+(IKabs((x4598+(((-1.0)*x4599))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4601=cj5*cj5;
IkReal x4602=r11*r11;
IkReal x4603=(cj5*r10);
IkReal x4604=(r11*sj5);
CheckValue<IkReal> x4605=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4603*x4604))+(r12*r12)+x4602+(((-1.0)*x4601*x4602))+((x4601*(r10*r10))))),-1);
if(!x4605.valid){
continue;
}
CheckValue<IkReal> x4606 = IKatan2WithCheck(IkReal(((((-1.0)*x4603))+x4604)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4605.value)))+(x4606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4607=IKcos(j4);
IkReal x4608=IKsin(j4);
IkReal x4609=(cj5*r00);
IkReal x4610=(cj5*r10);
IkReal x4611=(r21*sj5);
IkReal x4612=(cj5*r20);
IkReal x4613=((1.0)*x4607);
IkReal x4614=((1.0)*x4608);
IkReal x4615=(sj5*x4608);
IkReal x4616=(sj5*x4607);
evalcond[0]=(((r12*x4608))+((r11*x4616))+(((-1.0)*x4610*x4613)));
evalcond[1]=((((-1.0)*x4612*x4614))+((x4608*x4611))+(((-1.0)*r22*x4613)));
evalcond[2]=((((-1.0)*r02*x4613))+((r01*x4615))+(((-1.0)*x4609*x4614)));
evalcond[3]=((-1.0)+((r11*x4615))+(((-1.0)*r12*x4613))+(((-1.0)*x4610*x4614)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4616))+((r02*x4608))+(((-1.0)*x4609*x4613)));
evalcond[5]=((((-1.0)*x4612*x4613))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4608))+((x4607*x4611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4617=((1.0)*cj5);
CheckValue<IkReal> x4618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4617))+(((-1.0)*r20*sj5)))),-1);
if(!x4618.valid){
continue;
}
CheckValue<IkReal> x4619 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4618.value)))+(x4619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4620=IKcos(j4);
IkReal x4621=IKsin(j4);
IkReal x4622=(cj5*r00);
IkReal x4623=(cj5*r10);
IkReal x4624=(r21*sj5);
IkReal x4625=(cj5*r20);
IkReal x4626=((1.0)*x4620);
IkReal x4627=((1.0)*x4621);
IkReal x4628=(sj5*x4621);
IkReal x4629=(sj5*x4620);
evalcond[0]=(((r12*x4621))+((r11*x4629))+(((-1.0)*x4623*x4626)));
evalcond[1]=((((-1.0)*x4625*x4627))+(((-1.0)*r22*x4626))+((x4621*x4624)));
evalcond[2]=((((-1.0)*r02*x4626))+((r01*x4628))+(((-1.0)*x4622*x4627)));
evalcond[3]=((-1.0)+((r11*x4628))+(((-1.0)*x4623*x4627))+(((-1.0)*r12*x4626)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4621))+((r01*x4629))+(((-1.0)*x4622*x4626)));
evalcond[5]=(((x4620*x4624))+(((-1.0)*x4625*x4626))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4630 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4630.valid){
continue;
}
CheckValue<IkReal> x4631=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4630.value)+(((1.5707963267949)*(x4631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4632=IKcos(j4);
IkReal x4633=IKsin(j4);
IkReal x4634=(cj5*r00);
IkReal x4635=(cj5*r10);
IkReal x4636=(r21*sj5);
IkReal x4637=(cj5*r20);
IkReal x4638=((1.0)*x4632);
IkReal x4639=((1.0)*x4633);
IkReal x4640=(sj5*x4633);
IkReal x4641=(sj5*x4632);
evalcond[0]=(((r12*x4633))+(((-1.0)*x4635*x4638))+((r11*x4641)));
evalcond[1]=(((x4633*x4636))+(((-1.0)*x4637*x4639))+(((-1.0)*r22*x4638)));
evalcond[2]=((((-1.0)*r02*x4638))+(((-1.0)*x4634*x4639))+((r01*x4640)));
evalcond[3]=((-1.0)+(((-1.0)*x4635*x4639))+((r11*x4640))+(((-1.0)*r12*x4638)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4634*x4638))+((cj1*sj2))+((r01*x4641))+((r02*x4633)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4632*x4636))+(((-1.0)*x4637*x4638))+((r22*x4633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4642=((-1.0)*r00);
IkReal x4644 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4644)==0){
continue;
}
IkReal x4643=pow(x4644,-0.5);
CheckValue<IkReal> x4645 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4642),IKFAST_ATAN2_MAGTHRESH);
if(!x4645.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4645.value));
IkReal gconst109=(r01*x4643);
IkReal gconst110=(x4642*x4643);
CheckValue<IkReal> x4646 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4646.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4646.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4647=((-1.0)*r00);
IkReal x4648=x4643;
CheckValue<IkReal> x4650 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4647),IKFAST_ATAN2_MAGTHRESH);
if(!x4650.valid){
continue;
}
IkReal x4649=((-1.0)*(x4650.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4649;
IkReal gconst108=x4649;
IkReal gconst109=(r01*x4648);
IkReal gconst110=(x4647*x4648);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4651=((1.0)*sj0);
IkReal x4652=((1.0)*gconst109);
CheckValue<IkReal> x4653 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4651)))),IkReal(((((-1.0)*cj0*r01*x4652))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4653.valid){
continue;
}
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4652))+(((-1.0)*gconst110*r21)))),-1);
if(!x4654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4653.value)+(((1.5707963267949)*(x4654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4655=IKsin(j4);
IkReal x4656=IKcos(j4);
IkReal x4657=(gconst109*r21);
IkReal x4658=((1.0)*cj2);
IkReal x4659=((1.0)*sj0);
IkReal x4660=(cj1*sj2);
IkReal x4661=((1.0)*x4656);
IkReal x4662=(gconst109*x4655);
IkReal x4663=(gconst109*x4656);
IkReal x4664=((1.0)*gconst110*x4655);
evalcond[0]=((((-1.0)*r20*x4664))+(((-1.0)*r22*x4661))+((x4655*x4657)));
evalcond[1]=(cj0+(((-1.0)*r10*x4664))+((r11*x4662))+(((-1.0)*r12*x4661)));
evalcond[2]=((((-1.0)*x4659))+((r01*x4662))+(((-1.0)*r00*x4664))+(((-1.0)*r02*x4661)));
evalcond[3]=((((-1.0)*cj1*x4658))+(((-1.0)*gconst110*r20*x4661))+((sj1*sj2))+((x4656*x4657))+((r22*x4655)));
evalcond[4]=((((-1.0)*cj0*x4660))+((r01*x4663))+((r02*x4655))+(((-1.0)*gconst110*r00*x4661))+(((-1.0)*cj0*sj1*x4658)));
evalcond[5]=(((r12*x4655))+(((-1.0)*gconst110*r10*x4661))+(((-1.0)*x4659*x4660))+((r11*x4663))+(((-1.0)*sj0*sj1*x4658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4665=((1.0)*gconst110);
CheckValue<IkReal> x4666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4665))+(((-1.0)*gconst109*r10)))),-1);
if(!x4666.valid){
continue;
}
CheckValue<IkReal> x4667 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4665))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4666.value)))+(x4667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4668=IKsin(j4);
IkReal x4669=IKcos(j4);
IkReal x4670=(gconst109*r21);
IkReal x4671=((1.0)*cj2);
IkReal x4672=((1.0)*sj0);
IkReal x4673=(cj1*sj2);
IkReal x4674=((1.0)*x4669);
IkReal x4675=(gconst109*x4668);
IkReal x4676=(gconst109*x4669);
IkReal x4677=((1.0)*gconst110*x4668);
evalcond[0]=(((x4668*x4670))+(((-1.0)*r20*x4677))+(((-1.0)*r22*x4674)));
evalcond[1]=(cj0+((r11*x4675))+(((-1.0)*r12*x4674))+(((-1.0)*r10*x4677)));
evalcond[2]=((((-1.0)*r02*x4674))+(((-1.0)*x4672))+((r01*x4675))+(((-1.0)*r00*x4677)));
evalcond[3]=((((-1.0)*cj1*x4671))+((x4669*x4670))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4674))+((r22*x4668)));
evalcond[4]=((((-1.0)*cj0*x4673))+((r02*x4668))+(((-1.0)*cj0*sj1*x4671))+((r01*x4676))+(((-1.0)*gconst110*r00*x4674)));
evalcond[5]=((((-1.0)*gconst110*r10*x4674))+((r12*x4668))+((r11*x4676))+(((-1.0)*sj0*sj1*x4671))+(((-1.0)*x4672*x4673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4678=((-1.0)*r01);
IkReal x4680 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4680)==0){
continue;
}
IkReal x4679=pow(x4680,-0.5);
CheckValue<IkReal> x4681 = IKatan2WithCheck(IkReal(x4678),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4681.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4681.value))));
IkReal gconst112=(x4678*x4679);
IkReal gconst113=((1.0)*r00*x4679);
CheckValue<IkReal> x4682 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4682.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4682.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4683=((-1.0)*r01);
CheckValue<IkReal> x4686 = IKatan2WithCheck(IkReal(x4683),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4686.valid){
continue;
}
IkReal x4684=((1.0)*(x4686.value));
IkReal x4685=x4679;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4684)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4684)));
IkReal gconst112=(x4683*x4685);
IkReal gconst113=((1.0)*r00*x4685);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4687=((-1.0)*r01);
CheckValue<IkReal> x4690 = IKatan2WithCheck(IkReal(x4687),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4690.valid){
continue;
}
IkReal x4688=((1.0)*(x4690.value));
IkReal x4689=x4679;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4688)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4688)));
IkReal gconst112=(x4687*x4689);
IkReal gconst113=((1.0)*r00*x4689);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4691=((-1.0)*r01);
CheckValue<IkReal> x4694 = IKatan2WithCheck(IkReal(x4691),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4694.valid){
continue;
}
IkReal x4692=((1.0)*(x4694.value));
IkReal x4693=x4679;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4692)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4692)));
IkReal gconst112=(x4691*x4693);
IkReal gconst113=((1.0)*r00*x4693);
IkReal x4695=r02*r02;
IkReal x4696=(r12*sj0);
IkReal x4697=((1.0)*cj0);
IkReal x4698=x4679;
j4eval[0]=((IKabs(((((-1.0)*r02*x4697))+(((-1.0)*x4696)))))+(IKabs(((((-1.0)*x4697*x4698))+((cj0*x4695*x4698))+((r02*x4696*x4698))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4699=((1.0)*sj0);
IkReal x4700=((1.0)*gconst112);
CheckValue<IkReal> x4701 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4699))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4700))+(((-1.0)*gconst112*r11*x4699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4701.valid){
continue;
}
CheckValue<IkReal> x4702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4700)))),-1);
if(!x4702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4701.value)+(((1.5707963267949)*(x4702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4703=IKsin(j4);
IkReal x4704=IKcos(j4);
IkReal x4705=(gconst113*r20);
IkReal x4706=(gconst112*r21);
IkReal x4707=((1.0)*cj2);
IkReal x4708=(gconst113*r00);
IkReal x4709=(gconst113*r10);
IkReal x4710=((1.0)*sj0);
IkReal x4711=(cj1*sj2);
IkReal x4712=((1.0)*x4704);
IkReal x4713=((1.0)*x4703);
IkReal x4714=(gconst112*x4704);
IkReal x4715=(gconst112*x4703);
evalcond[0]=((((-1.0)*r22*x4712))+(((-1.0)*x4705*x4713))+((x4703*x4706)));
evalcond[1]=((((-1.0)*x4709*x4713))+cj0+(((-1.0)*r12*x4712))+((r11*x4715)));
evalcond[2]=((((-1.0)*r02*x4712))+((r01*x4715))+(((-1.0)*x4708*x4713))+(((-1.0)*x4710)));
evalcond[3]=(((sj1*sj2))+((x4704*x4706))+(((-1.0)*cj1*x4707))+(((-1.0)*x4705*x4712))+((r22*x4703)));
evalcond[4]=((((-1.0)*cj0*x4711))+(((-1.0)*cj0*sj1*x4707))+((r01*x4714))+(((-1.0)*x4708*x4712))+((r02*x4703)));
evalcond[5]=((((-1.0)*sj0*sj1*x4707))+(((-1.0)*x4709*x4712))+(((-1.0)*x4710*x4711))+((r11*x4714))+((r12*x4703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4716=((1.0)*gconst113);
CheckValue<IkReal> x4717 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4717.valid){
continue;
}
CheckValue<IkReal> x4718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4716))+(((-1.0)*gconst112*r10)))),-1);
if(!x4718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4717.value)+(((1.5707963267949)*(x4718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4719=IKsin(j4);
IkReal x4720=IKcos(j4);
IkReal x4721=(gconst113*r20);
IkReal x4722=(gconst112*r21);
IkReal x4723=((1.0)*cj2);
IkReal x4724=(gconst113*r00);
IkReal x4725=(gconst113*r10);
IkReal x4726=((1.0)*sj0);
IkReal x4727=(cj1*sj2);
IkReal x4728=((1.0)*x4720);
IkReal x4729=((1.0)*x4719);
IkReal x4730=(gconst112*x4720);
IkReal x4731=(gconst112*x4719);
evalcond[0]=((((-1.0)*x4721*x4729))+((x4719*x4722))+(((-1.0)*r22*x4728)));
evalcond[1]=(((r11*x4731))+cj0+(((-1.0)*r12*x4728))+(((-1.0)*x4725*x4729)));
evalcond[2]=((((-1.0)*x4724*x4729))+(((-1.0)*x4726))+(((-1.0)*r02*x4728))+((r01*x4731)));
evalcond[3]=(((x4720*x4722))+((r22*x4719))+(((-1.0)*cj1*x4723))+((sj1*sj2))+(((-1.0)*x4721*x4728)));
evalcond[4]=((((-1.0)*x4724*x4728))+(((-1.0)*cj0*sj1*x4723))+(((-1.0)*cj0*x4727))+((r01*x4730))+((r02*x4719)));
evalcond[5]=(((r11*x4730))+(((-1.0)*x4725*x4728))+(((-1.0)*sj0*sj1*x4723))+(((-1.0)*x4726*x4727))+((r12*x4719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4732=((1.0)*gconst113);
CheckValue<IkReal> x4733 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4732))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4733.valid){
continue;
}
CheckValue<IkReal> x4734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4732))+(((-1.0)*gconst112*r00)))),-1);
if(!x4734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4733.value)+(((1.5707963267949)*(x4734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4735=IKsin(j4);
IkReal x4736=IKcos(j4);
IkReal x4737=(gconst113*r20);
IkReal x4738=(gconst112*r21);
IkReal x4739=((1.0)*cj2);
IkReal x4740=(gconst113*r00);
IkReal x4741=(gconst113*r10);
IkReal x4742=((1.0)*sj0);
IkReal x4743=(cj1*sj2);
IkReal x4744=((1.0)*x4736);
IkReal x4745=((1.0)*x4735);
IkReal x4746=(gconst112*x4736);
IkReal x4747=(gconst112*x4735);
evalcond[0]=(((x4735*x4738))+(((-1.0)*x4737*x4745))+(((-1.0)*r22*x4744)));
evalcond[1]=(((r11*x4747))+(((-1.0)*r12*x4744))+cj0+(((-1.0)*x4741*x4745)));
evalcond[2]=(((r01*x4747))+(((-1.0)*x4742))+(((-1.0)*x4740*x4745))+(((-1.0)*r02*x4744)));
evalcond[3]=((((-1.0)*cj1*x4739))+((x4736*x4738))+((sj1*sj2))+(((-1.0)*x4737*x4744))+((r22*x4735)));
evalcond[4]=((((-1.0)*cj0*x4743))+((r01*x4746))+(((-1.0)*cj0*sj1*x4739))+((r02*x4735))+(((-1.0)*x4740*x4744)));
evalcond[5]=(((r11*x4746))+(((-1.0)*sj0*sj1*x4739))+(((-1.0)*x4741*x4744))+(((-1.0)*x4742*x4743))+((r12*x4735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4748=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4748;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4749=((1.0)*cj5);
IkReal x4750=((((-1.0)*r11*x4749))+(((-1.0)*r10*sj5)));
j4eval[0]=x4750;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4749))))));
j4eval[2]=IKsign(x4750);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4751=cj5*cj5;
IkReal x4752=r01*r01;
IkReal x4753=(cj5*r00);
IkReal x4754=(r01*sj5);
IkReal x4755=((((-1.0)*x4751*x4752))+((x4751*(r00*r00)))+(((-2.0)*x4753*x4754))+x4752+(r02*r02));
j4eval[0]=x4755;
j4eval[1]=IKsign(x4755);
j4eval[2]=((IKabs(r02))+(IKabs((x4754+(((-1.0)*x4753))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4756=cj5*cj5;
IkReal x4757=r01*r01;
IkReal x4758=(r01*sj5);
IkReal x4759=(cj5*r00);
CheckValue<IkReal> x4760 = IKatan2WithCheck(IkReal((x4758+(((-1.0)*x4759)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4760.valid){
continue;
}
CheckValue<IkReal> x4761=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4758*x4759))+(((-1.0)*x4756*x4757))+((x4756*(r00*r00)))+x4757+(r02*r02))),-1);
if(!x4761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4760.value)+(((1.5707963267949)*(x4761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4762=IKcos(j4);
IkReal x4763=IKsin(j4);
IkReal x4764=(cj5*r00);
IkReal x4765=(cj5*r10);
IkReal x4766=(r21*sj5);
IkReal x4767=((1.0)*cj2);
IkReal x4768=(cj5*r20);
IkReal x4769=((1.0)*x4762);
IkReal x4770=((1.0)*x4763);
IkReal x4771=(sj5*x4763);
IkReal x4772=(sj5*x4762);
evalcond[0]=(((r02*x4763))+((r01*x4772))+(((-1.0)*x4764*x4769)));
evalcond[1]=((((-1.0)*r22*x4769))+((x4763*x4766))+(((-1.0)*x4768*x4770)));
evalcond[2]=(((r11*x4771))+(((-1.0)*x4765*x4770))+(((-1.0)*r12*x4769)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4769))+((r01*x4771))+(((-1.0)*x4764*x4770)));
evalcond[4]=(((r22*x4763))+((sj1*sj2))+(((-1.0)*cj1*x4767))+(((-1.0)*x4768*x4769))+((x4762*x4766)));
evalcond[5]=(((r11*x4772))+(((-1.0)*x4765*x4769))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4767))+((r12*x4763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4773=((1.0)*cj5);
CheckValue<IkReal> x4774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4773))+(((-1.0)*r10*sj5)))),-1);
if(!x4774.valid){
continue;
}
CheckValue<IkReal> x4775 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4774.value)))+(x4775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4776=IKcos(j4);
IkReal x4777=IKsin(j4);
IkReal x4778=(cj5*r00);
IkReal x4779=(cj5*r10);
IkReal x4780=(r21*sj5);
IkReal x4781=((1.0)*cj2);
IkReal x4782=(cj5*r20);
IkReal x4783=((1.0)*x4776);
IkReal x4784=((1.0)*x4777);
IkReal x4785=(sj5*x4777);
IkReal x4786=(sj5*x4776);
evalcond[0]=(((r01*x4786))+((r02*x4777))+(((-1.0)*x4778*x4783)));
evalcond[1]=(((x4777*x4780))+(((-1.0)*x4782*x4784))+(((-1.0)*r22*x4783)));
evalcond[2]=((((-1.0)*x4779*x4784))+((r11*x4785))+(((-1.0)*r12*x4783)));
evalcond[3]=((-1.0)+((r01*x4785))+(((-1.0)*r02*x4783))+(((-1.0)*x4778*x4784)));
evalcond[4]=(((x4776*x4780))+((sj1*sj2))+(((-1.0)*x4782*x4783))+(((-1.0)*cj1*x4781))+((r22*x4777)));
evalcond[5]=((((-1.0)*x4779*x4783))+((r12*x4777))+(((-1.0)*cj1*sj2))+((r11*x4786))+(((-1.0)*sj1*x4781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4787=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4787.valid){
continue;
}
CheckValue<IkReal> x4788 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4787.value)))+(x4788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4789=IKcos(j4);
IkReal x4790=IKsin(j4);
IkReal x4791=(cj5*r00);
IkReal x4792=(cj5*r10);
IkReal x4793=(r21*sj5);
IkReal x4794=((1.0)*cj2);
IkReal x4795=(cj5*r20);
IkReal x4796=((1.0)*x4789);
IkReal x4797=((1.0)*x4790);
IkReal x4798=(sj5*x4790);
IkReal x4799=(sj5*x4789);
evalcond[0]=(((r01*x4799))+((r02*x4790))+(((-1.0)*x4791*x4796)));
evalcond[1]=(((x4790*x4793))+(((-1.0)*r22*x4796))+(((-1.0)*x4795*x4797)));
evalcond[2]=((((-1.0)*r12*x4796))+((r11*x4798))+(((-1.0)*x4792*x4797)));
evalcond[3]=((-1.0)+((r01*x4798))+(((-1.0)*r02*x4796))+(((-1.0)*x4791*x4797)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4795*x4796))+(((-1.0)*cj1*x4794))+((x4789*x4793))+((r22*x4790)));
evalcond[5]=((((-1.0)*sj1*x4794))+(((-1.0)*cj1*sj2))+((r11*x4799))+((r12*x4790))+(((-1.0)*x4792*x4796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4800=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4800;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4801=((1.0)*cj5);
IkReal x4802=((((-1.0)*r21*x4801))+(((-1.0)*r20*sj5)));
j4eval[0]=x4802;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4801))))));
j4eval[2]=IKsign(x4802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4803=cj5*cj5;
IkReal x4804=r01*r01;
IkReal x4805=(r01*sj5);
IkReal x4806=(cj5*r00);
IkReal x4807=((((-1.0)*(r02*r02)))+((x4803*x4804))+(((-1.0)*x4804))+(((-1.0)*x4803*(r00*r00)))+(((2.0)*x4805*x4806)));
j4eval[0]=x4807;
j4eval[1]=IKsign(x4807);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4806))+x4805))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4808=cj5*cj5;
IkReal x4809=r01*r01;
IkReal x4810=(r01*sj5);
IkReal x4811=(cj5*r00);
CheckValue<IkReal> x4812=IKPowWithIntegerCheck(IKsign(((((2.0)*x4810*x4811))+(((-1.0)*(r02*r02)))+((x4808*x4809))+(((-1.0)*x4809))+(((-1.0)*x4808*(r00*r00))))),-1);
if(!x4812.valid){
continue;
}
CheckValue<IkReal> x4813 = IKatan2WithCheck(IkReal(((((-1.0)*x4811))+x4810)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4812.value)))+(x4813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4814=IKcos(j4);
IkReal x4815=IKsin(j4);
IkReal x4816=(cj5*r00);
IkReal x4817=(cj5*r10);
IkReal x4818=(r21*sj5);
IkReal x4819=(cj5*r20);
IkReal x4820=((1.0)*x4814);
IkReal x4821=((1.0)*x4815);
IkReal x4822=(sj5*x4815);
IkReal x4823=(sj5*x4814);
evalcond[0]=((((-1.0)*x4816*x4820))+((r02*x4815))+((r01*x4823)));
evalcond[1]=(((x4815*x4818))+(((-1.0)*r22*x4820))+(((-1.0)*x4819*x4821)));
evalcond[2]=(((r11*x4822))+(((-1.0)*x4817*x4821))+(((-1.0)*r12*x4820)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4820))+(((-1.0)*x4816*x4821))+((r01*x4822)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4823))+(((-1.0)*x4817*x4820))+((r12*x4815)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4819*x4820))+((x4814*x4818))+((r22*x4815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4824=((1.0)*cj5);
CheckValue<IkReal> x4825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4824))+(((-1.0)*r20*sj5)))),-1);
if(!x4825.valid){
continue;
}
CheckValue<IkReal> x4826 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4824))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4825.value)))+(x4826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4827=IKcos(j4);
IkReal x4828=IKsin(j4);
IkReal x4829=(cj5*r00);
IkReal x4830=(cj5*r10);
IkReal x4831=(r21*sj5);
IkReal x4832=(cj5*r20);
IkReal x4833=((1.0)*x4827);
IkReal x4834=((1.0)*x4828);
IkReal x4835=(sj5*x4828);
IkReal x4836=(sj5*x4827);
evalcond[0]=(((r01*x4836))+((r02*x4828))+(((-1.0)*x4829*x4833)));
evalcond[1]=((((-1.0)*x4832*x4834))+(((-1.0)*r22*x4833))+((x4828*x4831)));
evalcond[2]=(((r11*x4835))+(((-1.0)*x4830*x4834))+(((-1.0)*r12*x4833)));
evalcond[3]=((1.0)+((r01*x4835))+(((-1.0)*x4829*x4834))+(((-1.0)*r02*x4833)));
evalcond[4]=(((cj2*sj1))+((r11*x4836))+(((-1.0)*x4830*x4833))+((cj1*sj2))+((r12*x4828)));
evalcond[5]=(((r22*x4828))+(((-1.0)*x4832*x4833))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4827*x4831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4837 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4837.valid){
continue;
}
CheckValue<IkReal> x4838=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4837.value)+(((1.5707963267949)*(x4838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4839=IKcos(j4);
IkReal x4840=IKsin(j4);
IkReal x4841=(cj5*r00);
IkReal x4842=(cj5*r10);
IkReal x4843=(r21*sj5);
IkReal x4844=(cj5*r20);
IkReal x4845=((1.0)*x4839);
IkReal x4846=((1.0)*x4840);
IkReal x4847=(sj5*x4840);
IkReal x4848=(sj5*x4839);
evalcond[0]=(((r02*x4840))+(((-1.0)*x4841*x4845))+((r01*x4848)));
evalcond[1]=((((-1.0)*x4844*x4846))+((x4840*x4843))+(((-1.0)*r22*x4845)));
evalcond[2]=((((-1.0)*x4842*x4846))+((r11*x4847))+(((-1.0)*r12*x4845)));
evalcond[3]=((1.0)+(((-1.0)*x4841*x4846))+(((-1.0)*r02*x4845))+((r01*x4847)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4842*x4845))+((cj1*sj2))+((r11*x4848))+((r12*x4840)));
evalcond[5]=((((-1.0)*x4844*x4845))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4840))+((x4839*x4843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4849=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4849);
rxp1_1=(px*r21);
rxp1_2=(r11*x4849);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4850=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4850);
rxp1_1=(px*r21);
rxp1_2=(r11*x4850);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4851=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4851);
rxp1_1=(px*r21);
rxp1_2=(r11*x4851);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4854=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4854.valid){
continue;
}
IkReal x4852=x4854.value;
IkReal x4853=(sj0*x4852);
cj4array[0]=(((cj1*sj2*x4853))+((cj2*sj1*x4853)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4855=IKsin(j4);
IkReal x4856=IKcos(j4);
IkReal x4857=(r21*sj5);
IkReal x4858=((1.0)*cj5*r20);
evalcond[0]=(r02*x4855);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4856)));
evalcond[2]=(((x4855*x4857))+(((-1.0)*x4855*x4858)));
evalcond[3]=(((r11*sj5*x4855))+(((-1.0)*cj5*r10*x4855)));
evalcond[4]=((((-1.0)*x4856*x4858))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4856*x4857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4860=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4860.valid){
continue;
}
IkReal x4859=x4860.value;
cj4array[0]=(((cj1*cj2*x4859))+(((-1.0)*sj1*sj2*x4859)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4861=IKsin(j4);
IkReal x4862=IKcos(j4);
IkReal x4863=((1.0)*sj0);
IkReal x4864=((1.0)*cj5);
IkReal x4865=(sj5*x4861);
evalcond[0]=(r02*x4861);
evalcond[1]=((((-1.0)*r02*x4862))+(((-1.0)*x4863)));
evalcond[2]=((((-1.0)*r20*x4861*x4864))+((r21*x4865)));
evalcond[3]=(((r11*x4865))+(((-1.0)*r10*x4861*x4864)));
evalcond[4]=((((-1.0)*r10*x4862*x4864))+(((-1.0)*cj2*sj1*x4863))+((r11*sj5*x4862))+(((-1.0)*cj1*sj2*x4863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4866=IKPowWithIntegerCheck(r02,-1);
if(!x4866.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4866.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4867=IKsin(j4);
IkReal x4868=IKcos(j4);
IkReal x4869=((1.0)*cj1);
IkReal x4870=(r21*sj5);
IkReal x4871=((1.0)*cj5);
IkReal x4872=(r11*sj5);
evalcond[0]=(r02*x4867);
evalcond[1]=(((x4867*x4870))+(((-1.0)*r20*x4867*x4871)));
evalcond[2]=(((x4867*x4872))+(((-1.0)*r10*x4867*x4871)));
evalcond[3]=(((x4868*x4870))+((sj1*sj2))+(((-1.0)*cj2*x4869))+(((-1.0)*r20*x4868*x4871)));
evalcond[4]=(((x4868*x4872))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4868*x4871))+(((-1.0)*sj0*sj2*x4869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4873=((1.0)*sj0);
IkReal x4874=((1.0)*cj0);
CheckValue<IkReal> x4875 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4873))+(((-1.0)*r02*x4874)))),IkReal(((((-1.0)*r01*sj5*x4874))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4875.valid){
continue;
}
CheckValue<IkReal> x4876=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4875.value)+(((1.5707963267949)*(x4876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4877=IKsin(j4);
IkReal x4878=IKcos(j4);
IkReal x4879=(cj5*r00);
IkReal x4880=(cj5*r10);
IkReal x4881=(r21*sj5);
IkReal x4882=((1.0)*cj2);
IkReal x4883=((1.0)*sj0);
IkReal x4884=(cj1*sj2);
IkReal x4885=(cj5*r20);
IkReal x4886=((1.0)*x4878);
IkReal x4887=((1.0)*x4877);
IkReal x4888=(sj5*x4877);
IkReal x4889=(sj5*x4878);
evalcond[0]=((((-1.0)*x4885*x4887))+((x4877*x4881))+(((-1.0)*r22*x4886)));
evalcond[1]=(((r11*x4888))+cj0+(((-1.0)*r12*x4886))+(((-1.0)*x4880*x4887)));
evalcond[2]=((((-1.0)*x4883))+(((-1.0)*x4879*x4887))+(((-1.0)*r02*x4886))+((r01*x4888)));
evalcond[3]=((((-1.0)*cj1*x4882))+((sj1*sj2))+(((-1.0)*x4885*x4886))+((x4878*x4881))+((r22*x4877)));
evalcond[4]=((((-1.0)*cj0*x4884))+((r02*x4877))+(((-1.0)*x4879*x4886))+(((-1.0)*cj0*sj1*x4882))+((r01*x4889)));
evalcond[5]=(((r11*x4889))+(((-1.0)*x4880*x4886))+(((-1.0)*x4883*x4884))+(((-1.0)*sj0*sj1*x4882))+((r12*x4877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4890=((1.0)*cj5);
CheckValue<IkReal> x4891=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4890))+(((-1.0)*r10*sj5)))),-1);
if(!x4891.valid){
continue;
}
CheckValue<IkReal> x4892 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4890))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4891.value)))+(x4892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4893=IKsin(j4);
IkReal x4894=IKcos(j4);
IkReal x4895=(cj5*r00);
IkReal x4896=(cj5*r10);
IkReal x4897=(r21*sj5);
IkReal x4898=((1.0)*cj2);
IkReal x4899=((1.0)*sj0);
IkReal x4900=(cj1*sj2);
IkReal x4901=(cj5*r20);
IkReal x4902=((1.0)*x4894);
IkReal x4903=((1.0)*x4893);
IkReal x4904=(sj5*x4893);
IkReal x4905=(sj5*x4894);
evalcond[0]=((((-1.0)*r22*x4902))+(((-1.0)*x4901*x4903))+((x4893*x4897)));
evalcond[1]=((((-1.0)*r12*x4902))+cj0+(((-1.0)*x4896*x4903))+((r11*x4904)));
evalcond[2]=((((-1.0)*x4899))+(((-1.0)*r02*x4902))+(((-1.0)*x4895*x4903))+((r01*x4904)));
evalcond[3]=((((-1.0)*cj1*x4898))+((sj1*sj2))+((r22*x4893))+(((-1.0)*x4901*x4902))+((x4894*x4897)));
evalcond[4]=((((-1.0)*cj0*x4900))+((r02*x4893))+(((-1.0)*cj0*sj1*x4898))+(((-1.0)*x4895*x4902))+((r01*x4905)));
evalcond[5]=((((-1.0)*x4899*x4900))+((r12*x4893))+(((-1.0)*sj0*sj1*x4898))+(((-1.0)*x4896*x4902))+((r11*x4905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4906=((1.0)*cj5);
CheckValue<IkReal> x4907 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4907.valid){
continue;
}
CheckValue<IkReal> x4908=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4906))+(((-1.0)*r00*sj5)))),-1);
if(!x4908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4907.value)+(((1.5707963267949)*(x4908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4909=IKsin(j4);
IkReal x4910=IKcos(j4);
IkReal x4911=(cj5*r00);
IkReal x4912=(cj5*r10);
IkReal x4913=(r21*sj5);
IkReal x4914=((1.0)*cj2);
IkReal x4915=((1.0)*sj0);
IkReal x4916=(cj1*sj2);
IkReal x4917=(cj5*r20);
IkReal x4918=((1.0)*x4910);
IkReal x4919=((1.0)*x4909);
IkReal x4920=(sj5*x4909);
IkReal x4921=(sj5*x4910);
evalcond[0]=(((x4909*x4913))+(((-1.0)*r22*x4918))+(((-1.0)*x4917*x4919)));
evalcond[1]=((((-1.0)*x4912*x4919))+cj0+(((-1.0)*r12*x4918))+((r11*x4920)));
evalcond[2]=((((-1.0)*r02*x4918))+(((-1.0)*x4911*x4919))+(((-1.0)*x4915))+((r01*x4920)));
evalcond[3]=(((sj1*sj2))+((x4910*x4913))+((r22*x4909))+(((-1.0)*cj1*x4914))+(((-1.0)*x4917*x4918)));
evalcond[4]=((((-1.0)*cj0*sj1*x4914))+((r02*x4909))+(((-1.0)*x4911*x4918))+((r01*x4921))+(((-1.0)*cj0*x4916)));
evalcond[5]=((((-1.0)*x4912*x4918))+(((-1.0)*x4915*x4916))+(((-1.0)*sj0*sj1*x4914))+((r12*x4909))+((r11*x4921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4922=((1.0)*cj5);
IkReal x4923=((1.0)*sj5);
IkReal x4924=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4924;
j0eval[1]=((IKabs(((((-1.0)*r11*x4922))+(((-1.0)*r10*x4923)))))+(IKabs(((((-1.0)*r01*x4922))+(((-1.0)*r00*x4923))))));
j0eval[2]=IKsign(x4924);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4925=r21*r21;
IkReal x4926=cj5*cj5;
IkReal x4927=(cj2*sj1);
IkReal x4928=(cj1*sj2);
IkReal x4929=(r21*sj5);
IkReal x4930=((1.0)*cj5*r20);
IkReal x4931=((((-1.0)*x4925))+(((2.0)*cj5*r20*x4929))+(((-1.0)*(r22*r22)))+((x4925*x4926))+(((-1.0)*x4926*(r20*r20))));
j4eval[0]=x4931;
j4eval[1]=((IKabs((((x4927*x4929))+((x4928*x4929))+(((-1.0)*x4927*x4930))+(((-1.0)*x4928*x4930)))))+(IKabs((((r22*x4927))+((r22*x4928))))));
j4eval[2]=IKsign(x4931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4932=cj1*cj1;
IkReal x4933=(cj2*sj2);
IkReal x4934=(cj2*sj1);
IkReal x4935=(cj1*sj1);
j0eval[0]=(x4933+x4935+(((-1.08349267049076)*cj1*x4934))+(((-2.0)*x4932*x4933))+(((-1.08349267049076)*sj2*x4932))+(((-2.0)*cj1*cj2*x4934)));
j0eval[1]=((((-1.0)*x4934))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4936=IKsin(j0);
IkReal x4937=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.81725)*x4937))+(((-0.10915)*x4936)));
evalcond[1]=((((0.10915)*x4937))+(((-1.0)*py))+(((0.81725)*x4936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4938=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4938;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4939=((1.0)*cj5);
IkReal x4940=((((-1.0)*r01*x4939))+(((-1.0)*r00*sj5)));
j4eval[0]=x4940;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4939))))));
j4eval[2]=IKsign(x4940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4941=((1.0)*cj5);
IkReal x4942=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4941)));
j4eval[0]=x4942;
j4eval[1]=IKsign(x4942);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4941))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4943=((1.0)*cj5);
CheckValue<IkReal> x4944 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4943))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4944.valid){
continue;
}
CheckValue<IkReal> x4945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4943)))),-1);
if(!x4945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4944.value)+(((1.5707963267949)*(x4945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4946=IKcos(j4);
IkReal x4947=IKsin(j4);
IkReal x4948=((1.0)*sj0);
IkReal x4949=(cj5*r00);
IkReal x4950=(cj5*r10);
IkReal x4951=(cj5*r20);
IkReal x4952=((1.0)*x4946);
IkReal x4953=((1.0)*x4947);
IkReal x4954=(sj5*x4946);
IkReal x4955=(sj5*x4947);
evalcond[0]=(((r21*x4954))+(((-1.0)*x4951*x4952))+((r22*x4947)));
evalcond[1]=((((-1.0)*r22*x4952))+((r21*x4955))+(((-1.0)*x4951*x4953)));
evalcond[2]=(cj0+((r11*x4955))+(((-1.0)*r12*x4952))+(((-1.0)*x4950*x4953)));
evalcond[3]=(((r02*x4947))+(((-1.0)*x4949*x4952))+((r01*x4954))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4948))+((r12*x4947))+((r11*x4954))+(((-1.0)*x4950*x4952)));
evalcond[5]=((((-1.0)*x4948))+(((-1.0)*r02*x4952))+(((-1.0)*x4949*x4953))+((r01*x4955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4956=((1.0)*cj5);
CheckValue<IkReal> x4957=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4956)))),-1);
if(!x4957.valid){
continue;
}
CheckValue<IkReal> x4958 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4957.value)))+(x4958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4959=IKcos(j4);
IkReal x4960=IKsin(j4);
IkReal x4961=((1.0)*sj0);
IkReal x4962=(cj5*r00);
IkReal x4963=(cj5*r10);
IkReal x4964=(cj5*r20);
IkReal x4965=((1.0)*x4959);
IkReal x4966=((1.0)*x4960);
IkReal x4967=(sj5*x4959);
IkReal x4968=(sj5*x4960);
evalcond[0]=(((r22*x4960))+(((-1.0)*x4964*x4965))+((r21*x4967)));
evalcond[1]=((((-1.0)*r22*x4965))+(((-1.0)*x4964*x4966))+((r21*x4968)));
evalcond[2]=(cj0+(((-1.0)*x4963*x4966))+((r11*x4968))+(((-1.0)*r12*x4965)));
evalcond[3]=(((r02*x4960))+(((-1.0)*x4962*x4965))+((r01*x4967))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4960))+(((-1.0)*x4961))+(((-1.0)*x4963*x4965))+((r11*x4967)));
evalcond[5]=((((-1.0)*x4961))+(((-1.0)*r02*x4965))+(((-1.0)*x4962*x4966))+((r01*x4968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4969 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4969.valid){
continue;
}
CheckValue<IkReal> x4970=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4969.value)+(((1.5707963267949)*(x4970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4971=IKcos(j4);
IkReal x4972=IKsin(j4);
IkReal x4973=((1.0)*sj0);
IkReal x4974=(cj5*r00);
IkReal x4975=(cj5*r10);
IkReal x4976=(cj5*r20);
IkReal x4977=((1.0)*x4971);
IkReal x4978=((1.0)*x4972);
IkReal x4979=(sj5*x4971);
IkReal x4980=(sj5*x4972);
evalcond[0]=(((r22*x4972))+(((-1.0)*x4976*x4977))+((r21*x4979)));
evalcond[1]=((((-1.0)*x4976*x4978))+((r21*x4980))+(((-1.0)*r22*x4977)));
evalcond[2]=((((-1.0)*x4975*x4978))+cj0+((r11*x4980))+(((-1.0)*r12*x4977)));
evalcond[3]=(((r02*x4972))+(((-1.0)*x4974*x4977))+(((-1.0)*cj0))+((r01*x4979)));
evalcond[4]=((((-1.0)*x4975*x4977))+((r12*x4972))+((r11*x4979))+(((-1.0)*x4973)));
evalcond[5]=(((r01*x4980))+(((-1.0)*x4973))+(((-1.0)*r02*x4977))+(((-1.0)*x4974*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4981=IKsin(j0);
IkReal x4982=IKcos(j0);
evalcond[0]=((((-0.10915)*x4981))+(((0.03275)*x4982))+(((-1.0)*px)));
evalcond[1]=((((0.03275)*x4981))+(((-1.0)*py))+(((0.10915)*x4982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4983=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4983;
j4eval[1]=IKsign(x4983);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4984=((1.0)*cj5);
IkReal x4985=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4984)));
j4eval[0]=x4985;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4984)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4986=cj5*cj5;
IkReal x4987=((1.0)*r20);
IkReal x4988=(r01*r21);
IkReal x4989=(r21*sj5);
IkReal x4990=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4989))+((x4986*x4988))+(((-1.0)*x4988))+(((-1.0)*r00*x4986*x4987)));
j4eval[0]=x4990;
j4eval[1]=((IKabs((((cj0*x4989))+(((-1.0)*cj0*cj5*x4987)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4991=cj5*cj5;
IkReal x4992=((1.0)*r20);
IkReal x4993=(r01*r21);
IkReal x4994=(r21*sj5);
CheckValue<IkReal> x4995=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4993))+(((-1.0)*r00*x4991*x4992))+((cj5*r00*x4994))+((x4991*x4993)))),-1);
if(!x4995.valid){
continue;
}
CheckValue<IkReal> x4996 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4992))+((cj0*x4994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4995.value)))+(x4996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4997=IKcos(j4);
IkReal x4998=IKsin(j4);
IkReal x4999=(cj5*r00);
IkReal x5000=(cj5*r10);
IkReal x5001=(cj5*r20);
IkReal x5002=((1.0)*x4997);
IkReal x5003=((1.0)*x4998);
IkReal x5004=(sj5*x4997);
IkReal x5005=(sj5*x4998);
evalcond[0]=(((r22*x4998))+(((-1.0)*x5001*x5002))+((r21*x5004)));
evalcond[1]=((((-1.0)*x5001*x5003))+((r21*x5005))+(((-1.0)*r22*x5002)));
evalcond[2]=(cj0+((r02*x4998))+((r01*x5004))+(((-1.0)*x4999*x5002)));
evalcond[3]=(sj0+((r11*x5004))+((r12*x4998))+(((-1.0)*x5000*x5002)));
evalcond[4]=(((r11*x5005))+cj0+(((-1.0)*r12*x5002))+(((-1.0)*x5000*x5003)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5005))+(((-1.0)*x4999*x5003))+(((-1.0)*r02*x5002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5006=((1.0)*cj5);
CheckValue<IkReal> x5007 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5006)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5007.valid){
continue;
}
CheckValue<IkReal> x5008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5006)))),-1);
if(!x5008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5007.value)+(((1.5707963267949)*(x5008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5009=IKcos(j4);
IkReal x5010=IKsin(j4);
IkReal x5011=(cj5*r00);
IkReal x5012=(cj5*r10);
IkReal x5013=(cj5*r20);
IkReal x5014=((1.0)*x5009);
IkReal x5015=((1.0)*x5010);
IkReal x5016=(sj5*x5009);
IkReal x5017=(sj5*x5010);
evalcond[0]=((((-1.0)*x5013*x5014))+((r21*x5016))+((r22*x5010)));
evalcond[1]=((((-1.0)*r22*x5014))+(((-1.0)*x5013*x5015))+((r21*x5017)));
evalcond[2]=(cj0+((r02*x5010))+(((-1.0)*x5011*x5014))+((r01*x5016)));
evalcond[3]=(sj0+(((-1.0)*x5012*x5014))+((r11*x5016))+((r12*x5010)));
evalcond[4]=(cj0+(((-1.0)*x5012*x5015))+(((-1.0)*r12*x5014))+((r11*x5017)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5014))+(((-1.0)*x5011*x5015))+((r01*x5017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5018 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5018.valid){
continue;
}
CheckValue<IkReal> x5019=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5018.value)+(((1.5707963267949)*(x5019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5020=IKcos(j4);
IkReal x5021=IKsin(j4);
IkReal x5022=(cj5*r00);
IkReal x5023=(cj5*r10);
IkReal x5024=(cj5*r20);
IkReal x5025=((1.0)*x5020);
IkReal x5026=((1.0)*x5021);
IkReal x5027=(sj5*x5020);
IkReal x5028=(sj5*x5021);
evalcond[0]=(((r22*x5021))+(((-1.0)*x5024*x5025))+((r21*x5027)));
evalcond[1]=((((-1.0)*r22*x5025))+(((-1.0)*x5024*x5026))+((r21*x5028)));
evalcond[2]=(((r02*x5021))+cj0+(((-1.0)*x5022*x5025))+((r01*x5027)));
evalcond[3]=(((r11*x5027))+sj0+((r12*x5021))+(((-1.0)*x5023*x5025)));
evalcond[4]=(((r11*x5028))+cj0+(((-1.0)*r12*x5025))+(((-1.0)*x5023*x5026)));
evalcond[5]=((((-1.0)*r02*x5025))+(((-1.0)*sj0))+(((-1.0)*x5022*x5026))+((r01*x5028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5029=IKsin(j0);
IkReal x5030=IKcos(j0);
IkReal x5031=(r00*sj5);
IkReal x5032=(r10*sj5);
IkReal x5033=(cj5*r11);
IkReal x5034=(cj5*r01);
evalcond[0]=((((-1.0)*x5030))+x5034+x5031);
evalcond[1]=((((-1.0)*x5029))+x5032+x5033);
evalcond[2]=((((-0.09465)*x5034))+(((-0.09465)*x5031))+(((-1.0)*px))+(((-0.10915)*x5029)));
evalcond[3]=((((-0.09465)*x5032))+(((-0.09465)*x5033))+(((0.10915)*x5030))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5035=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5035;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5036=((1.0)*cj5);
IkReal x5037=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5036)));
j4eval[0]=x5037;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x5036)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5038=cj5*cj5;
IkReal x5039=(r01*r11);
IkReal x5040=((1.0)*r00);
IkReal x5041=(r01*sj5);
IkReal x5042=(((x5038*x5039))+(((-1.0)*r02*r12))+(((-1.0)*x5039))+(((-1.0)*r10*x5038*x5040))+((cj5*r10*x5041))+((cj5*r00*r11*sj5)));
j4eval[0]=x5042;
j4eval[1]=IKsign(x5042);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5041))+(((-1.0)*cj0*cj5*x5040))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5043=cj5*cj5;
IkReal x5044=(r01*r11);
IkReal x5045=(cj5*r00);
IkReal x5046=(r01*sj5);
CheckValue<IkReal> x5047 = IKatan2WithCheck(IkReal((((cj0*x5046))+(((-1.0)*cj0*x5045)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5047.valid){
continue;
}
CheckValue<IkReal> x5048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x5043*x5044))+(((-1.0)*x5044))+(((-1.0)*r00*r10*x5043))+((cj5*r10*x5046))+((r11*sj5*x5045)))),-1);
if(!x5048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5047.value)+(((1.5707963267949)*(x5048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5049=IKcos(j4);
IkReal x5050=IKsin(j4);
IkReal x5051=(cj5*r00);
IkReal x5052=(r01*sj5);
IkReal x5053=(cj5*r10);
IkReal x5054=(cj5*r20);
IkReal x5055=((1.0)*x5049);
IkReal x5056=((1.0)*x5050);
IkReal x5057=(sj5*x5050);
IkReal x5058=(sj5*x5049);
evalcond[0]=(((x5049*x5052))+((r02*x5050))+(((-1.0)*x5051*x5055)));
evalcond[1]=(((r12*x5050))+((r11*x5058))+(((-1.0)*x5053*x5055)));
evalcond[2]=(((r21*x5057))+(((-1.0)*x5054*x5056))+(((-1.0)*r22*x5055)));
evalcond[3]=((1.0)+((r21*x5058))+(((-1.0)*x5054*x5055))+((r22*x5050)));
evalcond[4]=(cj0+(((-1.0)*r12*x5055))+((r11*x5057))+(((-1.0)*x5053*x5056)));
evalcond[5]=((((-1.0)*sj0))+((x5050*x5052))+(((-1.0)*r02*x5055))+(((-1.0)*x5051*x5056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5059=((1.0)*cj5);
CheckValue<IkReal> x5060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5059))+(((-1.0)*r00*sj5)))),-1);
if(!x5060.valid){
continue;
}
CheckValue<IkReal> x5061 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5059))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5060.value)))+(x5061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5062=IKcos(j4);
IkReal x5063=IKsin(j4);
IkReal x5064=(cj5*r00);
IkReal x5065=(r01*sj5);
IkReal x5066=(cj5*r10);
IkReal x5067=(cj5*r20);
IkReal x5068=((1.0)*x5062);
IkReal x5069=((1.0)*x5063);
IkReal x5070=(sj5*x5063);
IkReal x5071=(sj5*x5062);
evalcond[0]=(((x5062*x5065))+((r02*x5063))+(((-1.0)*x5064*x5068)));
evalcond[1]=((((-1.0)*x5066*x5068))+((r12*x5063))+((r11*x5071)));
evalcond[2]=(((r21*x5070))+(((-1.0)*r22*x5068))+(((-1.0)*x5067*x5069)));
evalcond[3]=((1.0)+((r21*x5071))+((r22*x5063))+(((-1.0)*x5067*x5068)));
evalcond[4]=(cj0+(((-1.0)*x5066*x5069))+(((-1.0)*r12*x5068))+((r11*x5070)));
evalcond[5]=((((-1.0)*sj0))+((x5063*x5065))+(((-1.0)*r02*x5068))+(((-1.0)*x5064*x5069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5072 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5072.valid){
continue;
}
CheckValue<IkReal> x5073=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5072.value)+(((1.5707963267949)*(x5073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5074=IKcos(j4);
IkReal x5075=IKsin(j4);
IkReal x5076=(cj5*r00);
IkReal x5077=(r01*sj5);
IkReal x5078=(cj5*r10);
IkReal x5079=(cj5*r20);
IkReal x5080=((1.0)*x5074);
IkReal x5081=((1.0)*x5075);
IkReal x5082=(sj5*x5075);
IkReal x5083=(sj5*x5074);
evalcond[0]=(((r02*x5075))+((x5074*x5077))+(((-1.0)*x5076*x5080)));
evalcond[1]=(((r11*x5083))+(((-1.0)*x5078*x5080))+((r12*x5075)));
evalcond[2]=(((r21*x5082))+(((-1.0)*x5079*x5081))+(((-1.0)*r22*x5080)));
evalcond[3]=((1.0)+((r21*x5083))+(((-1.0)*x5079*x5080))+((r22*x5075)));
evalcond[4]=((((-1.0)*r12*x5080))+cj0+((r11*x5082))+(((-1.0)*x5078*x5081)));
evalcond[5]=((((-1.0)*sj0))+((x5075*x5077))+(((-1.0)*r02*x5080))+(((-1.0)*x5076*x5081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5084=IKcos(j0);
IkReal x5085=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x5084))+(((-0.10915)*x5085)));
evalcond[1]=((((0.10915)*x5084))+(((-1.0)*py))+(((-0.39225)*x5085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5086=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5086;
j4eval[1]=IKsign(x5086);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5087=((1.0)*cj5);
IkReal x5088=((((-1.0)*r11*x5087))+(((-1.0)*r10*sj5)));
j4eval[0]=x5088;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5087)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5089=cj5*cj5;
IkReal x5090=((1.0)*r20);
IkReal x5091=(r01*r21);
IkReal x5092=(r21*sj5);
IkReal x5093=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5091))+(((-1.0)*r00*x5089*x5090))+((x5089*x5091))+((cj5*r00*x5092)));
j4eval[0]=x5093;
j4eval[1]=((IKabs((((cj0*x5092))+(((-1.0)*cj0*cj5*x5090)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5094=cj5*cj5;
IkReal x5095=((1.0)*r20);
IkReal x5096=(r01*r21);
IkReal x5097=(r21*sj5);
CheckValue<IkReal> x5098 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5097))+(((-1.0)*cj0*cj5*x5095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5098.valid){
continue;
}
CheckValue<IkReal> x5099=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5096))+((x5094*x5096))+(((-1.0)*r00*x5094*x5095))+((cj5*r00*x5097)))),-1);
if(!x5099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5098.value)+(((1.5707963267949)*(x5099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5100=IKcos(j4);
IkReal x5101=IKsin(j4);
IkReal x5102=(cj5*r00);
IkReal x5103=(cj5*r10);
IkReal x5104=(cj5*r20);
IkReal x5105=((1.0)*x5100);
IkReal x5106=((1.0)*x5101);
IkReal x5107=(sj5*x5100);
IkReal x5108=(sj5*x5101);
evalcond[0]=(((r22*x5101))+((r21*x5107))+(((-1.0)*x5104*x5105)));
evalcond[1]=((((-1.0)*r22*x5105))+((r21*x5108))+(((-1.0)*x5104*x5106)));
evalcond[2]=(((r01*x5107))+cj0+((r02*x5101))+(((-1.0)*x5102*x5105)));
evalcond[3]=(((r12*x5101))+sj0+(((-1.0)*x5103*x5105))+((r11*x5107)));
evalcond[4]=(cj0+(((-1.0)*x5103*x5106))+((r11*x5108))+(((-1.0)*r12*x5105)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5108))+(((-1.0)*r02*x5105))+(((-1.0)*x5102*x5106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5109=((1.0)*cj5);
CheckValue<IkReal> x5110 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5109)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5110.valid){
continue;
}
CheckValue<IkReal> x5111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5109)))),-1);
if(!x5111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5110.value)+(((1.5707963267949)*(x5111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5112=IKcos(j4);
IkReal x5113=IKsin(j4);
IkReal x5114=(cj5*r00);
IkReal x5115=(cj5*r10);
IkReal x5116=(cj5*r20);
IkReal x5117=((1.0)*x5112);
IkReal x5118=((1.0)*x5113);
IkReal x5119=(sj5*x5112);
IkReal x5120=(sj5*x5113);
evalcond[0]=((((-1.0)*x5116*x5117))+((r21*x5119))+((r22*x5113)));
evalcond[1]=((((-1.0)*r22*x5117))+(((-1.0)*x5116*x5118))+((r21*x5120)));
evalcond[2]=(((r01*x5119))+cj0+((r02*x5113))+(((-1.0)*x5114*x5117)));
evalcond[3]=(sj0+(((-1.0)*x5115*x5117))+((r11*x5119))+((r12*x5113)));
evalcond[4]=(cj0+(((-1.0)*x5115*x5118))+((r11*x5120))+(((-1.0)*r12*x5117)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5117))+(((-1.0)*x5114*x5118))+((r01*x5120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5121 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5121.valid){
continue;
}
CheckValue<IkReal> x5122=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5121.value)+(((1.5707963267949)*(x5122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5123=IKcos(j4);
IkReal x5124=IKsin(j4);
IkReal x5125=(cj5*r00);
IkReal x5126=(cj5*r10);
IkReal x5127=(cj5*r20);
IkReal x5128=((1.0)*x5123);
IkReal x5129=((1.0)*x5124);
IkReal x5130=(sj5*x5123);
IkReal x5131=(sj5*x5124);
evalcond[0]=(((r22*x5124))+((r21*x5130))+(((-1.0)*x5127*x5128)));
evalcond[1]=(((r21*x5131))+(((-1.0)*x5127*x5129))+(((-1.0)*r22*x5128)));
evalcond[2]=((((-1.0)*x5125*x5128))+cj0+((r01*x5130))+((r02*x5124)));
evalcond[3]=(sj0+(((-1.0)*x5126*x5128))+((r12*x5124))+((r11*x5130)));
evalcond[4]=(cj0+(((-1.0)*x5126*x5129))+((r11*x5131))+(((-1.0)*r12*x5128)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5125*x5129))+((r01*x5131))+(((-1.0)*r02*x5128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5132=((1.0)*sj5);
IkReal x5133=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5132))+(((-1.0)*r11*x5133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5133))+(((-1.0)*r00*x5132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5132))+(((-1.0)*r11*x5133))))+IKsqr(((((-1.0)*r01*x5133))+(((-1.0)*r00*x5132))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5132))+(((-1.0)*r11*x5133))), ((((-1.0)*r01*x5133))+(((-1.0)*r00*x5132))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5134=IKsin(j0);
IkReal x5135=IKcos(j0);
IkReal x5136=(r00*sj5);
IkReal x5137=(r10*sj5);
IkReal x5138=(cj5*r11);
IkReal x5139=(cj5*r01);
evalcond[0]=(x5139+x5136+x5135);
evalcond[1]=(x5138+x5137+x5134);
evalcond[2]=((((-0.10915)*x5134))+(((-0.09465)*x5139))+(((-0.09465)*x5136))+(((-1.0)*px)));
evalcond[3]=((((0.10915)*x5135))+(((-0.09465)*x5138))+(((-0.09465)*x5137))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5140=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5140;
j4eval[1]=IKsign(x5140);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5141=((1.0)*cj5);
IkReal x5142=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5141)));
j4eval[0]=x5142;
j4eval[1]=IKsign(x5142);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5141))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5143=cj5*cj5;
IkReal x5144=(r01*r11);
IkReal x5145=((1.0)*r00);
IkReal x5146=(r01*sj5);
IkReal x5147=((((-1.0)*r10*x5143*x5145))+(((-1.0)*r02*r12))+((x5143*x5144))+(((-1.0)*x5144))+((cj5*r10*x5146))+((cj5*r00*r11*sj5)));
j4eval[0]=x5147;
j4eval[1]=IKsign(x5147);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5146))+(((-1.0)*cj0*cj5*x5145))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5148=cj5*cj5;
IkReal x5149=(r01*r11);
IkReal x5150=(cj5*r00);
IkReal x5151=(r01*sj5);
CheckValue<IkReal> x5152=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5151))+(((-1.0)*r02*r12))+(((-1.0)*x5149))+(((-1.0)*r00*r10*x5148))+((x5148*x5149))+((r11*sj5*x5150)))),-1);
if(!x5152.valid){
continue;
}
CheckValue<IkReal> x5153 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5150))+((cj0*x5151)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5152.value)))+(x5153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5154=IKcos(j4);
IkReal x5155=IKsin(j4);
IkReal x5156=(cj5*r00);
IkReal x5157=(r01*sj5);
IkReal x5158=(cj5*r10);
IkReal x5159=(cj5*r20);
IkReal x5160=((1.0)*x5154);
IkReal x5161=((1.0)*x5155);
IkReal x5162=(sj5*x5155);
IkReal x5163=(sj5*x5154);
evalcond[0]=(((x5154*x5157))+((r02*x5155))+(((-1.0)*x5156*x5160)));
evalcond[1]=(((r12*x5155))+(((-1.0)*x5158*x5160))+((r11*x5163)));
evalcond[2]=((((-1.0)*r22*x5160))+((r21*x5162))+(((-1.0)*x5159*x5161)));
evalcond[3]=((-1.0)+((r21*x5163))+(((-1.0)*x5159*x5160))+((r22*x5155)));
evalcond[4]=(cj0+(((-1.0)*r12*x5160))+(((-1.0)*x5158*x5161))+((r11*x5162)));
evalcond[5]=((((-1.0)*sj0))+((x5155*x5157))+(((-1.0)*r02*x5160))+(((-1.0)*x5156*x5161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5164=((1.0)*cj5);
CheckValue<IkReal> x5165 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5164)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5165.valid){
continue;
}
CheckValue<IkReal> x5166=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5164)))),-1);
if(!x5166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5165.value)+(((1.5707963267949)*(x5166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5167=IKcos(j4);
IkReal x5168=IKsin(j4);
IkReal x5169=(cj5*r00);
IkReal x5170=(r01*sj5);
IkReal x5171=(cj5*r10);
IkReal x5172=(cj5*r20);
IkReal x5173=((1.0)*x5167);
IkReal x5174=((1.0)*x5168);
IkReal x5175=(sj5*x5168);
IkReal x5176=(sj5*x5167);
evalcond[0]=((((-1.0)*x5169*x5173))+((x5167*x5170))+((r02*x5168)));
evalcond[1]=(((r12*x5168))+((r11*x5176))+(((-1.0)*x5171*x5173)));
evalcond[2]=((((-1.0)*x5172*x5174))+(((-1.0)*r22*x5173))+((r21*x5175)));
evalcond[3]=((-1.0)+(((-1.0)*x5172*x5173))+((r22*x5168))+((r21*x5176)));
evalcond[4]=(cj0+(((-1.0)*r12*x5173))+((r11*x5175))+(((-1.0)*x5171*x5174)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5173))+(((-1.0)*x5169*x5174))+((x5168*x5170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5177=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5177.valid){
continue;
}
CheckValue<IkReal> x5178 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5177.value)))+(x5178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5179=IKcos(j4);
IkReal x5180=IKsin(j4);
IkReal x5181=(cj5*r00);
IkReal x5182=(r01*sj5);
IkReal x5183=(cj5*r10);
IkReal x5184=(cj5*r20);
IkReal x5185=((1.0)*x5179);
IkReal x5186=((1.0)*x5180);
IkReal x5187=(sj5*x5180);
IkReal x5188=(sj5*x5179);
evalcond[0]=(((x5179*x5182))+((r02*x5180))+(((-1.0)*x5181*x5185)));
evalcond[1]=((((-1.0)*x5183*x5185))+((r11*x5188))+((r12*x5180)));
evalcond[2]=((((-1.0)*r22*x5185))+(((-1.0)*x5184*x5186))+((r21*x5187)));
evalcond[3]=((-1.0)+((r22*x5180))+(((-1.0)*x5184*x5185))+((r21*x5188)));
evalcond[4]=((((-1.0)*x5183*x5186))+cj0+(((-1.0)*r12*x5185))+((r11*x5187)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5185))+((x5180*x5182))+(((-1.0)*x5181*x5186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5189=IKsin(j0);
IkReal x5190=IKcos(j0);
evalcond[0]=((((-0.10915)*x5189))+(((-1.0)*px))+(((0.39225)*x5190)));
evalcond[1]=((((0.39225)*x5189))+(((0.10915)*x5190))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5191=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5191;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5192=((1.0)*cj5);
IkReal x5193=((((-1.0)*r01*x5192))+(((-1.0)*r00*sj5)));
j4eval[0]=x5193;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5192))))));
j4eval[2]=IKsign(x5193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5194=((1.0)*cj5);
IkReal x5195=((((-1.0)*r01*x5194))+(((-1.0)*r00*sj5)));
j4eval[0]=x5195;
j4eval[1]=IKsign(x5195);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5194))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5196=((1.0)*cj5);
CheckValue<IkReal> x5197 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5196)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5197.valid){
continue;
}
CheckValue<IkReal> x5198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5196))+(((-1.0)*r00*sj5)))),-1);
if(!x5198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5197.value)+(((1.5707963267949)*(x5198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5199=IKcos(j4);
IkReal x5200=IKsin(j4);
IkReal x5201=((1.0)*sj0);
IkReal x5202=(cj5*r00);
IkReal x5203=(cj5*r10);
IkReal x5204=(cj5*r20);
IkReal x5205=((1.0)*x5199);
IkReal x5206=((1.0)*x5200);
IkReal x5207=(sj5*x5199);
IkReal x5208=(sj5*x5200);
evalcond[0]=(((r22*x5200))+(((-1.0)*x5204*x5205))+((r21*x5207)));
evalcond[1]=((((-1.0)*r22*x5205))+(((-1.0)*x5204*x5206))+((r21*x5208)));
evalcond[2]=((((-1.0)*x5203*x5206))+cj0+((r11*x5208))+(((-1.0)*r12*x5205)));
evalcond[3]=(((r01*x5207))+((r02*x5200))+(((-1.0)*x5202*x5205))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5201))+(((-1.0)*x5203*x5205))+((r11*x5207))+((r12*x5200)));
evalcond[5]=((((-1.0)*x5201))+(((-1.0)*r02*x5205))+((r01*x5208))+(((-1.0)*x5202*x5206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5209=((1.0)*cj5);
CheckValue<IkReal> x5210=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5209)))),-1);
if(!x5210.valid){
continue;
}
CheckValue<IkReal> x5211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5210.value)))+(x5211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5212=IKcos(j4);
IkReal x5213=IKsin(j4);
IkReal x5214=((1.0)*sj0);
IkReal x5215=(cj5*r00);
IkReal x5216=(cj5*r10);
IkReal x5217=(cj5*r20);
IkReal x5218=((1.0)*x5212);
IkReal x5219=((1.0)*x5213);
IkReal x5220=(sj5*x5212);
IkReal x5221=(sj5*x5213);
evalcond[0]=((((-1.0)*x5217*x5218))+((r21*x5220))+((r22*x5213)));
evalcond[1]=((((-1.0)*x5217*x5219))+((r21*x5221))+(((-1.0)*r22*x5218)));
evalcond[2]=(cj0+((r11*x5221))+(((-1.0)*x5216*x5219))+(((-1.0)*r12*x5218)));
evalcond[3]=((((-1.0)*x5215*x5218))+((r02*x5213))+((r01*x5220))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5214))+((r12*x5213))+((r11*x5220))+(((-1.0)*x5216*x5218)));
evalcond[5]=((((-1.0)*x5214))+(((-1.0)*x5215*x5219))+((r01*x5221))+(((-1.0)*r02*x5218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5222 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5222.valid){
continue;
}
CheckValue<IkReal> x5223=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5222.value)+(((1.5707963267949)*(x5223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5224=IKcos(j4);
IkReal x5225=IKsin(j4);
IkReal x5226=((1.0)*sj0);
IkReal x5227=(cj5*r00);
IkReal x5228=(cj5*r10);
IkReal x5229=(cj5*r20);
IkReal x5230=((1.0)*x5224);
IkReal x5231=((1.0)*x5225);
IkReal x5232=(sj5*x5224);
IkReal x5233=(sj5*x5225);
evalcond[0]=(((r22*x5225))+(((-1.0)*x5229*x5230))+((r21*x5232)));
evalcond[1]=((((-1.0)*r22*x5230))+(((-1.0)*x5229*x5231))+((r21*x5233)));
evalcond[2]=(cj0+((r11*x5233))+(((-1.0)*r12*x5230))+(((-1.0)*x5228*x5231)));
evalcond[3]=(((r02*x5225))+((r01*x5232))+(((-1.0)*x5227*x5230))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5232))+(((-1.0)*x5228*x5230))+(((-1.0)*x5226))+((r12*x5225)));
evalcond[5]=((((-1.0)*r02*x5230))+((r01*x5233))+(((-1.0)*x5227*x5231))+(((-1.0)*x5226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5234=IKcos(j0);
IkReal x5235=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x5234))+(((-0.10915)*x5235)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x5234))+(((-0.81725)*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5236=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5236;
j4eval[1]=IKsign(x5236);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5237=((1.0)*cj5);
IkReal x5238=((((-1.0)*r11*x5237))+(((-1.0)*r10*sj5)));
j4eval[0]=x5238;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5237))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5238);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5239=cj5*cj5;
IkReal x5240=((1.0)*r20);
IkReal x5241=(r01*r21);
IkReal x5242=(r21*sj5);
IkReal x5243=(((cj5*r01*r20*sj5))+((x5239*x5241))+(((-1.0)*r02*r22))+(((-1.0)*x5241))+(((-1.0)*r00*x5239*x5240))+((cj5*r00*x5242)));
j4eval[0]=x5243;
j4eval[1]=((IKabs((((cj0*x5242))+(((-1.0)*cj0*cj5*x5240)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5244=cj5*cj5;
IkReal x5245=((1.0)*r20);
IkReal x5246=(r01*r21);
IkReal x5247=(r21*sj5);
CheckValue<IkReal> x5248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5247))+(((-1.0)*cj0*cj5*x5245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5248.valid){
continue;
}
CheckValue<IkReal> x5249=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5244*x5245))+(((-1.0)*r02*r22))+(((-1.0)*x5246))+((x5244*x5246))+((cj5*r00*x5247)))),-1);
if(!x5249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5248.value)+(((1.5707963267949)*(x5249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5250=IKcos(j4);
IkReal x5251=IKsin(j4);
IkReal x5252=(cj5*r00);
IkReal x5253=(cj5*r10);
IkReal x5254=(cj5*r20);
IkReal x5255=((1.0)*x5250);
IkReal x5256=((1.0)*x5251);
IkReal x5257=(sj5*x5250);
IkReal x5258=(sj5*x5251);
evalcond[0]=(((r22*x5251))+(((-1.0)*x5254*x5255))+((r21*x5257)));
evalcond[1]=((((-1.0)*x5254*x5256))+((r21*x5258))+(((-1.0)*r22*x5255)));
evalcond[2]=(((r01*x5257))+cj0+(((-1.0)*x5252*x5255))+((r02*x5251)));
evalcond[3]=(sj0+((r12*x5251))+((r11*x5257))+(((-1.0)*x5253*x5255)));
evalcond[4]=(cj0+(((-1.0)*r12*x5255))+((r11*x5258))+(((-1.0)*x5253*x5256)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5255))+((r01*x5258))+(((-1.0)*x5252*x5256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5259=((1.0)*cj5);
CheckValue<IkReal> x5260 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5259)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5260.valid){
continue;
}
CheckValue<IkReal> x5261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5259)))),-1);
if(!x5261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5260.value)+(((1.5707963267949)*(x5261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5262=IKcos(j4);
IkReal x5263=IKsin(j4);
IkReal x5264=(cj5*r00);
IkReal x5265=(cj5*r10);
IkReal x5266=(cj5*r20);
IkReal x5267=((1.0)*x5262);
IkReal x5268=((1.0)*x5263);
IkReal x5269=(sj5*x5262);
IkReal x5270=(sj5*x5263);
evalcond[0]=(((r21*x5269))+(((-1.0)*x5266*x5267))+((r22*x5263)));
evalcond[1]=(((r21*x5270))+(((-1.0)*r22*x5267))+(((-1.0)*x5266*x5268)));
evalcond[2]=((((-1.0)*x5264*x5267))+((r02*x5263))+cj0+((r01*x5269)));
evalcond[3]=(sj0+((r12*x5263))+((r11*x5269))+(((-1.0)*x5265*x5267)));
evalcond[4]=(cj0+(((-1.0)*r12*x5267))+((r11*x5270))+(((-1.0)*x5265*x5268)));
evalcond[5]=((((-1.0)*x5264*x5268))+(((-1.0)*sj0))+(((-1.0)*r02*x5267))+((r01*x5270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5271 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5271.valid){
continue;
}
CheckValue<IkReal> x5272=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5271.value)+(((1.5707963267949)*(x5272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5273=IKcos(j4);
IkReal x5274=IKsin(j4);
IkReal x5275=(cj5*r00);
IkReal x5276=(cj5*r10);
IkReal x5277=(cj5*r20);
IkReal x5278=((1.0)*x5273);
IkReal x5279=((1.0)*x5274);
IkReal x5280=(sj5*x5273);
IkReal x5281=(sj5*x5274);
evalcond[0]=(((r22*x5274))+((r21*x5280))+(((-1.0)*x5277*x5278)));
evalcond[1]=(((r21*x5281))+(((-1.0)*x5277*x5279))+(((-1.0)*r22*x5278)));
evalcond[2]=(((r02*x5274))+cj0+(((-1.0)*x5275*x5278))+((r01*x5280)));
evalcond[3]=(sj0+(((-1.0)*x5276*x5278))+((r11*x5280))+((r12*x5274)));
evalcond[4]=(cj0+(((-1.0)*x5276*x5279))+(((-1.0)*r12*x5278))+((r11*x5281)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5275*x5279))+((r01*x5281))+(((-1.0)*r02*x5278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5282=IKcos(j0);
IkReal x5283=IKsin(j0);
evalcond[0]=((((-0.03275)*x5282))+(((-1.0)*px))+(((-0.10915)*x5283)));
evalcond[1]=((((-0.03275)*x5283))+(((-1.0)*py))+(((0.10915)*x5282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5284=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5284;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5285=((1.0)*cj5);
IkReal x5286=((((-1.0)*r01*x5285))+(((-1.0)*r00*sj5)));
j4eval[0]=x5286;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5285))))));
j4eval[2]=IKsign(x5286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5287=((1.0)*cj5);
IkReal x5288=((((-1.0)*r01*x5287))+(((-1.0)*r00*sj5)));
j4eval[0]=x5288;
j4eval[1]=IKsign(x5288);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5287))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5289=((1.0)*cj5);
CheckValue<IkReal> x5290 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5289)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5290.valid){
continue;
}
CheckValue<IkReal> x5291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5289))+(((-1.0)*r00*sj5)))),-1);
if(!x5291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5290.value)+(((1.5707963267949)*(x5291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5292=IKcos(j4);
IkReal x5293=IKsin(j4);
IkReal x5294=((1.0)*sj0);
IkReal x5295=(cj5*r00);
IkReal x5296=(cj5*r10);
IkReal x5297=(cj5*r20);
IkReal x5298=((1.0)*x5292);
IkReal x5299=((1.0)*x5293);
IkReal x5300=(sj5*x5292);
IkReal x5301=(sj5*x5293);
evalcond[0]=(((r21*x5300))+((r22*x5293))+(((-1.0)*x5297*x5298)));
evalcond[1]=(((r21*x5301))+(((-1.0)*r22*x5298))+(((-1.0)*x5297*x5299)));
evalcond[2]=(cj0+(((-1.0)*x5296*x5299))+(((-1.0)*r12*x5298))+((r11*x5301)));
evalcond[3]=(((r02*x5293))+(((-1.0)*x5295*x5298))+((r01*x5300))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5293))+(((-1.0)*x5296*x5298))+(((-1.0)*x5294))+((r11*x5300)));
evalcond[5]=((((-1.0)*x5295*x5299))+(((-1.0)*x5294))+(((-1.0)*r02*x5298))+((r01*x5301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5302=((1.0)*cj5);
CheckValue<IkReal> x5303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5302)))),-1);
if(!x5303.valid){
continue;
}
CheckValue<IkReal> x5304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5303.value)))+(x5304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5305=IKcos(j4);
IkReal x5306=IKsin(j4);
IkReal x5307=((1.0)*sj0);
IkReal x5308=(cj5*r00);
IkReal x5309=(cj5*r10);
IkReal x5310=(cj5*r20);
IkReal x5311=((1.0)*x5305);
IkReal x5312=((1.0)*x5306);
IkReal x5313=(sj5*x5305);
IkReal x5314=(sj5*x5306);
evalcond[0]=((((-1.0)*x5310*x5311))+((r21*x5313))+((r22*x5306)));
evalcond[1]=((((-1.0)*x5310*x5312))+((r21*x5314))+(((-1.0)*r22*x5311)));
evalcond[2]=((((-1.0)*r12*x5311))+cj0+((r11*x5314))+(((-1.0)*x5309*x5312)));
evalcond[3]=(((r01*x5313))+((r02*x5306))+(((-1.0)*x5308*x5311))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5307))+((r12*x5306))+((r11*x5313))+(((-1.0)*x5309*x5311)));
evalcond[5]=(((r01*x5314))+(((-1.0)*x5307))+(((-1.0)*x5308*x5312))+(((-1.0)*r02*x5311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5315 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5315.valid){
continue;
}
CheckValue<IkReal> x5316=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5315.value)+(((1.5707963267949)*(x5316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5317=IKcos(j4);
IkReal x5318=IKsin(j4);
IkReal x5319=((1.0)*sj0);
IkReal x5320=(cj5*r00);
IkReal x5321=(cj5*r10);
IkReal x5322=(cj5*r20);
IkReal x5323=((1.0)*x5317);
IkReal x5324=((1.0)*x5318);
IkReal x5325=(sj5*x5317);
IkReal x5326=(sj5*x5318);
evalcond[0]=(((r22*x5318))+(((-1.0)*x5322*x5323))+((r21*x5325)));
evalcond[1]=((((-1.0)*r22*x5323))+(((-1.0)*x5322*x5324))+((r21*x5326)));
evalcond[2]=((((-1.0)*x5321*x5324))+((r11*x5326))+cj0+(((-1.0)*r12*x5323)));
evalcond[3]=(((r02*x5318))+((r01*x5325))+(((-1.0)*cj0))+(((-1.0)*x5320*x5323)));
evalcond[4]=((((-1.0)*x5321*x5323))+(((-1.0)*x5319))+((r11*x5325))+((r12*x5318)));
evalcond[5]=((((-1.0)*x5319))+(((-1.0)*r02*x5323))+((r01*x5326))+(((-1.0)*x5320*x5324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5327=((1.0)*sj5);
IkReal x5328=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5328))+(((-1.0)*r10*x5327)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5327))+(((-1.0)*r01*x5328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5328))+(((-1.0)*r10*x5327))))+IKsqr(((((-1.0)*r00*x5327))+(((-1.0)*r01*x5328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5328))+(((-1.0)*r10*x5327))), ((((-1.0)*r00*x5327))+(((-1.0)*r01*x5328))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5329=IKsin(j0);
IkReal x5330=IKcos(j0);
IkReal x5331=(r00*sj5);
IkReal x5332=(r10*sj5);
IkReal x5333=(cj5*r11);
IkReal x5334=(cj5*r01);
evalcond[0]=(x5331+x5330+x5334);
evalcond[1]=(x5329+x5333+x5332);
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x5334))+(((-0.09465)*x5331))+(((-0.10915)*x5329)));
evalcond[3]=((((-1.0)*py))+(((0.10915)*x5330))+(((-0.09465)*x5332))+(((-0.09465)*x5333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5335=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5335;
j4eval[1]=IKsign(x5335);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5336=((1.0)*cj5);
IkReal x5337=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5336)));
j4eval[0]=x5337;
j4eval[1]=IKsign(x5337);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5336))+((r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5338=cj5*cj5;
IkReal x5339=(r01*r11);
IkReal x5340=((1.0)*r00);
IkReal x5341=(r01*sj5);
IkReal x5342=(((cj5*r10*x5341))+(((-1.0)*x5339))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5338*x5340))+((x5338*x5339))+((cj5*r00*r11*sj5)));
j4eval[0]=x5342;
j4eval[1]=IKsign(x5342);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5341))+(((-1.0)*cj0*cj5*x5340))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5343=cj5*cj5;
IkReal x5344=(r01*r11);
IkReal x5345=(cj5*r00);
IkReal x5346=(r01*sj5);
CheckValue<IkReal> x5347 = IKatan2WithCheck(IkReal((((cj0*x5346))+(((-1.0)*cj0*x5345)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5347.valid){
continue;
}
CheckValue<IkReal> x5348=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5346))+(((-1.0)*r00*r10*x5343))+((x5343*x5344))+(((-1.0)*r02*r12))+((r11*sj5*x5345))+(((-1.0)*x5344)))),-1);
if(!x5348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5347.value)+(((1.5707963267949)*(x5348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5349=IKcos(j4);
IkReal x5350=IKsin(j4);
IkReal x5351=(cj5*r00);
IkReal x5352=(r01*sj5);
IkReal x5353=(cj5*r10);
IkReal x5354=(cj5*r20);
IkReal x5355=((1.0)*x5349);
IkReal x5356=((1.0)*x5350);
IkReal x5357=(sj5*x5350);
IkReal x5358=(sj5*x5349);
evalcond[0]=((((-1.0)*x5351*x5355))+((r02*x5350))+((x5349*x5352)));
evalcond[1]=((((-1.0)*x5353*x5355))+((r11*x5358))+((r12*x5350)));
evalcond[2]=((((-1.0)*x5354*x5356))+(((-1.0)*r22*x5355))+((r21*x5357)));
evalcond[3]=((-1.0)+((r22*x5350))+(((-1.0)*x5354*x5355))+((r21*x5358)));
evalcond[4]=(cj0+(((-1.0)*x5353*x5356))+((r11*x5357))+(((-1.0)*r12*x5355)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5351*x5356))+(((-1.0)*r02*x5355))+((x5350*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5359=((1.0)*cj5);
CheckValue<IkReal> x5360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5359)))),-1);
if(!x5360.valid){
continue;
}
CheckValue<IkReal> x5361 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5359)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5360.value)))+(x5361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5362=IKcos(j4);
IkReal x5363=IKsin(j4);
IkReal x5364=(cj5*r00);
IkReal x5365=(r01*sj5);
IkReal x5366=(cj5*r10);
IkReal x5367=(cj5*r20);
IkReal x5368=((1.0)*x5362);
IkReal x5369=((1.0)*x5363);
IkReal x5370=(sj5*x5363);
IkReal x5371=(sj5*x5362);
evalcond[0]=(((r02*x5363))+(((-1.0)*x5364*x5368))+((x5362*x5365)));
evalcond[1]=(((r12*x5363))+(((-1.0)*x5366*x5368))+((r11*x5371)));
evalcond[2]=((((-1.0)*r22*x5368))+((r21*x5370))+(((-1.0)*x5367*x5369)));
evalcond[3]=((-1.0)+((r22*x5363))+((r21*x5371))+(((-1.0)*x5367*x5368)));
evalcond[4]=(cj0+(((-1.0)*x5366*x5369))+((r11*x5370))+(((-1.0)*r12*x5368)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5364*x5369))+((x5363*x5365))+(((-1.0)*r02*x5368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5372=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5372.valid){
continue;
}
CheckValue<IkReal> x5373 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5372.value)))+(x5373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5374=IKcos(j4);
IkReal x5375=IKsin(j4);
IkReal x5376=(cj5*r00);
IkReal x5377=(r01*sj5);
IkReal x5378=(cj5*r10);
IkReal x5379=(cj5*r20);
IkReal x5380=((1.0)*x5374);
IkReal x5381=((1.0)*x5375);
IkReal x5382=(sj5*x5375);
IkReal x5383=(sj5*x5374);
evalcond[0]=(((r02*x5375))+(((-1.0)*x5376*x5380))+((x5374*x5377)));
evalcond[1]=(((r11*x5383))+((r12*x5375))+(((-1.0)*x5378*x5380)));
evalcond[2]=((((-1.0)*x5379*x5381))+(((-1.0)*r22*x5380))+((r21*x5382)));
evalcond[3]=((-1.0)+((r22*x5375))+(((-1.0)*x5379*x5380))+((r21*x5383)));
evalcond[4]=(cj0+((r11*x5382))+(((-1.0)*r12*x5380))+(((-1.0)*x5378*x5381)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5380))+(((-1.0)*x5376*x5381))+((x5375*x5377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5384=IKsin(j0);
IkReal x5385=IKcos(j0);
evalcond[0]=((((-0.10915)*x5384))+(((0.39225)*x5385))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5384))+(((0.10915)*x5385))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5386=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5386;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5387=((1.0)*cj5);
IkReal x5388=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5387)));
j4eval[0]=x5388;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5387)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5389=((1.0)*cj5);
IkReal x5390=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5389)));
j4eval[0]=x5390;
j4eval[1]=IKsign(x5390);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5389))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5391=((1.0)*cj5);
CheckValue<IkReal> x5392=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5391)))),-1);
if(!x5392.valid){
continue;
}
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5391))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5392.value)))+(x5393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5394=IKcos(j4);
IkReal x5395=IKsin(j4);
IkReal x5396=((1.0)*sj0);
IkReal x5397=(cj5*r00);
IkReal x5398=(cj5*r10);
IkReal x5399=(cj5*r20);
IkReal x5400=((1.0)*x5394);
IkReal x5401=((1.0)*x5395);
IkReal x5402=(sj5*x5394);
IkReal x5403=(sj5*x5395);
evalcond[0]=(((r21*x5402))+((r22*x5395))+(((-1.0)*x5399*x5400)));
evalcond[1]=(((r21*x5403))+(((-1.0)*x5399*x5401))+(((-1.0)*r22*x5400)));
evalcond[2]=(cj0+(((-1.0)*x5398*x5401))+(((-1.0)*r12*x5400))+((r11*x5403)));
evalcond[3]=(((r02*x5395))+(((-1.0)*x5397*x5400))+((r01*x5402))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5398*x5400))+((r12*x5395))+(((-1.0)*x5396))+((r11*x5402)));
evalcond[5]=((((-1.0)*r02*x5400))+(((-1.0)*x5397*x5401))+(((-1.0)*x5396))+((r01*x5403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5404=((1.0)*cj5);
CheckValue<IkReal> x5405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5404))+(((-1.0)*r00*sj5)))),-1);
if(!x5405.valid){
continue;
}
CheckValue<IkReal> x5406 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5404))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5405.value)))+(x5406.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5407=IKcos(j4);
IkReal x5408=IKsin(j4);
IkReal x5409=((1.0)*sj0);
IkReal x5410=(cj5*r00);
IkReal x5411=(cj5*r10);
IkReal x5412=(cj5*r20);
IkReal x5413=((1.0)*x5407);
IkReal x5414=((1.0)*x5408);
IkReal x5415=(sj5*x5407);
IkReal x5416=(sj5*x5408);
evalcond[0]=((((-1.0)*x5412*x5413))+((r22*x5408))+((r21*x5415)));
evalcond[1]=((((-1.0)*x5412*x5414))+(((-1.0)*r22*x5413))+((r21*x5416)));
evalcond[2]=(((r11*x5416))+cj0+(((-1.0)*r12*x5413))+(((-1.0)*x5411*x5414)));
evalcond[3]=(((r02*x5408))+(((-1.0)*x5410*x5413))+((r01*x5415))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5408))+((r11*x5415))+(((-1.0)*x5409))+(((-1.0)*x5411*x5413)));
evalcond[5]=((((-1.0)*r02*x5413))+(((-1.0)*x5410*x5414))+(((-1.0)*x5409))+((r01*x5416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5417 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5417.valid){
continue;
}
CheckValue<IkReal> x5418=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5417.value)+(((1.5707963267949)*(x5418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5419=IKcos(j4);
IkReal x5420=IKsin(j4);
IkReal x5421=((1.0)*sj0);
IkReal x5422=(cj5*r00);
IkReal x5423=(cj5*r10);
IkReal x5424=(cj5*r20);
IkReal x5425=((1.0)*x5419);
IkReal x5426=((1.0)*x5420);
IkReal x5427=(sj5*x5419);
IkReal x5428=(sj5*x5420);
evalcond[0]=(((r22*x5420))+((r21*x5427))+(((-1.0)*x5424*x5425)));
evalcond[1]=(((r21*x5428))+(((-1.0)*x5424*x5426))+(((-1.0)*r22*x5425)));
evalcond[2]=(cj0+((r11*x5428))+(((-1.0)*r12*x5425))+(((-1.0)*x5423*x5426)));
evalcond[3]=((((-1.0)*x5422*x5425))+((r01*x5427))+((r02*x5420))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5421))+((r12*x5420))+((r11*x5427))+(((-1.0)*x5423*x5425)));
evalcond[5]=((((-1.0)*x5421))+(((-1.0)*x5422*x5426))+((r01*x5428))+(((-1.0)*r02*x5425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5429=IKsin(j0);
IkReal x5430=IKcos(j0);
IkReal x5431=(r00*sj5);
IkReal x5432=(r10*sj5);
IkReal x5433=(cj5*r11);
IkReal x5434=(cj5*r01);
evalcond[0]=(x5431+x5434+(((-1.0)*x5430)));
evalcond[1]=(x5432+x5433+(((-1.0)*x5429)));
evalcond[2]=((((-0.10915)*x5429))+(((-0.09465)*x5431))+(((-0.09465)*x5434))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x5432))+(((-0.09465)*x5433))+(((-1.0)*py))+(((0.10915)*x5430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5435=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5435;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5436=((1.0)*cj5);
IkReal x5437=((((-1.0)*r01*x5436))+(((-1.0)*r00*sj5)));
j4eval[0]=x5437;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5436))))));
j4eval[2]=IKsign(x5437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5438=cj5*cj5;
IkReal x5439=(r01*r11);
IkReal x5440=((1.0)*r00);
IkReal x5441=(r01*sj5);
IkReal x5442=((((-1.0)*x5439))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5438*x5440))+((cj5*r10*x5441))+((x5438*x5439))+((cj5*r00*r11*sj5)));
j4eval[0]=x5442;
j4eval[1]=IKsign(x5442);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5440))+((cj0*x5441))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5443=cj5*cj5;
IkReal x5444=(r01*r11);
IkReal x5445=(cj5*r00);
IkReal x5446=(r01*sj5);
CheckValue<IkReal> x5447 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5445))+((cj0*x5446)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5447.valid){
continue;
}
CheckValue<IkReal> x5448=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5444))+(((-1.0)*r02*r12))+((cj5*r10*x5446))+(((-1.0)*r00*r10*x5443))+((r11*sj5*x5445))+((x5443*x5444)))),-1);
if(!x5448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5447.value)+(((1.5707963267949)*(x5448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5449=IKcos(j4);
IkReal x5450=IKsin(j4);
IkReal x5451=(cj5*r00);
IkReal x5452=(r01*sj5);
IkReal x5453=(cj5*r10);
IkReal x5454=(cj5*r20);
IkReal x5455=((1.0)*x5449);
IkReal x5456=((1.0)*x5450);
IkReal x5457=(sj5*x5450);
IkReal x5458=(sj5*x5449);
evalcond[0]=((((-1.0)*x5451*x5455))+((r02*x5450))+((x5449*x5452)));
evalcond[1]=(((r12*x5450))+(((-1.0)*x5453*x5455))+((r11*x5458)));
evalcond[2]=((((-1.0)*x5454*x5456))+((r21*x5457))+(((-1.0)*r22*x5455)));
evalcond[3]=((1.0)+(((-1.0)*x5454*x5455))+((r21*x5458))+((r22*x5450)));
evalcond[4]=((((-1.0)*r12*x5455))+cj0+(((-1.0)*x5453*x5456))+((r11*x5457)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5451*x5456))+((x5450*x5452))+(((-1.0)*r02*x5455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5459=((1.0)*cj5);
CheckValue<IkReal> x5460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5459)))),-1);
if(!x5460.valid){
continue;
}
CheckValue<IkReal> x5461 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5459)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5460.value)))+(x5461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5462=IKcos(j4);
IkReal x5463=IKsin(j4);
IkReal x5464=(cj5*r00);
IkReal x5465=(r01*sj5);
IkReal x5466=(cj5*r10);
IkReal x5467=(cj5*r20);
IkReal x5468=((1.0)*x5462);
IkReal x5469=((1.0)*x5463);
IkReal x5470=(sj5*x5463);
IkReal x5471=(sj5*x5462);
evalcond[0]=((((-1.0)*x5464*x5468))+((r02*x5463))+((x5462*x5465)));
evalcond[1]=((((-1.0)*x5466*x5468))+((r12*x5463))+((r11*x5471)));
evalcond[2]=((((-1.0)*x5467*x5469))+((r21*x5470))+(((-1.0)*r22*x5468)));
evalcond[3]=((1.0)+(((-1.0)*x5467*x5468))+((r22*x5463))+((r21*x5471)));
evalcond[4]=((((-1.0)*x5466*x5469))+cj0+(((-1.0)*r12*x5468))+((r11*x5470)));
evalcond[5]=((((-1.0)*x5464*x5469))+(((-1.0)*sj0))+(((-1.0)*r02*x5468))+((x5463*x5465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5472 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5472.valid){
continue;
}
CheckValue<IkReal> x5473=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5472.value)+(((1.5707963267949)*(x5473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5474=IKcos(j4);
IkReal x5475=IKsin(j4);
IkReal x5476=(cj5*r00);
IkReal x5477=(r01*sj5);
IkReal x5478=(cj5*r10);
IkReal x5479=(cj5*r20);
IkReal x5480=((1.0)*x5474);
IkReal x5481=((1.0)*x5475);
IkReal x5482=(sj5*x5475);
IkReal x5483=(sj5*x5474);
evalcond[0]=((((-1.0)*x5476*x5480))+((x5474*x5477))+((r02*x5475)));
evalcond[1]=(((r11*x5483))+((r12*x5475))+(((-1.0)*x5478*x5480)));
evalcond[2]=((((-1.0)*x5479*x5481))+(((-1.0)*r22*x5480))+((r21*x5482)));
evalcond[3]=((1.0)+(((-1.0)*x5479*x5480))+((r21*x5483))+((r22*x5475)));
evalcond[4]=((((-1.0)*r12*x5480))+cj0+((r11*x5482))+(((-1.0)*x5478*x5481)));
evalcond[5]=((((-1.0)*sj0))+((x5475*x5477))+(((-1.0)*x5476*x5481))+(((-1.0)*r02*x5480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5484=IKcos(j0);
IkReal x5485=IKsin(j0);
evalcond[0]=((((-0.39225)*x5484))+(((-0.10915)*x5485))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x5484))+(((-0.39225)*x5485))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5486=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5486;
j4eval[1]=IKsign(x5486);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5487=((1.0)*cj5);
IkReal x5488=((((-1.0)*r11*x5487))+(((-1.0)*r10*sj5)));
j4eval[0]=x5488;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5487))))));
j4eval[2]=IKsign(x5488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5489=cj5*cj5;
IkReal x5490=((1.0)*r20);
IkReal x5491=(r01*r21);
IkReal x5492=(r21*sj5);
IkReal x5493=(((cj5*r01*r20*sj5))+((x5489*x5491))+(((-1.0)*r02*r22))+((cj5*r00*x5492))+(((-1.0)*r00*x5489*x5490))+(((-1.0)*x5491)));
j4eval[0]=x5493;
j4eval[1]=((IKabs((((cj0*x5492))+(((-1.0)*cj0*cj5*x5490)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5494=cj5*cj5;
IkReal x5495=((1.0)*r20);
IkReal x5496=(r01*r21);
IkReal x5497=(r21*sj5);
CheckValue<IkReal> x5498=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5494*x5496))+(((-1.0)*r00*x5494*x5495))+((cj5*r00*x5497))+(((-1.0)*x5496)))),-1);
if(!x5498.valid){
continue;
}
CheckValue<IkReal> x5499 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5497))+(((-1.0)*cj0*cj5*x5495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5498.value)))+(x5499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5500=IKcos(j4);
IkReal x5501=IKsin(j4);
IkReal x5502=(cj5*r00);
IkReal x5503=(cj5*r10);
IkReal x5504=(cj5*r20);
IkReal x5505=((1.0)*x5500);
IkReal x5506=((1.0)*x5501);
IkReal x5507=(sj5*x5500);
IkReal x5508=(sj5*x5501);
evalcond[0]=(((r21*x5507))+((r22*x5501))+(((-1.0)*x5504*x5505)));
evalcond[1]=((((-1.0)*r22*x5505))+((r21*x5508))+(((-1.0)*x5504*x5506)));
evalcond[2]=((((-1.0)*x5502*x5505))+cj0+((r02*x5501))+((r01*x5507)));
evalcond[3]=((((-1.0)*x5503*x5505))+sj0+((r12*x5501))+((r11*x5507)));
evalcond[4]=((((-1.0)*x5503*x5506))+cj0+(((-1.0)*r12*x5505))+((r11*x5508)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5502*x5506))+(((-1.0)*r02*x5505))+((r01*x5508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5509=((1.0)*cj5);
CheckValue<IkReal> x5510=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5509)))),-1);
if(!x5510.valid){
continue;
}
CheckValue<IkReal> x5511 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5509)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5510.value)))+(x5511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5512=IKcos(j4);
IkReal x5513=IKsin(j4);
IkReal x5514=(cj5*r00);
IkReal x5515=(cj5*r10);
IkReal x5516=(cj5*r20);
IkReal x5517=((1.0)*x5512);
IkReal x5518=((1.0)*x5513);
IkReal x5519=(sj5*x5512);
IkReal x5520=(sj5*x5513);
evalcond[0]=(((r21*x5519))+((r22*x5513))+(((-1.0)*x5516*x5517)));
evalcond[1]=((((-1.0)*r22*x5517))+((r21*x5520))+(((-1.0)*x5516*x5518)));
evalcond[2]=(cj0+((r02*x5513))+(((-1.0)*x5514*x5517))+((r01*x5519)));
evalcond[3]=(sj0+(((-1.0)*x5515*x5517))+((r12*x5513))+((r11*x5519)));
evalcond[4]=(cj0+(((-1.0)*x5515*x5518))+(((-1.0)*r12*x5517))+((r11*x5520)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5517))+((r01*x5520))+(((-1.0)*x5514*x5518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5521 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5521.valid){
continue;
}
CheckValue<IkReal> x5522=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5521.value)+(((1.5707963267949)*(x5522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5523=IKcos(j4);
IkReal x5524=IKsin(j4);
IkReal x5525=(cj5*r00);
IkReal x5526=(cj5*r10);
IkReal x5527=(cj5*r20);
IkReal x5528=((1.0)*x5523);
IkReal x5529=((1.0)*x5524);
IkReal x5530=(sj5*x5523);
IkReal x5531=(sj5*x5524);
evalcond[0]=((((-1.0)*x5527*x5528))+((r22*x5524))+((r21*x5530)));
evalcond[1]=((((-1.0)*r22*x5528))+(((-1.0)*x5527*x5529))+((r21*x5531)));
evalcond[2]=(((r02*x5524))+cj0+((r01*x5530))+(((-1.0)*x5525*x5528)));
evalcond[3]=(sj0+(((-1.0)*x5526*x5528))+((r11*x5530))+((r12*x5524)));
evalcond[4]=(cj0+(((-1.0)*x5526*x5529))+((r11*x5531))+(((-1.0)*r12*x5528)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5528))+((r01*x5531))+(((-1.0)*x5525*x5529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5532=cj1*cj1;
IkReal x5533=(cj1*sj1);
IkReal x5534=(cj5*r01);
IkReal x5535=(r00*sj5);
IkReal x5536=(r10*sj5);
IkReal x5537=(cj5*r11);
IkReal x5538=(cj1*sj2);
IkReal x5539=((20000.0)*py);
IkReal x5540=(cj2*sj1);
IkReal x5541=((1893.0)*x5540);
IkReal x5542=(sj2*x5532);
CheckValue<IkReal> x5543=IKPowWithIntegerCheck(((((-8500.0)*cj2*x5533))+(((7845.0)*x5533))+(((-8500.0)*x5542))+(((-15690.0)*x5533*(cj2*cj2)))+(((-15690.0)*cj2*x5542))+(((7845.0)*cj2*sj2))),-1);
if(!x5543.valid){
continue;
}
CheckValue<IkReal> x5544=IKPowWithIntegerCheck(((((-1.0)*x5538))+(((-1.0)*x5540))),-1);
if(!x5544.valid){
continue;
}
if( IKabs(((x5543.value)*(((((-1.0)*x5539*x5540))+(((-1.0)*x5537*x5541))+(((2183.0)*x5534))+(((2183.0)*x5535))+(((-1.0)*x5536*x5541))+(((-1.0)*x5538*x5539))+(((-1893.0)*x5536*x5538))+(((-1893.0)*x5537*x5538)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5544.value)*(((((-1.0)*x5534))+(((-1.0)*x5535)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5543.value)*(((((-1.0)*x5539*x5540))+(((-1.0)*x5537*x5541))+(((2183.0)*x5534))+(((2183.0)*x5535))+(((-1.0)*x5536*x5541))+(((-1.0)*x5538*x5539))+(((-1893.0)*x5536*x5538))+(((-1893.0)*x5537*x5538))))))+IKsqr(((x5544.value)*(((((-1.0)*x5534))+(((-1.0)*x5535))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5543.value)*(((((-1.0)*x5539*x5540))+(((-1.0)*x5537*x5541))+(((2183.0)*x5534))+(((2183.0)*x5535))+(((-1.0)*x5536*x5541))+(((-1.0)*x5538*x5539))+(((-1893.0)*x5536*x5538))+(((-1893.0)*x5537*x5538))))), ((x5544.value)*(((((-1.0)*x5534))+(((-1.0)*x5535))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5545=IKcos(j0);
IkReal x5546=IKsin(j0);
IkReal x5547=(cj5*r01);
IkReal x5548=((1.0)*cj1);
IkReal x5549=((0.39225)*sj1);
IkReal x5550=(cj5*r11);
IkReal x5551=(r00*sj5);
IkReal x5552=((0.39225)*cj2);
IkReal x5553=(r10*sj5);
IkReal x5554=(sj2*x5545);
IkReal x5555=(sj2*x5546);
IkReal x5556=(cj1*x5545);
IkReal x5557=((1.0)*cj2*sj1);
IkReal x5558=(cj1*x5546);
evalcond[0]=(x5547+x5551+(((-1.0)*x5545*x5557))+(((-1.0)*x5548*x5554)));
evalcond[1]=(x5550+x5553+(((-1.0)*x5548*x5555))+(((-1.0)*x5546*x5557)));
evalcond[2]=((((-0.10915)*x5546))+(((-1.0)*x5549*x5554))+(((-0.09465)*x5547))+(((-0.09465)*x5551))+(((0.425)*x5556))+(((-1.0)*px))+((x5552*x5556)));
evalcond[3]=((((0.10915)*x5545))+(((-1.0)*x5549*x5555))+(((-0.09465)*x5550))+(((-0.09465)*x5553))+(((0.425)*x5558))+(((-1.0)*py))+((x5552*x5558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5559=((1.0)*cj5);
IkReal x5560=((((-1.0)*r01*x5559))+(((-1.0)*r00*sj5)));
j4eval[0]=x5560;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5559))))));
j4eval[2]=IKsign(x5560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5561=((1.0)*cj5);
IkReal x5562=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5561)));
j4eval[0]=x5562;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5561)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5563=((1.0)*sj0);
IkReal x5564=((1.0)*cj0);
IkReal x5565=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5565;
j4eval[1]=((IKabs(((((-1.0)*r12*x5563))+(((-1.0)*r02*x5564)))))+(IKabs(((((-1.0)*r01*sj5*x5564))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5563))))));
j4eval[2]=IKsign(x5565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5566=((-1.0)*r20);
IkReal x5568 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5568)==0){
continue;
}
IkReal x5567=pow(x5568,-0.5);
CheckValue<IkReal> x5569 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5566),IKFAST_ATAN2_MAGTHRESH);
if(!x5569.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5569.value));
IkReal gconst115=(r21*x5567);
IkReal gconst116=(x5566*x5567);
CheckValue<IkReal> x5570 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5570.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5570.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5571=((-1.0)*r20);
IkReal x5572=x5567;
CheckValue<IkReal> x5574 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5571),IKFAST_ATAN2_MAGTHRESH);
if(!x5574.valid){
continue;
}
IkReal x5573=((-1.0)*(x5574.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5573;
IkReal gconst114=x5573;
IkReal gconst115=(r21*x5572);
IkReal gconst116=(x5571*x5572);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5575=((-1.0)*r20);
IkReal x5576=x5567;
CheckValue<IkReal> x5578 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5575),IKFAST_ATAN2_MAGTHRESH);
if(!x5578.valid){
continue;
}
IkReal x5577=((-1.0)*(x5578.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5577;
IkReal gconst114=x5577;
IkReal gconst115=(r21*x5576);
IkReal gconst116=(x5575*x5576);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5579=((-1.0)*r20);
IkReal x5580=x5567;
CheckValue<IkReal> x5582 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5579),IKFAST_ATAN2_MAGTHRESH);
if(!x5582.valid){
continue;
}
IkReal x5581=((-1.0)*(x5582.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5581;
IkReal gconst114=x5581;
IkReal gconst115=(r21*x5580);
IkReal gconst116=(x5579*x5580);
IkReal x5583=((1.0)*(r22*r22));
CheckValue<IkReal> x5587=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5583))),-1);
if(!x5587.valid){
continue;
}
IkReal x5584=x5587.value;
IkReal x5585=((1.0)*x5584);
IkReal x5586=((((-1.0)*x5585*(r21*r21*r21*r21)))+(((-2.0)*x5584*(r20*r20)*(r21*r21)))+(((-1.0)*x5585*(r20*r20*r20*r20)))+(((-1.0)*x5583)));
j4eval[0]=x5586;
j4eval[1]=IKsign(x5586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5588=(cj2*sj1);
IkReal x5589=(gconst115*r21);
IkReal x5590=(cj1*sj2);
IkReal x5591=((1.0)*gconst116*r20);
CheckValue<IkReal> x5592 = IKatan2WithCheck(IkReal((((r22*x5588))+((r22*x5590)))),IkReal(((((-1.0)*x5588*x5591))+(((-1.0)*x5590*x5591))+((x5588*x5589))+((x5589*x5590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5592.valid){
continue;
}
CheckValue<IkReal> x5593=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5589))+(((-1.0)*gconst116*r20*x5591))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5589*x5589))))),-1);
if(!x5593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5592.value)+(((1.5707963267949)*(x5593.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5594=IKsin(j4);
IkReal x5595=IKcos(j4);
IkReal x5596=(sj1*sj2);
IkReal x5597=((1.0)*x5595);
IkReal x5598=((1.0)*cj1*cj2);
IkReal x5599=(gconst115*x5594);
IkReal x5600=(gconst115*x5595);
IkReal x5601=((1.0)*gconst116*x5594);
evalcond[0]=(((r21*x5599))+(((-1.0)*r22*x5597))+(((-1.0)*r20*x5601)));
evalcond[1]=((((-1.0)*r10*x5601))+(((-1.0)*r12*x5597))+cj0+((r11*x5599)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5601))+(((-1.0)*r02*x5597))+((r01*x5599)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5597))+((r21*x5600))+((r22*x5594)));
evalcond[4]=((((-1.0)*cj0*x5598))+((cj0*x5596))+((r02*x5594))+((r01*x5600))+(((-1.0)*gconst116*r00*x5597)));
evalcond[5]=(((sj0*x5596))+((r12*x5594))+(((-1.0)*gconst116*r10*x5597))+((r11*x5600))+(((-1.0)*sj0*x5598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5602=((1.0)*gconst116);
CheckValue<IkReal> x5603 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5603.valid){
continue;
}
CheckValue<IkReal> x5604=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5602)))),-1);
if(!x5604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5603.value)+(((1.5707963267949)*(x5604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5605=IKsin(j4);
IkReal x5606=IKcos(j4);
IkReal x5607=(sj1*sj2);
IkReal x5608=((1.0)*x5606);
IkReal x5609=((1.0)*cj1*cj2);
IkReal x5610=(gconst115*x5605);
IkReal x5611=(gconst115*x5606);
IkReal x5612=((1.0)*gconst116*x5605);
evalcond[0]=((((-1.0)*r22*x5608))+((r21*x5610))+(((-1.0)*r20*x5612)));
evalcond[1]=(cj0+(((-1.0)*r10*x5612))+(((-1.0)*r12*x5608))+((r11*x5610)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5612))+((r01*x5610))+(((-1.0)*r02*x5608)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5608))+((r21*x5611))+((r22*x5605)));
evalcond[4]=(((r02*x5605))+(((-1.0)*cj0*x5609))+((r01*x5611))+(((-1.0)*gconst116*r00*x5608))+((cj0*x5607)));
evalcond[5]=(((sj0*x5607))+((r12*x5605))+(((-1.0)*gconst116*r10*x5608))+(((-1.0)*sj0*x5609))+((r11*x5611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5613=((1.0)*gconst116);
CheckValue<IkReal> x5614 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5613))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5614.valid){
continue;
}
CheckValue<IkReal> x5615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5613))+(((-1.0)*gconst115*r00)))),-1);
if(!x5615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5614.value)+(((1.5707963267949)*(x5615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5616=IKsin(j4);
IkReal x5617=IKcos(j4);
IkReal x5618=(sj1*sj2);
IkReal x5619=((1.0)*x5617);
IkReal x5620=((1.0)*cj1*cj2);
IkReal x5621=(gconst115*x5616);
IkReal x5622=(gconst115*x5617);
IkReal x5623=((1.0)*gconst116*x5616);
evalcond[0]=((((-1.0)*r22*x5619))+((r21*x5621))+(((-1.0)*r20*x5623)));
evalcond[1]=(cj0+(((-1.0)*r10*x5623))+(((-1.0)*r12*x5619))+((r11*x5621)));
evalcond[2]=((((-1.0)*r00*x5623))+(((-1.0)*sj0))+((r01*x5621))+(((-1.0)*r02*x5619)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5619))+((cj1*sj2))+((r21*x5622))+((r22*x5616)));
evalcond[4]=(((cj0*x5618))+((r02*x5616))+(((-1.0)*cj0*x5620))+((r01*x5622))+(((-1.0)*gconst116*r00*x5619)));
evalcond[5]=(((sj0*x5618))+(((-1.0)*gconst116*r10*x5619))+((r12*x5616))+((r11*x5622))+(((-1.0)*sj0*x5620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5624=((-1.0)*r21);
IkReal x5626 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5626)==0){
continue;
}
IkReal x5625=pow(x5626,-0.5);
CheckValue<IkReal> x5627 = IKatan2WithCheck(IkReal(x5624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5627.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5627.value))));
IkReal gconst118=(x5624*x5625);
IkReal gconst119=((1.0)*r20*x5625);
CheckValue<IkReal> x5628 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5628.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5628.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5629=((-1.0)*r21);
CheckValue<IkReal> x5632 = IKatan2WithCheck(IkReal(x5629),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5632.valid){
continue;
}
IkReal x5630=((1.0)*(x5632.value));
IkReal x5631=x5625;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5630)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5630)));
IkReal gconst118=(x5629*x5631);
IkReal gconst119=((1.0)*r20*x5631);
IkReal x5633=r22*r22;
IkReal x5634=((1.0)*x5633);
CheckValue<IkReal> x5638=IKPowWithIntegerCheck(((-1.0)+x5633),-1);
if(!x5638.valid){
continue;
}
IkReal x5635=x5638.value;
if((((1.0)+(((-1.0)*x5634)))) < -0.00001)
continue;
IkReal x5636=IKsqrt(((1.0)+(((-1.0)*x5634))));
IkReal x5637=(cj0*x5635*x5636);
j4eval[0]=((IKabs((x5637+(((-1.0)*x5634*x5637)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5639=((-1.0)*r21);
CheckValue<IkReal> x5642 = IKatan2WithCheck(IkReal(x5639),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5642.valid){
continue;
}
IkReal x5640=((1.0)*(x5642.value));
IkReal x5641=x5625;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5640)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5640)));
IkReal gconst118=(x5639*x5641);
IkReal gconst119=((1.0)*r20*x5641);
IkReal x5643=r22*r22;
IkReal x5644=((1.0)*x5643);
CheckValue<IkReal> x5648=IKPowWithIntegerCheck(((-1.0)+x5643),-1);
if(!x5648.valid){
continue;
}
IkReal x5645=x5648.value;
if((((1.0)+(((-1.0)*x5644)))) < -0.00001)
continue;
IkReal x5646=IKsqrt(((1.0)+(((-1.0)*x5644))));
IkReal x5647=(sj0*x5645*x5646);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5647+(((-1.0)*x5644*x5647))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5649=((-1.0)*r21);
CheckValue<IkReal> x5652 = IKatan2WithCheck(IkReal(x5649),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
IkReal x5650=((1.0)*(x5652.value));
IkReal x5651=x5625;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5650)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5650)));
IkReal gconst118=(x5649*x5651);
IkReal gconst119=((1.0)*r20*x5651);
IkReal x5653=r22*r22;
IkReal x5654=(r12*sj0);
IkReal x5655=(cj0*r02);
CheckValue<IkReal> x5659=IKPowWithIntegerCheck(((-1.0)+x5653),-1);
if(!x5659.valid){
continue;
}
IkReal x5656=x5659.value;
if((((1.0)+(((-1.0)*x5653)))) < -0.00001)
continue;
IkReal x5657=IKsqrt(((1.0)+(((-1.0)*x5653))));
IkReal x5658=(r22*x5656*x5657);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5654))+(((-1.0)*x5655)))))+(IKabs((((x5654*x5658))+((x5655*x5658))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5660=((1.0)*sj0);
IkReal x5661=((1.0)*gconst118);
CheckValue<IkReal> x5662=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5661)))),-1);
if(!x5662.valid){
continue;
}
CheckValue<IkReal> x5663 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5660)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5661))+(((-1.0)*gconst118*r11*x5660))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5662.value)))+(x5663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5664=IKsin(j4);
IkReal x5665=IKcos(j4);
IkReal x5666=(gconst118*r01);
IkReal x5667=(sj1*sj2);
IkReal x5668=(gconst119*r20);
IkReal x5669=(gconst119*r10);
IkReal x5670=(gconst119*r00);
IkReal x5671=(gconst118*r21);
IkReal x5672=(gconst118*r11);
IkReal x5673=((1.0)*x5665);
IkReal x5674=((1.0)*cj1*cj2);
IkReal x5675=((1.0)*x5664);
evalcond[0]=((((-1.0)*r22*x5673))+(((-1.0)*x5668*x5675))+((x5664*x5671)));
evalcond[1]=(cj0+(((-1.0)*x5669*x5675))+(((-1.0)*r12*x5673))+((x5664*x5672)));
evalcond[2]=(((x5664*x5666))+(((-1.0)*sj0))+(((-1.0)*x5670*x5675))+(((-1.0)*r02*x5673)));
evalcond[3]=(((cj2*sj1))+((r22*x5664))+((cj1*sj2))+(((-1.0)*x5668*x5673))+((x5665*x5671)));
evalcond[4]=((((-1.0)*x5670*x5673))+((r02*x5664))+(((-1.0)*cj0*x5674))+((x5665*x5666))+((cj0*x5667)));
evalcond[5]=((((-1.0)*x5669*x5673))+((sj0*x5667))+((r12*x5664))+(((-1.0)*sj0*x5674))+((x5665*x5672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5676=((1.0)*gconst119);
CheckValue<IkReal> x5677 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5676))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5677.valid){
continue;
}
CheckValue<IkReal> x5678=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5676)))),-1);
if(!x5678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5677.value)+(((1.5707963267949)*(x5678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5679=IKsin(j4);
IkReal x5680=IKcos(j4);
IkReal x5681=(gconst118*r01);
IkReal x5682=(sj1*sj2);
IkReal x5683=(gconst119*r20);
IkReal x5684=(gconst119*r10);
IkReal x5685=(gconst119*r00);
IkReal x5686=(gconst118*r21);
IkReal x5687=(gconst118*r11);
IkReal x5688=((1.0)*x5680);
IkReal x5689=((1.0)*cj1*cj2);
IkReal x5690=((1.0)*x5679);
evalcond[0]=((((-1.0)*r22*x5688))+(((-1.0)*x5683*x5690))+((x5679*x5686)));
evalcond[1]=(cj0+(((-1.0)*x5684*x5690))+((x5679*x5687))+(((-1.0)*r12*x5688)));
evalcond[2]=((((-1.0)*r02*x5688))+(((-1.0)*sj0))+(((-1.0)*x5685*x5690))+((x5679*x5681)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5680*x5686))+(((-1.0)*x5683*x5688))+((r22*x5679)));
evalcond[4]=(((r02*x5679))+(((-1.0)*cj0*x5689))+((x5680*x5681))+(((-1.0)*x5685*x5688))+((cj0*x5682)));
evalcond[5]=(((x5680*x5687))+(((-1.0)*x5684*x5688))+(((-1.0)*sj0*x5689))+((sj0*x5682))+((r12*x5679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5691=((1.0)*gconst119);
CheckValue<IkReal> x5692=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5691)))),-1);
if(!x5692.valid){
continue;
}
CheckValue<IkReal> x5693 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5692.value)))+(x5693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5694=IKsin(j4);
IkReal x5695=IKcos(j4);
IkReal x5696=(gconst118*r01);
IkReal x5697=(sj1*sj2);
IkReal x5698=(gconst119*r20);
IkReal x5699=(gconst119*r10);
IkReal x5700=(gconst119*r00);
IkReal x5701=(gconst118*r21);
IkReal x5702=(gconst118*r11);
IkReal x5703=((1.0)*x5695);
IkReal x5704=((1.0)*cj1*cj2);
IkReal x5705=((1.0)*x5694);
evalcond[0]=(((x5694*x5701))+(((-1.0)*r22*x5703))+(((-1.0)*x5698*x5705)));
evalcond[1]=((((-1.0)*r12*x5703))+cj0+((x5694*x5702))+(((-1.0)*x5699*x5705)));
evalcond[2]=(((x5694*x5696))+(((-1.0)*sj0))+(((-1.0)*x5700*x5705))+(((-1.0)*r02*x5703)));
evalcond[3]=(((cj2*sj1))+((r22*x5694))+((cj1*sj2))+((x5695*x5701))+(((-1.0)*x5698*x5703)));
evalcond[4]=(((x5695*x5696))+(((-1.0)*x5700*x5703))+((r02*x5694))+(((-1.0)*cj0*x5704))+((cj0*x5697)));
evalcond[5]=(((x5695*x5702))+(((-1.0)*x5699*x5703))+((sj0*x5697))+(((-1.0)*sj0*x5704))+((r12*x5694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5706=((-1.0)*r10);
IkReal x5708 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5708)==0){
continue;
}
IkReal x5707=pow(x5708,-0.5);
CheckValue<IkReal> x5709 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5706),IKFAST_ATAN2_MAGTHRESH);
if(!x5709.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5709.value));
IkReal gconst121=(r11*x5707);
IkReal gconst122=(x5706*x5707);
CheckValue<IkReal> x5710 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5710.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5710.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5711=((-1.0)*r10);
IkReal x5712=x5707;
CheckValue<IkReal> x5714 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5711),IKFAST_ATAN2_MAGTHRESH);
if(!x5714.valid){
continue;
}
IkReal x5713=((-1.0)*(x5714.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5713;
IkReal gconst120=x5713;
IkReal gconst121=(r11*x5712);
IkReal gconst122=(x5711*x5712);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5715=((1.0)*sj0);
IkReal x5716=((1.0)*gconst121);
CheckValue<IkReal> x5717=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5716)))),-1);
if(!x5717.valid){
continue;
}
CheckValue<IkReal> x5718 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5715)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5715))+(((-1.0)*cj0*r01*x5716))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5717.value)))+(x5718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5719=IKsin(j4);
IkReal x5720=IKcos(j4);
IkReal x5721=(gconst121*r11);
IkReal x5722=(sj1*sj2);
IkReal x5723=(gconst122*r00);
IkReal x5724=(gconst122*r10);
IkReal x5725=(gconst122*r20);
IkReal x5726=((1.0)*x5720);
IkReal x5727=((1.0)*cj1*cj2);
IkReal x5728=((1.0)*x5719);
IkReal x5729=(gconst121*x5719);
IkReal x5730=(gconst121*x5720);
evalcond[0]=((((-1.0)*x5725*x5728))+((r21*x5729))+(((-1.0)*r22*x5726)));
evalcond[1]=(cj0+(((-1.0)*r12*x5726))+(((-1.0)*x5724*x5728))+((x5719*x5721)));
evalcond[2]=((((-1.0)*x5723*x5728))+(((-1.0)*sj0))+((r01*x5729))+(((-1.0)*r02*x5726)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5725*x5726))+((r21*x5730))+((r22*x5719))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x5723*x5726))+((r02*x5719))+((r01*x5730))+(((-1.0)*cj0*x5727))+((cj0*x5722)));
evalcond[5]=(((sj0*x5722))+(((-1.0)*x5724*x5726))+(((-1.0)*sj0*x5727))+((r12*x5719))+((x5720*x5721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5731=((1.0)*gconst122);
CheckValue<IkReal> x5732 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5731))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5732.valid){
continue;
}
CheckValue<IkReal> x5733=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5731)))),-1);
if(!x5733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5732.value)+(((1.5707963267949)*(x5733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5734=IKsin(j4);
IkReal x5735=IKcos(j4);
IkReal x5736=(gconst121*r11);
IkReal x5737=(sj1*sj2);
IkReal x5738=(gconst122*r00);
IkReal x5739=(gconst122*r10);
IkReal x5740=(gconst122*r20);
IkReal x5741=((1.0)*x5735);
IkReal x5742=((1.0)*cj1*cj2);
IkReal x5743=((1.0)*x5734);
IkReal x5744=(gconst121*x5734);
IkReal x5745=(gconst121*x5735);
evalcond[0]=((((-1.0)*x5740*x5743))+(((-1.0)*r22*x5741))+((r21*x5744)));
evalcond[1]=(cj0+((x5734*x5736))+(((-1.0)*x5739*x5743))+(((-1.0)*r12*x5741)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5744))+(((-1.0)*r02*x5741))+(((-1.0)*x5738*x5743)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5740*x5741))+((r21*x5745))+((r22*x5734)));
evalcond[4]=(((r01*x5745))+(((-1.0)*cj0*x5742))+((cj0*x5737))+(((-1.0)*x5738*x5741))+((r02*x5734)));
evalcond[5]=(((r12*x5734))+((x5735*x5736))+(((-1.0)*x5739*x5741))+((sj0*x5737))+(((-1.0)*sj0*x5742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5746=((-1.0)*r11);
IkReal x5748 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5748)==0){
continue;
}
IkReal x5747=pow(x5748,-0.5);
CheckValue<IkReal> x5749 = IKatan2WithCheck(IkReal(x5746),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5749.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5749.value))));
IkReal gconst124=(x5746*x5747);
IkReal gconst125=((1.0)*r10*x5747);
CheckValue<IkReal> x5750 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5750.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5750.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5751=((-1.0)*r11);
CheckValue<IkReal> x5754 = IKatan2WithCheck(IkReal(x5751),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5754.valid){
continue;
}
IkReal x5752=((1.0)*(x5754.value));
IkReal x5753=x5747;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5752)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5752)));
IkReal gconst124=(x5751*x5753);
IkReal gconst125=((1.0)*r10*x5753);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5755=((-1.0)*r11);
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal(x5755),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
IkReal x5756=((1.0)*(x5758.value));
IkReal x5757=x5747;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5756)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5756)));
IkReal gconst124=(x5755*x5757);
IkReal gconst125=((1.0)*r10*x5757);
IkReal x5759=r12*r12;
IkReal x5760=((1.0)*sj0);
IkReal x5761=(cj0*r02);
IkReal x5762=x5747;
j4eval[0]=((IKabs(((((-1.0)*r12*x5760))+(((-1.0)*x5761)))))+(IKabs((((sj0*x5759*x5762))+(((-1.0)*x5760*x5762))+((r12*x5761*x5762))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5763=((-1.0)*r11);
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal(x5763),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
IkReal x5764=((1.0)*(x5766.value));
IkReal x5765=x5747;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5764)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5764)));
IkReal gconst124=(x5763*x5765);
IkReal gconst125=((1.0)*r10*x5765);
IkReal x5767=r12*r12;
IkReal x5768=((1.0)+(((-1.0)*x5767)));
IkReal x5769=(cj2*r22*sj1);
IkReal x5770=(cj1*r22*sj2);
CheckValue<IkReal> x5777=IKPowWithIntegerCheck(x5768,-1);
if(!x5777.valid){
continue;
}
IkReal x5771=x5777.value;
CheckValue<IkReal> x5778=IKPowWithIntegerCheck(((-1.0)+x5767),-1);
if(!x5778.valid){
continue;
}
IkReal x5772=x5778.value;
IkReal x5773=((1.0)*x5771);
if((x5768) < -0.00001)
continue;
IkReal x5774=IKsqrt(x5768);
IkReal x5775=((1.0)*r12*x5772*x5774);
IkReal x5776=((((-1.0)*x5773*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x5771))+(((-1.0)*x5773*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x5776;
j4eval[1]=IKsign(x5776);
j4eval[2]=((IKabs(((((-1.0)*x5769*x5775))+(((-1.0)*x5770*x5775)))))+(IKabs((x5769+x5770))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5779=(gconst124*r21);
IkReal x5780=(cj1*sj2);
IkReal x5781=(cj2*sj1);
IkReal x5782=(gconst125*r20);
CheckValue<IkReal> x5783=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5782*x5782)))+(((2.0)*x5779*x5782))+(((-1.0)*(x5779*x5779)))+(((-1.0)*(r22*r22))))),-1);
if(!x5783.valid){
continue;
}
CheckValue<IkReal> x5784 = IKatan2WithCheck(IkReal((((r22*x5780))+((r22*x5781)))),IkReal(((((-1.0)*x5781*x5782))+((x5779*x5780))+((x5779*x5781))+(((-1.0)*x5780*x5782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5783.value)))+(x5784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5785=IKsin(j4);
IkReal x5786=IKcos(j4);
IkReal x5787=(sj1*sj2);
IkReal x5788=(gconst125*r20);
IkReal x5789=(gconst124*r01);
IkReal x5790=(gconst125*r00);
IkReal x5791=(gconst125*r10);
IkReal x5792=((1.0)*x5786);
IkReal x5793=((1.0)*cj1*cj2);
IkReal x5794=((1.0)*x5785);
IkReal x5795=(gconst124*x5785);
IkReal x5796=(gconst124*x5786);
evalcond[0]=(((r21*x5795))+(((-1.0)*r22*x5792))+(((-1.0)*x5788*x5794)));
evalcond[1]=(cj0+(((-1.0)*x5791*x5794))+((r11*x5795))+(((-1.0)*r12*x5792)));
evalcond[2]=((((-1.0)*sj0))+((x5785*x5789))+(((-1.0)*x5790*x5794))+(((-1.0)*r02*x5792)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5796))+((r22*x5785))+(((-1.0)*x5788*x5792)));
evalcond[4]=((((-1.0)*cj0*x5793))+(((-1.0)*x5790*x5792))+((x5786*x5789))+((r02*x5785))+((cj0*x5787)));
evalcond[5]=(((r12*x5785))+(((-1.0)*x5791*x5792))+((r11*x5796))+((sj0*x5787))+(((-1.0)*sj0*x5793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5797=((1.0)*sj0);
IkReal x5798=((1.0)*cj0);
CheckValue<IkReal> x5799 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5797))+(((-1.0)*r02*x5798)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5798))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x5797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5799.valid){
continue;
}
CheckValue<IkReal> x5800=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5799.value)+(((1.5707963267949)*(x5800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5801=IKsin(j4);
IkReal x5802=IKcos(j4);
IkReal x5803=(sj1*sj2);
IkReal x5804=(gconst125*r20);
IkReal x5805=(gconst124*r01);
IkReal x5806=(gconst125*r00);
IkReal x5807=(gconst125*r10);
IkReal x5808=((1.0)*x5802);
IkReal x5809=((1.0)*cj1*cj2);
IkReal x5810=((1.0)*x5801);
IkReal x5811=(gconst124*x5801);
IkReal x5812=(gconst124*x5802);
evalcond[0]=(((r21*x5811))+(((-1.0)*r22*x5808))+(((-1.0)*x5804*x5810)));
evalcond[1]=(cj0+(((-1.0)*r12*x5808))+((r11*x5811))+(((-1.0)*x5807*x5810)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5806*x5810))+((x5801*x5805))+(((-1.0)*r02*x5808)));
evalcond[3]=(((r21*x5812))+((cj2*sj1))+(((-1.0)*x5804*x5808))+((cj1*sj2))+((r22*x5801)));
evalcond[4]=(((cj0*x5803))+(((-1.0)*cj0*x5809))+(((-1.0)*x5806*x5808))+((r02*x5801))+((x5802*x5805)));
evalcond[5]=(((r11*x5812))+(((-1.0)*x5807*x5808))+((r12*x5801))+((sj0*x5803))+(((-1.0)*sj0*x5809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5813=((1.0)*gconst125);
CheckValue<IkReal> x5814 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5813))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5814.valid){
continue;
}
CheckValue<IkReal> x5815=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5813)))),-1);
if(!x5815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5814.value)+(((1.5707963267949)*(x5815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5816=IKsin(j4);
IkReal x5817=IKcos(j4);
IkReal x5818=(sj1*sj2);
IkReal x5819=(gconst125*r20);
IkReal x5820=(gconst124*r01);
IkReal x5821=(gconst125*r00);
IkReal x5822=(gconst125*r10);
IkReal x5823=((1.0)*x5817);
IkReal x5824=((1.0)*cj1*cj2);
IkReal x5825=((1.0)*x5816);
IkReal x5826=(gconst124*x5816);
IkReal x5827=(gconst124*x5817);
evalcond[0]=((((-1.0)*r22*x5823))+((r21*x5826))+(((-1.0)*x5819*x5825)));
evalcond[1]=(cj0+((r11*x5826))+(((-1.0)*x5822*x5825))+(((-1.0)*r12*x5823)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5823))+((x5816*x5820))+(((-1.0)*x5821*x5825)));
evalcond[3]=(((r21*x5827))+((cj2*sj1))+((r22*x5816))+((cj1*sj2))+(((-1.0)*x5819*x5823)));
evalcond[4]=((((-1.0)*x5821*x5823))+((r02*x5816))+((cj0*x5818))+(((-1.0)*cj0*x5824))+((x5817*x5820)));
evalcond[5]=(((sj0*x5818))+((r11*x5827))+((r12*x5816))+(((-1.0)*sj0*x5824))+(((-1.0)*x5822*x5823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5828=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5828;
j4eval[1]=IKsign(x5828);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5829=((1.0)*cj5);
IkReal x5830=((((-1.0)*r01*x5829))+(((-1.0)*r00*sj5)));
j4eval[0]=x5830;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5829))+((r21*sj5))))));
j4eval[2]=IKsign(x5830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5831=cj5*cj5;
IkReal x5832=r11*r11;
IkReal x5833=(cj5*r10);
IkReal x5834=(r11*sj5);
IkReal x5835=((((-1.0)*x5831*(r10*r10)))+((x5831*x5832))+(((2.0)*x5833*x5834))+(((-1.0)*(r12*r12)))+(((-1.0)*x5832)));
j4eval[0]=x5835;
j4eval[1]=IKsign(x5835);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5833))+x5834))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5836=cj5*cj5;
IkReal x5837=r11*r11;
IkReal x5838=(cj5*r10);
IkReal x5839=(r11*sj5);
CheckValue<IkReal> x5840 = IKatan2WithCheck(IkReal(((((-1.0)*x5838))+x5839)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5840.valid){
continue;
}
CheckValue<IkReal> x5841=IKPowWithIntegerCheck(IKsign(((((2.0)*x5838*x5839))+((x5836*x5837))+(((-1.0)*(r12*r12)))+(((-1.0)*x5836*(r10*r10)))+(((-1.0)*x5837)))),-1);
if(!x5841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5840.value)+(((1.5707963267949)*(x5841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5842=IKcos(j4);
IkReal x5843=IKsin(j4);
IkReal x5844=(cj5*r00);
IkReal x5845=(cj5*r10);
IkReal x5846=(r21*sj5);
IkReal x5847=(cj5*r20);
IkReal x5848=((1.0)*x5842);
IkReal x5849=((1.0)*x5843);
IkReal x5850=(sj5*x5843);
IkReal x5851=(sj5*x5842);
evalcond[0]=(((r11*x5851))+((r12*x5843))+(((-1.0)*x5845*x5848)));
evalcond[1]=((((-1.0)*x5847*x5849))+((x5843*x5846))+(((-1.0)*r22*x5848)));
evalcond[2]=((((-1.0)*r02*x5848))+((r01*x5850))+(((-1.0)*x5844*x5849)));
evalcond[3]=((1.0)+((r11*x5850))+(((-1.0)*x5845*x5849))+(((-1.0)*r12*x5848)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5847*x5848))+((cj1*sj2))+((x5842*x5846))+((r22*x5843)));
evalcond[5]=(((r01*x5851))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5844*x5848))+((r02*x5843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5852=((1.0)*cj5);
CheckValue<IkReal> x5853 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5852))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5853.valid){
continue;
}
CheckValue<IkReal> x5854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5852)))),-1);
if(!x5854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5853.value)+(((1.5707963267949)*(x5854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5855=IKcos(j4);
IkReal x5856=IKsin(j4);
IkReal x5857=(cj5*r00);
IkReal x5858=(cj5*r10);
IkReal x5859=(r21*sj5);
IkReal x5860=(cj5*r20);
IkReal x5861=((1.0)*x5855);
IkReal x5862=((1.0)*x5856);
IkReal x5863=(sj5*x5856);
IkReal x5864=(sj5*x5855);
evalcond[0]=(((r12*x5856))+(((-1.0)*x5858*x5861))+((r11*x5864)));
evalcond[1]=((((-1.0)*r22*x5861))+((x5856*x5859))+(((-1.0)*x5860*x5862)));
evalcond[2]=((((-1.0)*r02*x5861))+(((-1.0)*x5857*x5862))+((r01*x5863)));
evalcond[3]=((1.0)+(((-1.0)*x5858*x5862))+((r11*x5863))+(((-1.0)*r12*x5861)));
evalcond[4]=(((cj2*sj1))+((x5855*x5859))+((cj1*sj2))+((r22*x5856))+(((-1.0)*x5860*x5861)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5856))+(((-1.0)*x5857*x5861))+((r01*x5864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5865=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5865.valid){
continue;
}
CheckValue<IkReal> x5866 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5865.value)))+(x5866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5867=IKcos(j4);
IkReal x5868=IKsin(j4);
IkReal x5869=(cj5*r00);
IkReal x5870=(cj5*r10);
IkReal x5871=(r21*sj5);
IkReal x5872=(cj5*r20);
IkReal x5873=((1.0)*x5867);
IkReal x5874=((1.0)*x5868);
IkReal x5875=(sj5*x5868);
IkReal x5876=(sj5*x5867);
evalcond[0]=(((r11*x5876))+(((-1.0)*x5870*x5873))+((r12*x5868)));
evalcond[1]=((((-1.0)*r22*x5873))+(((-1.0)*x5872*x5874))+((x5868*x5871)));
evalcond[2]=((((-1.0)*r02*x5873))+(((-1.0)*x5869*x5874))+((r01*x5875)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5873))+((r11*x5875))+(((-1.0)*x5870*x5874)));
evalcond[4]=(((cj2*sj1))+((x5867*x5871))+((r22*x5868))+((cj1*sj2))+(((-1.0)*x5872*x5873)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5868))+(((-1.0)*x5869*x5873))+((r01*x5876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5877=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5877;
j4eval[1]=IKsign(x5877);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5878=((1.0)*cj5);
IkReal x5879=((((-1.0)*r21*x5878))+(((-1.0)*r20*sj5)));
j4eval[0]=x5879;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5878))))));
j4eval[2]=IKsign(x5879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5880=cj5*cj5;
IkReal x5881=r11*r11;
IkReal x5882=(r11*sj5);
IkReal x5883=(cj5*r10);
IkReal x5884=((r12*r12)+(((-2.0)*x5882*x5883))+(((-1.0)*x5880*x5881))+((x5880*(r10*r10)))+x5881);
j4eval[0]=x5884;
j4eval[1]=IKsign(x5884);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5883))+x5882))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5885=cj5*cj5;
IkReal x5886=r11*r11;
IkReal x5887=(cj5*r10);
IkReal x5888=(r11*sj5);
CheckValue<IkReal> x5889 = IKatan2WithCheck(IkReal(((((-1.0)*x5887))+x5888)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5889.valid){
continue;
}
CheckValue<IkReal> x5890=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5885*x5886))+(((-2.0)*x5887*x5888))+((x5885*(r10*r10)))+x5886)),-1);
if(!x5890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5889.value)+(((1.5707963267949)*(x5890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5891=IKcos(j4);
IkReal x5892=IKsin(j4);
IkReal x5893=(cj5*r00);
IkReal x5894=(cj5*r10);
IkReal x5895=(r21*sj5);
IkReal x5896=(cj5*r20);
IkReal x5897=((1.0)*x5891);
IkReal x5898=((1.0)*x5892);
IkReal x5899=(sj5*x5892);
IkReal x5900=(sj5*x5891);
evalcond[0]=((((-1.0)*x5894*x5897))+((r12*x5892))+((r11*x5900)));
evalcond[1]=((((-1.0)*x5896*x5898))+(((-1.0)*r22*x5897))+((x5892*x5895)));
evalcond[2]=((((-1.0)*x5893*x5898))+(((-1.0)*r02*x5897))+((r01*x5899)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5897))+(((-1.0)*x5894*x5898))+((r11*x5899)));
evalcond[4]=(((r22*x5892))+((cj2*sj1))+(((-1.0)*x5896*x5897))+((cj1*sj2))+((x5891*x5895)));
evalcond[5]=((((-1.0)*x5893*x5897))+(((-1.0)*sj1*sj2))+((r02*x5892))+((cj1*cj2))+((r01*x5900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5901=((1.0)*cj5);
CheckValue<IkReal> x5902=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5901))+(((-1.0)*r20*sj5)))),-1);
if(!x5902.valid){
continue;
}
CheckValue<IkReal> x5903 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5901))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5902.value)))+(x5903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5904=IKcos(j4);
IkReal x5905=IKsin(j4);
IkReal x5906=(cj5*r00);
IkReal x5907=(cj5*r10);
IkReal x5908=(r21*sj5);
IkReal x5909=(cj5*r20);
IkReal x5910=((1.0)*x5904);
IkReal x5911=((1.0)*x5905);
IkReal x5912=(sj5*x5905);
IkReal x5913=(sj5*x5904);
evalcond[0]=(((r12*x5905))+(((-1.0)*x5907*x5910))+((r11*x5913)));
evalcond[1]=((((-1.0)*r22*x5910))+(((-1.0)*x5909*x5911))+((x5905*x5908)));
evalcond[2]=(((r01*x5912))+(((-1.0)*x5906*x5911))+(((-1.0)*r02*x5910)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5910))+(((-1.0)*x5907*x5911))+((r11*x5912)));
evalcond[4]=(((cj2*sj1))+((r22*x5905))+((cj1*sj2))+(((-1.0)*x5909*x5910))+((x5904*x5908)));
evalcond[5]=(((r01*x5913))+(((-1.0)*sj1*sj2))+((r02*x5905))+(((-1.0)*x5906*x5910))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5914 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5914.valid){
continue;
}
CheckValue<IkReal> x5915=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5914.value)+(((1.5707963267949)*(x5915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5916=IKcos(j4);
IkReal x5917=IKsin(j4);
IkReal x5918=(cj5*r00);
IkReal x5919=(cj5*r10);
IkReal x5920=(r21*sj5);
IkReal x5921=(cj5*r20);
IkReal x5922=((1.0)*x5916);
IkReal x5923=((1.0)*x5917);
IkReal x5924=(sj5*x5917);
IkReal x5925=(sj5*x5916);
evalcond[0]=(((r12*x5917))+((r11*x5925))+(((-1.0)*x5919*x5922)));
evalcond[1]=((((-1.0)*r22*x5922))+((x5917*x5920))+(((-1.0)*x5921*x5923)));
evalcond[2]=((((-1.0)*x5918*x5923))+(((-1.0)*r02*x5922))+((r01*x5924)));
evalcond[3]=((-1.0)+((r11*x5924))+(((-1.0)*r12*x5922))+(((-1.0)*x5919*x5923)));
evalcond[4]=(((cj2*sj1))+((r22*x5917))+((cj1*sj2))+((x5916*x5920))+(((-1.0)*x5921*x5922)));
evalcond[5]=((((-1.0)*x5918*x5922))+(((-1.0)*sj1*sj2))+((r02*x5917))+((cj1*cj2))+((r01*x5925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5926=((-1.0)*r00);
IkReal x5928 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5928)==0){
continue;
}
IkReal x5927=pow(x5928,-0.5);
CheckValue<IkReal> x5929 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5926),IKFAST_ATAN2_MAGTHRESH);
if(!x5929.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5929.value));
IkReal gconst127=(r01*x5927);
IkReal gconst128=(x5926*x5927);
CheckValue<IkReal> x5930 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5930.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5930.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5931=((-1.0)*r00);
IkReal x5932=x5927;
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5931),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
IkReal x5933=((-1.0)*(x5934.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5933;
IkReal gconst126=x5933;
IkReal gconst127=(r01*x5932);
IkReal gconst128=(x5931*x5932);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5935=((1.0)*sj0);
IkReal x5936=((1.0)*gconst127);
CheckValue<IkReal> x5937=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5936)))),-1);
if(!x5937.valid){
continue;
}
CheckValue<IkReal> x5938 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5935)))),IkReal(((((-1.0)*cj0*r01*x5936))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5937.value)))+(x5938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5939=IKsin(j4);
IkReal x5940=IKcos(j4);
IkReal x5941=(gconst127*r01);
IkReal x5942=(sj1*sj2);
IkReal x5943=(gconst128*r10);
IkReal x5944=(gconst128*r00);
IkReal x5945=(gconst128*r20);
IkReal x5946=((1.0)*x5940);
IkReal x5947=((1.0)*cj1*cj2);
IkReal x5948=((1.0)*x5939);
IkReal x5949=(gconst127*x5940);
IkReal x5950=(gconst127*x5939);
evalcond[0]=((((-1.0)*r22*x5946))+((r21*x5950))+(((-1.0)*x5945*x5948)));
evalcond[1]=(cj0+((r11*x5950))+(((-1.0)*r12*x5946))+(((-1.0)*x5943*x5948)));
evalcond[2]=(((x5939*x5941))+(((-1.0)*sj0))+(((-1.0)*x5944*x5948))+(((-1.0)*r02*x5946)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5945*x5946))+((cj1*sj2))+((r22*x5939))+((r21*x5949)));
evalcond[4]=((((-1.0)*x5944*x5946))+((cj0*x5942))+(((-1.0)*cj0*x5947))+((x5940*x5941))+((r02*x5939)));
evalcond[5]=((((-1.0)*sj0*x5947))+((r12*x5939))+((r11*x5949))+(((-1.0)*x5943*x5946))+((sj0*x5942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5951=((1.0)*gconst128);
CheckValue<IkReal> x5952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5951))+(((-1.0)*gconst127*r10)))),-1);
if(!x5952.valid){
continue;
}
CheckValue<IkReal> x5953 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5952.value)))+(x5953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5954=IKsin(j4);
IkReal x5955=IKcos(j4);
IkReal x5956=(gconst127*r01);
IkReal x5957=(sj1*sj2);
IkReal x5958=(gconst128*r10);
IkReal x5959=(gconst128*r00);
IkReal x5960=(gconst128*r20);
IkReal x5961=((1.0)*x5955);
IkReal x5962=((1.0)*cj1*cj2);
IkReal x5963=((1.0)*x5954);
IkReal x5964=(gconst127*x5955);
IkReal x5965=(gconst127*x5954);
evalcond[0]=((((-1.0)*r22*x5961))+(((-1.0)*x5960*x5963))+((r21*x5965)));
evalcond[1]=(cj0+(((-1.0)*r12*x5961))+(((-1.0)*x5958*x5963))+((r11*x5965)));
evalcond[2]=((((-1.0)*sj0))+((x5954*x5956))+(((-1.0)*r02*x5961))+(((-1.0)*x5959*x5963)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5960*x5961))+((r21*x5964))+((r22*x5954)));
evalcond[4]=(((r02*x5954))+((x5955*x5956))+(((-1.0)*cj0*x5962))+((cj0*x5957))+(((-1.0)*x5959*x5961)));
evalcond[5]=(((sj0*x5957))+(((-1.0)*sj0*x5962))+((r12*x5954))+(((-1.0)*x5958*x5961))+((r11*x5964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5966=((-1.0)*r01);
IkReal x5968 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5968)==0){
continue;
}
IkReal x5967=pow(x5968,-0.5);
CheckValue<IkReal> x5969 = IKatan2WithCheck(IkReal(x5966),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5969.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5969.value))));
IkReal gconst130=(x5966*x5967);
IkReal gconst131=((1.0)*r00*x5967);
CheckValue<IkReal> x5970 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5970.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5970.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5971=((-1.0)*r01);
CheckValue<IkReal> x5974 = IKatan2WithCheck(IkReal(x5971),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5974.valid){
continue;
}
IkReal x5972=((1.0)*(x5974.value));
IkReal x5973=x5967;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5972)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5972)));
IkReal gconst130=(x5971*x5973);
IkReal gconst131=((1.0)*r00*x5973);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5975=((-1.0)*r01);
CheckValue<IkReal> x5978 = IKatan2WithCheck(IkReal(x5975),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5978.valid){
continue;
}
IkReal x5976=((1.0)*(x5978.value));
IkReal x5977=x5967;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5976)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5976)));
IkReal gconst130=(x5975*x5977);
IkReal gconst131=((1.0)*r00*x5977);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5979=((-1.0)*r01);
CheckValue<IkReal> x5982 = IKatan2WithCheck(IkReal(x5979),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5982.valid){
continue;
}
IkReal x5980=((1.0)*(x5982.value));
IkReal x5981=x5967;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5980)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5980)));
IkReal gconst130=(x5979*x5981);
IkReal gconst131=((1.0)*r00*x5981);
IkReal x5983=r02*r02;
IkReal x5984=(r12*sj0);
IkReal x5985=((1.0)*cj0);
IkReal x5986=x5967;
j4eval[0]=((IKabs(((((-1.0)*x5984))+(((-1.0)*r02*x5985)))))+(IKabs((((r02*x5984*x5986))+((cj0*x5983*x5986))+(((-1.0)*x5985*x5986))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5987=((1.0)*sj0);
IkReal x5988=((1.0)*gconst130);
CheckValue<IkReal> x5989=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5988)))),-1);
if(!x5989.valid){
continue;
}
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5987))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x5987))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*cj0*r01*x5988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5989.value)))+(x5990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5991=IKsin(j4);
IkReal x5992=IKcos(j4);
IkReal x5993=(gconst131*r10);
IkReal x5994=(sj1*sj2);
IkReal x5995=(gconst131*r20);
IkReal x5996=(gconst131*r00);
IkReal x5997=((1.0)*x5992);
IkReal x5998=((1.0)*cj1*cj2);
IkReal x5999=(gconst130*x5991);
IkReal x6000=((1.0)*x5991);
IkReal x6001=(gconst130*x5992);
evalcond[0]=(((r21*x5999))+(((-1.0)*r22*x5997))+(((-1.0)*x5995*x6000)));
evalcond[1]=((((-1.0)*r12*x5997))+cj0+((r11*x5999))+(((-1.0)*x5993*x6000)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5996*x6000))+(((-1.0)*r02*x5997))+((r01*x5999)));
evalcond[3]=(((r21*x6001))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5995*x5997))+((r22*x5991)));
evalcond[4]=((((-1.0)*x5996*x5997))+((r02*x5991))+((cj0*x5994))+((r01*x6001))+(((-1.0)*cj0*x5998)));
evalcond[5]=(((r12*x5991))+((sj0*x5994))+((r11*x6001))+(((-1.0)*sj0*x5998))+(((-1.0)*x5993*x5997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6002=((1.0)*gconst131);
CheckValue<IkReal> x6003 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6003.valid){
continue;
}
CheckValue<IkReal> x6004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6002))+(((-1.0)*gconst130*r10)))),-1);
if(!x6004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6003.value)+(((1.5707963267949)*(x6004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6005=IKsin(j4);
IkReal x6006=IKcos(j4);
IkReal x6007=(gconst131*r10);
IkReal x6008=(sj1*sj2);
IkReal x6009=(gconst131*r20);
IkReal x6010=(gconst131*r00);
IkReal x6011=((1.0)*x6006);
IkReal x6012=((1.0)*cj1*cj2);
IkReal x6013=(gconst130*x6005);
IkReal x6014=((1.0)*x6005);
IkReal x6015=(gconst130*x6006);
evalcond[0]=(((r21*x6013))+(((-1.0)*x6009*x6014))+(((-1.0)*r22*x6011)));
evalcond[1]=(((r11*x6013))+cj0+(((-1.0)*r12*x6011))+(((-1.0)*x6007*x6014)));
evalcond[2]=(((r01*x6013))+(((-1.0)*sj0))+(((-1.0)*r02*x6011))+(((-1.0)*x6010*x6014)));
evalcond[3]=(((cj2*sj1))+((r22*x6005))+((r21*x6015))+((cj1*sj2))+(((-1.0)*x6009*x6011)));
evalcond[4]=(((r01*x6015))+((cj0*x6008))+(((-1.0)*x6010*x6011))+((r02*x6005))+(((-1.0)*cj0*x6012)));
evalcond[5]=(((r12*x6005))+((r11*x6015))+(((-1.0)*sj0*x6012))+((sj0*x6008))+(((-1.0)*x6007*x6011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6016=((1.0)*gconst131);
CheckValue<IkReal> x6017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6016))+(((-1.0)*gconst130*r00)))),-1);
if(!x6017.valid){
continue;
}
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6017.value)))+(x6018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6019=IKsin(j4);
IkReal x6020=IKcos(j4);
IkReal x6021=(gconst131*r10);
IkReal x6022=(sj1*sj2);
IkReal x6023=(gconst131*r20);
IkReal x6024=(gconst131*r00);
IkReal x6025=((1.0)*x6020);
IkReal x6026=((1.0)*cj1*cj2);
IkReal x6027=(gconst130*x6019);
IkReal x6028=((1.0)*x6019);
IkReal x6029=(gconst130*x6020);
evalcond[0]=((((-1.0)*x6023*x6028))+(((-1.0)*r22*x6025))+((r21*x6027)));
evalcond[1]=(cj0+(((-1.0)*x6021*x6028))+((r11*x6027))+(((-1.0)*r12*x6025)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6024*x6028))+((r01*x6027))+(((-1.0)*r02*x6025)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6023*x6025))+((cj1*sj2))+((r21*x6029))+((r22*x6019)));
evalcond[4]=((((-1.0)*cj0*x6026))+(((-1.0)*x6024*x6025))+((r01*x6029))+((r02*x6019))+((cj0*x6022)));
evalcond[5]=(((sj0*x6022))+(((-1.0)*x6021*x6025))+((r12*x6019))+(((-1.0)*sj0*x6026))+((r11*x6029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6030=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6030;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6031=((1.0)*cj5);
IkReal x6032=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6031)));
j4eval[0]=x6032;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6031))))));
j4eval[2]=IKsign(x6032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6033=cj5*cj5;
IkReal x6034=r01*r01;
IkReal x6035=(cj5*r00);
IkReal x6036=(r01*sj5);
IkReal x6037=((((-2.0)*x6035*x6036))+((x6033*(r00*r00)))+x6034+(((-1.0)*x6033*x6034))+(r02*r02));
j4eval[0]=x6037;
j4eval[1]=IKsign(x6037);
j4eval[2]=((IKabs((x6036+(((-1.0)*x6035)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6038=cj5*cj5;
IkReal x6039=r01*r01;
IkReal x6040=(r01*sj5);
IkReal x6041=(cj5*r00);
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal((x6040+(((-1.0)*x6041)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
CheckValue<IkReal> x6043=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6040*x6041))+((x6038*(r00*r00)))+x6039+(((-1.0)*x6038*x6039))+(r02*r02))),-1);
if(!x6043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6042.value)+(((1.5707963267949)*(x6043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6044=IKcos(j4);
IkReal x6045=IKsin(j4);
IkReal x6046=(cj5*r00);
IkReal x6047=(cj5*r10);
IkReal x6048=(r21*sj5);
IkReal x6049=(cj5*r20);
IkReal x6050=((1.0)*x6044);
IkReal x6051=((1.0)*x6045);
IkReal x6052=(sj5*x6045);
IkReal x6053=(sj5*x6044);
evalcond[0]=(((r01*x6053))+(((-1.0)*x6046*x6050))+((r02*x6045)));
evalcond[1]=((((-1.0)*r22*x6050))+(((-1.0)*x6049*x6051))+((x6045*x6048)));
evalcond[2]=((((-1.0)*r12*x6050))+(((-1.0)*x6047*x6051))+((r11*x6052)));
evalcond[3]=((-1.0)+((r01*x6052))+(((-1.0)*x6046*x6051))+(((-1.0)*r02*x6050)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6045))+(((-1.0)*x6049*x6050))+((x6044*x6048)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6047*x6050))+((r12*x6045))+((r11*x6053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6054=((1.0)*cj5);
CheckValue<IkReal> x6055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6054)))),-1);
if(!x6055.valid){
continue;
}
CheckValue<IkReal> x6056 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6055.value)))+(x6056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6057=IKcos(j4);
IkReal x6058=IKsin(j4);
IkReal x6059=(cj5*r00);
IkReal x6060=(cj5*r10);
IkReal x6061=(r21*sj5);
IkReal x6062=(cj5*r20);
IkReal x6063=((1.0)*x6057);
IkReal x6064=((1.0)*x6058);
IkReal x6065=(sj5*x6058);
IkReal x6066=(sj5*x6057);
evalcond[0]=((((-1.0)*x6059*x6063))+((r01*x6066))+((r02*x6058)));
evalcond[1]=((((-1.0)*r22*x6063))+((x6058*x6061))+(((-1.0)*x6062*x6064)));
evalcond[2]=((((-1.0)*x6060*x6064))+((r11*x6065))+(((-1.0)*r12*x6063)));
evalcond[3]=((-1.0)+(((-1.0)*x6059*x6064))+((r01*x6065))+(((-1.0)*r02*x6063)));
evalcond[4]=(((cj2*sj1))+((r22*x6058))+((x6057*x6061))+((cj1*sj2))+(((-1.0)*x6062*x6063)));
evalcond[5]=(((r12*x6058))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6060*x6063))+((r11*x6066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6067=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6067.valid){
continue;
}
CheckValue<IkReal> x6068 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6067.value)))+(x6068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6069=IKcos(j4);
IkReal x6070=IKsin(j4);
IkReal x6071=(cj5*r00);
IkReal x6072=(cj5*r10);
IkReal x6073=(r21*sj5);
IkReal x6074=(cj5*r20);
IkReal x6075=((1.0)*x6069);
IkReal x6076=((1.0)*x6070);
IkReal x6077=(sj5*x6070);
IkReal x6078=(sj5*x6069);
evalcond[0]=(((r01*x6078))+((r02*x6070))+(((-1.0)*x6071*x6075)));
evalcond[1]=(((x6070*x6073))+(((-1.0)*x6074*x6076))+(((-1.0)*r22*x6075)));
evalcond[2]=(((r11*x6077))+(((-1.0)*x6072*x6076))+(((-1.0)*r12*x6075)));
evalcond[3]=((-1.0)+((r01*x6077))+(((-1.0)*r02*x6075))+(((-1.0)*x6071*x6076)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6070))+(((-1.0)*x6074*x6075))+((x6069*x6073)));
evalcond[5]=(((r11*x6078))+(((-1.0)*x6072*x6075))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6079=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6079;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6080=((1.0)*cj5);
IkReal x6081=((((-1.0)*r21*x6080))+(((-1.0)*r20*sj5)));
j4eval[0]=x6081;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6080))))));
j4eval[2]=IKsign(x6081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6082=(r01*sj5);
IkReal x6083=(cj1*sj2);
IkReal x6084=(cj2*sj1);
IkReal x6085=((1.0)*r02);
IkReal x6086=((1.0)*cj5*r00);
IkReal x6087=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6087;
j4eval[1]=((IKabs(((((-1.0)*x6083*x6086))+((x6082*x6083))+((x6082*x6084))+(((-1.0)*x6084*x6086)))))+(IKabs(((((-1.0)*x6083*x6085))+(((-1.0)*x6084*x6085))))));
j4eval[2]=IKsign(x6087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6088=(r01*sj5);
IkReal x6089=(cj1*sj2);
IkReal x6090=(cj2*sj1);
IkReal x6091=((1.0)*r02);
IkReal x6092=((1.0)*cj5*r00);
CheckValue<IkReal> x6093 = IKatan2WithCheck(IkReal(((((-1.0)*x6089*x6092))+((x6088*x6089))+((x6088*x6090))+(((-1.0)*x6090*x6092)))),IkReal(((((-1.0)*x6089*x6091))+(((-1.0)*x6090*x6091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6093.valid){
continue;
}
CheckValue<IkReal> x6094=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6093.value)+(((1.5707963267949)*(x6094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6095=IKcos(j4);
IkReal x6096=IKsin(j4);
IkReal x6097=(cj5*r00);
IkReal x6098=(cj5*r10);
IkReal x6099=(r21*sj5);
IkReal x6100=(cj5*r20);
IkReal x6101=((1.0)*x6095);
IkReal x6102=((1.0)*x6096);
IkReal x6103=(sj5*x6096);
IkReal x6104=(sj5*x6095);
evalcond[0]=(((r01*x6104))+((r02*x6096))+(((-1.0)*x6097*x6101)));
evalcond[1]=(((x6096*x6099))+(((-1.0)*r22*x6101))+(((-1.0)*x6100*x6102)));
evalcond[2]=(((r11*x6103))+(((-1.0)*x6098*x6102))+(((-1.0)*r12*x6101)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6101))+((r01*x6103))+(((-1.0)*x6097*x6102)));
evalcond[4]=(((x6095*x6099))+((cj2*sj1))+((cj1*sj2))+((r22*x6096))+(((-1.0)*x6100*x6101)));
evalcond[5]=(((r11*x6104))+(((-1.0)*sj1*sj2))+(((-1.0)*x6098*x6101))+((r12*x6096))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6105=((1.0)*cj5);
CheckValue<IkReal> x6106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6105))+(((-1.0)*r20*sj5)))),-1);
if(!x6106.valid){
continue;
}
CheckValue<IkReal> x6107 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6106.value)))+(x6107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6108=IKcos(j4);
IkReal x6109=IKsin(j4);
IkReal x6110=(cj5*r00);
IkReal x6111=(cj5*r10);
IkReal x6112=(r21*sj5);
IkReal x6113=(cj5*r20);
IkReal x6114=((1.0)*x6108);
IkReal x6115=((1.0)*x6109);
IkReal x6116=(sj5*x6109);
IkReal x6117=(sj5*x6108);
evalcond[0]=(((r01*x6117))+((r02*x6109))+(((-1.0)*x6110*x6114)));
evalcond[1]=((((-1.0)*r22*x6114))+(((-1.0)*x6113*x6115))+((x6109*x6112)));
evalcond[2]=((((-1.0)*r12*x6114))+(((-1.0)*x6111*x6115))+((r11*x6116)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6114))+((r01*x6116))+(((-1.0)*x6110*x6115)));
evalcond[4]=(((cj2*sj1))+((r22*x6109))+((cj1*sj2))+(((-1.0)*x6113*x6114))+((x6108*x6112)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6111*x6114))+((r11*x6117))+((cj1*cj2))+((r12*x6109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6118 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6118.valid){
continue;
}
CheckValue<IkReal> x6119=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6118.value)+(((1.5707963267949)*(x6119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6120=IKcos(j4);
IkReal x6121=IKsin(j4);
IkReal x6122=(cj5*r00);
IkReal x6123=(cj5*r10);
IkReal x6124=(r21*sj5);
IkReal x6125=(cj5*r20);
IkReal x6126=((1.0)*x6120);
IkReal x6127=((1.0)*x6121);
IkReal x6128=(sj5*x6121);
IkReal x6129=(sj5*x6120);
evalcond[0]=(((r01*x6129))+((r02*x6121))+(((-1.0)*x6122*x6126)));
evalcond[1]=((((-1.0)*x6125*x6127))+((x6121*x6124))+(((-1.0)*r22*x6126)));
evalcond[2]=((((-1.0)*r12*x6126))+(((-1.0)*x6123*x6127))+((r11*x6128)));
evalcond[3]=((1.0)+((r01*x6128))+(((-1.0)*r02*x6126))+(((-1.0)*x6122*x6127)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6125*x6126))+((cj1*sj2))+((x6120*x6124))+((r22*x6121)));
evalcond[5]=(((r12*x6121))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6123*x6126))+((r11*x6129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6130=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6130);
rxp1_1=(px*r21);
rxp1_2=(r11*x6130);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6131=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6131);
rxp1_1=(px*r21);
rxp1_2=(r11*x6131);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6132=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6132);
rxp1_1=(px*r21);
rxp1_2=(r11*x6132);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6135=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6135.valid){
continue;
}
IkReal x6133=x6135.value;
IkReal x6134=(sj0*x6133);
cj4array[0]=(((cj1*cj2*x6134))+(((-1.0)*sj1*sj2*x6134)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6136=IKsin(j4);
IkReal x6137=IKcos(j4);
IkReal x6138=(r21*sj5);
IkReal x6139=((1.0)*cj5*r20);
evalcond[0]=(r02*x6136);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6137)));
evalcond[2]=(((x6136*x6138))+(((-1.0)*x6136*x6139)));
evalcond[3]=(((r11*sj5*x6136))+(((-1.0)*cj5*r10*x6136)));
evalcond[4]=(((x6137*x6138))+((cj2*sj1))+(((-1.0)*x6137*x6139))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6142=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6142.valid){
continue;
}
IkReal x6140=x6142.value;
IkReal x6141=((1.0)*x6140);
cj4array[0]=((((-1.0)*cj2*sj1*x6141))+(((-1.0)*cj1*sj2*x6141)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6143=IKsin(j4);
IkReal x6144=IKcos(j4);
IkReal x6145=((1.0)*sj0);
IkReal x6146=((1.0)*cj5);
IkReal x6147=(sj5*x6143);
evalcond[0]=(r02*x6143);
evalcond[1]=((((-1.0)*x6145))+(((-1.0)*r02*x6144)));
evalcond[2]=(((r21*x6147))+(((-1.0)*r20*x6143*x6146)));
evalcond[3]=((((-1.0)*r10*x6143*x6146))+((r11*x6147)));
evalcond[4]=(((r11*sj5*x6144))+(((-1.0)*r10*x6144*x6146))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6148=IKPowWithIntegerCheck(r02,-1);
if(!x6148.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6148.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6149=IKsin(j4);
IkReal x6150=IKcos(j4);
IkReal x6151=(r21*sj5);
IkReal x6152=((1.0)*cj5);
IkReal x6153=(r11*sj5);
evalcond[0]=(r02*x6149);
evalcond[1]=(((x6149*x6151))+(((-1.0)*r20*x6149*x6152)));
evalcond[2]=(((x6149*x6153))+(((-1.0)*r10*x6149*x6152)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6150*x6152))+((x6150*x6151)));
evalcond[4]=((((-1.0)*r10*x6150*x6152))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6150*x6153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6154=((1.0)*sj0);
IkReal x6155=((1.0)*cj0);
CheckValue<IkReal> x6156 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6155))+(((-1.0)*r12*x6154)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6155))+(((-1.0)*r11*sj5*x6154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6156.valid){
continue;
}
CheckValue<IkReal> x6157=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6156.value)+(((1.5707963267949)*(x6157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6158=IKsin(j4);
IkReal x6159=IKcos(j4);
IkReal x6160=(cj5*r00);
IkReal x6161=(cj5*r10);
IkReal x6162=(r21*sj5);
IkReal x6163=(sj1*sj2);
IkReal x6164=(cj5*r20);
IkReal x6165=((1.0)*x6159);
IkReal x6166=((1.0)*cj1*cj2);
IkReal x6167=((1.0)*x6158);
IkReal x6168=(sj5*x6158);
IkReal x6169=(sj5*x6159);
evalcond[0]=(((x6158*x6162))+(((-1.0)*r22*x6165))+(((-1.0)*x6164*x6167)));
evalcond[1]=(cj0+(((-1.0)*r12*x6165))+((r11*x6168))+(((-1.0)*x6161*x6167)));
evalcond[2]=((((-1.0)*x6160*x6167))+(((-1.0)*sj0))+((r01*x6168))+(((-1.0)*r02*x6165)));
evalcond[3]=(((r22*x6158))+((cj2*sj1))+((x6159*x6162))+((cj1*sj2))+(((-1.0)*x6164*x6165)));
evalcond[4]=((((-1.0)*x6160*x6165))+(((-1.0)*cj0*x6166))+((r02*x6158))+((r01*x6169))+((cj0*x6163)));
evalcond[5]=(((r12*x6158))+(((-1.0)*sj0*x6166))+((sj0*x6163))+((r11*x6169))+(((-1.0)*x6161*x6165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6170=((1.0)*cj5);
CheckValue<IkReal> x6171 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6170))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6171.valid){
continue;
}
CheckValue<IkReal> x6172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6170)))),-1);
if(!x6172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6171.value)+(((1.5707963267949)*(x6172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6173=IKsin(j4);
IkReal x6174=IKcos(j4);
IkReal x6175=(cj5*r00);
IkReal x6176=(cj5*r10);
IkReal x6177=(r21*sj5);
IkReal x6178=(sj1*sj2);
IkReal x6179=(cj5*r20);
IkReal x6180=((1.0)*x6174);
IkReal x6181=((1.0)*cj1*cj2);
IkReal x6182=((1.0)*x6173);
IkReal x6183=(sj5*x6173);
IkReal x6184=(sj5*x6174);
evalcond[0]=((((-1.0)*r22*x6180))+((x6173*x6177))+(((-1.0)*x6179*x6182)));
evalcond[1]=(cj0+(((-1.0)*r12*x6180))+(((-1.0)*x6176*x6182))+((r11*x6183)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6180))+((r01*x6183))+(((-1.0)*x6175*x6182)));
evalcond[3]=(((x6174*x6177))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6179*x6180))+((r22*x6173)));
evalcond[4]=(((r01*x6184))+((r02*x6173))+(((-1.0)*cj0*x6181))+((cj0*x6178))+(((-1.0)*x6175*x6180)));
evalcond[5]=(((r12*x6173))+((sj0*x6178))+(((-1.0)*x6176*x6180))+((r11*x6184))+(((-1.0)*sj0*x6181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6185=((1.0)*cj5);
CheckValue<IkReal> x6186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6185))+(((-1.0)*r00*sj5)))),-1);
if(!x6186.valid){
continue;
}
CheckValue<IkReal> x6187 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6186.value)))+(x6187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6188=IKsin(j4);
IkReal x6189=IKcos(j4);
IkReal x6190=(cj5*r00);
IkReal x6191=(cj5*r10);
IkReal x6192=(r21*sj5);
IkReal x6193=(sj1*sj2);
IkReal x6194=(cj5*r20);
IkReal x6195=((1.0)*x6189);
IkReal x6196=((1.0)*cj1*cj2);
IkReal x6197=((1.0)*x6188);
IkReal x6198=(sj5*x6188);
IkReal x6199=(sj5*x6189);
evalcond[0]=(((x6188*x6192))+(((-1.0)*x6194*x6197))+(((-1.0)*r22*x6195)));
evalcond[1]=(cj0+((r11*x6198))+(((-1.0)*r12*x6195))+(((-1.0)*x6191*x6197)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6190*x6197))+((r01*x6198))+(((-1.0)*r02*x6195)));
evalcond[3]=(((cj2*sj1))+((r22*x6188))+((cj1*sj2))+(((-1.0)*x6194*x6195))+((x6189*x6192)));
evalcond[4]=((((-1.0)*cj0*x6196))+(((-1.0)*x6190*x6195))+((r02*x6188))+((r01*x6199))+((cj0*x6193)));
evalcond[5]=(((r11*x6199))+(((-1.0)*sj0*x6196))+(((-1.0)*x6191*x6195))+((sj0*x6193))+((r12*x6188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6200=r21*r21;
IkReal x6201=cj5*cj5;
IkReal x6202=(cj2*sj1);
IkReal x6203=(cj1*sj2);
IkReal x6204=(r21*sj5);
IkReal x6205=((1.0)*cj5*r20);
CheckValue<IkReal> x6206 = IKatan2WithCheck(IkReal((((r22*x6202))+((r22*x6203)))),IkReal(((((-1.0)*x6202*x6205))+((x6203*x6204))+((x6202*x6204))+(((-1.0)*x6203*x6205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6206.valid){
continue;
}
CheckValue<IkReal> x6207=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6201*(r20*r20)))+(((-1.0)*x6200))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x6204))+((x6200*x6201)))),-1);
if(!x6207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6206.value)+(((1.5707963267949)*(x6207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6208=IKsin(j4);
IkReal x6209=IKcos(j4);
IkReal x6210=(r21*sj5);
IkReal x6211=(cj5*r20);
IkReal x6212=((1.0)*x6209);
evalcond[0]=(((x6208*x6210))+(((-1.0)*x6208*x6211))+(((-1.0)*r22*x6212)));
evalcond[1]=(((cj2*sj1))+((r22*x6208))+((cj1*sj2))+((x6209*x6210))+(((-1.0)*x6211*x6212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6213=(cj5*sj4);
IkReal x6214=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6214))+(((-1.0)*r00*x6213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6213))+(((-1.0)*r11*x6214))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6214))+(((-1.0)*r00*x6213))))+IKsqr((((r10*x6213))+(((-1.0)*r11*x6214))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6214))+(((-1.0)*r00*x6213))), (((r10*x6213))+(((-1.0)*r11*x6214))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6215=IKcos(j0);
IkReal x6216=IKsin(j0);
IkReal x6217=(cj5*r01);
IkReal x6218=((1.0)*cj1);
IkReal x6219=((0.39225)*sj1);
IkReal x6220=(r11*sj5);
IkReal x6221=((0.39225)*cj2);
IkReal x6222=((1.0)*sj1);
IkReal x6223=(r00*sj5);
IkReal x6224=(cj5*r11);
IkReal x6225=((1.0)*cj4);
IkReal x6226=(r01*sj5);
IkReal x6227=(r10*sj5);
IkReal x6228=(sj2*x6215);
IkReal x6229=(sj2*x6216);
IkReal x6230=(cj5*x6225);
IkReal x6231=(cj1*x6215);
IkReal x6232=(cj1*x6216);
IkReal x6233=(cj2*x6215);
IkReal x6234=((1.0)*cj5*sj4);
IkReal x6235=(cj2*x6216);
evalcond[0]=(x6215+(((-1.0)*r10*x6234))+(((-1.0)*r12*x6225))+((sj4*x6220)));
evalcond[1]=((((-1.0)*x6216))+((sj4*x6226))+(((-1.0)*r00*x6234))+(((-1.0)*r02*x6225)));
evalcond[2]=((((-1.0)*x6222*x6233))+x6217+x6223+(((-1.0)*x6218*x6228)));
evalcond[3]=((((-1.0)*x6222*x6235))+x6227+x6224+(((-1.0)*x6218*x6229)));
evalcond[4]=(((sj1*x6228))+((r02*sj4))+(((-1.0)*r00*x6230))+(((-1.0)*x6218*x6233))+((cj4*x6226)));
evalcond[5]=(((sj1*x6229))+(((-1.0)*r10*x6230))+(((-1.0)*x6218*x6235))+((r12*sj4))+((cj4*x6220)));
evalcond[6]=((((-0.09465)*x6223))+(((-0.10915)*x6216))+(((-1.0)*x6219*x6228))+(((-1.0)*px))+((x6221*x6231))+(((0.425)*x6231))+(((-0.09465)*x6217)));
evalcond[7]=((((-0.09465)*x6227))+(((-0.09465)*x6224))+(((0.10915)*x6215))+(((-1.0)*x6219*x6229))+(((-1.0)*py))+((x6221*x6232))+(((0.425)*x6232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6236=((1.0)*cj5);
IkReal x6237=((1.0)*sj5);
CheckValue<IkReal> x6238 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6236))+(((-1.0)*r10*x6237)))),IkReal(((((-1.0)*r00*x6237))+(((-1.0)*r01*x6236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6238.valid){
continue;
}
CheckValue<IkReal> x6239=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6239.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6238.value)+(((1.5707963267949)*(x6239.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6240=IKcos(j0);
IkReal x6241=IKsin(j0);
IkReal x6242=(cj5*r01);
IkReal x6243=((1.0)*cj1);
IkReal x6244=((0.39225)*sj1);
IkReal x6245=(cj5*r11);
IkReal x6246=(r00*sj5);
IkReal x6247=((0.39225)*cj2);
IkReal x6248=(r10*sj5);
IkReal x6249=(sj2*x6240);
IkReal x6250=(sj2*x6241);
IkReal x6251=(cj1*x6240);
IkReal x6252=((1.0)*cj2*sj1);
IkReal x6253=(cj1*x6241);
evalcond[0]=(x6242+x6246+(((-1.0)*x6240*x6252))+(((-1.0)*x6243*x6249)));
evalcond[1]=(x6248+x6245+(((-1.0)*x6243*x6250))+(((-1.0)*x6241*x6252)));
evalcond[2]=((((-0.09465)*x6246))+(((-0.09465)*x6242))+(((-1.0)*px))+(((-0.10915)*x6241))+(((0.425)*x6251))+(((-1.0)*x6244*x6249))+((x6247*x6251)));
evalcond[3]=((((-0.09465)*x6248))+(((-0.09465)*x6245))+(((-1.0)*x6244*x6250))+(((-1.0)*py))+(((0.425)*x6253))+(((0.10915)*x6240))+((x6247*x6253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6254=((1.0)*cj5);
IkReal x6255=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6254)));
j4eval[0]=x6255;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6254))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6256=((1.0)*cj5);
IkReal x6257=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6256)));
j4eval[0]=x6257;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6256)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6258=((1.0)*sj0);
IkReal x6259=((1.0)*cj0);
IkReal x6260=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6260;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6258))+(((-1.0)*r01*sj5*x6259)))))+(IKabs(((((-1.0)*r02*x6259))+(((-1.0)*r12*x6258))))));
j4eval[2]=IKsign(x6260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6261=((-1.0)*r20);
IkReal x6263 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6263)==0){
continue;
}
IkReal x6262=pow(x6263,-0.5);
CheckValue<IkReal> x6264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6261),IKFAST_ATAN2_MAGTHRESH);
if(!x6264.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6264.value));
IkReal gconst115=(r21*x6262);
IkReal gconst116=(x6261*x6262);
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6265.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6266=((-1.0)*r20);
IkReal x6267=x6262;
CheckValue<IkReal> x6269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6266),IKFAST_ATAN2_MAGTHRESH);
if(!x6269.valid){
continue;
}
IkReal x6268=((-1.0)*(x6269.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6268;
IkReal gconst114=x6268;
IkReal gconst115=(r21*x6267);
IkReal gconst116=(x6266*x6267);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6270=((-1.0)*r20);
IkReal x6271=x6262;
CheckValue<IkReal> x6273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6270),IKFAST_ATAN2_MAGTHRESH);
if(!x6273.valid){
continue;
}
IkReal x6272=((-1.0)*(x6273.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6272;
IkReal gconst114=x6272;
IkReal gconst115=(r21*x6271);
IkReal gconst116=(x6270*x6271);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6274=((-1.0)*r20);
IkReal x6275=x6262;
CheckValue<IkReal> x6277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6274),IKFAST_ATAN2_MAGTHRESH);
if(!x6277.valid){
continue;
}
IkReal x6276=((-1.0)*(x6277.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6276;
IkReal gconst114=x6276;
IkReal gconst115=(r21*x6275);
IkReal gconst116=(x6274*x6275);
IkReal x6278=((1.0)*(r22*r22));
CheckValue<IkReal> x6282=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6278))),-1);
if(!x6282.valid){
continue;
}
IkReal x6279=x6282.value;
IkReal x6280=((1.0)*x6279);
IkReal x6281=((((-1.0)*x6278))+(((-2.0)*x6279*(r20*r20)*(r21*r21)))+(((-1.0)*x6280*(r20*r20*r20*r20)))+(((-1.0)*x6280*(r21*r21*r21*r21))));
j4eval[0]=x6281;
j4eval[1]=IKsign(x6281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6283=(cj2*sj1);
IkReal x6284=(gconst115*r21);
IkReal x6285=(cj1*sj2);
IkReal x6286=((1.0)*gconst116*r20);
CheckValue<IkReal> x6287 = IKatan2WithCheck(IkReal((((r22*x6285))+((r22*x6283)))),IkReal((((x6284*x6285))+(((-1.0)*x6283*x6286))+(((-1.0)*x6285*x6286))+((x6283*x6284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6287.valid){
continue;
}
CheckValue<IkReal> x6288=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6286))+(((-1.0)*(x6284*x6284)))+(((2.0)*gconst116*r20*x6284))+(((-1.0)*(r22*r22))))),-1);
if(!x6288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6287.value)+(((1.5707963267949)*(x6288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6289=IKsin(j4);
IkReal x6290=IKcos(j4);
IkReal x6291=(sj1*sj2);
IkReal x6292=((1.0)*x6290);
IkReal x6293=((1.0)*cj1*cj2);
IkReal x6294=(gconst115*x6289);
IkReal x6295=(gconst115*x6290);
IkReal x6296=((1.0)*gconst116*x6289);
evalcond[0]=((((-1.0)*r20*x6296))+(((-1.0)*r22*x6292))+((r21*x6294)));
evalcond[1]=(cj0+((r11*x6294))+(((-1.0)*r10*x6296))+(((-1.0)*r12*x6292)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6296))+((r01*x6294))+(((-1.0)*r02*x6292)));
evalcond[3]=(((cj2*sj1))+((r22*x6289))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6292))+((r21*x6295)));
evalcond[4]=(((r01*x6295))+(((-1.0)*gconst116*r00*x6292))+((cj0*x6291))+((r02*x6289))+(((-1.0)*cj0*x6293)));
evalcond[5]=(((r11*x6295))+((r12*x6289))+(((-1.0)*gconst116*r10*x6292))+((sj0*x6291))+(((-1.0)*sj0*x6293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6297=((1.0)*gconst116);
CheckValue<IkReal> x6298=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6297)))),-1);
if(!x6298.valid){
continue;
}
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6297))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6298.value)))+(x6299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6300=IKsin(j4);
IkReal x6301=IKcos(j4);
IkReal x6302=(sj1*sj2);
IkReal x6303=((1.0)*x6301);
IkReal x6304=((1.0)*cj1*cj2);
IkReal x6305=(gconst115*x6300);
IkReal x6306=(gconst115*x6301);
IkReal x6307=((1.0)*gconst116*x6300);
evalcond[0]=(((r21*x6305))+(((-1.0)*r20*x6307))+(((-1.0)*r22*x6303)));
evalcond[1]=(cj0+(((-1.0)*r10*x6307))+(((-1.0)*r12*x6303))+((r11*x6305)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6303))+((r01*x6305))+(((-1.0)*r00*x6307)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6300))+((r21*x6306))+(((-1.0)*gconst116*r20*x6303)));
evalcond[4]=(((r01*x6306))+((r02*x6300))+((cj0*x6302))+(((-1.0)*gconst116*r00*x6303))+(((-1.0)*cj0*x6304)));
evalcond[5]=(((r11*x6306))+(((-1.0)*sj0*x6304))+((r12*x6300))+(((-1.0)*gconst116*r10*x6303))+((sj0*x6302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6308=((1.0)*gconst116);
CheckValue<IkReal> x6309=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6308)))),-1);
if(!x6309.valid){
continue;
}
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6309.value)))+(x6310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6311=IKsin(j4);
IkReal x6312=IKcos(j4);
IkReal x6313=(sj1*sj2);
IkReal x6314=((1.0)*x6312);
IkReal x6315=((1.0)*cj1*cj2);
IkReal x6316=(gconst115*x6311);
IkReal x6317=(gconst115*x6312);
IkReal x6318=((1.0)*gconst116*x6311);
evalcond[0]=((((-1.0)*r22*x6314))+((r21*x6316))+(((-1.0)*r20*x6318)));
evalcond[1]=(cj0+(((-1.0)*r12*x6314))+(((-1.0)*r10*x6318))+((r11*x6316)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6314))+((r01*x6316))+(((-1.0)*r00*x6318)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6311))+((r21*x6317))+(((-1.0)*gconst116*r20*x6314)));
evalcond[4]=(((r01*x6317))+((r02*x6311))+((cj0*x6313))+(((-1.0)*gconst116*r00*x6314))+(((-1.0)*cj0*x6315)));
evalcond[5]=(((r11*x6317))+(((-1.0)*sj0*x6315))+(((-1.0)*gconst116*r10*x6314))+((r12*x6311))+((sj0*x6313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6319=((-1.0)*r21);
IkReal x6321 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6321)==0){
continue;
}
IkReal x6320=pow(x6321,-0.5);
CheckValue<IkReal> x6322 = IKatan2WithCheck(IkReal(x6319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6322.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6322.value))));
IkReal gconst118=(x6319*x6320);
IkReal gconst119=((1.0)*r20*x6320);
CheckValue<IkReal> x6323 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6323.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6323.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6324=((-1.0)*r21);
CheckValue<IkReal> x6327 = IKatan2WithCheck(IkReal(x6324),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6327.valid){
continue;
}
IkReal x6325=((1.0)*(x6327.value));
IkReal x6326=x6320;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6325)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6325)));
IkReal gconst118=(x6324*x6326);
IkReal gconst119=((1.0)*r20*x6326);
IkReal x6328=r22*r22;
IkReal x6329=((1.0)*x6328);
CheckValue<IkReal> x6333=IKPowWithIntegerCheck(((-1.0)+x6328),-1);
if(!x6333.valid){
continue;
}
IkReal x6330=x6333.value;
if((((1.0)+(((-1.0)*x6329)))) < -0.00001)
continue;
IkReal x6331=IKsqrt(((1.0)+(((-1.0)*x6329))));
IkReal x6332=(cj0*x6330*x6331);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6332+(((-1.0)*x6329*x6332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6334=((-1.0)*r21);
CheckValue<IkReal> x6337 = IKatan2WithCheck(IkReal(x6334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6337.valid){
continue;
}
IkReal x6335=((1.0)*(x6337.value));
IkReal x6336=x6320;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6335)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6335)));
IkReal gconst118=(x6334*x6336);
IkReal gconst119=((1.0)*r20*x6336);
IkReal x6338=r22*r22;
IkReal x6339=((1.0)*x6338);
CheckValue<IkReal> x6343=IKPowWithIntegerCheck(((-1.0)+x6338),-1);
if(!x6343.valid){
continue;
}
IkReal x6340=x6343.value;
if((((1.0)+(((-1.0)*x6339)))) < -0.00001)
continue;
IkReal x6341=IKsqrt(((1.0)+(((-1.0)*x6339))));
IkReal x6342=(sj0*x6340*x6341);
j4eval[0]=((IKabs((x6342+(((-1.0)*x6339*x6342)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6344=((-1.0)*r21);
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal(x6344),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
IkReal x6345=((1.0)*(x6347.value));
IkReal x6346=x6320;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6345)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6345)));
IkReal gconst118=(x6344*x6346);
IkReal gconst119=((1.0)*r20*x6346);
IkReal x6348=r22*r22;
IkReal x6349=(r12*sj0);
IkReal x6350=(cj0*r02);
CheckValue<IkReal> x6354=IKPowWithIntegerCheck(((-1.0)+x6348),-1);
if(!x6354.valid){
continue;
}
IkReal x6351=x6354.value;
if((((1.0)+(((-1.0)*x6348)))) < -0.00001)
continue;
IkReal x6352=IKsqrt(((1.0)+(((-1.0)*x6348))));
IkReal x6353=(r22*x6351*x6352);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6349*x6353))+((x6350*x6353)))))+(IKabs(((((-1.0)*x6349))+(((-1.0)*x6350))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6355=((1.0)*sj0);
IkReal x6356=((1.0)*gconst118);
CheckValue<IkReal> x6357 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6355)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6355))+(((-1.0)*cj0*r01*x6356))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6357.valid){
continue;
}
CheckValue<IkReal> x6358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6356)))),-1);
if(!x6358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6357.value)+(((1.5707963267949)*(x6358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6359=IKsin(j4);
IkReal x6360=IKcos(j4);
IkReal x6361=(gconst118*r01);
IkReal x6362=(sj1*sj2);
IkReal x6363=(gconst119*r20);
IkReal x6364=(gconst119*r10);
IkReal x6365=(gconst119*r00);
IkReal x6366=(gconst118*r21);
IkReal x6367=(gconst118*r11);
IkReal x6368=((1.0)*x6360);
IkReal x6369=((1.0)*cj1*cj2);
IkReal x6370=((1.0)*x6359);
evalcond[0]=(((x6359*x6366))+(((-1.0)*r22*x6368))+(((-1.0)*x6363*x6370)));
evalcond[1]=(((x6359*x6367))+cj0+(((-1.0)*x6364*x6370))+(((-1.0)*r12*x6368)));
evalcond[2]=(((x6359*x6361))+(((-1.0)*sj0))+(((-1.0)*x6365*x6370))+(((-1.0)*r02*x6368)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6360*x6366))+((r22*x6359))+(((-1.0)*x6363*x6368)));
evalcond[4]=((((-1.0)*x6365*x6368))+((x6360*x6361))+((cj0*x6362))+((r02*x6359))+(((-1.0)*cj0*x6369)));
evalcond[5]=((((-1.0)*sj0*x6369))+((sj0*x6362))+((x6360*x6367))+((r12*x6359))+(((-1.0)*x6364*x6368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6371=((1.0)*gconst119);
CheckValue<IkReal> x6372 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6371))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6372.valid){
continue;
}
CheckValue<IkReal> x6373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6371)))),-1);
if(!x6373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6372.value)+(((1.5707963267949)*(x6373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6374=IKsin(j4);
IkReal x6375=IKcos(j4);
IkReal x6376=(gconst118*r01);
IkReal x6377=(sj1*sj2);
IkReal x6378=(gconst119*r20);
IkReal x6379=(gconst119*r10);
IkReal x6380=(gconst119*r00);
IkReal x6381=(gconst118*r21);
IkReal x6382=(gconst118*r11);
IkReal x6383=((1.0)*x6375);
IkReal x6384=((1.0)*cj1*cj2);
IkReal x6385=((1.0)*x6374);
evalcond[0]=((((-1.0)*x6378*x6385))+(((-1.0)*r22*x6383))+((x6374*x6381)));
evalcond[1]=(cj0+(((-1.0)*x6379*x6385))+(((-1.0)*r12*x6383))+((x6374*x6382)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6380*x6385))+((x6374*x6376))+(((-1.0)*r02*x6383)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6378*x6383))+((cj1*sj2))+((r22*x6374))+((x6375*x6381)));
evalcond[4]=((((-1.0)*x6380*x6383))+((x6375*x6376))+(((-1.0)*cj0*x6384))+((cj0*x6377))+((r02*x6374)));
evalcond[5]=((((-1.0)*x6379*x6383))+((r12*x6374))+((sj0*x6377))+(((-1.0)*sj0*x6384))+((x6375*x6382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6386=((1.0)*gconst119);
CheckValue<IkReal> x6387 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6387.valid){
continue;
}
CheckValue<IkReal> x6388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6386)))),-1);
if(!x6388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6387.value)+(((1.5707963267949)*(x6388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6389=IKsin(j4);
IkReal x6390=IKcos(j4);
IkReal x6391=(gconst118*r01);
IkReal x6392=(sj1*sj2);
IkReal x6393=(gconst119*r20);
IkReal x6394=(gconst119*r10);
IkReal x6395=(gconst119*r00);
IkReal x6396=(gconst118*r21);
IkReal x6397=(gconst118*r11);
IkReal x6398=((1.0)*x6390);
IkReal x6399=((1.0)*cj1*cj2);
IkReal x6400=((1.0)*x6389);
evalcond[0]=((((-1.0)*x6393*x6400))+(((-1.0)*r22*x6398))+((x6389*x6396)));
evalcond[1]=(cj0+(((-1.0)*r12*x6398))+((x6389*x6397))+(((-1.0)*x6394*x6400)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6398))+(((-1.0)*x6395*x6400))+((x6389*x6391)));
evalcond[3]=(((cj2*sj1))+((x6390*x6396))+((r22*x6389))+((cj1*sj2))+(((-1.0)*x6393*x6398)));
evalcond[4]=((((-1.0)*x6395*x6398))+((cj0*x6392))+((x6390*x6391))+(((-1.0)*cj0*x6399))+((r02*x6389)));
evalcond[5]=((((-1.0)*sj0*x6399))+((x6390*x6397))+((sj0*x6392))+(((-1.0)*x6394*x6398))+((r12*x6389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6401=((-1.0)*r10);
IkReal x6403 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6403)==0){
continue;
}
IkReal x6402=pow(x6403,-0.5);
CheckValue<IkReal> x6404 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6401),IKFAST_ATAN2_MAGTHRESH);
if(!x6404.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6404.value));
IkReal gconst121=(r11*x6402);
IkReal gconst122=(x6401*x6402);
CheckValue<IkReal> x6405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6405.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6405.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6406=((-1.0)*r10);
IkReal x6407=x6402;
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6406),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
IkReal x6408=((-1.0)*(x6409.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6408;
IkReal gconst120=x6408;
IkReal gconst121=(r11*x6407);
IkReal gconst122=(x6406*x6407);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6410=((1.0)*sj0);
IkReal x6411=((1.0)*gconst121);
CheckValue<IkReal> x6412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6411))+(((-1.0)*gconst122*r21)))),-1);
if(!x6412.valid){
continue;
}
CheckValue<IkReal> x6413 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6410)))),IkReal(((((-1.0)*cj0*r01*x6411))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6410))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6412.value)))+(x6413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6414=IKsin(j4);
IkReal x6415=IKcos(j4);
IkReal x6416=(gconst121*r11);
IkReal x6417=(sj1*sj2);
IkReal x6418=(gconst122*r00);
IkReal x6419=(gconst122*r10);
IkReal x6420=(gconst122*r20);
IkReal x6421=((1.0)*x6415);
IkReal x6422=((1.0)*cj1*cj2);
IkReal x6423=((1.0)*x6414);
IkReal x6424=(gconst121*x6414);
IkReal x6425=(gconst121*x6415);
evalcond[0]=(((r21*x6424))+(((-1.0)*r22*x6421))+(((-1.0)*x6420*x6423)));
evalcond[1]=(cj0+(((-1.0)*x6419*x6423))+((x6414*x6416))+(((-1.0)*r12*x6421)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6418*x6423))+((r01*x6424))+(((-1.0)*r02*x6421)));
evalcond[3]=(((r21*x6425))+((cj2*sj1))+((cj1*sj2))+((r22*x6414))+(((-1.0)*x6420*x6421)));
evalcond[4]=(((r02*x6414))+(((-1.0)*x6418*x6421))+(((-1.0)*cj0*x6422))+((cj0*x6417))+((r01*x6425)));
evalcond[5]=(((sj0*x6417))+(((-1.0)*x6419*x6421))+((x6415*x6416))+(((-1.0)*sj0*x6422))+((r12*x6414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6426=((1.0)*gconst122);
CheckValue<IkReal> x6427 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6426))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6427.valid){
continue;
}
CheckValue<IkReal> x6428=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6426)))),-1);
if(!x6428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6427.value)+(((1.5707963267949)*(x6428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6429=IKsin(j4);
IkReal x6430=IKcos(j4);
IkReal x6431=(gconst121*r11);
IkReal x6432=(sj1*sj2);
IkReal x6433=(gconst122*r00);
IkReal x6434=(gconst122*r10);
IkReal x6435=(gconst122*r20);
IkReal x6436=((1.0)*x6430);
IkReal x6437=((1.0)*cj1*cj2);
IkReal x6438=((1.0)*x6429);
IkReal x6439=(gconst121*x6429);
IkReal x6440=(gconst121*x6430);
evalcond[0]=((((-1.0)*x6435*x6438))+(((-1.0)*r22*x6436))+((r21*x6439)));
evalcond[1]=(((x6429*x6431))+cj0+(((-1.0)*x6434*x6438))+(((-1.0)*r12*x6436)));
evalcond[2]=(((r01*x6439))+(((-1.0)*sj0))+(((-1.0)*r02*x6436))+(((-1.0)*x6433*x6438)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6435*x6436))+((cj1*sj2))+((r21*x6440))+((r22*x6429)));
evalcond[4]=(((r01*x6440))+((cj0*x6432))+((r02*x6429))+(((-1.0)*x6433*x6436))+(((-1.0)*cj0*x6437)));
evalcond[5]=((((-1.0)*sj0*x6437))+(((-1.0)*x6434*x6436))+((r12*x6429))+((sj0*x6432))+((x6430*x6431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6441=((-1.0)*r11);
IkReal x6443 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6443)==0){
continue;
}
IkReal x6442=pow(x6443,-0.5);
CheckValue<IkReal> x6444 = IKatan2WithCheck(IkReal(x6441),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6444.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6444.value))));
IkReal gconst124=(x6441*x6442);
IkReal gconst125=((1.0)*r10*x6442);
CheckValue<IkReal> x6445 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6445.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6445.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6446=((-1.0)*r11);
CheckValue<IkReal> x6449 = IKatan2WithCheck(IkReal(x6446),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6449.valid){
continue;
}
IkReal x6447=((1.0)*(x6449.value));
IkReal x6448=x6442;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6447)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6447)));
IkReal gconst124=(x6446*x6448);
IkReal gconst125=((1.0)*r10*x6448);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6450=((-1.0)*r11);
CheckValue<IkReal> x6453 = IKatan2WithCheck(IkReal(x6450),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6453.valid){
continue;
}
IkReal x6451=((1.0)*(x6453.value));
IkReal x6452=x6442;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6451)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6451)));
IkReal gconst124=(x6450*x6452);
IkReal gconst125=((1.0)*r10*x6452);
IkReal x6454=r12*r12;
IkReal x6455=((1.0)*sj0);
IkReal x6456=(cj0*r02);
IkReal x6457=x6442;
j4eval[0]=((IKabs(((((-1.0)*x6456))+(((-1.0)*r12*x6455)))))+(IKabs((((sj0*x6454*x6457))+((r12*x6456*x6457))+(((-1.0)*x6455*x6457))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6458=((-1.0)*r11);
CheckValue<IkReal> x6461 = IKatan2WithCheck(IkReal(x6458),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6461.valid){
continue;
}
IkReal x6459=((1.0)*(x6461.value));
IkReal x6460=x6442;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6459)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6459)));
IkReal gconst124=(x6458*x6460);
IkReal gconst125=((1.0)*r10*x6460);
IkReal x6462=r12*r12;
IkReal x6463=((1.0)+(((-1.0)*x6462)));
IkReal x6464=(cj2*r22*sj1);
IkReal x6465=(cj1*r22*sj2);
CheckValue<IkReal> x6472=IKPowWithIntegerCheck(x6463,-1);
if(!x6472.valid){
continue;
}
IkReal x6466=x6472.value;
CheckValue<IkReal> x6473=IKPowWithIntegerCheck(((-1.0)+x6462),-1);
if(!x6473.valid){
continue;
}
IkReal x6467=x6473.value;
IkReal x6468=((1.0)*x6466);
if((x6463) < -0.00001)
continue;
IkReal x6469=IKsqrt(x6463);
IkReal x6470=((1.0)*r12*x6467*x6469);
IkReal x6471=((((-1.0)*x6468*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6468*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6466)));
j4eval[0]=x6471;
j4eval[1]=IKsign(x6471);
j4eval[2]=((IKabs(((((-1.0)*x6465*x6470))+(((-1.0)*x6464*x6470)))))+(IKabs((x6464+x6465))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6474=(gconst124*r21);
IkReal x6475=(cj1*sj2);
IkReal x6476=(cj2*sj1);
IkReal x6477=(gconst125*r20);
CheckValue<IkReal> x6478 = IKatan2WithCheck(IkReal((((r22*x6476))+((r22*x6475)))),IkReal(((((-1.0)*x6476*x6477))+((x6474*x6476))+((x6474*x6475))+(((-1.0)*x6475*x6477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6478.valid){
continue;
}
CheckValue<IkReal> x6479=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6474*x6474)))+(((-1.0)*(r22*r22)))+(((2.0)*x6474*x6477))+(((-1.0)*(x6477*x6477))))),-1);
if(!x6479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6478.value)+(((1.5707963267949)*(x6479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6480=IKsin(j4);
IkReal x6481=IKcos(j4);
IkReal x6482=(sj1*sj2);
IkReal x6483=(gconst125*r20);
IkReal x6484=(gconst124*r01);
IkReal x6485=(gconst125*r00);
IkReal x6486=(gconst125*r10);
IkReal x6487=((1.0)*x6481);
IkReal x6488=((1.0)*cj1*cj2);
IkReal x6489=((1.0)*x6480);
IkReal x6490=(gconst124*x6480);
IkReal x6491=(gconst124*x6481);
evalcond[0]=((((-1.0)*r22*x6487))+(((-1.0)*x6483*x6489))+((r21*x6490)));
evalcond[1]=(cj0+(((-1.0)*r12*x6487))+((r11*x6490))+(((-1.0)*x6486*x6489)));
evalcond[2]=((((-1.0)*x6485*x6489))+(((-1.0)*sj0))+(((-1.0)*r02*x6487))+((x6480*x6484)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6483*x6487))+((r22*x6480))+((r21*x6491)));
evalcond[4]=((((-1.0)*x6485*x6487))+((cj0*x6482))+((r02*x6480))+(((-1.0)*cj0*x6488))+((x6481*x6484)));
evalcond[5]=(((r11*x6491))+(((-1.0)*x6486*x6487))+((r12*x6480))+(((-1.0)*sj0*x6488))+((sj0*x6482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6492=((1.0)*sj0);
IkReal x6493=((1.0)*cj0);
CheckValue<IkReal> x6494 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6493))+(((-1.0)*r12*x6492)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6492))+(((-1.0)*gconst124*r01*x6493))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6494.valid){
continue;
}
CheckValue<IkReal> x6495=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6494.value)+(((1.5707963267949)*(x6495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6496=IKsin(j4);
IkReal x6497=IKcos(j4);
IkReal x6498=(sj1*sj2);
IkReal x6499=(gconst125*r20);
IkReal x6500=(gconst124*r01);
IkReal x6501=(gconst125*r00);
IkReal x6502=(gconst125*r10);
IkReal x6503=((1.0)*x6497);
IkReal x6504=((1.0)*cj1*cj2);
IkReal x6505=((1.0)*x6496);
IkReal x6506=(gconst124*x6496);
IkReal x6507=(gconst124*x6497);
evalcond[0]=(((r21*x6506))+(((-1.0)*r22*x6503))+(((-1.0)*x6499*x6505)));
evalcond[1]=((((-1.0)*r12*x6503))+cj0+(((-1.0)*x6502*x6505))+((r11*x6506)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6501*x6505))+(((-1.0)*r02*x6503))+((x6496*x6500)));
evalcond[3]=(((cj2*sj1))+((r21*x6507))+((cj1*sj2))+(((-1.0)*x6499*x6503))+((r22*x6496)));
evalcond[4]=((((-1.0)*x6501*x6503))+((cj0*x6498))+((r02*x6496))+(((-1.0)*cj0*x6504))+((x6497*x6500)));
evalcond[5]=(((r12*x6496))+(((-1.0)*sj0*x6504))+(((-1.0)*x6502*x6503))+((sj0*x6498))+((r11*x6507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6508=((1.0)*gconst125);
CheckValue<IkReal> x6509 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6508))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6509.valid){
continue;
}
CheckValue<IkReal> x6510=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6508)))),-1);
if(!x6510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6509.value)+(((1.5707963267949)*(x6510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6511=IKsin(j4);
IkReal x6512=IKcos(j4);
IkReal x6513=(sj1*sj2);
IkReal x6514=(gconst125*r20);
IkReal x6515=(gconst124*r01);
IkReal x6516=(gconst125*r00);
IkReal x6517=(gconst125*r10);
IkReal x6518=((1.0)*x6512);
IkReal x6519=((1.0)*cj1*cj2);
IkReal x6520=((1.0)*x6511);
IkReal x6521=(gconst124*x6511);
IkReal x6522=(gconst124*x6512);
evalcond[0]=((((-1.0)*r22*x6518))+(((-1.0)*x6514*x6520))+((r21*x6521)));
evalcond[1]=(cj0+(((-1.0)*x6517*x6520))+(((-1.0)*r12*x6518))+((r11*x6521)));
evalcond[2]=((((-1.0)*r02*x6518))+(((-1.0)*sj0))+((x6511*x6515))+(((-1.0)*x6516*x6520)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6514*x6518))+((cj1*sj2))+((r21*x6522))+((r22*x6511)));
evalcond[4]=((((-1.0)*cj0*x6519))+(((-1.0)*x6516*x6518))+((cj0*x6513))+((x6512*x6515))+((r02*x6511)));
evalcond[5]=((((-1.0)*x6517*x6518))+((r12*x6511))+((sj0*x6513))+((r11*x6522))+(((-1.0)*sj0*x6519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6523=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6523;
j4eval[1]=IKsign(x6523);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6524=((1.0)*cj5);
IkReal x6525=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6524)));
j4eval[0]=x6525;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6524))))));
j4eval[2]=IKsign(x6525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6526=cj5*cj5;
IkReal x6527=r11*r11;
IkReal x6528=(cj5*r10);
IkReal x6529=(r11*sj5);
IkReal x6530=((((2.0)*x6528*x6529))+(((-1.0)*x6527))+(((-1.0)*(r12*r12)))+(((-1.0)*x6526*(r10*r10)))+((x6526*x6527)));
j4eval[0]=x6530;
j4eval[1]=IKsign(x6530);
j4eval[2]=((IKabs(r12))+(IKabs((x6529+(((-1.0)*x6528))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6531=cj5*cj5;
IkReal x6532=r11*r11;
IkReal x6533=(cj5*r10);
IkReal x6534=(r11*sj5);
CheckValue<IkReal> x6535 = IKatan2WithCheck(IkReal((x6534+(((-1.0)*x6533)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6535.valid){
continue;
}
CheckValue<IkReal> x6536=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6532))+((x6531*x6532))+(((2.0)*x6533*x6534))+(((-1.0)*(r12*r12)))+(((-1.0)*x6531*(r10*r10))))),-1);
if(!x6536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6535.value)+(((1.5707963267949)*(x6536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6537=IKcos(j4);
IkReal x6538=IKsin(j4);
IkReal x6539=(cj5*r00);
IkReal x6540=(cj5*r10);
IkReal x6541=(r21*sj5);
IkReal x6542=(cj5*r20);
IkReal x6543=((1.0)*x6537);
IkReal x6544=((1.0)*x6538);
IkReal x6545=(sj5*x6538);
IkReal x6546=(sj5*x6537);
evalcond[0]=((((-1.0)*x6540*x6543))+((r11*x6546))+((r12*x6538)));
evalcond[1]=(((x6538*x6541))+(((-1.0)*r22*x6543))+(((-1.0)*x6542*x6544)));
evalcond[2]=((((-1.0)*x6539*x6544))+(((-1.0)*r02*x6543))+((r01*x6545)));
evalcond[3]=((1.0)+(((-1.0)*x6540*x6544))+(((-1.0)*r12*x6543))+((r11*x6545)));
evalcond[4]=(((cj2*sj1))+((x6537*x6541))+((cj1*sj2))+(((-1.0)*x6542*x6543))+((r22*x6538)));
evalcond[5]=(((r02*x6538))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6539*x6543))+((r01*x6546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6547=((1.0)*cj5);
CheckValue<IkReal> x6548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6547)))),-1);
if(!x6548.valid){
continue;
}
CheckValue<IkReal> x6549 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6548.value)))+(x6549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6550=IKcos(j4);
IkReal x6551=IKsin(j4);
IkReal x6552=(cj5*r00);
IkReal x6553=(cj5*r10);
IkReal x6554=(r21*sj5);
IkReal x6555=(cj5*r20);
IkReal x6556=((1.0)*x6550);
IkReal x6557=((1.0)*x6551);
IkReal x6558=(sj5*x6551);
IkReal x6559=(sj5*x6550);
evalcond[0]=((((-1.0)*x6553*x6556))+((r11*x6559))+((r12*x6551)));
evalcond[1]=(((x6551*x6554))+(((-1.0)*r22*x6556))+(((-1.0)*x6555*x6557)));
evalcond[2]=((((-1.0)*x6552*x6557))+(((-1.0)*r02*x6556))+((r01*x6558)));
evalcond[3]=((1.0)+(((-1.0)*x6553*x6557))+(((-1.0)*r12*x6556))+((r11*x6558)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6555*x6556))+((x6550*x6554))+((cj1*sj2))+((r22*x6551)));
evalcond[5]=((((-1.0)*x6552*x6556))+((r02*x6551))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6560=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6560.valid){
continue;
}
CheckValue<IkReal> x6561 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6560.value)))+(x6561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6562=IKcos(j4);
IkReal x6563=IKsin(j4);
IkReal x6564=(cj5*r00);
IkReal x6565=(cj5*r10);
IkReal x6566=(r21*sj5);
IkReal x6567=(cj5*r20);
IkReal x6568=((1.0)*x6562);
IkReal x6569=((1.0)*x6563);
IkReal x6570=(sj5*x6563);
IkReal x6571=(sj5*x6562);
evalcond[0]=((((-1.0)*x6565*x6568))+((r12*x6563))+((r11*x6571)));
evalcond[1]=(((x6563*x6566))+(((-1.0)*x6567*x6569))+(((-1.0)*r22*x6568)));
evalcond[2]=(((r01*x6570))+(((-1.0)*r02*x6568))+(((-1.0)*x6564*x6569)));
evalcond[3]=((1.0)+(((-1.0)*x6565*x6569))+((r11*x6570))+(((-1.0)*r12*x6568)));
evalcond[4]=(((cj2*sj1))+((r22*x6563))+(((-1.0)*x6567*x6568))+((x6562*x6566))+((cj1*sj2)));
evalcond[5]=(((r01*x6571))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6563))+(((-1.0)*x6564*x6568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6572=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6572;
j4eval[1]=IKsign(x6572);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6573=((1.0)*cj5);
IkReal x6574=((((-1.0)*r21*x6573))+(((-1.0)*r20*sj5)));
j4eval[0]=x6574;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6573))))));
j4eval[2]=IKsign(x6574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6575=cj5*cj5;
IkReal x6576=r11*r11;
IkReal x6577=(r11*sj5);
IkReal x6578=(cj5*r10);
IkReal x6579=((r12*r12)+(((-2.0)*x6577*x6578))+x6576+(((-1.0)*x6575*x6576))+((x6575*(r10*r10))));
j4eval[0]=x6579;
j4eval[1]=IKsign(x6579);
j4eval[2]=((IKabs(r12))+(IKabs((x6577+(((-1.0)*x6578))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6580=cj5*cj5;
IkReal x6581=r11*r11;
IkReal x6582=(cj5*r10);
IkReal x6583=(r11*sj5);
CheckValue<IkReal> x6584 = IKatan2WithCheck(IkReal(((((-1.0)*x6582))+x6583)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6584.valid){
continue;
}
CheckValue<IkReal> x6585=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x6582*x6583))+x6581+(((-1.0)*x6580*x6581))+((x6580*(r10*r10))))),-1);
if(!x6585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6584.value)+(((1.5707963267949)*(x6585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6586=IKcos(j4);
IkReal x6587=IKsin(j4);
IkReal x6588=(cj5*r00);
IkReal x6589=(cj5*r10);
IkReal x6590=(r21*sj5);
IkReal x6591=(cj5*r20);
IkReal x6592=((1.0)*x6586);
IkReal x6593=((1.0)*x6587);
IkReal x6594=(sj5*x6587);
IkReal x6595=(sj5*x6586);
evalcond[0]=(((r11*x6595))+(((-1.0)*x6589*x6592))+((r12*x6587)));
evalcond[1]=((((-1.0)*x6591*x6593))+((x6587*x6590))+(((-1.0)*r22*x6592)));
evalcond[2]=((((-1.0)*r02*x6592))+((r01*x6594))+(((-1.0)*x6588*x6593)));
evalcond[3]=((-1.0)+((r11*x6594))+(((-1.0)*x6589*x6593))+(((-1.0)*r12*x6592)));
evalcond[4]=(((cj2*sj1))+((r22*x6587))+((cj1*sj2))+(((-1.0)*x6591*x6592))+((x6586*x6590)));
evalcond[5]=(((r02*x6587))+(((-1.0)*sj1*sj2))+((r01*x6595))+(((-1.0)*x6588*x6592))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6596=((1.0)*cj5);
CheckValue<IkReal> x6597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6596))+(((-1.0)*r20*sj5)))),-1);
if(!x6597.valid){
continue;
}
CheckValue<IkReal> x6598 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6596))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6597.value)))+(x6598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6599=IKcos(j4);
IkReal x6600=IKsin(j4);
IkReal x6601=(cj5*r00);
IkReal x6602=(cj5*r10);
IkReal x6603=(r21*sj5);
IkReal x6604=(cj5*r20);
IkReal x6605=((1.0)*x6599);
IkReal x6606=((1.0)*x6600);
IkReal x6607=(sj5*x6600);
IkReal x6608=(sj5*x6599);
evalcond[0]=((((-1.0)*x6602*x6605))+((r11*x6608))+((r12*x6600)));
evalcond[1]=((((-1.0)*r22*x6605))+(((-1.0)*x6604*x6606))+((x6600*x6603)));
evalcond[2]=(((r01*x6607))+(((-1.0)*x6601*x6606))+(((-1.0)*r02*x6605)));
evalcond[3]=((-1.0)+(((-1.0)*x6602*x6606))+(((-1.0)*r12*x6605))+((r11*x6607)));
evalcond[4]=(((cj2*sj1))+((r22*x6600))+((x6599*x6603))+((cj1*sj2))+(((-1.0)*x6604*x6605)));
evalcond[5]=(((r01*x6608))+(((-1.0)*x6601*x6605))+(((-1.0)*sj1*sj2))+((r02*x6600))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6609 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6609.valid){
continue;
}
CheckValue<IkReal> x6610=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6609.value)+(((1.5707963267949)*(x6610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6611=IKcos(j4);
IkReal x6612=IKsin(j4);
IkReal x6613=(cj5*r00);
IkReal x6614=(cj5*r10);
IkReal x6615=(r21*sj5);
IkReal x6616=(cj5*r20);
IkReal x6617=((1.0)*x6611);
IkReal x6618=((1.0)*x6612);
IkReal x6619=(sj5*x6612);
IkReal x6620=(sj5*x6611);
evalcond[0]=((((-1.0)*x6614*x6617))+((r12*x6612))+((r11*x6620)));
evalcond[1]=(((x6612*x6615))+(((-1.0)*r22*x6617))+(((-1.0)*x6616*x6618)));
evalcond[2]=((((-1.0)*x6613*x6618))+((r01*x6619))+(((-1.0)*r02*x6617)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6617))+(((-1.0)*x6614*x6618))+((r11*x6619)));
evalcond[4]=(((cj2*sj1))+((x6611*x6615))+((cj1*sj2))+(((-1.0)*x6616*x6617))+((r22*x6612)));
evalcond[5]=((((-1.0)*x6613*x6617))+((r02*x6612))+((r01*x6620))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6621=((-1.0)*r00);
IkReal x6623 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6623)==0){
continue;
}
IkReal x6622=pow(x6623,-0.5);
CheckValue<IkReal> x6624 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6621),IKFAST_ATAN2_MAGTHRESH);
if(!x6624.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6624.value));
IkReal gconst127=(r01*x6622);
IkReal gconst128=(x6621*x6622);
CheckValue<IkReal> x6625 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6625.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6625.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6626=((-1.0)*r00);
IkReal x6627=x6622;
CheckValue<IkReal> x6629 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6626),IKFAST_ATAN2_MAGTHRESH);
if(!x6629.valid){
continue;
}
IkReal x6628=((-1.0)*(x6629.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6628;
IkReal gconst126=x6628;
IkReal gconst127=(r01*x6627);
IkReal gconst128=(x6626*x6627);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6630=((1.0)*sj0);
IkReal x6631=((1.0)*gconst127);
CheckValue<IkReal> x6632=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6631)))),-1);
if(!x6632.valid){
continue;
}
CheckValue<IkReal> x6633 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6630)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6630))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6632.value)))+(x6633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6634=IKsin(j4);
IkReal x6635=IKcos(j4);
IkReal x6636=(gconst127*r01);
IkReal x6637=(sj1*sj2);
IkReal x6638=(gconst128*r10);
IkReal x6639=(gconst128*r00);
IkReal x6640=(gconst128*r20);
IkReal x6641=((1.0)*x6635);
IkReal x6642=((1.0)*cj1*cj2);
IkReal x6643=((1.0)*x6634);
IkReal x6644=(gconst127*x6635);
IkReal x6645=(gconst127*x6634);
evalcond[0]=((((-1.0)*r22*x6641))+(((-1.0)*x6640*x6643))+((r21*x6645)));
evalcond[1]=((((-1.0)*x6638*x6643))+cj0+((r11*x6645))+(((-1.0)*r12*x6641)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6639*x6643))+(((-1.0)*r02*x6641))+((x6634*x6636)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6640*x6641))+((r21*x6644))+((cj1*sj2))+((r22*x6634)));
evalcond[4]=((((-1.0)*x6639*x6641))+((x6635*x6636))+(((-1.0)*cj0*x6642))+((cj0*x6637))+((r02*x6634)));
evalcond[5]=((((-1.0)*x6638*x6641))+((r11*x6644))+((r12*x6634))+(((-1.0)*sj0*x6642))+((sj0*x6637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6646=((1.0)*gconst128);
CheckValue<IkReal> x6647 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6647.valid){
continue;
}
CheckValue<IkReal> x6648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6646))+(((-1.0)*gconst127*r10)))),-1);
if(!x6648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6647.value)+(((1.5707963267949)*(x6648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6649=IKsin(j4);
IkReal x6650=IKcos(j4);
IkReal x6651=(gconst127*r01);
IkReal x6652=(sj1*sj2);
IkReal x6653=(gconst128*r10);
IkReal x6654=(gconst128*r00);
IkReal x6655=(gconst128*r20);
IkReal x6656=((1.0)*x6650);
IkReal x6657=((1.0)*cj1*cj2);
IkReal x6658=((1.0)*x6649);
IkReal x6659=(gconst127*x6650);
IkReal x6660=(gconst127*x6649);
evalcond[0]=((((-1.0)*r22*x6656))+(((-1.0)*x6655*x6658))+((r21*x6660)));
evalcond[1]=((((-1.0)*x6653*x6658))+cj0+(((-1.0)*r12*x6656))+((r11*x6660)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6654*x6658))+(((-1.0)*r02*x6656))+((x6649*x6651)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6649))+(((-1.0)*x6655*x6656))+((r21*x6659)));
evalcond[4]=((((-1.0)*x6654*x6656))+(((-1.0)*cj0*x6657))+((r02*x6649))+((cj0*x6652))+((x6650*x6651)));
evalcond[5]=((((-1.0)*x6653*x6656))+((r11*x6659))+(((-1.0)*sj0*x6657))+((sj0*x6652))+((r12*x6649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6661=((-1.0)*r01);
IkReal x6663 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6663)==0){
continue;
}
IkReal x6662=pow(x6663,-0.5);
CheckValue<IkReal> x6664 = IKatan2WithCheck(IkReal(x6661),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6664.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6664.value))));
IkReal gconst130=(x6661*x6662);
IkReal gconst131=((1.0)*r00*x6662);
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6665.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6666=((-1.0)*r01);
CheckValue<IkReal> x6669 = IKatan2WithCheck(IkReal(x6666),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6669.valid){
continue;
}
IkReal x6667=((1.0)*(x6669.value));
IkReal x6668=x6662;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6667)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6667)));
IkReal gconst130=(x6666*x6668);
IkReal gconst131=((1.0)*r00*x6668);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6670=((-1.0)*r01);
CheckValue<IkReal> x6673 = IKatan2WithCheck(IkReal(x6670),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6673.valid){
continue;
}
IkReal x6671=((1.0)*(x6673.value));
IkReal x6672=x6662;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6671)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6671)));
IkReal gconst130=(x6670*x6672);
IkReal gconst131=((1.0)*r00*x6672);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6674=((-1.0)*r01);
CheckValue<IkReal> x6677 = IKatan2WithCheck(IkReal(x6674),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6677.valid){
continue;
}
IkReal x6675=((1.0)*(x6677.value));
IkReal x6676=x6662;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6675)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6675)));
IkReal gconst130=(x6674*x6676);
IkReal gconst131=((1.0)*r00*x6676);
IkReal x6678=r02*r02;
IkReal x6679=(r12*sj0);
IkReal x6680=((1.0)*cj0);
IkReal x6681=x6662;
j4eval[0]=((IKabs(((((-1.0)*x6680*x6681))+((r02*x6679*x6681))+((cj0*x6678*x6681)))))+(IKabs(((((-1.0)*r02*x6680))+(((-1.0)*x6679))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6682=((1.0)*sj0);
IkReal x6683=((1.0)*gconst130);
CheckValue<IkReal> x6684 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6682)))),IkReal(((((-1.0)*gconst130*r11*x6682))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6683))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6684.valid){
continue;
}
CheckValue<IkReal> x6685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6683))+(((-1.0)*gconst131*r21)))),-1);
if(!x6685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6684.value)+(((1.5707963267949)*(x6685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6686=IKsin(j4);
IkReal x6687=IKcos(j4);
IkReal x6688=(gconst131*r10);
IkReal x6689=(sj1*sj2);
IkReal x6690=(gconst131*r20);
IkReal x6691=(gconst131*r00);
IkReal x6692=((1.0)*x6687);
IkReal x6693=((1.0)*cj1*cj2);
IkReal x6694=(gconst130*x6686);
IkReal x6695=((1.0)*x6686);
IkReal x6696=(gconst130*x6687);
evalcond[0]=((((-1.0)*x6690*x6695))+((r21*x6694))+(((-1.0)*r22*x6692)));
evalcond[1]=(((r11*x6694))+cj0+(((-1.0)*x6688*x6695))+(((-1.0)*r12*x6692)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6692))+((r01*x6694))+(((-1.0)*x6691*x6695)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6686))+(((-1.0)*x6690*x6692))+((r21*x6696)));
evalcond[4]=(((r02*x6686))+(((-1.0)*cj0*x6693))+((r01*x6696))+(((-1.0)*x6691*x6692))+((cj0*x6689)));
evalcond[5]=(((r12*x6686))+((r11*x6696))+((sj0*x6689))+(((-1.0)*x6688*x6692))+(((-1.0)*sj0*x6693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6697=((1.0)*gconst131);
CheckValue<IkReal> x6698 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6697))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6698.valid){
continue;
}
CheckValue<IkReal> x6699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6697)))),-1);
if(!x6699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6698.value)+(((1.5707963267949)*(x6699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6700=IKsin(j4);
IkReal x6701=IKcos(j4);
IkReal x6702=(gconst131*r10);
IkReal x6703=(sj1*sj2);
IkReal x6704=(gconst131*r20);
IkReal x6705=(gconst131*r00);
IkReal x6706=((1.0)*x6701);
IkReal x6707=((1.0)*cj1*cj2);
IkReal x6708=(gconst130*x6700);
IkReal x6709=((1.0)*x6700);
IkReal x6710=(gconst130*x6701);
evalcond[0]=(((r21*x6708))+(((-1.0)*r22*x6706))+(((-1.0)*x6704*x6709)));
evalcond[1]=(cj0+(((-1.0)*x6702*x6709))+((r11*x6708))+(((-1.0)*r12*x6706)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6705*x6709))+(((-1.0)*r02*x6706))+((r01*x6708)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6710))+(((-1.0)*x6704*x6706))+((r22*x6700)));
evalcond[4]=((((-1.0)*cj0*x6707))+(((-1.0)*x6705*x6706))+((cj0*x6703))+((r01*x6710))+((r02*x6700)));
evalcond[5]=(((r11*x6710))+(((-1.0)*x6702*x6706))+((sj0*x6703))+((r12*x6700))+(((-1.0)*sj0*x6707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6711=((1.0)*gconst131);
CheckValue<IkReal> x6712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6711))+(((-1.0)*gconst130*r00)))),-1);
if(!x6712.valid){
continue;
}
CheckValue<IkReal> x6713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6711))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6712.value)))+(x6713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6714=IKsin(j4);
IkReal x6715=IKcos(j4);
IkReal x6716=(gconst131*r10);
IkReal x6717=(sj1*sj2);
IkReal x6718=(gconst131*r20);
IkReal x6719=(gconst131*r00);
IkReal x6720=((1.0)*x6715);
IkReal x6721=((1.0)*cj1*cj2);
IkReal x6722=(gconst130*x6714);
IkReal x6723=((1.0)*x6714);
IkReal x6724=(gconst130*x6715);
evalcond[0]=((((-1.0)*r22*x6720))+(((-1.0)*x6718*x6723))+((r21*x6722)));
evalcond[1]=(((r11*x6722))+cj0+(((-1.0)*r12*x6720))+(((-1.0)*x6716*x6723)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6719*x6723))+(((-1.0)*r02*x6720))+((r01*x6722)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6718*x6720))+((cj1*sj2))+((r22*x6714))+((r21*x6724)));
evalcond[4]=(((cj0*x6717))+(((-1.0)*x6719*x6720))+((r02*x6714))+(((-1.0)*cj0*x6721))+((r01*x6724)));
evalcond[5]=(((r11*x6724))+(((-1.0)*sj0*x6721))+(((-1.0)*x6716*x6720))+((sj0*x6717))+((r12*x6714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6725=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6725;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6726=((1.0)*cj5);
IkReal x6727=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6726)));
j4eval[0]=x6727;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6726))+((r21*sj5))))));
j4eval[2]=IKsign(x6727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6728=cj5*cj5;
IkReal x6729=r01*r01;
IkReal x6730=(cj5*r00);
IkReal x6731=(r01*sj5);
IkReal x6732=((((-2.0)*x6730*x6731))+x6729+(((-1.0)*x6728*x6729))+((x6728*(r00*r00)))+(r02*r02));
j4eval[0]=x6732;
j4eval[1]=IKsign(x6732);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6730))+x6731))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6733=cj5*cj5;
IkReal x6734=r01*r01;
IkReal x6735=(r01*sj5);
IkReal x6736=(cj5*r00);
CheckValue<IkReal> x6737=IKPowWithIntegerCheck(IKsign((((x6733*(r00*r00)))+x6734+(((-2.0)*x6735*x6736))+(r02*r02)+(((-1.0)*x6733*x6734)))),-1);
if(!x6737.valid){
continue;
}
CheckValue<IkReal> x6738 = IKatan2WithCheck(IkReal(((((-1.0)*x6736))+x6735)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6737.value)))+(x6738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6739=IKcos(j4);
IkReal x6740=IKsin(j4);
IkReal x6741=(cj5*r00);
IkReal x6742=(cj5*r10);
IkReal x6743=(r21*sj5);
IkReal x6744=(cj5*r20);
IkReal x6745=((1.0)*x6739);
IkReal x6746=((1.0)*x6740);
IkReal x6747=(sj5*x6740);
IkReal x6748=(sj5*x6739);
evalcond[0]=(((r02*x6740))+((r01*x6748))+(((-1.0)*x6741*x6745)));
evalcond[1]=((((-1.0)*x6744*x6746))+(((-1.0)*r22*x6745))+((x6740*x6743)));
evalcond[2]=((((-1.0)*x6742*x6746))+(((-1.0)*r12*x6745))+((r11*x6747)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6745))+((r01*x6747))+(((-1.0)*x6741*x6746)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6744*x6745))+((cj1*sj2))+((x6739*x6743))+((r22*x6740)));
evalcond[5]=((((-1.0)*x6742*x6745))+((r11*x6748))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6749=((1.0)*cj5);
CheckValue<IkReal> x6750=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6749))+(((-1.0)*r10*sj5)))),-1);
if(!x6750.valid){
continue;
}
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6750.value)))+(x6751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6752=IKcos(j4);
IkReal x6753=IKsin(j4);
IkReal x6754=(cj5*r00);
IkReal x6755=(cj5*r10);
IkReal x6756=(r21*sj5);
IkReal x6757=(cj5*r20);
IkReal x6758=((1.0)*x6752);
IkReal x6759=((1.0)*x6753);
IkReal x6760=(sj5*x6753);
IkReal x6761=(sj5*x6752);
evalcond[0]=(((r01*x6761))+((r02*x6753))+(((-1.0)*x6754*x6758)));
evalcond[1]=((((-1.0)*r22*x6758))+((x6753*x6756))+(((-1.0)*x6757*x6759)));
evalcond[2]=((((-1.0)*x6755*x6759))+((r11*x6760))+(((-1.0)*r12*x6758)));
evalcond[3]=((-1.0)+((r01*x6760))+(((-1.0)*r02*x6758))+(((-1.0)*x6754*x6759)));
evalcond[4]=(((cj2*sj1))+((r22*x6753))+((cj1*sj2))+((x6752*x6756))+(((-1.0)*x6757*x6758)));
evalcond[5]=((((-1.0)*x6755*x6758))+((r12*x6753))+(((-1.0)*cj1*cj2))+((r11*x6761))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6762=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6762.valid){
continue;
}
CheckValue<IkReal> x6763 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6762.value)))+(x6763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6764=IKcos(j4);
IkReal x6765=IKsin(j4);
IkReal x6766=(cj5*r00);
IkReal x6767=(cj5*r10);
IkReal x6768=(r21*sj5);
IkReal x6769=(cj5*r20);
IkReal x6770=((1.0)*x6764);
IkReal x6771=((1.0)*x6765);
IkReal x6772=(sj5*x6765);
IkReal x6773=(sj5*x6764);
evalcond[0]=((((-1.0)*x6766*x6770))+((r02*x6765))+((r01*x6773)));
evalcond[1]=((((-1.0)*r22*x6770))+((x6765*x6768))+(((-1.0)*x6769*x6771)));
evalcond[2]=(((r11*x6772))+(((-1.0)*r12*x6770))+(((-1.0)*x6767*x6771)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6770))+(((-1.0)*x6766*x6771))+((r01*x6772)));
evalcond[4]=(((cj2*sj1))+((r22*x6765))+(((-1.0)*x6769*x6770))+((cj1*sj2))+((x6764*x6768)));
evalcond[5]=(((r11*x6773))+((r12*x6765))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6767*x6770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6774=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6774;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6775=((1.0)*cj5);
IkReal x6776=((((-1.0)*r21*x6775))+(((-1.0)*r20*sj5)));
j4eval[0]=x6776;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6775))))));
j4eval[2]=IKsign(x6776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6777=(r01*sj5);
IkReal x6778=(cj1*sj2);
IkReal x6779=(cj2*sj1);
IkReal x6780=((1.0)*r02);
IkReal x6781=((1.0)*cj5*r00);
IkReal x6782=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6782;
j4eval[1]=((IKabs((((x6777*x6779))+((x6777*x6778))+(((-1.0)*x6778*x6781))+(((-1.0)*x6779*x6781)))))+(IKabs(((((-1.0)*x6778*x6780))+(((-1.0)*x6779*x6780))))));
j4eval[2]=IKsign(x6782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6783=(r01*sj5);
IkReal x6784=(cj1*sj2);
IkReal x6785=(cj2*sj1);
IkReal x6786=((1.0)*r02);
IkReal x6787=((1.0)*cj5*r00);
CheckValue<IkReal> x6788 = IKatan2WithCheck(IkReal(((((-1.0)*x6784*x6787))+(((-1.0)*x6785*x6787))+((x6783*x6784))+((x6783*x6785)))),IkReal(((((-1.0)*x6784*x6786))+(((-1.0)*x6785*x6786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6788.valid){
continue;
}
CheckValue<IkReal> x6789=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6788.value)+(((1.5707963267949)*(x6789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6790=IKcos(j4);
IkReal x6791=IKsin(j4);
IkReal x6792=(cj5*r00);
IkReal x6793=(cj5*r10);
IkReal x6794=(r21*sj5);
IkReal x6795=(cj5*r20);
IkReal x6796=((1.0)*x6790);
IkReal x6797=((1.0)*x6791);
IkReal x6798=(sj5*x6791);
IkReal x6799=(sj5*x6790);
evalcond[0]=(((r02*x6791))+(((-1.0)*x6792*x6796))+((r01*x6799)));
evalcond[1]=((((-1.0)*x6795*x6797))+(((-1.0)*r22*x6796))+((x6791*x6794)));
evalcond[2]=((((-1.0)*x6793*x6797))+((r11*x6798))+(((-1.0)*r12*x6796)));
evalcond[3]=((1.0)+(((-1.0)*x6792*x6797))+((r01*x6798))+(((-1.0)*r02*x6796)));
evalcond[4]=(((cj2*sj1))+((r22*x6791))+((cj1*sj2))+(((-1.0)*x6795*x6796))+((x6790*x6794)));
evalcond[5]=((((-1.0)*x6793*x6796))+(((-1.0)*sj1*sj2))+((r12*x6791))+((r11*x6799))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6800=((1.0)*cj5);
CheckValue<IkReal> x6801 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6801.valid){
continue;
}
CheckValue<IkReal> x6802=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6800))+(((-1.0)*r20*sj5)))),-1);
if(!x6802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6801.value)+(((1.5707963267949)*(x6802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6803=IKcos(j4);
IkReal x6804=IKsin(j4);
IkReal x6805=(cj5*r00);
IkReal x6806=(cj5*r10);
IkReal x6807=(r21*sj5);
IkReal x6808=(cj5*r20);
IkReal x6809=((1.0)*x6803);
IkReal x6810=((1.0)*x6804);
IkReal x6811=(sj5*x6804);
IkReal x6812=(sj5*x6803);
evalcond[0]=((((-1.0)*x6805*x6809))+((r01*x6812))+((r02*x6804)));
evalcond[1]=((((-1.0)*x6808*x6810))+(((-1.0)*r22*x6809))+((x6804*x6807)));
evalcond[2]=(((r11*x6811))+(((-1.0)*r12*x6809))+(((-1.0)*x6806*x6810)));
evalcond[3]=((1.0)+(((-1.0)*x6805*x6810))+(((-1.0)*r02*x6809))+((r01*x6811)));
evalcond[4]=(((cj2*sj1))+((r22*x6804))+((cj1*sj2))+((x6803*x6807))+(((-1.0)*x6808*x6809)));
evalcond[5]=(((r11*x6812))+(((-1.0)*sj1*sj2))+((r12*x6804))+((cj1*cj2))+(((-1.0)*x6806*x6809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6813 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6813.valid){
continue;
}
CheckValue<IkReal> x6814=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6813.value)+(((1.5707963267949)*(x6814.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6815=IKcos(j4);
IkReal x6816=IKsin(j4);
IkReal x6817=(cj5*r00);
IkReal x6818=(cj5*r10);
IkReal x6819=(r21*sj5);
IkReal x6820=(cj5*r20);
IkReal x6821=((1.0)*x6815);
IkReal x6822=((1.0)*x6816);
IkReal x6823=(sj5*x6816);
IkReal x6824=(sj5*x6815);
evalcond[0]=((((-1.0)*x6817*x6821))+((r01*x6824))+((r02*x6816)));
evalcond[1]=((((-1.0)*r22*x6821))+(((-1.0)*x6820*x6822))+((x6816*x6819)));
evalcond[2]=((((-1.0)*x6818*x6822))+(((-1.0)*r12*x6821))+((r11*x6823)));
evalcond[3]=((1.0)+(((-1.0)*x6817*x6822))+(((-1.0)*r02*x6821))+((r01*x6823)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6815*x6819))+((r22*x6816))+(((-1.0)*x6820*x6821)));
evalcond[5]=(((r12*x6816))+(((-1.0)*x6818*x6821))+(((-1.0)*sj1*sj2))+((r11*x6824))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6825=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6825);
rxp1_1=(px*r21);
rxp1_2=(r11*x6825);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6826=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6826);
rxp1_1=(px*r21);
rxp1_2=(r11*x6826);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6827=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6827);
rxp1_1=(px*r21);
rxp1_2=(r11*x6827);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6830=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6830.valid){
continue;
}
IkReal x6828=x6830.value;
IkReal x6829=(sj0*x6828);
cj4array[0]=(((cj1*cj2*x6829))+(((-1.0)*sj1*sj2*x6829)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6831=IKsin(j4);
IkReal x6832=IKcos(j4);
IkReal x6833=(r21*sj5);
IkReal x6834=((1.0)*cj5*r20);
evalcond[0]=(r02*x6831);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6832)));
evalcond[2]=(((x6831*x6833))+(((-1.0)*x6831*x6834)));
evalcond[3]=((((-1.0)*cj5*r10*x6831))+((r11*sj5*x6831)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6832*x6833))+(((-1.0)*x6832*x6834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6837=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6837.valid){
continue;
}
IkReal x6835=x6837.value;
IkReal x6836=((1.0)*x6835);
cj4array[0]=((((-1.0)*cj2*sj1*x6836))+(((-1.0)*cj1*sj2*x6836)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6838=IKsin(j4);
IkReal x6839=IKcos(j4);
IkReal x6840=((1.0)*sj0);
IkReal x6841=((1.0)*cj5);
IkReal x6842=(sj5*x6838);
evalcond[0]=(r02*x6838);
evalcond[1]=((((-1.0)*x6840))+(((-1.0)*r02*x6839)));
evalcond[2]=((((-1.0)*r20*x6838*x6841))+((r21*x6842)));
evalcond[3]=(((r11*x6842))+(((-1.0)*r10*x6838*x6841)));
evalcond[4]=((((-1.0)*cj1*cj2*x6840))+((sj0*sj1*sj2))+((r11*sj5*x6839))+(((-1.0)*r10*x6839*x6841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6843=IKPowWithIntegerCheck(r02,-1);
if(!x6843.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6843.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6844=IKsin(j4);
IkReal x6845=IKcos(j4);
IkReal x6846=(r21*sj5);
IkReal x6847=((1.0)*cj5);
IkReal x6848=(r11*sj5);
evalcond[0]=(r02*x6844);
evalcond[1]=((((-1.0)*r20*x6844*x6847))+((x6844*x6846)));
evalcond[2]=((((-1.0)*r10*x6844*x6847))+((x6844*x6848)));
evalcond[3]=((((-1.0)*r20*x6845*x6847))+((cj2*sj1))+((cj1*sj2))+((x6845*x6846)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x6845*x6847))+((x6845*x6848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6849=((1.0)*sj0);
IkReal x6850=((1.0)*cj0);
CheckValue<IkReal> x6851 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6850))+(((-1.0)*r12*x6849)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6849))+(((-1.0)*r01*sj5*x6850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6851.valid){
continue;
}
CheckValue<IkReal> x6852=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6851.value)+(((1.5707963267949)*(x6852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6853=IKsin(j4);
IkReal x6854=IKcos(j4);
IkReal x6855=(cj5*r00);
IkReal x6856=(cj5*r10);
IkReal x6857=(r21*sj5);
IkReal x6858=(sj1*sj2);
IkReal x6859=(cj5*r20);
IkReal x6860=((1.0)*x6854);
IkReal x6861=((1.0)*cj1*cj2);
IkReal x6862=((1.0)*x6853);
IkReal x6863=(sj5*x6853);
IkReal x6864=(sj5*x6854);
evalcond[0]=(((x6853*x6857))+(((-1.0)*r22*x6860))+(((-1.0)*x6859*x6862)));
evalcond[1]=(((r11*x6863))+cj0+(((-1.0)*r12*x6860))+(((-1.0)*x6856*x6862)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6855*x6862))+(((-1.0)*r02*x6860))+((r01*x6863)));
evalcond[3]=(((cj2*sj1))+((r22*x6853))+((cj1*sj2))+(((-1.0)*x6859*x6860))+((x6854*x6857)));
evalcond[4]=(((r02*x6853))+(((-1.0)*x6855*x6860))+((cj0*x6858))+((r01*x6864))+(((-1.0)*cj0*x6861)));
evalcond[5]=(((sj0*x6858))+((r11*x6864))+((r12*x6853))+(((-1.0)*sj0*x6861))+(((-1.0)*x6856*x6860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6865=((1.0)*cj5);
CheckValue<IkReal> x6866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6865)))),-1);
if(!x6866.valid){
continue;
}
CheckValue<IkReal> x6867 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6865))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6866.value)))+(x6867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6868=IKsin(j4);
IkReal x6869=IKcos(j4);
IkReal x6870=(cj5*r00);
IkReal x6871=(cj5*r10);
IkReal x6872=(r21*sj5);
IkReal x6873=(sj1*sj2);
IkReal x6874=(cj5*r20);
IkReal x6875=((1.0)*x6869);
IkReal x6876=((1.0)*cj1*cj2);
IkReal x6877=((1.0)*x6868);
IkReal x6878=(sj5*x6868);
IkReal x6879=(sj5*x6869);
evalcond[0]=((((-1.0)*x6874*x6877))+(((-1.0)*r22*x6875))+((x6868*x6872)));
evalcond[1]=(((r11*x6878))+(((-1.0)*x6871*x6877))+cj0+(((-1.0)*r12*x6875)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6870*x6877))+(((-1.0)*r02*x6875))+((r01*x6878)));
evalcond[3]=(((cj2*sj1))+((r22*x6868))+((cj1*sj2))+(((-1.0)*x6874*x6875))+((x6869*x6872)));
evalcond[4]=(((r02*x6868))+((cj0*x6873))+(((-1.0)*x6870*x6875))+((r01*x6879))+(((-1.0)*cj0*x6876)));
evalcond[5]=(((sj0*x6873))+((r11*x6879))+(((-1.0)*x6871*x6875))+((r12*x6868))+(((-1.0)*sj0*x6876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6880=((1.0)*cj5);
CheckValue<IkReal> x6881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6880)))),-1);
if(!x6881.valid){
continue;
}
CheckValue<IkReal> x6882 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6881.value)))+(x6882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6883=IKsin(j4);
IkReal x6884=IKcos(j4);
IkReal x6885=(cj5*r00);
IkReal x6886=(cj5*r10);
IkReal x6887=(r21*sj5);
IkReal x6888=(sj1*sj2);
IkReal x6889=(cj5*r20);
IkReal x6890=((1.0)*x6884);
IkReal x6891=((1.0)*cj1*cj2);
IkReal x6892=((1.0)*x6883);
IkReal x6893=(sj5*x6883);
IkReal x6894=(sj5*x6884);
evalcond[0]=((((-1.0)*x6889*x6892))+(((-1.0)*r22*x6890))+((x6883*x6887)));
evalcond[1]=(cj0+(((-1.0)*x6886*x6892))+(((-1.0)*r12*x6890))+((r11*x6893)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6885*x6892))+(((-1.0)*r02*x6890))+((r01*x6893)));
evalcond[3]=(((x6884*x6887))+((cj2*sj1))+(((-1.0)*x6889*x6890))+((cj1*sj2))+((r22*x6883)));
evalcond[4]=((((-1.0)*cj0*x6891))+((cj0*x6888))+((r02*x6883))+(((-1.0)*x6885*x6890))+((r01*x6894)));
evalcond[5]=((((-1.0)*x6886*x6890))+((sj0*x6888))+(((-1.0)*sj0*x6891))+((r11*x6894))+((r12*x6883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6895=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6895;
j0eval[1]=IKsign(x6895);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6896=cj5*cj5;
IkReal x6897=r21*r21;
IkReal x6898=(cj2*sj1);
IkReal x6899=(cj1*sj2);
IkReal x6900=(r21*sj5);
IkReal x6901=((1.0)*cj5*r20);
IkReal x6902=((((-1.0)*x6896*x6897))+(r22*r22)+x6897+(((-2.0)*cj5*r20*x6900))+((x6896*(r20*r20))));
j4eval[0]=x6902;
j4eval[1]=IKsign(x6902);
j4eval[2]=((IKabs((((x6899*x6900))+(((-1.0)*x6898*x6901))+(((-1.0)*x6899*x6901))+((x6898*x6900)))))+(IKabs((((r22*x6899))+((r22*x6898))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6903=cj1*cj1;
IkReal x6904=(cj2*sj2);
IkReal x6905=(cj2*sj1);
IkReal x6906=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*cj1*x6905))+(((-2.0)*cj1*cj2*x6905))+x6906+x6904+(((-2.0)*x6903*x6904))+(((-1.08349267049076)*sj2*x6903)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6905)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6907=IKsin(j0);
IkReal x6908=IKcos(j0);
evalcond[0]=((((0.81725)*x6908))+(((-0.10915)*x6907))+(((-1.0)*px)));
evalcond[1]=((((0.81725)*x6907))+(((-1.0)*py))+(((0.10915)*x6908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6909=((1.0)*cj5);
IkReal x6910=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6909)));
j4eval[0]=x6910;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6909)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6911=((1.0)*cj5);
IkReal x6912=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6911)));
j4eval[0]=x6912;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6911))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6913=cj5*cj5;
IkReal x6914=((1.0)*sj5);
IkReal x6915=(cj5*r20);
IkReal x6916=(r11*r21);
IkReal x6917=(((r12*r22))+((r10*r20*x6913))+(((-1.0)*cj5*r10*r21*x6914))+x6916+(((-1.0)*r11*x6914*x6915))+(((-1.0)*x6913*x6916)));
j4eval[0]=x6917;
j4eval[1]=IKsign(x6917);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6914))+((cj0*x6915)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6918=cj5*cj5;
IkReal x6919=((1.0)*sj5);
IkReal x6920=(cj5*r20);
IkReal x6921=(r11*r21);
CheckValue<IkReal> x6922 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6919))+((cj0*x6920)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6922.valid){
continue;
}
CheckValue<IkReal> x6923=IKPowWithIntegerCheck(IKsign((((r12*r22))+((r10*r20*x6918))+(((-1.0)*cj5*r10*r21*x6919))+x6921+(((-1.0)*r11*x6919*x6920))+(((-1.0)*x6918*x6921)))),-1);
if(!x6923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6922.value)+(((1.5707963267949)*(x6923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6924=IKsin(j4);
IkReal x6925=IKcos(j4);
IkReal x6926=((1.0)*sj0);
IkReal x6927=(cj5*r00);
IkReal x6928=(r11*sj5);
IkReal x6929=(cj5*r10);
IkReal x6930=(r21*sj5);
IkReal x6931=(cj5*r20);
IkReal x6932=(r01*sj5);
IkReal x6933=((1.0)*x6925);
IkReal x6934=((1.0)*x6924);
evalcond[0]=((((-1.0)*r22*x6933))+((x6924*x6930))+(((-1.0)*x6931*x6934)));
evalcond[1]=((((-1.0)*x6930*x6933))+(((-1.0)*r22*x6934))+((x6925*x6931)));
evalcond[2]=(cj0+(((-1.0)*r12*x6933))+((x6924*x6928))+(((-1.0)*x6929*x6934)));
evalcond[3]=((((-1.0)*r02*x6933))+(((-1.0)*x6926))+((x6924*x6932))+(((-1.0)*x6927*x6934)));
evalcond[4]=((((-1.0)*x6932*x6933))+(((-1.0)*r02*x6934))+((x6925*x6927))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6934))+(((-1.0)*x6928*x6933))+((x6925*x6929))+(((-1.0)*x6926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6935=((1.0)*cj5);
CheckValue<IkReal> x6936 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6936.valid){
continue;
}
CheckValue<IkReal> x6937=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6935)))),-1);
if(!x6937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6936.value)+(((1.5707963267949)*(x6937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6938=IKsin(j4);
IkReal x6939=IKcos(j4);
IkReal x6940=((1.0)*sj0);
IkReal x6941=(cj5*r00);
IkReal x6942=(r11*sj5);
IkReal x6943=(cj5*r10);
IkReal x6944=(r21*sj5);
IkReal x6945=(cj5*r20);
IkReal x6946=(r01*sj5);
IkReal x6947=((1.0)*x6939);
IkReal x6948=((1.0)*x6938);
evalcond[0]=(((x6938*x6944))+(((-1.0)*x6945*x6948))+(((-1.0)*r22*x6947)));
evalcond[1]=(((x6939*x6945))+(((-1.0)*r22*x6948))+(((-1.0)*x6944*x6947)));
evalcond[2]=((((-1.0)*x6943*x6948))+cj0+(((-1.0)*r12*x6947))+((x6938*x6942)));
evalcond[3]=(((x6938*x6946))+(((-1.0)*x6940))+(((-1.0)*x6941*x6948))+(((-1.0)*r02*x6947)));
evalcond[4]=(((x6939*x6941))+(((-1.0)*r02*x6948))+(((-1.0)*x6946*x6947))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6948))+(((-1.0)*x6942*x6947))+(((-1.0)*x6940))+((x6939*x6943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6949=((1.0)*cj5);
CheckValue<IkReal> x6950 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6950.valid){
continue;
}
CheckValue<IkReal> x6951=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6949)))),-1);
if(!x6951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6950.value)+(((1.5707963267949)*(x6951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6952=IKsin(j4);
IkReal x6953=IKcos(j4);
IkReal x6954=((1.0)*sj0);
IkReal x6955=(cj5*r00);
IkReal x6956=(r11*sj5);
IkReal x6957=(cj5*r10);
IkReal x6958=(r21*sj5);
IkReal x6959=(cj5*r20);
IkReal x6960=(r01*sj5);
IkReal x6961=((1.0)*x6953);
IkReal x6962=((1.0)*x6952);
evalcond[0]=(((x6952*x6958))+(((-1.0)*x6959*x6962))+(((-1.0)*r22*x6961)));
evalcond[1]=((((-1.0)*x6958*x6961))+(((-1.0)*r22*x6962))+((x6953*x6959)));
evalcond[2]=(((x6952*x6956))+cj0+(((-1.0)*r12*x6961))+(((-1.0)*x6957*x6962)));
evalcond[3]=((((-1.0)*r02*x6961))+(((-1.0)*x6954))+((x6952*x6960))+(((-1.0)*x6955*x6962)));
evalcond[4]=((((-1.0)*r02*x6962))+(((-1.0)*x6960*x6961))+((x6953*x6955))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6954))+(((-1.0)*r12*x6962))+((x6953*x6957))+(((-1.0)*x6956*x6961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6963=IKsin(j0);
IkReal x6964=IKcos(j0);
evalcond[0]=((((0.03275)*x6964))+(((-1.0)*px))+(((-0.10915)*x6963)));
evalcond[1]=((((0.10915)*x6964))+(((0.03275)*x6963))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6965=((1.0)*cj5);
IkReal x6966=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6965)));
j4eval[0]=x6966;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6965))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6967=cj5*cj5;
IkReal x6968=((1.0)*r21);
IkReal x6969=(cj5*sj5);
IkReal x6970=((1.0)*r20);
IkReal x6971=((((-1.0)*r00*x6968*x6969))+((r01*r21))+((r00*r20*x6967))+(((-1.0)*r01*x6969*x6970))+(((-1.0)*r01*x6967*x6968))+((r02*r22)));
j4eval[0]=x6971;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6970)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6972=cj5*cj5;
IkReal x6973=(r21*sj5);
IkReal x6974=(r11*r21);
IkReal x6975=((1.0)*cj5*r20);
IkReal x6976=((((-1.0)*x6972*x6974))+((r10*r20*x6972))+(((-1.0)*cj5*r10*x6973))+(((-1.0)*r11*sj5*x6975))+((r12*r22))+x6974);
j4eval[0]=x6976;
j4eval[1]=((IKabs((((sj0*x6973))+(((-1.0)*sj0*x6975)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6977=cj5*cj5;
IkReal x6978=(r21*sj5);
IkReal x6979=(r11*r21);
IkReal x6980=((1.0)*cj5*r20);
CheckValue<IkReal> x6981=IKPowWithIntegerCheck(IKsign((((r10*r20*x6977))+(((-1.0)*cj5*r10*x6978))+((r12*r22))+(((-1.0)*x6977*x6979))+(((-1.0)*r11*sj5*x6980))+x6979)),-1);
if(!x6981.valid){
continue;
}
CheckValue<IkReal> x6982 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6980))+((sj0*x6978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6981.value)))+(x6982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6983=IKsin(j4);
IkReal x6984=IKcos(j4);
IkReal x6985=(r11*sj5);
IkReal x6986=(cj5*r00);
IkReal x6987=(cj5*r10);
IkReal x6988=(r21*sj5);
IkReal x6989=(cj5*r20);
IkReal x6990=(r01*sj5);
IkReal x6991=((1.0)*x6984);
IkReal x6992=((1.0)*x6983);
evalcond[0]=(((x6983*x6988))+(((-1.0)*r22*x6991))+(((-1.0)*x6989*x6992)));
evalcond[1]=((((-1.0)*r22*x6992))+((x6984*x6989))+(((-1.0)*x6988*x6991)));
evalcond[2]=((((-1.0)*r12*x6991))+cj0+((x6983*x6985))+(((-1.0)*x6987*x6992)));
evalcond[3]=(cj0+(((-1.0)*x6990*x6991))+(((-1.0)*r02*x6992))+((x6984*x6986)));
evalcond[4]=((((-1.0)*r12*x6992))+sj0+(((-1.0)*x6985*x6991))+((x6984*x6987)));
evalcond[5]=((((-1.0)*sj0))+((x6983*x6990))+(((-1.0)*x6986*x6992))+(((-1.0)*r02*x6991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6993=cj5*cj5;
IkReal x6994=((1.0)*r21);
IkReal x6995=(cj5*sj5);
IkReal x6996=((1.0)*r20);
CheckValue<IkReal> x6997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6995*x6996))+((r01*r21))+(((-1.0)*r00*x6994*x6995))+(((-1.0)*r01*x6993*x6994))+((r00*r20*x6993))+((r02*r22)))),-1);
if(!x6997.valid){
continue;
}
CheckValue<IkReal> x6998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6997.value)))+(x6998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6999=IKsin(j4);
IkReal x7000=IKcos(j4);
IkReal x7001=(r11*sj5);
IkReal x7002=(cj5*r00);
IkReal x7003=(cj5*r10);
IkReal x7004=(r21*sj5);
IkReal x7005=(cj5*r20);
IkReal x7006=(r01*sj5);
IkReal x7007=((1.0)*x7000);
IkReal x7008=((1.0)*x6999);
evalcond[0]=((((-1.0)*r22*x7007))+(((-1.0)*x7005*x7008))+((x6999*x7004)));
evalcond[1]=(((x7000*x7005))+(((-1.0)*r22*x7008))+(((-1.0)*x7004*x7007)));
evalcond[2]=((((-1.0)*r12*x7007))+cj0+(((-1.0)*x7003*x7008))+((x6999*x7001)));
evalcond[3]=(((x7000*x7002))+(((-1.0)*r02*x7008))+cj0+(((-1.0)*x7006*x7007)));
evalcond[4]=((((-1.0)*r12*x7008))+((x7000*x7003))+sj0+(((-1.0)*x7001*x7007)));
evalcond[5]=((((-1.0)*r02*x7007))+(((-1.0)*sj0))+(((-1.0)*x7002*x7008))+((x6999*x7006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7009=((1.0)*cj5);
CheckValue<IkReal> x7010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7009)))),-1);
if(!x7010.valid){
continue;
}
CheckValue<IkReal> x7011 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7010.value)))+(x7011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7012=IKsin(j4);
IkReal x7013=IKcos(j4);
IkReal x7014=(r11*sj5);
IkReal x7015=(cj5*r00);
IkReal x7016=(cj5*r10);
IkReal x7017=(r21*sj5);
IkReal x7018=(cj5*r20);
IkReal x7019=(r01*sj5);
IkReal x7020=((1.0)*x7013);
IkReal x7021=((1.0)*x7012);
evalcond[0]=((((-1.0)*r22*x7020))+(((-1.0)*x7018*x7021))+((x7012*x7017)));
evalcond[1]=((((-1.0)*r22*x7021))+((x7013*x7018))+(((-1.0)*x7017*x7020)));
evalcond[2]=((((-1.0)*r12*x7020))+cj0+(((-1.0)*x7016*x7021))+((x7012*x7014)));
evalcond[3]=(((x7013*x7015))+cj0+(((-1.0)*x7019*x7020))+(((-1.0)*r02*x7021)));
evalcond[4]=((((-1.0)*r12*x7021))+sj0+((x7013*x7016))+(((-1.0)*x7014*x7020)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7015*x7021))+(((-1.0)*r02*x7020))+((x7012*x7019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7022=((1.0)*sj5);
IkReal x7023=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7023))+(((-1.0)*r10*x7022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7022))+(((-1.0)*r01*x7023)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7023))+(((-1.0)*r10*x7022))))+IKsqr(((((-1.0)*r00*x7022))+(((-1.0)*r01*x7023))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7023))+(((-1.0)*r10*x7022))), ((((-1.0)*r00*x7022))+(((-1.0)*r01*x7023))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7024=IKsin(j0);
IkReal x7025=IKcos(j0);
IkReal x7026=((1.0)*cj5);
IkReal x7027=((1.0)*sj5);
IkReal x7028=((0.09465)*cj5);
IkReal x7029=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7025))+(((-1.0)*r00*x7027))+(((-1.0)*r01*x7026)));
evalcond[1]=((((-1.0)*r11*x7026))+(((-1.0)*r10*x7027))+(((-1.0)*x7024)));
evalcond[2]=((((-0.10915)*x7024))+(((-1.0)*px))+(((-1.0)*r00*x7029))+(((-1.0)*r01*x7028)));
evalcond[3]=((((-1.0)*r11*x7028))+(((-1.0)*r10*x7029))+(((-1.0)*py))+(((0.10915)*x7025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7030=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7030;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7031=((1.0)*cj5);
IkReal x7032=((((-1.0)*r01*x7031))+(((-1.0)*r00*sj5)));
j4eval[0]=x7032;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7031)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7033=cj5*cj5;
IkReal x7034=r21*r21;
IkReal x7035=(r21*sj5);
IkReal x7036=(cj5*r20);
IkReal x7037=(x7034+(r22*r22)+(((-2.0)*x7035*x7036))+(((-1.0)*x7033*x7034))+((x7033*(r20*r20))));
j4eval[0]=x7037;
j4eval[1]=IKsign(x7037);
j4eval[2]=((IKabs((x7035+(((-1.0)*x7036)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7038=cj5*cj5;
IkReal x7039=r21*r21;
IkReal x7040=(r21*sj5);
IkReal x7041=(cj5*r20);
CheckValue<IkReal> x7042=IKPowWithIntegerCheck(IKsign((x7039+(((-1.0)*x7038*x7039))+(r22*r22)+((x7038*(r20*r20)))+(((-2.0)*x7040*x7041)))),-1);
if(!x7042.valid){
continue;
}
CheckValue<IkReal> x7043 = IKatan2WithCheck(IkReal(r22),IkReal((x7040+(((-1.0)*x7041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7042.value)))+(x7043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7044=IKsin(j4);
IkReal x7045=IKcos(j4);
IkReal x7046=(r11*sj5);
IkReal x7047=(r21*sj5);
IkReal x7048=(cj5*r00);
IkReal x7049=(cj5*r20);
IkReal x7050=(r01*sj5);
IkReal x7051=(cj5*r10);
IkReal x7052=((1.0)*x7045);
IkReal x7053=((1.0)*x7044);
evalcond[0]=((((-1.0)*r22*x7052))+(((-1.0)*x7049*x7053))+((x7044*x7047)));
evalcond[1]=(((x7045*x7048))+(((-1.0)*x7050*x7052))+(((-1.0)*r02*x7053)));
evalcond[2]=((((-1.0)*x7046*x7052))+((x7045*x7051))+(((-1.0)*r12*x7053)));
evalcond[3]=(cj0+(((-1.0)*r12*x7052))+(((-1.0)*x7051*x7053))+((x7044*x7046)));
evalcond[4]=((1.0)+(((-1.0)*x7047*x7052))+(((-1.0)*r22*x7053))+((x7045*x7049)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7048*x7053))+((x7044*x7050))+(((-1.0)*r02*x7052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7054=((1.0)*cj5);
CheckValue<IkReal> x7055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7054))+(((-1.0)*r00*sj5)))),-1);
if(!x7055.valid){
continue;
}
CheckValue<IkReal> x7056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7054))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7055.value)))+(x7056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7057=IKsin(j4);
IkReal x7058=IKcos(j4);
IkReal x7059=(r11*sj5);
IkReal x7060=(r21*sj5);
IkReal x7061=(cj5*r00);
IkReal x7062=(cj5*r20);
IkReal x7063=(r01*sj5);
IkReal x7064=(cj5*r10);
IkReal x7065=((1.0)*x7058);
IkReal x7066=((1.0)*x7057);
evalcond[0]=((((-1.0)*x7062*x7066))+((x7057*x7060))+(((-1.0)*r22*x7065)));
evalcond[1]=((((-1.0)*x7063*x7065))+(((-1.0)*r02*x7066))+((x7058*x7061)));
evalcond[2]=((((-1.0)*x7059*x7065))+(((-1.0)*r12*x7066))+((x7058*x7064)));
evalcond[3]=(cj0+(((-1.0)*r12*x7065))+(((-1.0)*x7064*x7066))+((x7057*x7059)));
evalcond[4]=((1.0)+(((-1.0)*x7060*x7065))+((x7058*x7062))+(((-1.0)*r22*x7066)));
evalcond[5]=((((-1.0)*sj0))+((x7057*x7063))+(((-1.0)*r02*x7065))+(((-1.0)*x7061*x7066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7067 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7067.valid){
continue;
}
CheckValue<IkReal> x7068=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7067.value)+(((1.5707963267949)*(x7068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7069=IKsin(j4);
IkReal x7070=IKcos(j4);
IkReal x7071=(r11*sj5);
IkReal x7072=(r21*sj5);
IkReal x7073=(cj5*r00);
IkReal x7074=(cj5*r20);
IkReal x7075=(r01*sj5);
IkReal x7076=(cj5*r10);
IkReal x7077=((1.0)*x7070);
IkReal x7078=((1.0)*x7069);
evalcond[0]=(((x7069*x7072))+(((-1.0)*x7074*x7078))+(((-1.0)*r22*x7077)));
evalcond[1]=(((x7070*x7073))+(((-1.0)*r02*x7078))+(((-1.0)*x7075*x7077)));
evalcond[2]=(((x7070*x7076))+(((-1.0)*x7071*x7077))+(((-1.0)*r12*x7078)));
evalcond[3]=(cj0+(((-1.0)*x7076*x7078))+(((-1.0)*r12*x7077))+((x7069*x7071)));
evalcond[4]=((1.0)+((x7070*x7074))+(((-1.0)*x7072*x7077))+(((-1.0)*r22*x7078)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7077))+(((-1.0)*x7073*x7078))+((x7069*x7075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7079=IKcos(j0);
IkReal x7080=IKsin(j0);
evalcond[0]=((((-0.10915)*x7080))+(((-1.0)*px))+(((-0.39225)*x7079)));
evalcond[1]=((((0.10915)*x7079))+(((-1.0)*py))+(((-0.39225)*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7081=((1.0)*cj5);
IkReal x7082=((((-1.0)*r01*x7081))+(((-1.0)*r00*sj5)));
j4eval[0]=x7082;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7081)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7082);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7083=cj5*cj5;
IkReal x7084=((1.0)*r21);
IkReal x7085=(cj5*sj5);
IkReal x7086=((1.0)*r20);
IkReal x7087=((((-1.0)*r01*x7085*x7086))+((r01*r21))+((r00*r20*x7083))+(((-1.0)*r00*x7084*x7085))+((r02*r22))+(((-1.0)*r01*x7083*x7084)));
j4eval[0]=x7087;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7086)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7088=cj5*cj5;
IkReal x7089=(r21*sj5);
IkReal x7090=(r11*r21);
IkReal x7091=((1.0)*cj5*r20);
IkReal x7092=(x7090+(((-1.0)*cj5*r10*x7089))+(((-1.0)*x7088*x7090))+((r12*r22))+((r10*r20*x7088))+(((-1.0)*r11*sj5*x7091)));
j4eval[0]=x7092;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7089))+(((-1.0)*sj0*x7091))))));
j4eval[2]=IKsign(x7092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7093=cj5*cj5;
IkReal x7094=(r21*sj5);
IkReal x7095=(r11*r21);
IkReal x7096=((1.0)*cj5*r20);
CheckValue<IkReal> x7097 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7094))+(((-1.0)*sj0*x7096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7097.valid){
continue;
}
CheckValue<IkReal> x7098=IKPowWithIntegerCheck(IKsign((x7095+(((-1.0)*x7093*x7095))+(((-1.0)*cj5*r10*x7094))+((r12*r22))+((r10*r20*x7093))+(((-1.0)*r11*sj5*x7096)))),-1);
if(!x7098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7097.value)+(((1.5707963267949)*(x7098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7099=IKsin(j4);
IkReal x7100=IKcos(j4);
IkReal x7101=(r11*sj5);
IkReal x7102=(cj5*r00);
IkReal x7103=(cj5*r10);
IkReal x7104=(r21*sj5);
IkReal x7105=(cj5*r20);
IkReal x7106=(r01*sj5);
IkReal x7107=((1.0)*x7100);
IkReal x7108=((1.0)*x7099);
evalcond[0]=(((x7099*x7104))+(((-1.0)*r22*x7107))+(((-1.0)*x7105*x7108)));
evalcond[1]=(((x7100*x7105))+(((-1.0)*r22*x7108))+(((-1.0)*x7104*x7107)));
evalcond[2]=(cj0+(((-1.0)*x7103*x7108))+(((-1.0)*r12*x7107))+((x7099*x7101)));
evalcond[3]=(((x7100*x7102))+cj0+(((-1.0)*r02*x7108))+(((-1.0)*x7106*x7107)));
evalcond[4]=(((x7100*x7103))+sj0+(((-1.0)*r12*x7108))+(((-1.0)*x7101*x7107)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7102*x7108))+((x7099*x7106))+(((-1.0)*r02*x7107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7109=cj5*cj5;
IkReal x7110=((1.0)*r21);
IkReal x7111=(cj5*sj5);
IkReal x7112=((1.0)*r20);
CheckValue<IkReal> x7113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7109*x7110))+(((-1.0)*r00*x7110*x7111))+((r01*r21))+(((-1.0)*r01*x7111*x7112))+((r00*r20*x7109))+((r02*r22)))),-1);
if(!x7113.valid){
continue;
}
CheckValue<IkReal> x7114 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7113.value)))+(x7114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7115=IKsin(j4);
IkReal x7116=IKcos(j4);
IkReal x7117=(r11*sj5);
IkReal x7118=(cj5*r00);
IkReal x7119=(cj5*r10);
IkReal x7120=(r21*sj5);
IkReal x7121=(cj5*r20);
IkReal x7122=(r01*sj5);
IkReal x7123=((1.0)*x7116);
IkReal x7124=((1.0)*x7115);
evalcond[0]=((((-1.0)*x7121*x7124))+(((-1.0)*r22*x7123))+((x7115*x7120)));
evalcond[1]=((((-1.0)*x7120*x7123))+(((-1.0)*r22*x7124))+((x7116*x7121)));
evalcond[2]=((((-1.0)*x7119*x7124))+cj0+(((-1.0)*r12*x7123))+((x7115*x7117)));
evalcond[3]=(((x7116*x7118))+cj0+(((-1.0)*x7122*x7123))+(((-1.0)*r02*x7124)));
evalcond[4]=(((x7116*x7119))+sj0+(((-1.0)*r12*x7124))+(((-1.0)*x7117*x7123)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7118*x7124))+((x7115*x7122))+(((-1.0)*r02*x7123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7125=((1.0)*cj5);
CheckValue<IkReal> x7126 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7126.valid){
continue;
}
CheckValue<IkReal> x7127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7125)))),-1);
if(!x7127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7126.value)+(((1.5707963267949)*(x7127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7128=IKsin(j4);
IkReal x7129=IKcos(j4);
IkReal x7130=(r11*sj5);
IkReal x7131=(cj5*r00);
IkReal x7132=(cj5*r10);
IkReal x7133=(r21*sj5);
IkReal x7134=(cj5*r20);
IkReal x7135=(r01*sj5);
IkReal x7136=((1.0)*x7129);
IkReal x7137=((1.0)*x7128);
evalcond[0]=((((-1.0)*r22*x7136))+(((-1.0)*x7134*x7137))+((x7128*x7133)));
evalcond[1]=((((-1.0)*r22*x7137))+(((-1.0)*x7133*x7136))+((x7129*x7134)));
evalcond[2]=((((-1.0)*r12*x7136))+(((-1.0)*x7132*x7137))+cj0+((x7128*x7130)));
evalcond[3]=(cj0+(((-1.0)*x7135*x7136))+((x7129*x7131))+(((-1.0)*r02*x7137)));
evalcond[4]=((((-1.0)*x7130*x7136))+sj0+(((-1.0)*r12*x7137))+((x7129*x7132)));
evalcond[5]=((((-1.0)*sj0))+((x7128*x7135))+(((-1.0)*x7131*x7137))+(((-1.0)*r02*x7136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7138=IKsin(j0);
IkReal x7139=IKcos(j0);
IkReal x7140=((1.0)*cj5);
IkReal x7141=((1.0)*sj5);
IkReal x7142=((0.09465)*cj5);
IkReal x7143=((0.09465)*sj5);
evalcond[0]=(x7139+(((-1.0)*r01*x7140))+(((-1.0)*r00*x7141)));
evalcond[1]=(x7138+(((-1.0)*r11*x7140))+(((-1.0)*r10*x7141)));
evalcond[2]=((((-1.0)*r01*x7142))+(((-1.0)*px))+(((-0.10915)*x7138))+(((-1.0)*r00*x7143)));
evalcond[3]=((((0.10915)*x7139))+(((-1.0)*py))+(((-1.0)*r11*x7142))+(((-1.0)*r10*x7143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7144=((1.0)*sj5);
IkReal x7145=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7144)));
j4eval[0]=x7145;
j4eval[1]=IKsign(x7145);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7144))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7146=((1.0)*cj5);
IkReal x7147=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7146)));
j4eval[0]=x7147;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7146))))));
j4eval[2]=IKsign(x7147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7148=r21*r21;
IkReal x7149=cj5*cj5;
IkReal x7150=(r21*sj5);
IkReal x7151=(cj5*r20);
IkReal x7152=((((-1.0)*x7149*(r20*r20)))+((x7148*x7149))+(((-1.0)*x7148))+(((-1.0)*(r22*r22)))+(((2.0)*x7150*x7151)));
j4eval[0]=x7152;
j4eval[1]=((IKabs(r22))+(IKabs((x7150+(((-1.0)*x7151))))));
j4eval[2]=IKsign(x7152);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7153=r21*r21;
IkReal x7154=cj5*cj5;
IkReal x7155=(r21*sj5);
IkReal x7156=(cj5*r20);
CheckValue<IkReal> x7157 = IKatan2WithCheck(IkReal(r22),IkReal((x7155+(((-1.0)*x7156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7157.valid){
continue;
}
CheckValue<IkReal> x7158=IKPowWithIntegerCheck(IKsign(((((2.0)*x7155*x7156))+(((-1.0)*x7153))+(((-1.0)*(r22*r22)))+((x7153*x7154))+(((-1.0)*x7154*(r20*r20))))),-1);
if(!x7158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7157.value)+(((1.5707963267949)*(x7158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7159=IKsin(j4);
IkReal x7160=IKcos(j4);
IkReal x7161=(r11*sj5);
IkReal x7162=(r21*sj5);
IkReal x7163=(cj5*r00);
IkReal x7164=(cj5*r20);
IkReal x7165=(r01*sj5);
IkReal x7166=(cj5*r10);
IkReal x7167=((1.0)*x7160);
IkReal x7168=((1.0)*x7159);
evalcond[0]=((((-1.0)*r22*x7167))+((x7159*x7162))+(((-1.0)*x7164*x7168)));
evalcond[1]=((((-1.0)*r02*x7168))+(((-1.0)*x7165*x7167))+((x7160*x7163)));
evalcond[2]=((((-1.0)*x7161*x7167))+((x7160*x7166))+(((-1.0)*r12*x7168)));
evalcond[3]=(cj0+((x7159*x7161))+(((-1.0)*x7166*x7168))+(((-1.0)*r12*x7167)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7168))+((x7160*x7164))+(((-1.0)*x7162*x7167)));
evalcond[5]=((((-1.0)*r02*x7167))+(((-1.0)*sj0))+(((-1.0)*x7163*x7168))+((x7159*x7165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7169=((1.0)*cj5);
CheckValue<IkReal> x7170 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7170.valid){
continue;
}
CheckValue<IkReal> x7171=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7169)))),-1);
if(!x7171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7170.value)+(((1.5707963267949)*(x7171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7172=IKsin(j4);
IkReal x7173=IKcos(j4);
IkReal x7174=(r11*sj5);
IkReal x7175=(r21*sj5);
IkReal x7176=(cj5*r00);
IkReal x7177=(cj5*r20);
IkReal x7178=(r01*sj5);
IkReal x7179=(cj5*r10);
IkReal x7180=((1.0)*x7173);
IkReal x7181=((1.0)*x7172);
evalcond[0]=((((-1.0)*x7177*x7181))+((x7172*x7175))+(((-1.0)*r22*x7180)));
evalcond[1]=((((-1.0)*x7178*x7180))+((x7173*x7176))+(((-1.0)*r02*x7181)));
evalcond[2]=((((-1.0)*x7174*x7180))+((x7173*x7179))+(((-1.0)*r12*x7181)));
evalcond[3]=(cj0+(((-1.0)*x7179*x7181))+((x7172*x7174))+(((-1.0)*r12*x7180)));
evalcond[4]=((-1.0)+(((-1.0)*x7175*x7180))+((x7173*x7177))+(((-1.0)*r22*x7181)));
evalcond[5]=((((-1.0)*sj0))+((x7172*x7178))+(((-1.0)*r02*x7180))+(((-1.0)*x7176*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7182=((1.0)*sj5);
CheckValue<IkReal> x7183 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7182))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7183.valid){
continue;
}
CheckValue<IkReal> x7184=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7182)))),-1);
if(!x7184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7183.value)+(((1.5707963267949)*(x7184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7185=IKsin(j4);
IkReal x7186=IKcos(j4);
IkReal x7187=(r11*sj5);
IkReal x7188=(r21*sj5);
IkReal x7189=(cj5*r00);
IkReal x7190=(cj5*r20);
IkReal x7191=(r01*sj5);
IkReal x7192=(cj5*r10);
IkReal x7193=((1.0)*x7186);
IkReal x7194=((1.0)*x7185);
evalcond[0]=(((x7185*x7188))+(((-1.0)*x7190*x7194))+(((-1.0)*r22*x7193)));
evalcond[1]=(((x7186*x7189))+(((-1.0)*x7191*x7193))+(((-1.0)*r02*x7194)));
evalcond[2]=((((-1.0)*x7187*x7193))+(((-1.0)*r12*x7194))+((x7186*x7192)));
evalcond[3]=(((x7185*x7187))+cj0+(((-1.0)*r12*x7193))+(((-1.0)*x7192*x7194)));
evalcond[4]=((-1.0)+(((-1.0)*x7188*x7193))+(((-1.0)*r22*x7194))+((x7186*x7190)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7189*x7194))+(((-1.0)*r02*x7193))+((x7185*x7191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7195=IKsin(j0);
IkReal x7196=IKcos(j0);
evalcond[0]=((((0.39225)*x7196))+(((-1.0)*px))+(((-0.10915)*x7195)));
evalcond[1]=((((0.10915)*x7196))+(((0.39225)*x7195))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7197=((1.0)*cj5);
IkReal x7198=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7197)));
j4eval[0]=x7198;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7197)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7199=((1.0)*cj5);
IkReal x7200=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7199)));
j4eval[0]=x7200;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7199)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7201=cj5*cj5;
IkReal x7202=((1.0)*sj5);
IkReal x7203=(cj5*r20);
IkReal x7204=(r11*r21);
IkReal x7205=(x7204+((r10*r20*x7201))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7202))+(((-1.0)*r11*x7202*x7203))+(((-1.0)*x7201*x7204)));
j4eval[0]=x7205;
j4eval[1]=IKsign(x7205);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7202))+((cj0*x7203)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7206=cj5*cj5;
IkReal x7207=((1.0)*sj5);
IkReal x7208=(cj5*r20);
IkReal x7209=(r11*r21);
CheckValue<IkReal> x7210 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7207))+((cj0*x7208)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7210.valid){
continue;
}
CheckValue<IkReal> x7211=IKPowWithIntegerCheck(IKsign((x7209+(((-1.0)*x7206*x7209))+((r10*r20*x7206))+(((-1.0)*r11*x7207*x7208))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7207)))),-1);
if(!x7211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7210.value)+(((1.5707963267949)*(x7211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7212=IKsin(j4);
IkReal x7213=IKcos(j4);
IkReal x7214=((1.0)*sj0);
IkReal x7215=(cj5*r00);
IkReal x7216=(r11*sj5);
IkReal x7217=(cj5*r10);
IkReal x7218=(r21*sj5);
IkReal x7219=(cj5*r20);
IkReal x7220=(r01*sj5);
IkReal x7221=((1.0)*x7213);
IkReal x7222=((1.0)*x7212);
evalcond[0]=((((-1.0)*r22*x7221))+((x7212*x7218))+(((-1.0)*x7219*x7222)));
evalcond[1]=((((-1.0)*x7218*x7221))+((x7213*x7219))+(((-1.0)*r22*x7222)));
evalcond[2]=((((-1.0)*x7217*x7222))+cj0+(((-1.0)*r12*x7221))+((x7212*x7216)));
evalcond[3]=((((-1.0)*r02*x7221))+((x7212*x7220))+(((-1.0)*x7214))+(((-1.0)*x7215*x7222)));
evalcond[4]=((((-1.0)*r02*x7222))+(((-1.0)*x7220*x7221))+((x7213*x7215))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7214))+(((-1.0)*x7216*x7221))+(((-1.0)*r12*x7222))+((x7213*x7217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7223=((1.0)*cj5);
CheckValue<IkReal> x7224 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7224.valid){
continue;
}
CheckValue<IkReal> x7225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7223)))),-1);
if(!x7225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7224.value)+(((1.5707963267949)*(x7225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7226=IKsin(j4);
IkReal x7227=IKcos(j4);
IkReal x7228=((1.0)*sj0);
IkReal x7229=(cj5*r00);
IkReal x7230=(r11*sj5);
IkReal x7231=(cj5*r10);
IkReal x7232=(r21*sj5);
IkReal x7233=(cj5*r20);
IkReal x7234=(r01*sj5);
IkReal x7235=((1.0)*x7227);
IkReal x7236=((1.0)*x7226);
evalcond[0]=((((-1.0)*x7233*x7236))+(((-1.0)*r22*x7235))+((x7226*x7232)));
evalcond[1]=((((-1.0)*x7232*x7235))+(((-1.0)*r22*x7236))+((x7227*x7233)));
evalcond[2]=((((-1.0)*x7231*x7236))+cj0+((x7226*x7230))+(((-1.0)*r12*x7235)));
evalcond[3]=((((-1.0)*x7229*x7236))+(((-1.0)*x7228))+(((-1.0)*r02*x7235))+((x7226*x7234)));
evalcond[4]=((((-1.0)*x7234*x7235))+(((-1.0)*r02*x7236))+((x7227*x7229))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7230*x7235))+(((-1.0)*x7228))+(((-1.0)*r12*x7236))+((x7227*x7231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7237=((1.0)*cj5);
CheckValue<IkReal> x7238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7237)))),-1);
if(!x7238.valid){
continue;
}
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7238.value)))+(x7239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7240=IKsin(j4);
IkReal x7241=IKcos(j4);
IkReal x7242=((1.0)*sj0);
IkReal x7243=(cj5*r00);
IkReal x7244=(r11*sj5);
IkReal x7245=(cj5*r10);
IkReal x7246=(r21*sj5);
IkReal x7247=(cj5*r20);
IkReal x7248=(r01*sj5);
IkReal x7249=((1.0)*x7241);
IkReal x7250=((1.0)*x7240);
evalcond[0]=(((x7240*x7246))+(((-1.0)*x7247*x7250))+(((-1.0)*r22*x7249)));
evalcond[1]=((((-1.0)*x7246*x7249))+(((-1.0)*r22*x7250))+((x7241*x7247)));
evalcond[2]=(((x7240*x7244))+(((-1.0)*r12*x7249))+cj0+(((-1.0)*x7245*x7250)));
evalcond[3]=((((-1.0)*x7243*x7250))+((x7240*x7248))+(((-1.0)*r02*x7249))+(((-1.0)*x7242)));
evalcond[4]=((((-1.0)*x7248*x7249))+(((-1.0)*r02*x7250))+((x7241*x7243))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7244*x7249))+(((-1.0)*r12*x7250))+((x7241*x7245))+(((-1.0)*x7242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7251=IKcos(j0);
IkReal x7252=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x7251))+(((-0.10915)*x7252)));
evalcond[1]=((((0.10915)*x7251))+(((-1.0)*py))+(((-0.81725)*x7252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7253=((1.0)*cj5);
IkReal x7254=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7253)));
j4eval[0]=x7254;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7253)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7255=cj5*cj5;
IkReal x7256=((1.0)*r21);
IkReal x7257=(cj5*sj5);
IkReal x7258=((1.0)*r20);
IkReal x7259=(((r01*r21))+(((-1.0)*r01*x7255*x7256))+(((-1.0)*r01*x7257*x7258))+((r02*r22))+(((-1.0)*r00*x7256*x7257))+((r00*r20*x7255)));
j4eval[0]=x7259;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7258)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7260=cj5*cj5;
IkReal x7261=(r21*sj5);
IkReal x7262=(r11*r21);
IkReal x7263=((1.0)*cj5*r20);
IkReal x7264=((((-1.0)*r11*sj5*x7263))+(((-1.0)*cj5*r10*x7261))+x7262+(((-1.0)*x7260*x7262))+((r12*r22))+((r10*r20*x7260)));
j4eval[0]=x7264;
j4eval[1]=((IKabs((((sj0*x7261))+(((-1.0)*sj0*x7263)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7265=cj5*cj5;
IkReal x7266=(r21*sj5);
IkReal x7267=(r11*r21);
IkReal x7268=((1.0)*cj5*r20);
CheckValue<IkReal> x7269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7268))+(((-1.0)*cj5*r10*x7266))+x7267+((r12*r22))+((r10*r20*x7265))+(((-1.0)*x7265*x7267)))),-1);
if(!x7269.valid){
continue;
}
CheckValue<IkReal> x7270 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7266))+(((-1.0)*sj0*x7268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7269.value)))+(x7270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7271=IKsin(j4);
IkReal x7272=IKcos(j4);
IkReal x7273=(r11*sj5);
IkReal x7274=(cj5*r00);
IkReal x7275=(cj5*r10);
IkReal x7276=(r21*sj5);
IkReal x7277=(cj5*r20);
IkReal x7278=(r01*sj5);
IkReal x7279=((1.0)*x7272);
IkReal x7280=((1.0)*x7271);
evalcond[0]=(((x7271*x7276))+(((-1.0)*x7277*x7280))+(((-1.0)*r22*x7279)));
evalcond[1]=((((-1.0)*x7276*x7279))+((x7272*x7277))+(((-1.0)*r22*x7280)));
evalcond[2]=(((x7271*x7273))+cj0+(((-1.0)*r12*x7279))+(((-1.0)*x7275*x7280)));
evalcond[3]=(cj0+(((-1.0)*x7278*x7279))+((x7272*x7274))+(((-1.0)*r02*x7280)));
evalcond[4]=(sj0+(((-1.0)*x7273*x7279))+(((-1.0)*r12*x7280))+((x7272*x7275)));
evalcond[5]=(((x7271*x7278))+(((-1.0)*sj0))+(((-1.0)*x7274*x7280))+(((-1.0)*r02*x7279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7281=cj5*cj5;
IkReal x7282=((1.0)*r21);
IkReal x7283=(cj5*sj5);
IkReal x7284=((1.0)*r20);
CheckValue<IkReal> x7285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7285.valid){
continue;
}
CheckValue<IkReal> x7286=IKPowWithIntegerCheck(IKsign((((r00*r20*x7281))+(((-1.0)*r01*x7283*x7284))+(((-1.0)*r00*x7282*x7283))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x7281*x7282)))),-1);
if(!x7286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7285.value)+(((1.5707963267949)*(x7286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7287=IKsin(j4);
IkReal x7288=IKcos(j4);
IkReal x7289=(r11*sj5);
IkReal x7290=(cj5*r00);
IkReal x7291=(cj5*r10);
IkReal x7292=(r21*sj5);
IkReal x7293=(cj5*r20);
IkReal x7294=(r01*sj5);
IkReal x7295=((1.0)*x7288);
IkReal x7296=((1.0)*x7287);
evalcond[0]=((((-1.0)*r22*x7295))+(((-1.0)*x7293*x7296))+((x7287*x7292)));
evalcond[1]=((((-1.0)*r22*x7296))+((x7288*x7293))+(((-1.0)*x7292*x7295)));
evalcond[2]=((((-1.0)*x7291*x7296))+((x7287*x7289))+cj0+(((-1.0)*r12*x7295)));
evalcond[3]=(cj0+(((-1.0)*x7294*x7295))+(((-1.0)*r02*x7296))+((x7288*x7290)));
evalcond[4]=(sj0+(((-1.0)*x7289*x7295))+(((-1.0)*r12*x7296))+((x7288*x7291)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7290*x7296))+(((-1.0)*r02*x7295))+((x7287*x7294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7297=((1.0)*cj5);
CheckValue<IkReal> x7298=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7297))+(((-1.0)*r00*sj5)))),-1);
if(!x7298.valid){
continue;
}
CheckValue<IkReal> x7299 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7298.value)))+(x7299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7300=IKsin(j4);
IkReal x7301=IKcos(j4);
IkReal x7302=(r11*sj5);
IkReal x7303=(cj5*r00);
IkReal x7304=(cj5*r10);
IkReal x7305=(r21*sj5);
IkReal x7306=(cj5*r20);
IkReal x7307=(r01*sj5);
IkReal x7308=((1.0)*x7301);
IkReal x7309=((1.0)*x7300);
evalcond[0]=(((x7300*x7305))+(((-1.0)*r22*x7308))+(((-1.0)*x7306*x7309)));
evalcond[1]=(((x7301*x7306))+(((-1.0)*r22*x7309))+(((-1.0)*x7305*x7308)));
evalcond[2]=(cj0+((x7300*x7302))+(((-1.0)*r12*x7308))+(((-1.0)*x7304*x7309)));
evalcond[3]=((((-1.0)*r02*x7309))+((x7301*x7303))+cj0+(((-1.0)*x7307*x7308)));
evalcond[4]=(sj0+((x7301*x7304))+(((-1.0)*x7302*x7308))+(((-1.0)*r12*x7309)));
evalcond[5]=((((-1.0)*r02*x7308))+(((-1.0)*sj0))+((x7300*x7307))+(((-1.0)*x7303*x7309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7310=IKcos(j0);
IkReal x7311=IKsin(j0);
evalcond[0]=((((-0.03275)*x7310))+(((-0.10915)*x7311))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x7310))+(((-0.03275)*x7311))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7312=((1.0)*cj5);
IkReal x7313=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7312)));
j4eval[0]=x7313;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7312)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7314=((1.0)*cj5);
IkReal x7315=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7314)));
j4eval[0]=x7315;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7314))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7316=cj5*cj5;
IkReal x7317=((1.0)*sj5);
IkReal x7318=(cj5*r20);
IkReal x7319=(r11*r21);
IkReal x7320=(x7319+(((-1.0)*x7316*x7319))+((r12*r22))+(((-1.0)*r11*x7317*x7318))+((r10*r20*x7316))+(((-1.0)*cj5*r10*r21*x7317)));
j4eval[0]=x7320;
j4eval[1]=IKsign(x7320);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7317))+((cj0*x7318)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7321=cj5*cj5;
IkReal x7322=((1.0)*sj5);
IkReal x7323=(cj5*r20);
IkReal x7324=(r11*r21);
CheckValue<IkReal> x7325=IKPowWithIntegerCheck(IKsign((x7324+(((-1.0)*x7321*x7324))+(((-1.0)*cj5*r10*r21*x7322))+((r12*r22))+((r10*r20*x7321))+(((-1.0)*r11*x7322*x7323)))),-1);
if(!x7325.valid){
continue;
}
CheckValue<IkReal> x7326 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7322))+((cj0*x7323)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7325.value)))+(x7326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7327=IKsin(j4);
IkReal x7328=IKcos(j4);
IkReal x7329=((1.0)*sj0);
IkReal x7330=(cj5*r00);
IkReal x7331=(r11*sj5);
IkReal x7332=(cj5*r10);
IkReal x7333=(r21*sj5);
IkReal x7334=(cj5*r20);
IkReal x7335=(r01*sj5);
IkReal x7336=((1.0)*x7328);
IkReal x7337=((1.0)*x7327);
evalcond[0]=(((x7327*x7333))+(((-1.0)*r22*x7336))+(((-1.0)*x7334*x7337)));
evalcond[1]=(((x7328*x7334))+(((-1.0)*r22*x7337))+(((-1.0)*x7333*x7336)));
evalcond[2]=(cj0+(((-1.0)*r12*x7336))+((x7327*x7331))+(((-1.0)*x7332*x7337)));
evalcond[3]=((((-1.0)*r02*x7336))+((x7327*x7335))+(((-1.0)*x7329))+(((-1.0)*x7330*x7337)));
evalcond[4]=((((-1.0)*r02*x7337))+((x7328*x7330))+(((-1.0)*x7335*x7336))+(((-1.0)*cj0)));
evalcond[5]=(((x7328*x7332))+(((-1.0)*r12*x7337))+(((-1.0)*x7329))+(((-1.0)*x7331*x7336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7338=((1.0)*cj5);
CheckValue<IkReal> x7339 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7338))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7339.valid){
continue;
}
CheckValue<IkReal> x7340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7338)))),-1);
if(!x7340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7339.value)+(((1.5707963267949)*(x7340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7341=IKsin(j4);
IkReal x7342=IKcos(j4);
IkReal x7343=((1.0)*sj0);
IkReal x7344=(cj5*r00);
IkReal x7345=(r11*sj5);
IkReal x7346=(cj5*r10);
IkReal x7347=(r21*sj5);
IkReal x7348=(cj5*r20);
IkReal x7349=(r01*sj5);
IkReal x7350=((1.0)*x7342);
IkReal x7351=((1.0)*x7341);
evalcond[0]=((((-1.0)*r22*x7350))+(((-1.0)*x7348*x7351))+((x7341*x7347)));
evalcond[1]=((((-1.0)*r22*x7351))+((x7342*x7348))+(((-1.0)*x7347*x7350)));
evalcond[2]=(cj0+(((-1.0)*r12*x7350))+(((-1.0)*x7346*x7351))+((x7341*x7345)));
evalcond[3]=((((-1.0)*x7344*x7351))+(((-1.0)*x7343))+(((-1.0)*r02*x7350))+((x7341*x7349)));
evalcond[4]=(((x7342*x7344))+(((-1.0)*x7349*x7350))+(((-1.0)*r02*x7351))+(((-1.0)*cj0)));
evalcond[5]=(((x7342*x7346))+(((-1.0)*r12*x7351))+(((-1.0)*x7343))+(((-1.0)*x7345*x7350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7352=((1.0)*cj5);
CheckValue<IkReal> x7353 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7353.valid){
continue;
}
CheckValue<IkReal> x7354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7352))+(((-1.0)*r00*sj5)))),-1);
if(!x7354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7353.value)+(((1.5707963267949)*(x7354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7355=IKsin(j4);
IkReal x7356=IKcos(j4);
IkReal x7357=((1.0)*sj0);
IkReal x7358=(cj5*r00);
IkReal x7359=(r11*sj5);
IkReal x7360=(cj5*r10);
IkReal x7361=(r21*sj5);
IkReal x7362=(cj5*r20);
IkReal x7363=(r01*sj5);
IkReal x7364=((1.0)*x7356);
IkReal x7365=((1.0)*x7355);
evalcond[0]=(((x7355*x7361))+(((-1.0)*r22*x7364))+(((-1.0)*x7362*x7365)));
evalcond[1]=((((-1.0)*r22*x7365))+((x7356*x7362))+(((-1.0)*x7361*x7364)));
evalcond[2]=(cj0+(((-1.0)*r12*x7364))+((x7355*x7359))+(((-1.0)*x7360*x7365)));
evalcond[3]=(((x7355*x7363))+(((-1.0)*x7357))+(((-1.0)*r02*x7364))+(((-1.0)*x7358*x7365)));
evalcond[4]=((((-1.0)*x7363*x7364))+((x7356*x7358))+(((-1.0)*r02*x7365))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7357))+(((-1.0)*r12*x7365))+((x7356*x7360))+(((-1.0)*x7359*x7364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7366=IKsin(j0);
IkReal x7367=IKcos(j0);
IkReal x7368=((1.0)*cj5);
IkReal x7369=((1.0)*sj5);
IkReal x7370=((0.09465)*cj5);
IkReal x7371=((0.09465)*sj5);
evalcond[0]=(x7367+(((-1.0)*r00*x7369))+(((-1.0)*r01*x7368)));
evalcond[1]=(x7366+(((-1.0)*r10*x7369))+(((-1.0)*r11*x7368)));
evalcond[2]=((((-1.0)*r01*x7370))+(((-1.0)*px))+(((-0.10915)*x7366))+(((-1.0)*r00*x7371)));
evalcond[3]=((((-1.0)*r11*x7370))+(((-1.0)*py))+(((0.10915)*x7367))+(((-1.0)*r10*x7371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7372=((1.0)*sj5);
IkReal x7373=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7372)));
j4eval[0]=x7373;
j4eval[1]=IKsign(x7373);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7372))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7374=((1.0)*cj5);
IkReal x7375=((((-1.0)*r01*x7374))+(((-1.0)*r00*sj5)));
j4eval[0]=x7375;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7374)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7375);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7376=r21*r21;
IkReal x7377=cj5*cj5;
IkReal x7378=(r21*sj5);
IkReal x7379=(cj5*r20);
IkReal x7380=((((2.0)*x7378*x7379))+((x7376*x7377))+(((-1.0)*(r22*r22)))+(((-1.0)*x7376))+(((-1.0)*x7377*(r20*r20))));
j4eval[0]=x7380;
j4eval[1]=((IKabs((x7378+(((-1.0)*x7379)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7381=r21*r21;
IkReal x7382=cj5*cj5;
IkReal x7383=(r21*sj5);
IkReal x7384=(cj5*r20);
CheckValue<IkReal> x7385=IKPowWithIntegerCheck(IKsign((((x7381*x7382))+(((-1.0)*x7381))+(((-1.0)*(r22*r22)))+(((-1.0)*x7382*(r20*r20)))+(((2.0)*x7383*x7384)))),-1);
if(!x7385.valid){
continue;
}
CheckValue<IkReal> x7386 = IKatan2WithCheck(IkReal(r22),IkReal((x7383+(((-1.0)*x7384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7385.value)))+(x7386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7387=IKsin(j4);
IkReal x7388=IKcos(j4);
IkReal x7389=(r11*sj5);
IkReal x7390=(r21*sj5);
IkReal x7391=(cj5*r00);
IkReal x7392=(cj5*r20);
IkReal x7393=(r01*sj5);
IkReal x7394=(cj5*r10);
IkReal x7395=((1.0)*x7388);
IkReal x7396=((1.0)*x7387);
evalcond[0]=((((-1.0)*r22*x7395))+(((-1.0)*x7392*x7396))+((x7387*x7390)));
evalcond[1]=((((-1.0)*x7393*x7395))+((x7388*x7391))+(((-1.0)*r02*x7396)));
evalcond[2]=((((-1.0)*r12*x7396))+((x7388*x7394))+(((-1.0)*x7389*x7395)));
evalcond[3]=((((-1.0)*r12*x7395))+((x7387*x7389))+cj0+(((-1.0)*x7394*x7396)));
evalcond[4]=((-1.0)+(((-1.0)*x7390*x7395))+(((-1.0)*r22*x7396))+((x7388*x7392)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7395))+((x7387*x7393))+(((-1.0)*x7391*x7396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7397=((1.0)*cj5);
CheckValue<IkReal> x7398 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7398.valid){
continue;
}
CheckValue<IkReal> x7399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7397)))),-1);
if(!x7399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7398.value)+(((1.5707963267949)*(x7399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7400=IKsin(j4);
IkReal x7401=IKcos(j4);
IkReal x7402=(r11*sj5);
IkReal x7403=(r21*sj5);
IkReal x7404=(cj5*r00);
IkReal x7405=(cj5*r20);
IkReal x7406=(r01*sj5);
IkReal x7407=(cj5*r10);
IkReal x7408=((1.0)*x7401);
IkReal x7409=((1.0)*x7400);
evalcond[0]=((((-1.0)*x7405*x7409))+((x7400*x7403))+(((-1.0)*r22*x7408)));
evalcond[1]=(((x7401*x7404))+(((-1.0)*x7406*x7408))+(((-1.0)*r02*x7409)));
evalcond[2]=((((-1.0)*r12*x7409))+((x7401*x7407))+(((-1.0)*x7402*x7408)));
evalcond[3]=((((-1.0)*r12*x7408))+cj0+((x7400*x7402))+(((-1.0)*x7407*x7409)));
evalcond[4]=((-1.0)+(((-1.0)*x7403*x7408))+((x7401*x7405))+(((-1.0)*r22*x7409)));
evalcond[5]=((((-1.0)*sj0))+((x7400*x7406))+(((-1.0)*x7404*x7409))+(((-1.0)*r02*x7408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7410=((1.0)*sj5);
CheckValue<IkReal> x7411=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7410)))),-1);
if(!x7411.valid){
continue;
}
CheckValue<IkReal> x7412 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7410))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7411.value)))+(x7412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7413=IKsin(j4);
IkReal x7414=IKcos(j4);
IkReal x7415=(r11*sj5);
IkReal x7416=(r21*sj5);
IkReal x7417=(cj5*r00);
IkReal x7418=(cj5*r20);
IkReal x7419=(r01*sj5);
IkReal x7420=(cj5*r10);
IkReal x7421=((1.0)*x7414);
IkReal x7422=((1.0)*x7413);
evalcond[0]=(((x7413*x7416))+(((-1.0)*r22*x7421))+(((-1.0)*x7418*x7422)));
evalcond[1]=((((-1.0)*r02*x7422))+(((-1.0)*x7419*x7421))+((x7414*x7417)));
evalcond[2]=((((-1.0)*x7415*x7421))+(((-1.0)*r12*x7422))+((x7414*x7420)));
evalcond[3]=(((x7413*x7415))+cj0+(((-1.0)*r12*x7421))+(((-1.0)*x7420*x7422)));
evalcond[4]=((-1.0)+(((-1.0)*x7416*x7421))+(((-1.0)*r22*x7422))+((x7414*x7418)));
evalcond[5]=(((x7413*x7419))+(((-1.0)*sj0))+(((-1.0)*r02*x7421))+(((-1.0)*x7417*x7422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7423=IKsin(j0);
IkReal x7424=IKcos(j0);
evalcond[0]=((((0.39225)*x7424))+(((-1.0)*px))+(((-0.10915)*x7423)));
evalcond[1]=((((0.39225)*x7423))+(((-1.0)*py))+(((0.10915)*x7424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7425=((1.0)*cj5);
IkReal x7426=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7425)));
j4eval[0]=x7426;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7425))))));
j4eval[2]=IKsign(x7426);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7427=((1.0)*cj5);
IkReal x7428=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7427)));
j4eval[0]=x7428;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7427))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7429=cj5*cj5;
IkReal x7430=((1.0)*sj5);
IkReal x7431=(cj5*r20);
IkReal x7432=(r11*r21);
IkReal x7433=((((-1.0)*cj5*r10*r21*x7430))+((r12*r22))+((r10*r20*x7429))+x7432+(((-1.0)*r11*x7430*x7431))+(((-1.0)*x7429*x7432)));
j4eval[0]=x7433;
j4eval[1]=IKsign(x7433);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7430))+((cj0*x7431)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7434=cj5*cj5;
IkReal x7435=((1.0)*sj5);
IkReal x7436=(cj5*r20);
IkReal x7437=(r11*r21);
CheckValue<IkReal> x7438 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7435))+((cj0*x7436)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7438.valid){
continue;
}
CheckValue<IkReal> x7439=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7435))+(((-1.0)*r11*x7435*x7436))+((r12*r22))+((r10*r20*x7434))+(((-1.0)*x7434*x7437))+x7437)),-1);
if(!x7439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7438.value)+(((1.5707963267949)*(x7439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7440=IKsin(j4);
IkReal x7441=IKcos(j4);
IkReal x7442=((1.0)*sj0);
IkReal x7443=(cj5*r00);
IkReal x7444=(r11*sj5);
IkReal x7445=(cj5*r10);
IkReal x7446=(r21*sj5);
IkReal x7447=(cj5*r20);
IkReal x7448=(r01*sj5);
IkReal x7449=((1.0)*x7441);
IkReal x7450=((1.0)*x7440);
evalcond[0]=((((-1.0)*x7447*x7450))+((x7440*x7446))+(((-1.0)*r22*x7449)));
evalcond[1]=((((-1.0)*x7446*x7449))+(((-1.0)*r22*x7450))+((x7441*x7447)));
evalcond[2]=(cj0+((x7440*x7444))+(((-1.0)*x7445*x7450))+(((-1.0)*r12*x7449)));
evalcond[3]=((((-1.0)*x7443*x7450))+(((-1.0)*x7442))+(((-1.0)*r02*x7449))+((x7440*x7448)));
evalcond[4]=((((-1.0)*x7448*x7449))+(((-1.0)*r02*x7450))+((x7441*x7443))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7442))+(((-1.0)*x7444*x7449))+(((-1.0)*r12*x7450))+((x7441*x7445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7451=((1.0)*cj5);
CheckValue<IkReal> x7452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7451)))),-1);
if(!x7452.valid){
continue;
}
CheckValue<IkReal> x7453 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7452.value)))+(x7453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7454=IKsin(j4);
IkReal x7455=IKcos(j4);
IkReal x7456=((1.0)*sj0);
IkReal x7457=(cj5*r00);
IkReal x7458=(r11*sj5);
IkReal x7459=(cj5*r10);
IkReal x7460=(r21*sj5);
IkReal x7461=(cj5*r20);
IkReal x7462=(r01*sj5);
IkReal x7463=((1.0)*x7455);
IkReal x7464=((1.0)*x7454);
evalcond[0]=((((-1.0)*r22*x7463))+(((-1.0)*x7461*x7464))+((x7454*x7460)));
evalcond[1]=((((-1.0)*r22*x7464))+(((-1.0)*x7460*x7463))+((x7455*x7461)));
evalcond[2]=(((x7454*x7458))+cj0+(((-1.0)*r12*x7463))+(((-1.0)*x7459*x7464)));
evalcond[3]=((((-1.0)*x7456))+(((-1.0)*r02*x7463))+((x7454*x7462))+(((-1.0)*x7457*x7464)));
evalcond[4]=(((x7455*x7457))+(((-1.0)*r02*x7464))+(((-1.0)*x7462*x7463))+(((-1.0)*cj0)));
evalcond[5]=(((x7455*x7459))+(((-1.0)*x7456))+(((-1.0)*x7458*x7463))+(((-1.0)*r12*x7464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7465=((1.0)*cj5);
CheckValue<IkReal> x7466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7465)))),-1);
if(!x7466.valid){
continue;
}
CheckValue<IkReal> x7467 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7466.value)))+(x7467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7468=IKsin(j4);
IkReal x7469=IKcos(j4);
IkReal x7470=((1.0)*sj0);
IkReal x7471=(cj5*r00);
IkReal x7472=(r11*sj5);
IkReal x7473=(cj5*r10);
IkReal x7474=(r21*sj5);
IkReal x7475=(cj5*r20);
IkReal x7476=(r01*sj5);
IkReal x7477=((1.0)*x7469);
IkReal x7478=((1.0)*x7468);
evalcond[0]=((((-1.0)*x7475*x7478))+(((-1.0)*r22*x7477))+((x7468*x7474)));
evalcond[1]=(((x7469*x7475))+(((-1.0)*x7474*x7477))+(((-1.0)*r22*x7478)));
evalcond[2]=(cj0+(((-1.0)*x7473*x7478))+((x7468*x7472))+(((-1.0)*r12*x7477)));
evalcond[3]=((((-1.0)*r02*x7477))+(((-1.0)*x7470))+((x7468*x7476))+(((-1.0)*x7471*x7478)));
evalcond[4]=((((-1.0)*r02*x7478))+((x7469*x7471))+(((-1.0)*x7476*x7477))+(((-1.0)*cj0)));
evalcond[5]=(((x7469*x7473))+(((-1.0)*x7470))+(((-1.0)*x7472*x7477))+(((-1.0)*r12*x7478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7479=((1.0)*sj5);
IkReal x7480=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7480))+(((-1.0)*r10*x7479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7479))+(((-1.0)*r01*x7480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7480))+(((-1.0)*r10*x7479))))+IKsqr(((((-1.0)*r00*x7479))+(((-1.0)*r01*x7480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7480))+(((-1.0)*r10*x7479))), ((((-1.0)*r00*x7479))+(((-1.0)*r01*x7480))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7481=IKsin(j0);
IkReal x7482=IKcos(j0);
IkReal x7483=((1.0)*cj5);
IkReal x7484=((1.0)*sj5);
IkReal x7485=((0.09465)*cj5);
IkReal x7486=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7482))+(((-1.0)*r01*x7483))+(((-1.0)*r00*x7484)));
evalcond[1]=((((-1.0)*x7481))+(((-1.0)*r10*x7484))+(((-1.0)*r11*x7483)));
evalcond[2]=((((-1.0)*r01*x7485))+(((-1.0)*px))+(((-1.0)*r00*x7486))+(((-0.10915)*x7481)));
evalcond[3]=((((0.10915)*x7482))+(((-1.0)*py))+(((-1.0)*r10*x7486))+(((-1.0)*r11*x7485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7487=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7487;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7488=((1.0)*cj5);
IkReal x7489=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7488)));
j4eval[0]=x7489;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7488))))));
j4eval[2]=IKsign(x7489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7490=cj5*cj5;
IkReal x7491=r21*r21;
IkReal x7492=(r21*sj5);
IkReal x7493=(cj5*r20);
IkReal x7494=((r22*r22)+((x7490*(r20*r20)))+(((-1.0)*x7490*x7491))+x7491+(((-2.0)*x7492*x7493)));
j4eval[0]=x7494;
j4eval[1]=IKsign(x7494);
j4eval[2]=((IKabs(((((-1.0)*x7493))+x7492)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7495=cj5*cj5;
IkReal x7496=r21*r21;
IkReal x7497=(r21*sj5);
IkReal x7498=(cj5*r20);
CheckValue<IkReal> x7499=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x7495*x7496))+(((-2.0)*x7497*x7498))+x7496+((x7495*(r20*r20))))),-1);
if(!x7499.valid){
continue;
}
CheckValue<IkReal> x7500 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7498))+x7497)),IKFAST_ATAN2_MAGTHRESH);
if(!x7500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7499.value)))+(x7500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7501=IKsin(j4);
IkReal x7502=IKcos(j4);
IkReal x7503=(r11*sj5);
IkReal x7504=(r21*sj5);
IkReal x7505=(cj5*r00);
IkReal x7506=(cj5*r20);
IkReal x7507=(r01*sj5);
IkReal x7508=(cj5*r10);
IkReal x7509=((1.0)*x7502);
IkReal x7510=((1.0)*x7501);
evalcond[0]=((((-1.0)*r22*x7509))+((x7501*x7504))+(((-1.0)*x7506*x7510)));
evalcond[1]=((((-1.0)*x7507*x7509))+(((-1.0)*r02*x7510))+((x7502*x7505)));
evalcond[2]=((((-1.0)*x7503*x7509))+((x7502*x7508))+(((-1.0)*r12*x7510)));
evalcond[3]=(cj0+(((-1.0)*x7508*x7510))+((x7501*x7503))+(((-1.0)*r12*x7509)));
evalcond[4]=((1.0)+((x7502*x7506))+(((-1.0)*x7504*x7509))+(((-1.0)*r22*x7510)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7509))+((x7501*x7507))+(((-1.0)*x7505*x7510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7511=((1.0)*cj5);
CheckValue<IkReal> x7512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7511))+(((-1.0)*r00*sj5)))),-1);
if(!x7512.valid){
continue;
}
CheckValue<IkReal> x7513 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7512.value)))+(x7513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7514=IKsin(j4);
IkReal x7515=IKcos(j4);
IkReal x7516=(r11*sj5);
IkReal x7517=(r21*sj5);
IkReal x7518=(cj5*r00);
IkReal x7519=(cj5*r20);
IkReal x7520=(r01*sj5);
IkReal x7521=(cj5*r10);
IkReal x7522=((1.0)*x7515);
IkReal x7523=((1.0)*x7514);
evalcond[0]=((((-1.0)*x7519*x7523))+((x7514*x7517))+(((-1.0)*r22*x7522)));
evalcond[1]=(((x7515*x7518))+(((-1.0)*r02*x7523))+(((-1.0)*x7520*x7522)));
evalcond[2]=((((-1.0)*x7516*x7522))+(((-1.0)*r12*x7523))+((x7515*x7521)));
evalcond[3]=(cj0+(((-1.0)*x7521*x7523))+((x7514*x7516))+(((-1.0)*r12*x7522)));
evalcond[4]=((1.0)+((x7515*x7519))+(((-1.0)*x7517*x7522))+(((-1.0)*r22*x7523)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7522))+(((-1.0)*x7518*x7523))+((x7514*x7520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7524 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7524.valid){
continue;
}
CheckValue<IkReal> x7525=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7524.value)+(((1.5707963267949)*(x7525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7526=IKsin(j4);
IkReal x7527=IKcos(j4);
IkReal x7528=(r11*sj5);
IkReal x7529=(r21*sj5);
IkReal x7530=(cj5*r00);
IkReal x7531=(cj5*r20);
IkReal x7532=(r01*sj5);
IkReal x7533=(cj5*r10);
IkReal x7534=((1.0)*x7527);
IkReal x7535=((1.0)*x7526);
evalcond[0]=(((x7526*x7529))+(((-1.0)*r22*x7534))+(((-1.0)*x7531*x7535)));
evalcond[1]=((((-1.0)*x7532*x7534))+((x7527*x7530))+(((-1.0)*r02*x7535)));
evalcond[2]=((((-1.0)*r12*x7535))+(((-1.0)*x7528*x7534))+((x7527*x7533)));
evalcond[3]=(((x7526*x7528))+cj0+(((-1.0)*r12*x7534))+(((-1.0)*x7533*x7535)));
evalcond[4]=((1.0)+(((-1.0)*x7529*x7534))+(((-1.0)*r22*x7535))+((x7527*x7531)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7530*x7535))+((x7526*x7532))+(((-1.0)*r02*x7534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7536=IKcos(j0);
IkReal x7537=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x7536))+(((-0.10915)*x7537)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7537))+(((0.10915)*x7536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7538=((1.0)*cj5);
IkReal x7539=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7538)));
j4eval[0]=x7539;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7538))))));
j4eval[2]=IKsign(x7539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7540=cj5*cj5;
IkReal x7541=((1.0)*r21);
IkReal x7542=(cj5*sj5);
IkReal x7543=((1.0)*r20);
IkReal x7544=(((r00*r20*x7540))+(((-1.0)*r00*x7541*x7542))+(((-1.0)*r01*x7540*x7541))+((r01*r21))+(((-1.0)*r01*x7542*x7543))+((r02*r22)));
j4eval[0]=x7544;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7543)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7545=cj5*cj5;
IkReal x7546=(r21*sj5);
IkReal x7547=(r11*r21);
IkReal x7548=((1.0)*cj5*r20);
IkReal x7549=((((-1.0)*r11*sj5*x7548))+((r10*r20*x7545))+(((-1.0)*x7545*x7547))+((r12*r22))+x7547+(((-1.0)*cj5*r10*x7546)));
j4eval[0]=x7549;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7546))+(((-1.0)*sj0*x7548))))));
j4eval[2]=IKsign(x7549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7550=cj5*cj5;
IkReal x7551=(r21*sj5);
IkReal x7552=(r11*r21);
IkReal x7553=((1.0)*cj5*r20);
CheckValue<IkReal> x7554 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7551))+(((-1.0)*sj0*x7553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7554.valid){
continue;
}
CheckValue<IkReal> x7555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7553))+((r10*r20*x7550))+((r12*r22))+(((-1.0)*x7550*x7552))+x7552+(((-1.0)*cj5*r10*x7551)))),-1);
if(!x7555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7554.value)+(((1.5707963267949)*(x7555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7556=IKsin(j4);
IkReal x7557=IKcos(j4);
IkReal x7558=(r11*sj5);
IkReal x7559=(cj5*r00);
IkReal x7560=(cj5*r10);
IkReal x7561=(r21*sj5);
IkReal x7562=(cj5*r20);
IkReal x7563=(r01*sj5);
IkReal x7564=((1.0)*x7557);
IkReal x7565=((1.0)*x7556);
evalcond[0]=((((-1.0)*x7562*x7565))+(((-1.0)*r22*x7564))+((x7556*x7561)));
evalcond[1]=((((-1.0)*r22*x7565))+((x7557*x7562))+(((-1.0)*x7561*x7564)));
evalcond[2]=(cj0+((x7556*x7558))+(((-1.0)*r12*x7564))+(((-1.0)*x7560*x7565)));
evalcond[3]=((((-1.0)*x7563*x7564))+(((-1.0)*r02*x7565))+cj0+((x7557*x7559)));
evalcond[4]=(sj0+((x7557*x7560))+(((-1.0)*r12*x7565))+(((-1.0)*x7558*x7564)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7564))+(((-1.0)*x7559*x7565))+((x7556*x7563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7566=cj5*cj5;
IkReal x7567=((1.0)*r21);
IkReal x7568=(cj5*sj5);
IkReal x7569=((1.0)*r20);
CheckValue<IkReal> x7570=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7567*x7568))+((r00*r20*x7566))+(((-1.0)*r01*x7568*x7569))+((r01*r21))+(((-1.0)*r01*x7566*x7567))+((r02*r22)))),-1);
if(!x7570.valid){
continue;
}
CheckValue<IkReal> x7571 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7570.value)))+(x7571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7572=IKsin(j4);
IkReal x7573=IKcos(j4);
IkReal x7574=(r11*sj5);
IkReal x7575=(cj5*r00);
IkReal x7576=(cj5*r10);
IkReal x7577=(r21*sj5);
IkReal x7578=(cj5*r20);
IkReal x7579=(r01*sj5);
IkReal x7580=((1.0)*x7573);
IkReal x7581=((1.0)*x7572);
evalcond[0]=((((-1.0)*r22*x7580))+((x7572*x7577))+(((-1.0)*x7578*x7581)));
evalcond[1]=(((x7573*x7578))+(((-1.0)*r22*x7581))+(((-1.0)*x7577*x7580)));
evalcond[2]=((((-1.0)*x7576*x7581))+cj0+(((-1.0)*r12*x7580))+((x7572*x7574)));
evalcond[3]=(((x7573*x7575))+cj0+(((-1.0)*r02*x7581))+(((-1.0)*x7579*x7580)));
evalcond[4]=(((x7573*x7576))+sj0+(((-1.0)*x7574*x7580))+(((-1.0)*r12*x7581)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7580))+(((-1.0)*x7575*x7581))+((x7572*x7579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7582=((1.0)*cj5);
CheckValue<IkReal> x7583 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7582))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7583.valid){
continue;
}
CheckValue<IkReal> x7584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7582))+(((-1.0)*r00*sj5)))),-1);
if(!x7584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7583.value)+(((1.5707963267949)*(x7584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7585=IKsin(j4);
IkReal x7586=IKcos(j4);
IkReal x7587=(r11*sj5);
IkReal x7588=(cj5*r00);
IkReal x7589=(cj5*r10);
IkReal x7590=(r21*sj5);
IkReal x7591=(cj5*r20);
IkReal x7592=(r01*sj5);
IkReal x7593=((1.0)*x7586);
IkReal x7594=((1.0)*x7585);
evalcond[0]=((((-1.0)*x7591*x7594))+((x7585*x7590))+(((-1.0)*r22*x7593)));
evalcond[1]=((((-1.0)*x7590*x7593))+((x7586*x7591))+(((-1.0)*r22*x7594)));
evalcond[2]=(cj0+(((-1.0)*x7589*x7594))+(((-1.0)*r12*x7593))+((x7585*x7587)));
evalcond[3]=((((-1.0)*x7592*x7593))+cj0+((x7586*x7588))+(((-1.0)*r02*x7594)));
evalcond[4]=(sj0+(((-1.0)*r12*x7594))+(((-1.0)*x7587*x7593))+((x7586*x7589)));
evalcond[5]=((((-1.0)*sj0))+((x7585*x7592))+(((-1.0)*r02*x7593))+(((-1.0)*x7588*x7594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7595=cj1*cj1;
IkReal x7596=(cj1*sj1);
IkReal x7597=(cj1*sj2);
IkReal x7598=(r00*sj5);
IkReal x7599=(cj2*sj1);
IkReal x7600=(cj5*r01);
IkReal x7601=((20000.0)*py);
IkReal x7602=((1893.0)*r10*sj5);
IkReal x7603=((1893.0)*cj5*r11);
IkReal x7604=(sj2*x7595);
CheckValue<IkReal> x7605=IKPowWithIntegerCheck(((((-15690.0)*cj2*x7604))+(((-8500.0)*x7604))+(((7845.0)*cj2*sj2))+(((-8500.0)*cj2*x7596))+(((-15690.0)*x7596*(cj2*cj2)))+(((7845.0)*x7596))),-1);
if(!x7605.valid){
continue;
}
CheckValue<IkReal> x7606=IKPowWithIntegerCheck(((((-1.0)*x7599))+(((-1.0)*x7597))),-1);
if(!x7606.valid){
continue;
}
if( IKabs(((x7605.value)*(((((-1.0)*x7597*x7601))+(((-1.0)*x7597*x7602))+(((-1.0)*x7597*x7603))+(((-2183.0)*x7598))+(((-1.0)*x7599*x7603))+(((-1.0)*x7599*x7602))+(((-1.0)*x7599*x7601))+(((-2183.0)*x7600)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7606.value)*((x7598+x7600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7605.value)*(((((-1.0)*x7597*x7601))+(((-1.0)*x7597*x7602))+(((-1.0)*x7597*x7603))+(((-2183.0)*x7598))+(((-1.0)*x7599*x7603))+(((-1.0)*x7599*x7602))+(((-1.0)*x7599*x7601))+(((-2183.0)*x7600))))))+IKsqr(((x7606.value)*((x7598+x7600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7605.value)*(((((-1.0)*x7597*x7601))+(((-1.0)*x7597*x7602))+(((-1.0)*x7597*x7603))+(((-2183.0)*x7598))+(((-1.0)*x7599*x7603))+(((-1.0)*x7599*x7602))+(((-1.0)*x7599*x7601))+(((-2183.0)*x7600))))), ((x7606.value)*((x7598+x7600))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7607=IKcos(j0);
IkReal x7608=IKsin(j0);
IkReal x7609=((1.0)*cj1);
IkReal x7610=((0.39225)*sj1);
IkReal x7611=(cj5*r11);
IkReal x7612=((1.0)*sj5);
IkReal x7613=(cj5*r01);
IkReal x7614=((1.0)*sj1);
IkReal x7615=((0.09465)*sj5);
IkReal x7616=((0.39225)*cj1);
IkReal x7617=((0.425)*cj1);
IkReal x7618=(sj2*x7607);
IkReal x7619=(sj2*x7608);
IkReal x7620=(cj2*x7607);
IkReal x7621=(cj2*x7608);
evalcond[0]=((((-1.0)*x7614*x7620))+(((-1.0)*r00*x7612))+(((-1.0)*x7613))+(((-1.0)*x7609*x7618)));
evalcond[1]=((((-1.0)*x7614*x7621))+(((-1.0)*x7611))+(((-1.0)*r10*x7612))+(((-1.0)*x7609*x7619)));
evalcond[2]=((((-1.0)*x7610*x7618))+(((-0.09465)*x7613))+((x7616*x7620))+(((-1.0)*px))+(((-1.0)*r00*x7615))+((x7607*x7617))+(((-0.10915)*x7608)));
evalcond[3]=((((-1.0)*x7610*x7619))+(((-0.09465)*x7611))+((x7616*x7621))+(((-1.0)*py))+((x7608*x7617))+(((0.10915)*x7607))+(((-1.0)*r10*x7615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7622=((1.0)*cj5);
IkReal x7623=((((-1.0)*r01*x7622))+(((-1.0)*r00*sj5)));
j4eval[0]=x7623;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7622))))));
j4eval[2]=IKsign(x7623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7624=((1.0)*cj5);
IkReal x7625=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7624)));
j4eval[0]=x7625;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7624))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7626=((1.0)*sj0);
IkReal x7627=((1.0)*cj0);
IkReal x7628=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7628;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x7626))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7627))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x7626))+(((-1.0)*r02*x7627))))));
j4eval[2]=IKsign(x7628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7629=((-1.0)*r20);
IkReal x7631 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7631)==0){
continue;
}
IkReal x7630=pow(x7631,-0.5);
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7629),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7632.value));
IkReal gconst133=(r21*x7630);
IkReal gconst134=(x7629*x7630);
CheckValue<IkReal> x7633 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7633.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7633.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7634=((-1.0)*r20);
IkReal x7635=x7630;
CheckValue<IkReal> x7637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7634),IKFAST_ATAN2_MAGTHRESH);
if(!x7637.valid){
continue;
}
IkReal x7636=((-1.0)*(x7637.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7636;
IkReal gconst132=x7636;
IkReal gconst133=(r21*x7635);
IkReal gconst134=(x7634*x7635);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7638=((-1.0)*r20);
IkReal x7639=x7630;
CheckValue<IkReal> x7641 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7638),IKFAST_ATAN2_MAGTHRESH);
if(!x7641.valid){
continue;
}
IkReal x7640=((-1.0)*(x7641.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7640;
IkReal gconst132=x7640;
IkReal gconst133=(r21*x7639);
IkReal gconst134=(x7638*x7639);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7642=((-1.0)*r20);
IkReal x7643=x7630;
CheckValue<IkReal> x7645 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7642),IKFAST_ATAN2_MAGTHRESH);
if(!x7645.valid){
continue;
}
IkReal x7644=((-1.0)*(x7645.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7644;
IkReal gconst132=x7644;
IkReal gconst133=(r21*x7643);
IkReal gconst134=(x7642*x7643);
IkReal x7646=r22*r22;
CheckValue<IkReal> x7649=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7646))),-1);
if(!x7649.valid){
continue;
}
IkReal x7647=x7649.value;
IkReal x7648=(((x7647*(r21*r21*r21*r21)))+((x7647*(r20*r20*r20*r20)))+(((2.0)*x7647*(r20*r20)*(r21*r21)))+x7646);
j4eval[0]=x7648;
j4eval[1]=IKsign(x7648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7650=(gconst133*r21);
IkReal x7651=(cj1*sj2);
IkReal x7652=(gconst134*r20);
IkReal x7653=(cj2*sj1);
CheckValue<IkReal> x7654=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7650*x7652))+(r22*r22)+(x7652*x7652)+(x7650*x7650))),-1);
if(!x7654.valid){
continue;
}
CheckValue<IkReal> x7655 = IKatan2WithCheck(IkReal((((r22*x7651))+((r22*x7653)))),IkReal(((((-1.0)*x7651*x7652))+((x7650*x7651))+((x7650*x7653))+(((-1.0)*x7652*x7653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7654.value)))+(x7655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7656=IKsin(j4);
IkReal x7657=IKcos(j4);
IkReal x7658=(sj1*sj2);
IkReal x7659=(gconst133*r11);
IkReal x7660=(gconst133*r21);
IkReal x7661=(gconst133*r01);
IkReal x7662=((1.0)*x7657);
IkReal x7663=(gconst134*x7657);
IkReal x7664=((1.0)*x7656);
IkReal x7665=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7664))+(((-1.0)*r22*x7662))+((x7656*x7660)));
evalcond[1]=((((-1.0)*gconst134*r10*x7664))+((x7656*x7659))+(((-1.0)*r12*x7662))+cj0);
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7662))+((x7656*x7661))+(((-1.0)*gconst134*r00*x7664)));
evalcond[3]=(((cj2*sj1))+((r20*x7663))+((cj1*sj2))+(((-1.0)*r22*x7664))+(((-1.0)*x7660*x7662)));
evalcond[4]=((((-1.0)*cj0*x7665))+((r00*x7663))+(((-1.0)*x7661*x7662))+(((-1.0)*r02*x7664))+((cj0*x7658)));
evalcond[5]=((((-1.0)*r12*x7664))+((r10*x7663))+(((-1.0)*sj0*x7665))+(((-1.0)*x7659*x7662))+((sj0*x7658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7666=((1.0)*gconst134);
CheckValue<IkReal> x7667 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7666))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7667.valid){
continue;
}
CheckValue<IkReal> x7668=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7666)))),-1);
if(!x7668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7667.value)+(((1.5707963267949)*(x7668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7669=IKsin(j4);
IkReal x7670=IKcos(j4);
IkReal x7671=(sj1*sj2);
IkReal x7672=(gconst133*r11);
IkReal x7673=(gconst133*r21);
IkReal x7674=(gconst133*r01);
IkReal x7675=((1.0)*x7670);
IkReal x7676=(gconst134*x7670);
IkReal x7677=((1.0)*x7669);
IkReal x7678=((1.0)*cj1*cj2);
evalcond[0]=(((x7669*x7673))+(((-1.0)*gconst134*r20*x7677))+(((-1.0)*r22*x7675)));
evalcond[1]=(((x7669*x7672))+cj0+(((-1.0)*gconst134*r10*x7677))+(((-1.0)*r12*x7675)));
evalcond[2]=(((x7669*x7674))+(((-1.0)*sj0))+(((-1.0)*r02*x7675))+(((-1.0)*gconst134*r00*x7677)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7676))+(((-1.0)*x7673*x7675))+(((-1.0)*r22*x7677)));
evalcond[4]=((((-1.0)*x7674*x7675))+(((-1.0)*r02*x7677))+(((-1.0)*cj0*x7678))+((cj0*x7671))+((r00*x7676)));
evalcond[5]=(((sj0*x7671))+(((-1.0)*sj0*x7678))+(((-1.0)*r12*x7677))+((r10*x7676))+(((-1.0)*x7672*x7675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7679=((1.0)*gconst134);
CheckValue<IkReal> x7680=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7679)))),-1);
if(!x7680.valid){
continue;
}
CheckValue<IkReal> x7681 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7679))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7680.value)))+(x7681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7682=IKsin(j4);
IkReal x7683=IKcos(j4);
IkReal x7684=(sj1*sj2);
IkReal x7685=(gconst133*r11);
IkReal x7686=(gconst133*r21);
IkReal x7687=(gconst133*r01);
IkReal x7688=((1.0)*x7683);
IkReal x7689=(gconst134*x7683);
IkReal x7690=((1.0)*x7682);
IkReal x7691=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7690))+(((-1.0)*r22*x7688))+((x7682*x7686)));
evalcond[1]=((((-1.0)*gconst134*r10*x7690))+cj0+(((-1.0)*r12*x7688))+((x7682*x7685)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7690))+((x7682*x7687))+(((-1.0)*r02*x7688)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7689))+(((-1.0)*r22*x7690))+(((-1.0)*x7686*x7688)));
evalcond[4]=((((-1.0)*r02*x7690))+(((-1.0)*cj0*x7691))+(((-1.0)*x7687*x7688))+((cj0*x7684))+((r00*x7689)));
evalcond[5]=(((sj0*x7684))+((r10*x7689))+(((-1.0)*r12*x7690))+(((-1.0)*x7685*x7688))+(((-1.0)*sj0*x7691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7692=((-1.0)*r21);
IkReal x7694 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7694)==0){
continue;
}
IkReal x7693=pow(x7694,-0.5);
CheckValue<IkReal> x7695 = IKatan2WithCheck(IkReal(x7692),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7695.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7695.value))));
IkReal gconst136=(x7692*x7693);
IkReal gconst137=((1.0)*r20*x7693);
CheckValue<IkReal> x7696 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7696.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7696.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7697=((-1.0)*r21);
CheckValue<IkReal> x7700 = IKatan2WithCheck(IkReal(x7697),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7700.valid){
continue;
}
IkReal x7698=((1.0)*(x7700.value));
IkReal x7699=x7693;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7698)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7698)));
IkReal gconst136=(x7697*x7699);
IkReal gconst137=((1.0)*r20*x7699);
IkReal x7701=r22*r22;
IkReal x7702=((1.0)*x7701);
CheckValue<IkReal> x7706=IKPowWithIntegerCheck(((-1.0)+x7701),-1);
if(!x7706.valid){
continue;
}
IkReal x7703=x7706.value;
if((((1.0)+(((-1.0)*x7702)))) < -0.00001)
continue;
IkReal x7704=IKsqrt(((1.0)+(((-1.0)*x7702))));
IkReal x7705=(cj0*x7703*x7704);
j4eval[0]=((IKabs(((((-1.0)*x7702*x7705))+x7705)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7707=((-1.0)*r21);
CheckValue<IkReal> x7710 = IKatan2WithCheck(IkReal(x7707),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7710.valid){
continue;
}
IkReal x7708=((1.0)*(x7710.value));
IkReal x7709=x7693;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7708)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7708)));
IkReal gconst136=(x7707*x7709);
IkReal gconst137=((1.0)*r20*x7709);
IkReal x7711=r22*r22;
IkReal x7712=((1.0)*x7711);
CheckValue<IkReal> x7716=IKPowWithIntegerCheck(((-1.0)+x7711),-1);
if(!x7716.valid){
continue;
}
IkReal x7713=x7716.value;
if((((1.0)+(((-1.0)*x7712)))) < -0.00001)
continue;
IkReal x7714=IKsqrt(((1.0)+(((-1.0)*x7712))));
IkReal x7715=(sj0*x7713*x7714);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7712*x7715))+x7715))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7717=((-1.0)*r21);
CheckValue<IkReal> x7720 = IKatan2WithCheck(IkReal(x7717),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7720.valid){
continue;
}
IkReal x7718=((1.0)*(x7720.value));
IkReal x7719=x7693;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7718)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7718)));
IkReal gconst136=(x7717*x7719);
IkReal gconst137=((1.0)*r20*x7719);
IkReal x7721=r22*r22;
IkReal x7722=(r12*sj0);
IkReal x7723=(cj0*r02);
CheckValue<IkReal> x7727=IKPowWithIntegerCheck(((-1.0)+x7721),-1);
if(!x7727.valid){
continue;
}
IkReal x7724=x7727.value;
if((((1.0)+(((-1.0)*x7721)))) < -0.00001)
continue;
IkReal x7725=IKsqrt(((1.0)+(((-1.0)*x7721))));
IkReal x7726=(r22*x7724*x7725);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7722*x7726))+((x7723*x7726)))))+(IKabs(((((-1.0)*x7722))+(((-1.0)*x7723))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7728=((1.0)*sj0);
IkReal x7729=((1.0)*cj0);
CheckValue<IkReal> x7730=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7730.valid){
continue;
}
CheckValue<IkReal> x7731 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7729))+(((-1.0)*r12*x7728)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7728))+(((-1.0)*gconst136*r01*x7729))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7730.value)))+(x7731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7732=IKsin(j4);
IkReal x7733=IKcos(j4);
IkReal x7734=(gconst136*r01);
IkReal x7735=(gconst137*r10);
IkReal x7736=(sj1*sj2);
IkReal x7737=(gconst137*r20);
IkReal x7738=(gconst136*r11);
IkReal x7739=(gconst136*r21);
IkReal x7740=(gconst137*r00);
IkReal x7741=((1.0)*x7733);
IkReal x7742=((1.0)*cj1*cj2);
IkReal x7743=((1.0)*x7732);
evalcond[0]=((((-1.0)*r22*x7741))+((x7732*x7739))+(((-1.0)*x7737*x7743)));
evalcond[1]=(cj0+((x7732*x7738))+(((-1.0)*x7735*x7743))+(((-1.0)*r12*x7741)));
evalcond[2]=((((-1.0)*sj0))+((x7732*x7734))+(((-1.0)*r02*x7741))+(((-1.0)*x7740*x7743)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7743))+((x7733*x7737))+((cj1*sj2))+(((-1.0)*x7739*x7741)));
evalcond[4]=(((x7733*x7740))+(((-1.0)*r02*x7743))+((cj0*x7736))+(((-1.0)*cj0*x7742))+(((-1.0)*x7734*x7741)));
evalcond[5]=(((x7733*x7735))+(((-1.0)*r12*x7743))+((sj0*x7736))+(((-1.0)*x7738*x7741))+(((-1.0)*sj0*x7742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7744=((1.0)*gconst137);
CheckValue<IkReal> x7745=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7744)))),-1);
if(!x7745.valid){
continue;
}
CheckValue<IkReal> x7746 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7744))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7745.value)))+(x7746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7747=IKsin(j4);
IkReal x7748=IKcos(j4);
IkReal x7749=(gconst136*r01);
IkReal x7750=(gconst137*r10);
IkReal x7751=(sj1*sj2);
IkReal x7752=(gconst137*r20);
IkReal x7753=(gconst136*r11);
IkReal x7754=(gconst136*r21);
IkReal x7755=(gconst137*r00);
IkReal x7756=((1.0)*x7748);
IkReal x7757=((1.0)*cj1*cj2);
IkReal x7758=((1.0)*x7747);
evalcond[0]=((((-1.0)*r22*x7756))+(((-1.0)*x7752*x7758))+((x7747*x7754)));
evalcond[1]=(cj0+(((-1.0)*r12*x7756))+((x7747*x7753))+(((-1.0)*x7750*x7758)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7755*x7758))+(((-1.0)*r02*x7756))+((x7747*x7749)));
evalcond[3]=((((-1.0)*r22*x7758))+((cj2*sj1))+(((-1.0)*x7754*x7756))+((cj1*sj2))+((x7748*x7752)));
evalcond[4]=((((-1.0)*r02*x7758))+(((-1.0)*cj0*x7757))+((cj0*x7751))+((x7748*x7755))+(((-1.0)*x7749*x7756)));
evalcond[5]=(((sj0*x7751))+(((-1.0)*r12*x7758))+(((-1.0)*x7753*x7756))+((x7748*x7750))+(((-1.0)*sj0*x7757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7759=((1.0)*gconst137);
CheckValue<IkReal> x7760=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7759)))),-1);
if(!x7760.valid){
continue;
}
CheckValue<IkReal> x7761 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7760.value)))+(x7761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7762=IKsin(j4);
IkReal x7763=IKcos(j4);
IkReal x7764=(gconst136*r01);
IkReal x7765=(gconst137*r10);
IkReal x7766=(sj1*sj2);
IkReal x7767=(gconst137*r20);
IkReal x7768=(gconst136*r11);
IkReal x7769=(gconst136*r21);
IkReal x7770=(gconst137*r00);
IkReal x7771=((1.0)*x7763);
IkReal x7772=((1.0)*cj1*cj2);
IkReal x7773=((1.0)*x7762);
evalcond[0]=((((-1.0)*x7767*x7773))+(((-1.0)*r22*x7771))+((x7762*x7769)));
evalcond[1]=(cj0+((x7762*x7768))+(((-1.0)*r12*x7771))+(((-1.0)*x7765*x7773)));
evalcond[2]=((((-1.0)*r02*x7771))+(((-1.0)*sj0))+(((-1.0)*x7770*x7773))+((x7762*x7764)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7769*x7771))+(((-1.0)*r22*x7773))+((cj1*sj2))+((x7763*x7767)));
evalcond[4]=((((-1.0)*r02*x7773))+(((-1.0)*cj0*x7772))+(((-1.0)*x7764*x7771))+((cj0*x7766))+((x7763*x7770)));
evalcond[5]=((((-1.0)*x7768*x7771))+((sj0*x7766))+(((-1.0)*sj0*x7772))+((x7763*x7765))+(((-1.0)*r12*x7773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7774=((-1.0)*r10);
IkReal x7776 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7776)==0){
continue;
}
IkReal x7775=pow(x7776,-0.5);
CheckValue<IkReal> x7777 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7774),IKFAST_ATAN2_MAGTHRESH);
if(!x7777.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7777.value));
IkReal gconst139=(r11*x7775);
IkReal gconst140=(x7774*x7775);
CheckValue<IkReal> x7778 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7778.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7778.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7779=((-1.0)*r10);
IkReal x7780=x7775;
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7779),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
IkReal x7781=((-1.0)*(x7782.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7781;
IkReal gconst138=x7781;
IkReal gconst139=(r11*x7780);
IkReal gconst140=(x7779*x7780);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7783=((1.0)*sj0);
IkReal x7784=((1.0)*gconst139);
CheckValue<IkReal> x7785=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7784)))),-1);
if(!x7785.valid){
continue;
}
CheckValue<IkReal> x7786 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7783)))),IkReal(((((-1.0)*gconst139*r11*x7783))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7784))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7785.value)))+(x7786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7787=IKsin(j4);
IkReal x7788=IKcos(j4);
IkReal x7789=(gconst140*r00);
IkReal x7790=(sj1*sj2);
IkReal x7791=(gconst139*r11);
IkReal x7792=(gconst139*r01);
IkReal x7793=(gconst139*r21);
IkReal x7794=((1.0)*x7788);
IkReal x7795=((1.0)*x7787);
IkReal x7796=((1.0)*cj1*cj2);
IkReal x7797=(gconst140*x7788);
evalcond[0]=((((-1.0)*r22*x7794))+((x7787*x7793))+(((-1.0)*gconst140*r20*x7795)));
evalcond[1]=(cj0+(((-1.0)*r12*x7794))+(((-1.0)*gconst140*r10*x7795))+((x7787*x7791)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7794))+((x7787*x7792))+(((-1.0)*x7789*x7795)));
evalcond[3]=((((-1.0)*r22*x7795))+((cj2*sj1))+(((-1.0)*x7793*x7794))+((cj1*sj2))+((r20*x7797)));
evalcond[4]=((((-1.0)*cj0*x7796))+(((-1.0)*x7792*x7794))+((cj0*x7790))+(((-1.0)*r02*x7795))+((x7788*x7789)));
evalcond[5]=(((r10*x7797))+(((-1.0)*x7791*x7794))+(((-1.0)*r12*x7795))+(((-1.0)*sj0*x7796))+((sj0*x7790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7798=((1.0)*gconst140);
CheckValue<IkReal> x7799=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7798)))),-1);
if(!x7799.valid){
continue;
}
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7799.value)))+(x7800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7801=IKsin(j4);
IkReal x7802=IKcos(j4);
IkReal x7803=(gconst140*r00);
IkReal x7804=(sj1*sj2);
IkReal x7805=(gconst139*r11);
IkReal x7806=(gconst139*r01);
IkReal x7807=(gconst139*r21);
IkReal x7808=((1.0)*x7802);
IkReal x7809=((1.0)*x7801);
IkReal x7810=((1.0)*cj1*cj2);
IkReal x7811=(gconst140*x7802);
evalcond[0]=((((-1.0)*gconst140*r20*x7809))+(((-1.0)*r22*x7808))+((x7801*x7807)));
evalcond[1]=(cj0+(((-1.0)*r12*x7808))+(((-1.0)*gconst140*r10*x7809))+((x7801*x7805)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7808))+(((-1.0)*x7803*x7809))+((x7801*x7806)));
evalcond[3]=(((cj2*sj1))+((r20*x7811))+((cj1*sj2))+(((-1.0)*x7807*x7808))+(((-1.0)*r22*x7809)));
evalcond[4]=(((x7802*x7803))+((cj0*x7804))+(((-1.0)*r02*x7809))+(((-1.0)*cj0*x7810))+(((-1.0)*x7806*x7808)));
evalcond[5]=((((-1.0)*x7805*x7808))+((r10*x7811))+(((-1.0)*r12*x7809))+((sj0*x7804))+(((-1.0)*sj0*x7810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7812=((-1.0)*r11);
IkReal x7814 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7814)==0){
continue;
}
IkReal x7813=pow(x7814,-0.5);
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal(x7812),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7815.value))));
IkReal gconst142=(x7812*x7813);
IkReal gconst143=((1.0)*r10*x7813);
CheckValue<IkReal> x7816 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7816.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7816.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7817=((-1.0)*r11);
CheckValue<IkReal> x7820 = IKatan2WithCheck(IkReal(x7817),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7820.valid){
continue;
}
IkReal x7818=((1.0)*(x7820.value));
IkReal x7819=x7813;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7818)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7818)));
IkReal gconst142=(x7817*x7819);
IkReal gconst143=((1.0)*r10*x7819);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7821=((-1.0)*r11);
CheckValue<IkReal> x7824 = IKatan2WithCheck(IkReal(x7821),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7824.valid){
continue;
}
IkReal x7822=((1.0)*(x7824.value));
IkReal x7823=x7813;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7822)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7822)));
IkReal gconst142=(x7821*x7823);
IkReal gconst143=((1.0)*r10*x7823);
IkReal x7825=r12*r12;
IkReal x7826=((1.0)*sj0);
IkReal x7827=(cj0*r02);
IkReal x7828=x7813;
j4eval[0]=((IKabs(((((-1.0)*x7826*x7828))+((r12*x7827*x7828))+((sj0*x7825*x7828)))))+(IKabs(((((-1.0)*x7827))+(((-1.0)*r12*x7826))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7829=((-1.0)*r11);
CheckValue<IkReal> x7832 = IKatan2WithCheck(IkReal(x7829),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7832.valid){
continue;
}
IkReal x7830=((1.0)*(x7832.value));
IkReal x7831=x7813;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7830)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7830)));
IkReal gconst142=(x7829*x7831);
IkReal gconst143=((1.0)*r10*x7831);
IkReal x7833=r12*r12;
IkReal x7834=(cj1*r22*sj2);
IkReal x7835=(cj2*r22*sj1);
CheckValue<IkReal> x7839=IKPowWithIntegerCheck(((-1.0)+x7833),-1);
if(!x7839.valid){
continue;
}
IkReal x7836=x7839.value;
if((((1.0)+(((-1.0)*x7833)))) < -0.00001)
continue;
IkReal x7837=IKsqrt(((1.0)+(((-1.0)*x7833))));
IkReal x7838=((1.0)*r12*x7836*x7837);
j4eval[0]=((IKabs(((((-1.0)*x7835*x7838))+(((-1.0)*x7834*x7838)))))+(IKabs((x7834+x7835))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7840=(gconst142*r21);
IkReal x7841=(cj1*sj2);
IkReal x7842=(cj2*sj1);
IkReal x7843=(gconst143*r20);
CheckValue<IkReal> x7844=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7843*x7843)+(((-2.0)*x7840*x7843))+(x7840*x7840))),-1);
if(!x7844.valid){
continue;
}
CheckValue<IkReal> x7845 = IKatan2WithCheck(IkReal((((r22*x7841))+((r22*x7842)))),IkReal(((((-1.0)*x7842*x7843))+(((-1.0)*x7841*x7843))+((x7840*x7842))+((x7840*x7841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7844.value)))+(x7845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7846=IKsin(j4);
IkReal x7847=IKcos(j4);
IkReal x7848=(sj1*sj2);
IkReal x7849=(gconst143*r20);
IkReal x7850=((1.0)*x7847);
IkReal x7851=((1.0)*cj1*cj2);
IkReal x7852=((1.0)*x7846);
IkReal x7853=(gconst142*x7846);
IkReal x7854=(gconst143*x7847);
evalcond[0]=((((-1.0)*x7849*x7852))+((r21*x7853))+(((-1.0)*r22*x7850)));
evalcond[1]=(((r11*x7853))+cj0+(((-1.0)*gconst143*r10*x7852))+(((-1.0)*r12*x7850)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7853))+(((-1.0)*r02*x7850))+(((-1.0)*gconst143*r00*x7852)));
evalcond[3]=(((cj2*sj1))+((x7847*x7849))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7850))+(((-1.0)*r22*x7852)));
evalcond[4]=((((-1.0)*cj0*x7851))+((cj0*x7848))+((r00*x7854))+(((-1.0)*r02*x7852))+(((-1.0)*gconst142*r01*x7850)));
evalcond[5]=((((-1.0)*sj0*x7851))+(((-1.0)*gconst142*r11*x7850))+((r10*x7854))+(((-1.0)*r12*x7852))+((sj0*x7848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7855=((1.0)*sj0);
IkReal x7856=((1.0)*gconst142);
CheckValue<IkReal> x7857 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7855)))),IkReal(((((-1.0)*gconst142*r11*x7855))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7856))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7857.valid){
continue;
}
CheckValue<IkReal> x7858=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7856)))),-1);
if(!x7858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7857.value)+(((1.5707963267949)*(x7858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7859=IKsin(j4);
IkReal x7860=IKcos(j4);
IkReal x7861=(sj1*sj2);
IkReal x7862=(gconst143*r20);
IkReal x7863=((1.0)*x7860);
IkReal x7864=((1.0)*cj1*cj2);
IkReal x7865=((1.0)*x7859);
IkReal x7866=(gconst142*x7859);
IkReal x7867=(gconst143*x7860);
evalcond[0]=((((-1.0)*x7862*x7865))+((r21*x7866))+(((-1.0)*r22*x7863)));
evalcond[1]=(cj0+((r11*x7866))+(((-1.0)*r12*x7863))+(((-1.0)*gconst143*r10*x7865)));
evalcond[2]=((((-1.0)*gconst143*r00*x7865))+(((-1.0)*sj0))+((r01*x7866))+(((-1.0)*r02*x7863)));
evalcond[3]=(((cj2*sj1))+((x7860*x7862))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7863))+(((-1.0)*r22*x7865)));
evalcond[4]=(((cj0*x7861))+(((-1.0)*gconst142*r01*x7863))+((r00*x7867))+(((-1.0)*r02*x7865))+(((-1.0)*cj0*x7864)));
evalcond[5]=(((sj0*x7861))+(((-1.0)*r12*x7865))+(((-1.0)*sj0*x7864))+((r10*x7867))+(((-1.0)*gconst142*r11*x7863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7868=((1.0)*gconst143);
CheckValue<IkReal> x7869 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7868))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7869.valid){
continue;
}
CheckValue<IkReal> x7870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7868))+(((-1.0)*gconst142*r00)))),-1);
if(!x7870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7869.value)+(((1.5707963267949)*(x7870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7871=IKsin(j4);
IkReal x7872=IKcos(j4);
IkReal x7873=(sj1*sj2);
IkReal x7874=(gconst143*r20);
IkReal x7875=((1.0)*x7872);
IkReal x7876=((1.0)*cj1*cj2);
IkReal x7877=((1.0)*x7871);
IkReal x7878=(gconst142*x7871);
IkReal x7879=(gconst143*x7872);
evalcond[0]=((((-1.0)*r22*x7875))+(((-1.0)*x7874*x7877))+((r21*x7878)));
evalcond[1]=(cj0+((r11*x7878))+(((-1.0)*r12*x7875))+(((-1.0)*gconst143*r10*x7877)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7878))+(((-1.0)*r02*x7875))+(((-1.0)*gconst143*r00*x7877)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7877))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7875))+((x7872*x7874)));
evalcond[4]=(((cj0*x7873))+(((-1.0)*gconst142*r01*x7875))+((r00*x7879))+(((-1.0)*r02*x7877))+(((-1.0)*cj0*x7876)));
evalcond[5]=((((-1.0)*gconst142*r11*x7875))+((r10*x7879))+(((-1.0)*r12*x7877))+((sj0*x7873))+(((-1.0)*sj0*x7876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7880=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7880;
j4eval[1]=IKsign(x7880);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7881=((1.0)*cj5);
IkReal x7882=((((-1.0)*r01*x7881))+(((-1.0)*r00*sj5)));
j4eval[0]=x7882;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7881)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7883=cj5*cj5;
IkReal x7884=r11*r11;
IkReal x7885=(r11*sj5);
IkReal x7886=(cj5*r10);
IkReal x7887=((r12*r12)+x7884+(((-2.0)*x7885*x7886))+(((-1.0)*x7883*x7884))+((x7883*(r10*r10))));
j4eval[0]=x7887;
j4eval[1]=IKsign(x7887);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7885))+x7886))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7888=cj5*cj5;
IkReal x7889=r11*r11;
IkReal x7890=(cj5*r10);
IkReal x7891=(r11*sj5);
CheckValue<IkReal> x7892 = IKatan2WithCheck(IkReal((x7890+(((-1.0)*x7891)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7892.valid){
continue;
}
CheckValue<IkReal> x7893=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7889+(((-2.0)*x7890*x7891))+(((-1.0)*x7888*x7889))+((x7888*(r10*r10))))),-1);
if(!x7893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7892.value)+(((1.5707963267949)*(x7893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7894=IKsin(j4);
IkReal x7895=IKcos(j4);
IkReal x7896=(cj5*r10);
IkReal x7897=(r01*sj5);
IkReal x7898=(cj5*r00);
IkReal x7899=(cj5*r20);
IkReal x7900=((1.0)*x7895);
IkReal x7901=((1.0)*x7894);
IkReal x7902=(sj5*x7894);
evalcond[0]=((((-1.0)*x7899*x7901))+((r21*x7902))+(((-1.0)*r22*x7900)));
evalcond[1]=((((-1.0)*x7898*x7901))+((x7894*x7897))+(((-1.0)*r02*x7900)));
evalcond[2]=((((-1.0)*r12*x7901))+(((-1.0)*r11*sj5*x7900))+((x7895*x7896)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7900))+((r11*x7902))+(((-1.0)*x7896*x7901)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7901))+((x7895*x7899))+(((-1.0)*r21*sj5*x7900)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7897*x7900))+((x7895*x7898))+(((-1.0)*r02*x7901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7903=((1.0)*cj5);
CheckValue<IkReal> x7904 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7904.valid){
continue;
}
CheckValue<IkReal> x7905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7903))+(((-1.0)*r00*sj5)))),-1);
if(!x7905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7904.value)+(((1.5707963267949)*(x7905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7906=IKsin(j4);
IkReal x7907=IKcos(j4);
IkReal x7908=(cj5*r10);
IkReal x7909=(r01*sj5);
IkReal x7910=(cj5*r00);
IkReal x7911=(cj5*r20);
IkReal x7912=((1.0)*x7907);
IkReal x7913=((1.0)*x7906);
IkReal x7914=(sj5*x7906);
evalcond[0]=(((r21*x7914))+(((-1.0)*r22*x7912))+(((-1.0)*x7911*x7913)));
evalcond[1]=((((-1.0)*r02*x7912))+(((-1.0)*x7910*x7913))+((x7906*x7909)));
evalcond[2]=((((-1.0)*r11*sj5*x7912))+(((-1.0)*r12*x7913))+((x7907*x7908)));
evalcond[3]=((1.0)+(((-1.0)*x7908*x7913))+((r11*x7914))+(((-1.0)*r12*x7912)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7913))+(((-1.0)*r21*sj5*x7912))+((x7907*x7911)));
evalcond[5]=((((-1.0)*r02*x7913))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7907*x7910))+(((-1.0)*x7909*x7912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7915=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7915.valid){
continue;
}
CheckValue<IkReal> x7916 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7915.value)))+(x7916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7917=IKsin(j4);
IkReal x7918=IKcos(j4);
IkReal x7919=(cj5*r10);
IkReal x7920=(r01*sj5);
IkReal x7921=(cj5*r00);
IkReal x7922=(cj5*r20);
IkReal x7923=((1.0)*x7918);
IkReal x7924=((1.0)*x7917);
IkReal x7925=(sj5*x7917);
evalcond[0]=((((-1.0)*x7922*x7924))+(((-1.0)*r22*x7923))+((r21*x7925)));
evalcond[1]=((((-1.0)*x7921*x7924))+(((-1.0)*r02*x7923))+((x7917*x7920)));
evalcond[2]=((((-1.0)*r11*sj5*x7923))+(((-1.0)*r12*x7924))+((x7918*x7919)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7923))+((r11*x7925))+(((-1.0)*x7919*x7924)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7924))+(((-1.0)*r21*sj5*x7923))+((x7918*x7922)));
evalcond[5]=((((-1.0)*x7920*x7923))+(((-1.0)*r02*x7924))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7918*x7921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7926=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7926;
j4eval[1]=IKsign(x7926);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7927=((1.0)*cj5);
IkReal x7928=((((-1.0)*r21*x7927))+(((-1.0)*r20*sj5)));
j4eval[0]=x7928;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7927))))));
j4eval[2]=IKsign(x7928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7929=cj5*cj5;
IkReal x7930=r11*r11;
IkReal x7931=(cj5*r10);
IkReal x7932=(r11*sj5);
IkReal x7933=((((-1.0)*x7929*(r10*r10)))+(((-1.0)*x7930))+(((-1.0)*(r12*r12)))+((x7929*x7930))+(((2.0)*x7931*x7932)));
j4eval[0]=x7933;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7932))+x7931))));
j4eval[2]=IKsign(x7933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7934=cj5*cj5;
IkReal x7935=r11*r11;
IkReal x7936=(cj5*r10);
IkReal x7937=(r11*sj5);
CheckValue<IkReal> x7938 = IKatan2WithCheck(IkReal(((((-1.0)*x7937))+x7936)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7938.valid){
continue;
}
CheckValue<IkReal> x7939=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7935))+(((-1.0)*(r12*r12)))+(((2.0)*x7936*x7937))+(((-1.0)*x7934*(r10*r10)))+((x7934*x7935)))),-1);
if(!x7939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7938.value)+(((1.5707963267949)*(x7939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7940=IKsin(j4);
IkReal x7941=IKcos(j4);
IkReal x7942=(cj5*r10);
IkReal x7943=(r01*sj5);
IkReal x7944=(cj5*r00);
IkReal x7945=(cj5*r20);
IkReal x7946=((1.0)*x7941);
IkReal x7947=((1.0)*x7940);
IkReal x7948=(sj5*x7940);
evalcond[0]=(((r21*x7948))+(((-1.0)*r22*x7946))+(((-1.0)*x7945*x7947)));
evalcond[1]=((((-1.0)*r02*x7946))+((x7940*x7943))+(((-1.0)*x7944*x7947)));
evalcond[2]=((((-1.0)*r11*sj5*x7946))+(((-1.0)*r12*x7947))+((x7941*x7942)));
evalcond[3]=((-1.0)+((r11*x7948))+(((-1.0)*r12*x7946))+(((-1.0)*x7942*x7947)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7947))+(((-1.0)*r21*sj5*x7946))+((cj1*sj2))+((x7941*x7945)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7947))+((x7941*x7944))+((cj1*cj2))+(((-1.0)*x7943*x7946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7949=((1.0)*cj5);
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x7949))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
CheckValue<IkReal> x7951=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7949))+(((-1.0)*r20*sj5)))),-1);
if(!x7951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7950.value)+(((1.5707963267949)*(x7951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7952=IKsin(j4);
IkReal x7953=IKcos(j4);
IkReal x7954=(cj5*r10);
IkReal x7955=(r01*sj5);
IkReal x7956=(cj5*r00);
IkReal x7957=(cj5*r20);
IkReal x7958=((1.0)*x7953);
IkReal x7959=((1.0)*x7952);
IkReal x7960=(sj5*x7952);
evalcond[0]=(((r21*x7960))+(((-1.0)*x7957*x7959))+(((-1.0)*r22*x7958)));
evalcond[1]=((((-1.0)*x7956*x7959))+(((-1.0)*r02*x7958))+((x7952*x7955)));
evalcond[2]=((((-1.0)*r11*sj5*x7958))+((x7953*x7954))+(((-1.0)*r12*x7959)));
evalcond[3]=((-1.0)+((r11*x7960))+(((-1.0)*x7954*x7959))+(((-1.0)*r12*x7958)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7959))+((cj1*sj2))+(((-1.0)*r21*sj5*x7958))+((x7953*x7957)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7955*x7958))+(((-1.0)*r02*x7959))+((cj1*cj2))+((x7953*x7956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7961 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7961.valid){
continue;
}
CheckValue<IkReal> x7962=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7961.value)+(((1.5707963267949)*(x7962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7963=IKsin(j4);
IkReal x7964=IKcos(j4);
IkReal x7965=(cj5*r10);
IkReal x7966=(r01*sj5);
IkReal x7967=(cj5*r00);
IkReal x7968=(cj5*r20);
IkReal x7969=((1.0)*x7964);
IkReal x7970=((1.0)*x7963);
IkReal x7971=(sj5*x7963);
evalcond[0]=((((-1.0)*x7968*x7970))+(((-1.0)*r22*x7969))+((r21*x7971)));
evalcond[1]=(((x7963*x7966))+(((-1.0)*x7967*x7970))+(((-1.0)*r02*x7969)));
evalcond[2]=(((x7964*x7965))+(((-1.0)*r11*sj5*x7969))+(((-1.0)*r12*x7970)));
evalcond[3]=((-1.0)+((r11*x7971))+(((-1.0)*x7965*x7970))+(((-1.0)*r12*x7969)));
evalcond[4]=(((x7964*x7968))+((cj2*sj1))+(((-1.0)*r22*x7970))+((cj1*sj2))+(((-1.0)*r21*sj5*x7969)));
evalcond[5]=(((x7964*x7967))+(((-1.0)*x7966*x7969))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7970))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7972=((-1.0)*r00);
IkReal x7974 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7974)==0){
continue;
}
IkReal x7973=pow(x7974,-0.5);
CheckValue<IkReal> x7975 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7972),IKFAST_ATAN2_MAGTHRESH);
if(!x7975.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7975.value));
IkReal gconst145=(r01*x7973);
IkReal gconst146=(x7972*x7973);
CheckValue<IkReal> x7976 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7976.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7976.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7977=((-1.0)*r00);
IkReal x7978=x7973;
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7977),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
IkReal x7979=((-1.0)*(x7980.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7979;
IkReal gconst144=x7979;
IkReal gconst145=(r01*x7978);
IkReal gconst146=(x7977*x7978);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7981=((1.0)*sj0);
IkReal x7982=((1.0)*gconst145);
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7981))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7981))+(((-1.0)*cj0*r01*x7982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
CheckValue<IkReal> x7984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7982))+(((-1.0)*gconst146*r21)))),-1);
if(!x7984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7983.value)+(((1.5707963267949)*(x7984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7985=IKsin(j4);
IkReal x7986=IKcos(j4);
IkReal x7987=(gconst146*r10);
IkReal x7988=(sj1*sj2);
IkReal x7989=(gconst146*r20);
IkReal x7990=(gconst146*r00);
IkReal x7991=((1.0)*x7986);
IkReal x7992=((1.0)*x7985);
IkReal x7993=(gconst145*x7985);
IkReal x7994=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7993))+(((-1.0)*x7989*x7992))+(((-1.0)*r22*x7991)));
evalcond[1]=(((r11*x7993))+(((-1.0)*r12*x7991))+cj0+(((-1.0)*x7987*x7992)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7993))+(((-1.0)*x7990*x7992))+(((-1.0)*r02*x7991)));
evalcond[3]=(((cj2*sj1))+((x7986*x7989))+(((-1.0)*gconst145*r21*x7991))+((cj1*sj2))+(((-1.0)*r22*x7992)));
evalcond[4]=((((-1.0)*gconst145*r01*x7991))+((cj0*x7988))+(((-1.0)*cj0*x7994))+(((-1.0)*r02*x7992))+((x7986*x7990)));
evalcond[5]=(((x7986*x7987))+(((-1.0)*r12*x7992))+(((-1.0)*gconst145*r11*x7991))+((sj0*x7988))+(((-1.0)*sj0*x7994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7995=((1.0)*gconst146);
CheckValue<IkReal> x7996 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7995))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7996.valid){
continue;
}
CheckValue<IkReal> x7997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7995))+(((-1.0)*gconst145*r10)))),-1);
if(!x7997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7996.value)+(((1.5707963267949)*(x7997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7998=IKsin(j4);
IkReal x7999=IKcos(j4);
IkReal x8000=(gconst146*r10);
IkReal x8001=(sj1*sj2);
IkReal x8002=(gconst146*r20);
IkReal x8003=(gconst146*r00);
IkReal x8004=((1.0)*x7999);
IkReal x8005=((1.0)*x7998);
IkReal x8006=(gconst145*x7998);
IkReal x8007=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8006))+(((-1.0)*x8002*x8005))+(((-1.0)*r22*x8004)));
evalcond[1]=(cj0+((r11*x8006))+(((-1.0)*r12*x8004))+(((-1.0)*x8000*x8005)));
evalcond[2]=(((r01*x8006))+(((-1.0)*sj0))+(((-1.0)*x8003*x8005))+(((-1.0)*r02*x8004)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8004))+((cj1*sj2))+((x7999*x8002))+(((-1.0)*r22*x8005)));
evalcond[4]=((((-1.0)*cj0*x8007))+((cj0*x8001))+(((-1.0)*gconst145*r01*x8004))+((x7999*x8003))+(((-1.0)*r02*x8005)));
evalcond[5]=(((sj0*x8001))+(((-1.0)*gconst145*r11*x8004))+(((-1.0)*r12*x8005))+(((-1.0)*sj0*x8007))+((x7999*x8000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8008=((-1.0)*r01);
IkReal x8010 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8010)==0){
continue;
}
IkReal x8009=pow(x8010,-0.5);
CheckValue<IkReal> x8011 = IKatan2WithCheck(IkReal(x8008),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8011.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8011.value))));
IkReal gconst148=(x8008*x8009);
IkReal gconst149=((1.0)*r00*x8009);
CheckValue<IkReal> x8012 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8012.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8012.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8013=((-1.0)*r01);
CheckValue<IkReal> x8016 = IKatan2WithCheck(IkReal(x8013),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8016.valid){
continue;
}
IkReal x8014=((1.0)*(x8016.value));
IkReal x8015=x8009;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8014)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8014)));
IkReal gconst148=(x8013*x8015);
IkReal gconst149=((1.0)*r00*x8015);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8017=((-1.0)*r01);
CheckValue<IkReal> x8020 = IKatan2WithCheck(IkReal(x8017),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8020.valid){
continue;
}
IkReal x8018=((1.0)*(x8020.value));
IkReal x8019=x8009;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8018)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8018)));
IkReal gconst148=(x8017*x8019);
IkReal gconst149=((1.0)*r00*x8019);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8021=((-1.0)*r01);
CheckValue<IkReal> x8024 = IKatan2WithCheck(IkReal(x8021),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8024.valid){
continue;
}
IkReal x8022=((1.0)*(x8024.value));
IkReal x8023=x8009;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8022)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8022)));
IkReal gconst148=(x8021*x8023);
IkReal gconst149=((1.0)*r00*x8023);
IkReal x8025=r02*r02;
IkReal x8026=(r12*sj0);
IkReal x8027=((1.0)*cj0);
IkReal x8028=x8009;
j4eval[0]=((IKabs(((((-1.0)*x8026))+(((-1.0)*r02*x8027)))))+(IKabs((((r02*x8026*x8028))+((cj0*x8025*x8028))+(((-1.0)*x8027*x8028))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8029=((1.0)*sj0);
IkReal x8030=((1.0)*gconst148);
CheckValue<IkReal> x8031=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8030))+(((-1.0)*gconst149*r21)))),-1);
if(!x8031.valid){
continue;
}
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8029))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8030))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8031.value)))+(x8032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8033=IKsin(j4);
IkReal x8034=IKcos(j4);
IkReal x8035=(gconst148*r11);
IkReal x8036=(sj1*sj2);
IkReal x8037=((1.0)*x8034);
IkReal x8038=(gconst149*x8034);
IkReal x8039=(gconst148*x8033);
IkReal x8040=((1.0)*cj1*cj2);
IkReal x8041=((1.0)*x8033);
evalcond[0]=(((r21*x8039))+(((-1.0)*gconst149*r20*x8041))+(((-1.0)*r22*x8037)));
evalcond[1]=(cj0+(((-1.0)*r12*x8037))+(((-1.0)*gconst149*r10*x8041))+((x8033*x8035)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8037))+(((-1.0)*gconst149*r00*x8041))+((r01*x8039)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8037))+((cj1*sj2))+((r20*x8038))+(((-1.0)*r22*x8041)));
evalcond[4]=((((-1.0)*cj0*x8040))+(((-1.0)*gconst148*r01*x8037))+((cj0*x8036))+(((-1.0)*r02*x8041))+((r00*x8038)));
evalcond[5]=(((r10*x8038))+((sj0*x8036))+(((-1.0)*x8035*x8037))+(((-1.0)*sj0*x8040))+(((-1.0)*r12*x8041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8042=((1.0)*gconst149);
CheckValue<IkReal> x8043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8042))+(((-1.0)*gconst148*r10)))),-1);
if(!x8043.valid){
continue;
}
CheckValue<IkReal> x8044 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8042))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8043.value)))+(x8044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8045=IKsin(j4);
IkReal x8046=IKcos(j4);
IkReal x8047=(gconst148*r11);
IkReal x8048=(sj1*sj2);
IkReal x8049=((1.0)*x8046);
IkReal x8050=(gconst149*x8046);
IkReal x8051=(gconst148*x8045);
IkReal x8052=((1.0)*cj1*cj2);
IkReal x8053=((1.0)*x8045);
evalcond[0]=((((-1.0)*gconst149*r20*x8053))+((r21*x8051))+(((-1.0)*r22*x8049)));
evalcond[1]=(cj0+((x8045*x8047))+(((-1.0)*gconst149*r10*x8053))+(((-1.0)*r12*x8049)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8049))+(((-1.0)*gconst149*r00*x8053))+((r01*x8051)));
evalcond[3]=(((cj2*sj1))+((r20*x8050))+(((-1.0)*gconst148*r21*x8049))+((cj1*sj2))+(((-1.0)*r22*x8053)));
evalcond[4]=(((r00*x8050))+(((-1.0)*gconst148*r01*x8049))+(((-1.0)*r02*x8053))+((cj0*x8048))+(((-1.0)*cj0*x8052)));
evalcond[5]=((((-1.0)*r12*x8053))+(((-1.0)*sj0*x8052))+((r10*x8050))+((sj0*x8048))+(((-1.0)*x8047*x8049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8054=((1.0)*gconst149);
CheckValue<IkReal> x8055=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8054)))),-1);
if(!x8055.valid){
continue;
}
CheckValue<IkReal> x8056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8055.value)))+(x8056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8057=IKsin(j4);
IkReal x8058=IKcos(j4);
IkReal x8059=(gconst148*r11);
IkReal x8060=(sj1*sj2);
IkReal x8061=((1.0)*x8058);
IkReal x8062=(gconst149*x8058);
IkReal x8063=(gconst148*x8057);
IkReal x8064=((1.0)*cj1*cj2);
IkReal x8065=((1.0)*x8057);
evalcond[0]=(((r21*x8063))+(((-1.0)*gconst149*r20*x8065))+(((-1.0)*r22*x8061)));
evalcond[1]=(cj0+(((-1.0)*r12*x8061))+(((-1.0)*gconst149*r10*x8065))+((x8057*x8059)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8063))+(((-1.0)*gconst149*r00*x8065))+(((-1.0)*r02*x8061)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8061))+((r20*x8062))+(((-1.0)*r22*x8065)));
evalcond[4]=((((-1.0)*cj0*x8064))+((r00*x8062))+((cj0*x8060))+(((-1.0)*gconst148*r01*x8061))+(((-1.0)*r02*x8065)));
evalcond[5]=(((r10*x8062))+(((-1.0)*sj0*x8064))+(((-1.0)*r12*x8065))+(((-1.0)*x8059*x8061))+((sj0*x8060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8066=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8066;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8067=((1.0)*cj5);
IkReal x8068=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8067)));
j4eval[0]=x8068;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8067)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8069=cj5*cj5;
IkReal x8070=r01*r01;
IkReal x8071=(r01*sj5);
IkReal x8072=(cj5*r00);
IkReal x8073=((((-1.0)*x8070))+((x8069*x8070))+(((-1.0)*(r02*r02)))+(((-1.0)*x8069*(r00*r00)))+(((2.0)*x8071*x8072)));
j4eval[0]=x8073;
j4eval[1]=IKsign(x8073);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8071))+x8072))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8074=cj5*cj5;
IkReal x8075=r01*r01;
IkReal x8076=(r01*sj5);
IkReal x8077=(cj5*r00);
CheckValue<IkReal> x8078=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8075))+(((-1.0)*(r02*r02)))+(((2.0)*x8076*x8077))+((x8074*x8075))+(((-1.0)*x8074*(r00*r00))))),-1);
if(!x8078.valid){
continue;
}
CheckValue<IkReal> x8079 = IKatan2WithCheck(IkReal(((((-1.0)*x8076))+x8077)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8078.value)))+(x8079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8080=IKsin(j4);
IkReal x8081=IKcos(j4);
IkReal x8082=(cj5*r10);
IkReal x8083=(r01*sj5);
IkReal x8084=(cj5*r00);
IkReal x8085=(cj5*r20);
IkReal x8086=((1.0)*x8081);
IkReal x8087=((1.0)*x8080);
IkReal x8088=(sj5*x8080);
evalcond[0]=(((r21*x8088))+(((-1.0)*r22*x8086))+(((-1.0)*x8085*x8087)));
evalcond[1]=((((-1.0)*x8082*x8087))+((r11*x8088))+(((-1.0)*r12*x8086)));
evalcond[2]=((((-1.0)*r02*x8087))+(((-1.0)*x8083*x8086))+((x8081*x8084)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8086))+((x8080*x8083))+(((-1.0)*x8084*x8087)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8086))+((cj1*sj2))+((x8081*x8085))+(((-1.0)*r22*x8087)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8086))+((x8081*x8082))+(((-1.0)*r12*x8087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8089=((1.0)*cj5);
CheckValue<IkReal> x8090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8089)))),-1);
if(!x8090.valid){
continue;
}
CheckValue<IkReal> x8091 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8090.value)))+(x8091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8092=IKsin(j4);
IkReal x8093=IKcos(j4);
IkReal x8094=(cj5*r10);
IkReal x8095=(r01*sj5);
IkReal x8096=(cj5*r00);
IkReal x8097=(cj5*r20);
IkReal x8098=((1.0)*x8093);
IkReal x8099=((1.0)*x8092);
IkReal x8100=(sj5*x8092);
evalcond[0]=((((-1.0)*x8097*x8099))+(((-1.0)*r22*x8098))+((r21*x8100)));
evalcond[1]=((((-1.0)*x8094*x8099))+((r11*x8100))+(((-1.0)*r12*x8098)));
evalcond[2]=((((-1.0)*x8095*x8098))+(((-1.0)*r02*x8099))+((x8093*x8096)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8098))+((x8092*x8095))+(((-1.0)*x8096*x8099)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8098))+((cj1*sj2))+(((-1.0)*r22*x8099))+((x8093*x8097)));
evalcond[5]=((((-1.0)*r11*sj5*x8098))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8099))+((x8093*x8094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8101=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8101.valid){
continue;
}
CheckValue<IkReal> x8102 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8101.value)))+(x8102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8103=IKsin(j4);
IkReal x8104=IKcos(j4);
IkReal x8105=(cj5*r10);
IkReal x8106=(r01*sj5);
IkReal x8107=(cj5*r00);
IkReal x8108=(cj5*r20);
IkReal x8109=((1.0)*x8104);
IkReal x8110=((1.0)*x8103);
IkReal x8111=(sj5*x8103);
evalcond[0]=((((-1.0)*x8108*x8110))+((r21*x8111))+(((-1.0)*r22*x8109)));
evalcond[1]=((((-1.0)*x8105*x8110))+((r11*x8111))+(((-1.0)*r12*x8109)));
evalcond[2]=((((-1.0)*x8106*x8109))+(((-1.0)*r02*x8110))+((x8104*x8107)));
evalcond[3]=((-1.0)+((x8103*x8106))+(((-1.0)*r02*x8109))+(((-1.0)*x8107*x8110)));
evalcond[4]=((((-1.0)*r21*sj5*x8109))+((cj2*sj1))+((cj1*sj2))+((x8104*x8108))+(((-1.0)*r22*x8110)));
evalcond[5]=((((-1.0)*r12*x8110))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8104*x8105))+(((-1.0)*r11*sj5*x8109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8112=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8112;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8113=((1.0)*cj5);
IkReal x8114=((((-1.0)*r21*x8113))+(((-1.0)*r20*sj5)));
j4eval[0]=x8114;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8113))))));
j4eval[2]=IKsign(x8114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8115=cj5*cj5;
IkReal x8116=r01*r01;
IkReal x8117=(cj5*r00);
IkReal x8118=(r01*sj5);
IkReal x8119=((((-1.0)*x8115*x8116))+(((-2.0)*x8117*x8118))+((x8115*(r00*r00)))+(r02*r02)+x8116);
j4eval[0]=x8119;
j4eval[1]=((IKabs(r02))+(IKabs((x8117+(((-1.0)*x8118))))));
j4eval[2]=IKsign(x8119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8120=cj5*cj5;
IkReal x8121=r01*r01;
IkReal x8122=(r01*sj5);
IkReal x8123=(cj5*r00);
CheckValue<IkReal> x8124 = IKatan2WithCheck(IkReal((x8123+(((-1.0)*x8122)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8124.valid){
continue;
}
CheckValue<IkReal> x8125=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8120*x8121))+((x8120*(r00*r00)))+(((-2.0)*x8122*x8123))+(r02*r02)+x8121)),-1);
if(!x8125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8124.value)+(((1.5707963267949)*(x8125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8126=IKsin(j4);
IkReal x8127=IKcos(j4);
IkReal x8128=(cj5*r10);
IkReal x8129=(r01*sj5);
IkReal x8130=(cj5*r00);
IkReal x8131=(cj5*r20);
IkReal x8132=((1.0)*x8127);
IkReal x8133=((1.0)*x8126);
IkReal x8134=(sj5*x8126);
evalcond[0]=((((-1.0)*r22*x8132))+(((-1.0)*x8131*x8133))+((r21*x8134)));
evalcond[1]=(((r11*x8134))+(((-1.0)*r12*x8132))+(((-1.0)*x8128*x8133)));
evalcond[2]=((((-1.0)*r02*x8133))+((x8127*x8130))+(((-1.0)*x8129*x8132)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8132))+(((-1.0)*x8130*x8133))+((x8126*x8129)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8133))+(((-1.0)*r21*sj5*x8132))+((cj1*sj2))+((x8127*x8131)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8133))+(((-1.0)*r11*sj5*x8132))+((cj1*cj2))+((x8127*x8128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8135=((1.0)*cj5);
CheckValue<IkReal> x8136 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8136.valid){
continue;
}
CheckValue<IkReal> x8137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8135))+(((-1.0)*r20*sj5)))),-1);
if(!x8137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8136.value)+(((1.5707963267949)*(x8137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8138=IKsin(j4);
IkReal x8139=IKcos(j4);
IkReal x8140=(cj5*r10);
IkReal x8141=(r01*sj5);
IkReal x8142=(cj5*r00);
IkReal x8143=(cj5*r20);
IkReal x8144=((1.0)*x8139);
IkReal x8145=((1.0)*x8138);
IkReal x8146=(sj5*x8138);
evalcond[0]=((((-1.0)*x8143*x8145))+(((-1.0)*r22*x8144))+((r21*x8146)));
evalcond[1]=((((-1.0)*x8140*x8145))+((r11*x8146))+(((-1.0)*r12*x8144)));
evalcond[2]=((((-1.0)*x8141*x8144))+(((-1.0)*r02*x8145))+((x8139*x8142)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8144))+((x8138*x8141))+(((-1.0)*x8142*x8145)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8145))+(((-1.0)*r21*sj5*x8144))+((x8139*x8143)));
evalcond[5]=((((-1.0)*r11*sj5*x8144))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8145))+((cj1*cj2))+((x8139*x8140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8147 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8147.valid){
continue;
}
CheckValue<IkReal> x8148=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8147.value)+(((1.5707963267949)*(x8148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8149=IKsin(j4);
IkReal x8150=IKcos(j4);
IkReal x8151=(cj5*r10);
IkReal x8152=(r01*sj5);
IkReal x8153=(cj5*r00);
IkReal x8154=(cj5*r20);
IkReal x8155=((1.0)*x8150);
IkReal x8156=((1.0)*x8149);
IkReal x8157=(sj5*x8149);
evalcond[0]=((((-1.0)*r22*x8155))+((r21*x8157))+(((-1.0)*x8154*x8156)));
evalcond[1]=((((-1.0)*x8151*x8156))+((r11*x8157))+(((-1.0)*r12*x8155)));
evalcond[2]=((((-1.0)*r02*x8156))+((x8150*x8153))+(((-1.0)*x8152*x8155)));
evalcond[3]=((1.0)+(((-1.0)*x8153*x8156))+(((-1.0)*r02*x8155))+((x8149*x8152)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8150*x8154))+(((-1.0)*r21*sj5*x8155))+(((-1.0)*r22*x8156)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8155))+((x8150*x8151))+((cj1*cj2))+(((-1.0)*r12*x8156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8158=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8158);
rxp1_1=(px*r21);
rxp1_2=(r11*x8158);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8159=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8159);
rxp1_1=(px*r21);
rxp1_2=(r11*x8159);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8160=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8160);
rxp1_1=(px*r21);
rxp1_2=(r11*x8160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8163=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8163.valid){
continue;
}
IkReal x8161=x8163.value;
IkReal x8162=(sj0*x8161);
cj4array[0]=((((-1.0)*sj1*sj2*x8162))+((cj1*cj2*x8162)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8164=IKsin(j4);
IkReal x8165=IKcos(j4);
IkReal x8166=(r21*sj5);
IkReal x8167=(cj5*r20);
IkReal x8168=((1.0)*x8164);
IkReal x8169=((1.0)*x8165);
evalcond[0]=((-1.0)*r02*x8164);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8169)));
evalcond[2]=((((-1.0)*x8167*x8168))+((x8164*x8166)));
evalcond[3]=(((r11*sj5*x8164))+(((-1.0)*cj5*r10*x8168)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8166*x8169))+((cj1*sj2))+((x8165*x8167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8172=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8172.valid){
continue;
}
IkReal x8170=x8172.value;
IkReal x8171=((1.0)*x8170);
cj4array[0]=((((-1.0)*cj2*sj1*x8171))+(((-1.0)*cj1*sj2*x8171)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8173=IKsin(j4);
IkReal x8174=IKcos(j4);
IkReal x8175=(r11*sj5);
IkReal x8176=((1.0)*sj0);
IkReal x8177=((1.0)*x8174);
IkReal x8178=((1.0)*cj5*x8173);
evalcond[0]=((-1.0)*r02*x8173);
evalcond[1]=((((-1.0)*x8176))+(((-1.0)*r02*x8177)));
evalcond[2]=((((-1.0)*r20*x8178))+((r21*sj5*x8173)));
evalcond[3]=(((x8173*x8175))+(((-1.0)*r10*x8178)));
evalcond[4]=((((-1.0)*x8175*x8177))+((cj5*r10*x8174))+(((-1.0)*cj1*cj2*x8176))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8179=IKPowWithIntegerCheck(r02,-1);
if(!x8179.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8179.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8180=IKsin(j4);
IkReal x8181=IKcos(j4);
IkReal x8182=(cj5*x8181);
IkReal x8183=(sj5*x8180);
IkReal x8184=((1.0)*sj5*x8181);
IkReal x8185=((1.0)*cj5*x8180);
evalcond[0]=((-1.0)*r02*x8180);
evalcond[1]=(((r21*x8183))+(((-1.0)*r20*x8185)));
evalcond[2]=(((r11*x8183))+(((-1.0)*r10*x8185)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8184))+((r20*x8182)));
evalcond[4]=(((r10*x8182))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8184))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8186=((1.0)*sj0);
IkReal x8187=((1.0)*cj0);
CheckValue<IkReal> x8188 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8187))+(((-1.0)*r12*x8186)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8187))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8188.valid){
continue;
}
CheckValue<IkReal> x8189=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8188.value)+(((1.5707963267949)*(x8189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8190=IKsin(j4);
IkReal x8191=IKcos(j4);
IkReal x8192=(cj5*r10);
IkReal x8193=(sj1*sj2);
IkReal x8194=(r01*sj5);
IkReal x8195=(cj5*r00);
IkReal x8196=(cj5*r20);
IkReal x8197=((1.0)*x8191);
IkReal x8198=((1.0)*cj1*cj2);
IkReal x8199=((1.0)*x8190);
IkReal x8200=(sj5*x8190);
evalcond[0]=((((-1.0)*x8196*x8199))+(((-1.0)*r22*x8197))+((r21*x8200)));
evalcond[1]=(((r11*x8200))+cj0+(((-1.0)*x8192*x8199))+(((-1.0)*r12*x8197)));
evalcond[2]=((((-1.0)*r02*x8197))+(((-1.0)*sj0))+((x8190*x8194))+(((-1.0)*x8195*x8199)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8199))+((cj1*sj2))+(((-1.0)*r21*sj5*x8197))+((x8191*x8196)));
evalcond[4]=((((-1.0)*r02*x8199))+(((-1.0)*x8194*x8197))+((x8191*x8195))+(((-1.0)*cj0*x8198))+((cj0*x8193)));
evalcond[5]=(((sj0*x8193))+(((-1.0)*r12*x8199))+((x8191*x8192))+(((-1.0)*sj0*x8198))+(((-1.0)*r11*sj5*x8197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8201=((1.0)*cj5);
CheckValue<IkReal> x8202 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8202.valid){
continue;
}
CheckValue<IkReal> x8203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8201)))),-1);
if(!x8203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8202.value)+(((1.5707963267949)*(x8203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8204=IKsin(j4);
IkReal x8205=IKcos(j4);
IkReal x8206=(cj5*r10);
IkReal x8207=(sj1*sj2);
IkReal x8208=(r01*sj5);
IkReal x8209=(cj5*r00);
IkReal x8210=(cj5*r20);
IkReal x8211=((1.0)*x8205);
IkReal x8212=((1.0)*cj1*cj2);
IkReal x8213=((1.0)*x8204);
IkReal x8214=(sj5*x8204);
evalcond[0]=((((-1.0)*x8210*x8213))+(((-1.0)*r22*x8211))+((r21*x8214)));
evalcond[1]=(((r11*x8214))+cj0+(((-1.0)*r12*x8211))+(((-1.0)*x8206*x8213)));
evalcond[2]=((((-1.0)*sj0))+((x8204*x8208))+(((-1.0)*x8209*x8213))+(((-1.0)*r02*x8211)));
evalcond[3]=(((cj2*sj1))+((x8205*x8210))+((cj1*sj2))+(((-1.0)*r21*sj5*x8211))+(((-1.0)*r22*x8213)));
evalcond[4]=((((-1.0)*cj0*x8212))+((x8205*x8209))+((cj0*x8207))+(((-1.0)*r02*x8213))+(((-1.0)*x8208*x8211)));
evalcond[5]=(((sj0*x8207))+((x8205*x8206))+(((-1.0)*r12*x8213))+(((-1.0)*sj0*x8212))+(((-1.0)*r11*sj5*x8211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8215=((1.0)*cj5);
CheckValue<IkReal> x8216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8215))+(((-1.0)*r00*sj5)))),-1);
if(!x8216.valid){
continue;
}
CheckValue<IkReal> x8217 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8216.value)))+(x8217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8218=IKsin(j4);
IkReal x8219=IKcos(j4);
IkReal x8220=(cj5*r10);
IkReal x8221=(sj1*sj2);
IkReal x8222=(r01*sj5);
IkReal x8223=(cj5*r00);
IkReal x8224=(cj5*r20);
IkReal x8225=((1.0)*x8219);
IkReal x8226=((1.0)*cj1*cj2);
IkReal x8227=((1.0)*x8218);
IkReal x8228=(sj5*x8218);
evalcond[0]=((((-1.0)*x8224*x8227))+((r21*x8228))+(((-1.0)*r22*x8225)));
evalcond[1]=((((-1.0)*x8220*x8227))+cj0+((r11*x8228))+(((-1.0)*r12*x8225)));
evalcond[2]=((((-1.0)*x8223*x8227))+(((-1.0)*sj0))+((x8218*x8222))+(((-1.0)*r02*x8225)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8219*x8224))+(((-1.0)*r21*sj5*x8225))+(((-1.0)*r22*x8227)));
evalcond[4]=(((cj0*x8221))+(((-1.0)*r02*x8227))+((x8219*x8223))+(((-1.0)*cj0*x8226))+(((-1.0)*x8222*x8225)));
evalcond[5]=((((-1.0)*r11*sj5*x8225))+(((-1.0)*r12*x8227))+((x8219*x8220))+(((-1.0)*sj0*x8226))+((sj0*x8221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8229=cj5*cj5;
IkReal x8230=r21*r21;
IkReal x8231=(cj2*sj1);
IkReal x8232=(cj1*sj2);
IkReal x8233=(r21*sj5);
IkReal x8234=((1.0)*cj5*r20);
CheckValue<IkReal> x8235 = IKatan2WithCheck(IkReal((((r22*x8232))+((r22*x8231)))),IkReal((((x8231*x8233))+((x8232*x8233))+(((-1.0)*x8231*x8234))+(((-1.0)*x8232*x8234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8235.valid){
continue;
}
CheckValue<IkReal> x8236=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x8229*(r20*r20)))+(((-1.0)*x8229*x8230))+x8230+(((-2.0)*cj5*r20*x8233)))),-1);
if(!x8236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8235.value)+(((1.5707963267949)*(x8236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8237=IKsin(j4);
IkReal x8238=IKcos(j4);
IkReal x8239=(r21*sj5);
IkReal x8240=(cj5*r20);
IkReal x8241=((1.0)*x8238);
IkReal x8242=((1.0)*x8237);
evalcond[0]=((((-1.0)*x8240*x8242))+((x8237*x8239))+(((-1.0)*r22*x8241)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8239*x8241))+(((-1.0)*r22*x8242))+((x8238*x8240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8243=(cj5*sj4);
IkReal x8244=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8244))+(((-1.0)*r00*x8243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8243))+(((-1.0)*r11*x8244))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8244))+(((-1.0)*r00*x8243))))+IKsqr((((r10*x8243))+(((-1.0)*r11*x8244))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8244))+(((-1.0)*r00*x8243))), (((r10*x8243))+(((-1.0)*r11*x8244))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8245=IKcos(j0);
IkReal x8246=IKsin(j0);
IkReal x8247=(cj4*cj5);
IkReal x8248=((1.0)*cj1);
IkReal x8249=((0.39225)*sj1);
IkReal x8250=(r11*sj5);
IkReal x8251=(cj5*r11);
IkReal x8252=((1.0)*sj5);
IkReal x8253=((1.0)*sj4);
IkReal x8254=((1.0)*sj1);
IkReal x8255=((0.09465)*sj5);
IkReal x8256=(cj5*r01);
IkReal x8257=((0.425)*cj1);
IkReal x8258=((1.0)*cj4);
IkReal x8259=(sj2*x8245);
IkReal x8260=(sj2*x8246);
IkReal x8261=((0.39225)*cj1*cj2);
IkReal x8262=(cj2*x8245);
IkReal x8263=(cj2*x8246);
evalcond[0]=((((-1.0)*r12*x8258))+((sj4*x8250))+(((-1.0)*cj5*r10*x8253))+x8245);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8253))+(((-1.0)*r02*x8258))+(((-1.0)*x8246)));
evalcond[2]=((((-1.0)*x8248*x8259))+(((-1.0)*x8256))+(((-1.0)*x8254*x8262))+(((-1.0)*r00*x8252)));
evalcond[3]=((((-1.0)*x8251))+(((-1.0)*r10*x8252))+(((-1.0)*x8254*x8263))+(((-1.0)*x8248*x8260)));
evalcond[4]=(((sj1*x8259))+(((-1.0)*cj4*r01*x8252))+(((-1.0)*x8248*x8262))+(((-1.0)*r02*x8253))+((r00*x8247)));
evalcond[5]=(((r10*x8247))+(((-1.0)*r12*x8253))+(((-1.0)*x8248*x8263))+((sj1*x8260))+(((-1.0)*x8250*x8258)));
evalcond[6]=((((-1.0)*x8249*x8259))+(((-0.09465)*x8256))+((x8245*x8257))+(((-0.10915)*x8246))+(((-1.0)*r00*x8255))+(((-1.0)*px))+((x8245*x8261)));
evalcond[7]=((((-0.09465)*x8251))+(((-1.0)*r10*x8255))+((x8246*x8261))+(((-1.0)*py))+(((0.10915)*x8245))+(((-1.0)*x8249*x8260))+((x8246*x8257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8264 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8264.valid){
continue;
}
CheckValue<IkReal> x8265=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8265.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8264.value)+(((1.5707963267949)*(x8265.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8266=IKcos(j0);
IkReal x8267=IKsin(j0);
IkReal x8268=((1.0)*cj1);
IkReal x8269=((0.39225)*sj1);
IkReal x8270=(cj5*r11);
IkReal x8271=((1.0)*sj5);
IkReal x8272=(cj5*r01);
IkReal x8273=((1.0)*sj1);
IkReal x8274=((0.09465)*sj5);
IkReal x8275=((0.39225)*cj1);
IkReal x8276=((0.425)*cj1);
IkReal x8277=(sj2*x8266);
IkReal x8278=(sj2*x8267);
IkReal x8279=(cj2*x8266);
IkReal x8280=(cj2*x8267);
evalcond[0]=((((-1.0)*x8273*x8279))+(((-1.0)*x8268*x8277))+(((-1.0)*r00*x8271))+(((-1.0)*x8272)));
evalcond[1]=((((-1.0)*x8268*x8278))+(((-1.0)*r10*x8271))+(((-1.0)*x8270))+(((-1.0)*x8273*x8280)));
evalcond[2]=(((x8275*x8279))+((x8266*x8276))+(((-1.0)*px))+(((-0.10915)*x8267))+(((-1.0)*x8269*x8277))+(((-1.0)*r00*x8274))+(((-0.09465)*x8272)));
evalcond[3]=((((-1.0)*py))+(((0.10915)*x8266))+(((-1.0)*x8269*x8278))+(((-1.0)*r10*x8274))+((x8275*x8280))+((x8267*x8276))+(((-0.09465)*x8270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8281=((1.0)*cj5);
IkReal x8282=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8281)));
j4eval[0]=x8282;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x8281))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x8282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8283=((1.0)*cj5);
IkReal x8284=((((-1.0)*r11*x8283))+(((-1.0)*r10*sj5)));
j4eval[0]=x8284;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8283))))));
j4eval[2]=IKsign(x8284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8285=((1.0)*sj0);
IkReal x8286=((1.0)*cj0);
IkReal x8287=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8287;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8285))+(((-1.0)*r01*sj5*x8286)))))+(IKabs(((((-1.0)*r02*x8286))+(((-1.0)*r12*x8285))))));
j4eval[2]=IKsign(x8287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8288=((-1.0)*r20);
IkReal x8290 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8290)==0){
continue;
}
IkReal x8289=pow(x8290,-0.5);
CheckValue<IkReal> x8291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8288),IKFAST_ATAN2_MAGTHRESH);
if(!x8291.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8291.value));
IkReal gconst133=(r21*x8289);
IkReal gconst134=(x8288*x8289);
CheckValue<IkReal> x8292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8292.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8292.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8293=((-1.0)*r20);
IkReal x8294=x8289;
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8293),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
IkReal x8295=((-1.0)*(x8296.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8295;
IkReal gconst132=x8295;
IkReal gconst133=(r21*x8294);
IkReal gconst134=(x8293*x8294);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8297=((-1.0)*r20);
IkReal x8298=x8289;
CheckValue<IkReal> x8300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8297),IKFAST_ATAN2_MAGTHRESH);
if(!x8300.valid){
continue;
}
IkReal x8299=((-1.0)*(x8300.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8299;
IkReal gconst132=x8299;
IkReal gconst133=(r21*x8298);
IkReal gconst134=(x8297*x8298);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8301=((-1.0)*r20);
IkReal x8302=x8289;
CheckValue<IkReal> x8304 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8301),IKFAST_ATAN2_MAGTHRESH);
if(!x8304.valid){
continue;
}
IkReal x8303=((-1.0)*(x8304.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8303;
IkReal gconst132=x8303;
IkReal gconst133=(r21*x8302);
IkReal gconst134=(x8301*x8302);
IkReal x8305=r22*r22;
CheckValue<IkReal> x8308=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8305))),-1);
if(!x8308.valid){
continue;
}
IkReal x8306=x8308.value;
IkReal x8307=(x8305+(((2.0)*x8306*(r20*r20)*(r21*r21)))+((x8306*(r20*r20*r20*r20)))+((x8306*(r21*r21*r21*r21))));
j4eval[0]=x8307;
j4eval[1]=IKsign(x8307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8309=(gconst133*r21);
IkReal x8310=(cj1*sj2);
IkReal x8311=(gconst134*r20);
IkReal x8312=(cj2*sj1);
CheckValue<IkReal> x8313 = IKatan2WithCheck(IkReal((((r22*x8310))+((r22*x8312)))),IkReal(((((-1.0)*x8311*x8312))+(((-1.0)*x8310*x8311))+((x8309*x8310))+((x8309*x8312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8313.valid){
continue;
}
CheckValue<IkReal> x8314=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8309*x8311))+(x8309*x8309)+(x8311*x8311))),-1);
if(!x8314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8313.value)+(((1.5707963267949)*(x8314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8315=IKsin(j4);
IkReal x8316=IKcos(j4);
IkReal x8317=(sj1*sj2);
IkReal x8318=(gconst133*r11);
IkReal x8319=(gconst133*r21);
IkReal x8320=(gconst133*r01);
IkReal x8321=((1.0)*x8316);
IkReal x8322=(gconst134*x8316);
IkReal x8323=((1.0)*x8315);
IkReal x8324=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8323))+(((-1.0)*r22*x8321))+((x8315*x8319)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x8323))+((x8315*x8318))+(((-1.0)*r12*x8321)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8323))+((x8315*x8320))+(((-1.0)*r02*x8321)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8323))+((cj1*sj2))+((r20*x8322))+(((-1.0)*x8319*x8321)));
evalcond[4]=(((cj0*x8317))+((r00*x8322))+(((-1.0)*x8320*x8321))+(((-1.0)*r02*x8323))+(((-1.0)*cj0*x8324)));
evalcond[5]=(((r10*x8322))+(((-1.0)*x8318*x8321))+((sj0*x8317))+(((-1.0)*sj0*x8324))+(((-1.0)*r12*x8323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8325=((1.0)*gconst134);
CheckValue<IkReal> x8326=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8325)))),-1);
if(!x8326.valid){
continue;
}
CheckValue<IkReal> x8327 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8325))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8326.value)))+(x8327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8328=IKsin(j4);
IkReal x8329=IKcos(j4);
IkReal x8330=(sj1*sj2);
IkReal x8331=(gconst133*r11);
IkReal x8332=(gconst133*r21);
IkReal x8333=(gconst133*r01);
IkReal x8334=((1.0)*x8329);
IkReal x8335=(gconst134*x8329);
IkReal x8336=((1.0)*x8328);
IkReal x8337=((1.0)*cj1*cj2);
evalcond[0]=(((x8328*x8332))+(((-1.0)*r22*x8334))+(((-1.0)*gconst134*r20*x8336)));
evalcond[1]=(((x8328*x8331))+cj0+(((-1.0)*r12*x8334))+(((-1.0)*gconst134*r10*x8336)));
evalcond[2]=((((-1.0)*gconst134*r00*x8336))+((x8328*x8333))+(((-1.0)*sj0))+(((-1.0)*r02*x8334)));
evalcond[3]=((((-1.0)*x8332*x8334))+((cj2*sj1))+(((-1.0)*r22*x8336))+((cj1*sj2))+((r20*x8335)));
evalcond[4]=(((r00*x8335))+(((-1.0)*r02*x8336))+((cj0*x8330))+(((-1.0)*x8333*x8334))+(((-1.0)*cj0*x8337)));
evalcond[5]=((((-1.0)*r12*x8336))+((r10*x8335))+(((-1.0)*sj0*x8337))+(((-1.0)*x8331*x8334))+((sj0*x8330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8338=((1.0)*gconst134);
CheckValue<IkReal> x8339 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8338))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8339.valid){
continue;
}
CheckValue<IkReal> x8340=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8338)))),-1);
if(!x8340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8339.value)+(((1.5707963267949)*(x8340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8341=IKsin(j4);
IkReal x8342=IKcos(j4);
IkReal x8343=(sj1*sj2);
IkReal x8344=(gconst133*r11);
IkReal x8345=(gconst133*r21);
IkReal x8346=(gconst133*r01);
IkReal x8347=((1.0)*x8342);
IkReal x8348=(gconst134*x8342);
IkReal x8349=((1.0)*x8341);
IkReal x8350=((1.0)*cj1*cj2);
evalcond[0]=(((x8341*x8345))+(((-1.0)*r22*x8347))+(((-1.0)*gconst134*r20*x8349)));
evalcond[1]=((((-1.0)*gconst134*r10*x8349))+cj0+((x8341*x8344))+(((-1.0)*r12*x8347)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8347))+((x8341*x8346))+(((-1.0)*gconst134*r00*x8349)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8345*x8347))+((cj1*sj2))+((r20*x8348))+(((-1.0)*r22*x8349)));
evalcond[4]=((((-1.0)*cj0*x8350))+(((-1.0)*r02*x8349))+((cj0*x8343))+(((-1.0)*x8346*x8347))+((r00*x8348)));
evalcond[5]=(((sj0*x8343))+(((-1.0)*sj0*x8350))+(((-1.0)*r12*x8349))+(((-1.0)*x8344*x8347))+((r10*x8348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8351=((-1.0)*r21);
IkReal x8353 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8353)==0){
continue;
}
IkReal x8352=pow(x8353,-0.5);
CheckValue<IkReal> x8354 = IKatan2WithCheck(IkReal(x8351),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8354.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8354.value))));
IkReal gconst136=(x8351*x8352);
IkReal gconst137=((1.0)*r20*x8352);
CheckValue<IkReal> x8355 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8355.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8355.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8356=((-1.0)*r21);
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal(x8356),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
IkReal x8357=((1.0)*(x8359.value));
IkReal x8358=x8352;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8357)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8357)));
IkReal gconst136=(x8356*x8358);
IkReal gconst137=((1.0)*r20*x8358);
IkReal x8360=r22*r22;
IkReal x8361=((1.0)*x8360);
CheckValue<IkReal> x8365=IKPowWithIntegerCheck(((-1.0)+x8360),-1);
if(!x8365.valid){
continue;
}
IkReal x8362=x8365.value;
if((((1.0)+(((-1.0)*x8361)))) < -0.00001)
continue;
IkReal x8363=IKsqrt(((1.0)+(((-1.0)*x8361))));
IkReal x8364=(cj0*x8362*x8363);
j4eval[0]=((IKabs((x8364+(((-1.0)*x8361*x8364)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8366=((-1.0)*r21);
CheckValue<IkReal> x8369 = IKatan2WithCheck(IkReal(x8366),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8369.valid){
continue;
}
IkReal x8367=((1.0)*(x8369.value));
IkReal x8368=x8352;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8367)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8367)));
IkReal gconst136=(x8366*x8368);
IkReal gconst137=((1.0)*r20*x8368);
IkReal x8370=r22*r22;
IkReal x8371=((1.0)*x8370);
CheckValue<IkReal> x8375=IKPowWithIntegerCheck(((-1.0)+x8370),-1);
if(!x8375.valid){
continue;
}
IkReal x8372=x8375.value;
if((((1.0)+(((-1.0)*x8371)))) < -0.00001)
continue;
IkReal x8373=IKsqrt(((1.0)+(((-1.0)*x8371))));
IkReal x8374=(sj0*x8372*x8373);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x8371*x8374))+x8374))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8376=((-1.0)*r21);
CheckValue<IkReal> x8379 = IKatan2WithCheck(IkReal(x8376),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8379.valid){
continue;
}
IkReal x8377=((1.0)*(x8379.value));
IkReal x8378=x8352;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8377)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8377)));
IkReal gconst136=(x8376*x8378);
IkReal gconst137=((1.0)*r20*x8378);
IkReal x8380=r22*r22;
IkReal x8381=(r12*sj0);
IkReal x8382=(cj0*r02);
CheckValue<IkReal> x8386=IKPowWithIntegerCheck(((-1.0)+x8380),-1);
if(!x8386.valid){
continue;
}
IkReal x8383=x8386.value;
if((((1.0)+(((-1.0)*x8380)))) < -0.00001)
continue;
IkReal x8384=IKsqrt(((1.0)+(((-1.0)*x8380))));
IkReal x8385=(r22*x8383*x8384);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8381*x8385))+((x8382*x8385)))))+(IKabs(((((-1.0)*x8382))+(((-1.0)*x8381))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8387=((1.0)*sj0);
IkReal x8388=((1.0)*cj0);
CheckValue<IkReal> x8389=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8389.valid){
continue;
}
CheckValue<IkReal> x8390 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8388))+(((-1.0)*r12*x8387)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8387))+(((-1.0)*gconst136*r01*x8388))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8389.value)))+(x8390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8391=IKsin(j4);
IkReal x8392=IKcos(j4);
IkReal x8393=(gconst136*r01);
IkReal x8394=(gconst137*r10);
IkReal x8395=(sj1*sj2);
IkReal x8396=(gconst137*r20);
IkReal x8397=(gconst136*r11);
IkReal x8398=(gconst136*r21);
IkReal x8399=(gconst137*r00);
IkReal x8400=((1.0)*x8392);
IkReal x8401=((1.0)*cj1*cj2);
IkReal x8402=((1.0)*x8391);
evalcond[0]=(((x8391*x8398))+(((-1.0)*r22*x8400))+(((-1.0)*x8396*x8402)));
evalcond[1]=(cj0+((x8391*x8397))+(((-1.0)*r12*x8400))+(((-1.0)*x8394*x8402)));
evalcond[2]=((((-1.0)*sj0))+((x8391*x8393))+(((-1.0)*r02*x8400))+(((-1.0)*x8399*x8402)));
evalcond[3]=(((cj2*sj1))+((x8392*x8396))+((cj1*sj2))+(((-1.0)*x8398*x8400))+(((-1.0)*r22*x8402)));
evalcond[4]=((((-1.0)*cj0*x8401))+((x8392*x8399))+(((-1.0)*x8393*x8400))+(((-1.0)*r02*x8402))+((cj0*x8395)));
evalcond[5]=(((x8392*x8394))+(((-1.0)*sj0*x8401))+((sj0*x8395))+(((-1.0)*r12*x8402))+(((-1.0)*x8397*x8400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8403=((1.0)*gconst137);
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8403))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
CheckValue<IkReal> x8405=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8403)))),-1);
if(!x8405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8404.value)+(((1.5707963267949)*(x8405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8406=IKsin(j4);
IkReal x8407=IKcos(j4);
IkReal x8408=(gconst136*r01);
IkReal x8409=(gconst137*r10);
IkReal x8410=(sj1*sj2);
IkReal x8411=(gconst137*r20);
IkReal x8412=(gconst136*r11);
IkReal x8413=(gconst136*r21);
IkReal x8414=(gconst137*r00);
IkReal x8415=((1.0)*x8407);
IkReal x8416=((1.0)*cj1*cj2);
IkReal x8417=((1.0)*x8406);
evalcond[0]=(((x8406*x8413))+(((-1.0)*x8411*x8417))+(((-1.0)*r22*x8415)));
evalcond[1]=((((-1.0)*r12*x8415))+(((-1.0)*x8409*x8417))+cj0+((x8406*x8412)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8414*x8417))+((x8406*x8408))+(((-1.0)*r02*x8415)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8407*x8411))+(((-1.0)*x8413*x8415))+(((-1.0)*r22*x8417)));
evalcond[4]=((((-1.0)*x8408*x8415))+((x8407*x8414))+(((-1.0)*cj0*x8416))+(((-1.0)*r02*x8417))+((cj0*x8410)));
evalcond[5]=((((-1.0)*r12*x8417))+((x8407*x8409))+(((-1.0)*x8412*x8415))+(((-1.0)*sj0*x8416))+((sj0*x8410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8418=((1.0)*gconst137);
CheckValue<IkReal> x8419=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8418)))),-1);
if(!x8419.valid){
continue;
}
CheckValue<IkReal> x8420 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8418))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8419.value)))+(x8420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8421=IKsin(j4);
IkReal x8422=IKcos(j4);
IkReal x8423=(gconst136*r01);
IkReal x8424=(gconst137*r10);
IkReal x8425=(sj1*sj2);
IkReal x8426=(gconst137*r20);
IkReal x8427=(gconst136*r11);
IkReal x8428=(gconst136*r21);
IkReal x8429=(gconst137*r00);
IkReal x8430=((1.0)*x8422);
IkReal x8431=((1.0)*cj1*cj2);
IkReal x8432=((1.0)*x8421);
evalcond[0]=((((-1.0)*x8426*x8432))+((x8421*x8428))+(((-1.0)*r22*x8430)));
evalcond[1]=(cj0+(((-1.0)*r12*x8430))+(((-1.0)*x8424*x8432))+((x8421*x8427)));
evalcond[2]=((((-1.0)*x8429*x8432))+(((-1.0)*sj0))+((x8421*x8423))+(((-1.0)*r02*x8430)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8422*x8426))+(((-1.0)*r22*x8432))+(((-1.0)*x8428*x8430)));
evalcond[4]=(((cj0*x8425))+((x8422*x8429))+(((-1.0)*r02*x8432))+(((-1.0)*cj0*x8431))+(((-1.0)*x8423*x8430)));
evalcond[5]=((((-1.0)*sj0*x8431))+(((-1.0)*x8427*x8430))+(((-1.0)*r12*x8432))+((sj0*x8425))+((x8422*x8424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8433=((-1.0)*r10);
IkReal x8435 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8435)==0){
continue;
}
IkReal x8434=pow(x8435,-0.5);
CheckValue<IkReal> x8436 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8433),IKFAST_ATAN2_MAGTHRESH);
if(!x8436.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8436.value));
IkReal gconst139=(r11*x8434);
IkReal gconst140=(x8433*x8434);
CheckValue<IkReal> x8437 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8437.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8437.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8438=((-1.0)*r10);
IkReal x8439=x8434;
CheckValue<IkReal> x8441 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8438),IKFAST_ATAN2_MAGTHRESH);
if(!x8441.valid){
continue;
}
IkReal x8440=((-1.0)*(x8441.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8440;
IkReal gconst138=x8440;
IkReal gconst139=(r11*x8439);
IkReal gconst140=(x8438*x8439);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8442=((1.0)*sj0);
IkReal x8443=((1.0)*gconst139);
CheckValue<IkReal> x8444 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8442))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8443))+(((-1.0)*gconst139*r11*x8442))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8444.valid){
continue;
}
CheckValue<IkReal> x8445=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8443)))),-1);
if(!x8445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8444.value)+(((1.5707963267949)*(x8445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8446=IKsin(j4);
IkReal x8447=IKcos(j4);
IkReal x8448=(gconst140*r00);
IkReal x8449=(sj1*sj2);
IkReal x8450=(gconst139*r11);
IkReal x8451=(gconst139*r01);
IkReal x8452=(gconst139*r21);
IkReal x8453=((1.0)*x8447);
IkReal x8454=((1.0)*x8446);
IkReal x8455=((1.0)*cj1*cj2);
IkReal x8456=(gconst140*x8447);
evalcond[0]=((((-1.0)*r22*x8453))+((x8446*x8452))+(((-1.0)*gconst140*r20*x8454)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8454))+(((-1.0)*r12*x8453))+((x8446*x8450)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8448*x8454))+((x8446*x8451))+(((-1.0)*r02*x8453)));
evalcond[3]=((((-1.0)*x8452*x8453))+((cj2*sj1))+((cj1*sj2))+((r20*x8456))+(((-1.0)*r22*x8454)));
evalcond[4]=((((-1.0)*x8451*x8453))+((x8447*x8448))+(((-1.0)*cj0*x8455))+(((-1.0)*r02*x8454))+((cj0*x8449)));
evalcond[5]=((((-1.0)*x8450*x8453))+(((-1.0)*sj0*x8455))+(((-1.0)*r12*x8454))+((sj0*x8449))+((r10*x8456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8457=((1.0)*gconst140);
CheckValue<IkReal> x8458=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8457))+(((-1.0)*gconst139*r00)))),-1);
if(!x8458.valid){
continue;
}
CheckValue<IkReal> x8459 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8458.value)))+(x8459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8460=IKsin(j4);
IkReal x8461=IKcos(j4);
IkReal x8462=(gconst140*r00);
IkReal x8463=(sj1*sj2);
IkReal x8464=(gconst139*r11);
IkReal x8465=(gconst139*r01);
IkReal x8466=(gconst139*r21);
IkReal x8467=((1.0)*x8461);
IkReal x8468=((1.0)*x8460);
IkReal x8469=((1.0)*cj1*cj2);
IkReal x8470=(gconst140*x8461);
evalcond[0]=((((-1.0)*gconst140*r20*x8468))+((x8460*x8466))+(((-1.0)*r22*x8467)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8468))+((x8460*x8464))+(((-1.0)*r12*x8467)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8467))+((x8460*x8465))+(((-1.0)*x8462*x8468)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8468))+(((-1.0)*x8466*x8467))+((r20*x8470)));
evalcond[4]=((((-1.0)*r02*x8468))+(((-1.0)*x8465*x8467))+((cj0*x8463))+((x8461*x8462))+(((-1.0)*cj0*x8469)));
evalcond[5]=((((-1.0)*sj0*x8469))+((r10*x8470))+(((-1.0)*r12*x8468))+((sj0*x8463))+(((-1.0)*x8464*x8467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8471=((-1.0)*r11);
IkReal x8473 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8473)==0){
continue;
}
IkReal x8472=pow(x8473,-0.5);
CheckValue<IkReal> x8474 = IKatan2WithCheck(IkReal(x8471),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8474.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8474.value))));
IkReal gconst142=(x8471*x8472);
IkReal gconst143=((1.0)*r10*x8472);
CheckValue<IkReal> x8475 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8475.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8475.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8476=((-1.0)*r11);
CheckValue<IkReal> x8479 = IKatan2WithCheck(IkReal(x8476),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8479.valid){
continue;
}
IkReal x8477=((1.0)*(x8479.value));
IkReal x8478=x8472;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8477)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8477)));
IkReal gconst142=(x8476*x8478);
IkReal gconst143=((1.0)*r10*x8478);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8480=((-1.0)*r11);
CheckValue<IkReal> x8483 = IKatan2WithCheck(IkReal(x8480),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8483.valid){
continue;
}
IkReal x8481=((1.0)*(x8483.value));
IkReal x8482=x8472;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8481)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8481)));
IkReal gconst142=(x8480*x8482);
IkReal gconst143=((1.0)*r10*x8482);
IkReal x8484=r12*r12;
IkReal x8485=((1.0)*sj0);
IkReal x8486=(cj0*r02);
IkReal x8487=x8472;
j4eval[0]=((IKabs(((((-1.0)*x8485*x8487))+((r12*x8486*x8487))+((sj0*x8484*x8487)))))+(IKabs(((((-1.0)*x8486))+(((-1.0)*r12*x8485))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8488=((-1.0)*r11);
CheckValue<IkReal> x8491 = IKatan2WithCheck(IkReal(x8488),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8491.valid){
continue;
}
IkReal x8489=((1.0)*(x8491.value));
IkReal x8490=x8472;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8489)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8489)));
IkReal gconst142=(x8488*x8490);
IkReal gconst143=((1.0)*r10*x8490);
IkReal x8492=r12*r12;
IkReal x8493=(cj1*r22*sj2);
IkReal x8494=(cj2*r22*sj1);
CheckValue<IkReal> x8498=IKPowWithIntegerCheck(((-1.0)+x8492),-1);
if(!x8498.valid){
continue;
}
IkReal x8495=x8498.value;
if((((1.0)+(((-1.0)*x8492)))) < -0.00001)
continue;
IkReal x8496=IKsqrt(((1.0)+(((-1.0)*x8492))));
IkReal x8497=((1.0)*r12*x8495*x8496);
j4eval[0]=((IKabs(((((-1.0)*x8494*x8497))+(((-1.0)*x8493*x8497)))))+(IKabs((x8493+x8494))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8499=(gconst142*r21);
IkReal x8500=(cj1*sj2);
IkReal x8501=(cj2*sj1);
IkReal x8502=(gconst143*r20);
CheckValue<IkReal> x8503 = IKatan2WithCheck(IkReal((((r22*x8501))+((r22*x8500)))),IkReal((((x8499*x8500))+((x8499*x8501))+(((-1.0)*x8501*x8502))+(((-1.0)*x8500*x8502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8503.valid){
continue;
}
CheckValue<IkReal> x8504=IKPowWithIntegerCheck(IKsign(((x8502*x8502)+(x8499*x8499)+(r22*r22)+(((-2.0)*x8499*x8502)))),-1);
if(!x8504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8503.value)+(((1.5707963267949)*(x8504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8505=IKsin(j4);
IkReal x8506=IKcos(j4);
IkReal x8507=(sj1*sj2);
IkReal x8508=(gconst143*r20);
IkReal x8509=((1.0)*x8506);
IkReal x8510=((1.0)*cj1*cj2);
IkReal x8511=((1.0)*x8505);
IkReal x8512=(gconst142*x8505);
IkReal x8513=(gconst143*x8506);
evalcond[0]=((((-1.0)*x8508*x8511))+((r21*x8512))+(((-1.0)*r22*x8509)));
evalcond[1]=((((-1.0)*gconst143*r10*x8511))+cj0+((r11*x8512))+(((-1.0)*r12*x8509)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8511))+(((-1.0)*r02*x8509))+((r01*x8512)));
evalcond[3]=(((cj2*sj1))+((x8506*x8508))+(((-1.0)*gconst142*r21*x8509))+((cj1*sj2))+(((-1.0)*r22*x8511)));
evalcond[4]=(((cj0*x8507))+(((-1.0)*r02*x8511))+(((-1.0)*gconst142*r01*x8509))+(((-1.0)*cj0*x8510))+((r00*x8513)));
evalcond[5]=(((sj0*x8507))+(((-1.0)*r12*x8511))+(((-1.0)*sj0*x8510))+(((-1.0)*gconst142*r11*x8509))+((r10*x8513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8514=((1.0)*sj0);
IkReal x8515=((1.0)*gconst142);
CheckValue<IkReal> x8516=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8515))+(((-1.0)*gconst143*r21)))),-1);
if(!x8516.valid){
continue;
}
CheckValue<IkReal> x8517 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8514)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8515))+(((-1.0)*gconst142*r11*x8514))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8516.value)))+(x8517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8518=IKsin(j4);
IkReal x8519=IKcos(j4);
IkReal x8520=(sj1*sj2);
IkReal x8521=(gconst143*r20);
IkReal x8522=((1.0)*x8519);
IkReal x8523=((1.0)*cj1*cj2);
IkReal x8524=((1.0)*x8518);
IkReal x8525=(gconst142*x8518);
IkReal x8526=(gconst143*x8519);
evalcond[0]=(((r21*x8525))+(((-1.0)*r22*x8522))+(((-1.0)*x8521*x8524)));
evalcond[1]=((((-1.0)*gconst143*r10*x8524))+cj0+((r11*x8525))+(((-1.0)*r12*x8522)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8522))+((r01*x8525))+(((-1.0)*gconst143*r00*x8524)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8522))+((cj1*sj2))+(((-1.0)*r22*x8524))+((x8519*x8521)));
evalcond[4]=((((-1.0)*r02*x8524))+(((-1.0)*cj0*x8523))+((r00*x8526))+((cj0*x8520))+(((-1.0)*gconst142*r01*x8522)));
evalcond[5]=(((sj0*x8520))+(((-1.0)*gconst142*r11*x8522))+(((-1.0)*sj0*x8523))+(((-1.0)*r12*x8524))+((r10*x8526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8527=((1.0)*gconst143);
CheckValue<IkReal> x8528 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8527))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8528.valid){
continue;
}
CheckValue<IkReal> x8529=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8527)))),-1);
if(!x8529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8528.value)+(((1.5707963267949)*(x8529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8530=IKsin(j4);
IkReal x8531=IKcos(j4);
IkReal x8532=(sj1*sj2);
IkReal x8533=(gconst143*r20);
IkReal x8534=((1.0)*x8531);
IkReal x8535=((1.0)*cj1*cj2);
IkReal x8536=((1.0)*x8530);
IkReal x8537=(gconst142*x8530);
IkReal x8538=(gconst143*x8531);
evalcond[0]=((((-1.0)*x8533*x8536))+(((-1.0)*r22*x8534))+((r21*x8537)));
evalcond[1]=(cj0+(((-1.0)*r12*x8534))+(((-1.0)*gconst143*r10*x8536))+((r11*x8537)));
evalcond[2]=((((-1.0)*r02*x8534))+(((-1.0)*sj0))+((r01*x8537))+(((-1.0)*gconst143*r00*x8536)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8536))+((cj1*sj2))+((x8531*x8533))+(((-1.0)*gconst142*r21*x8534)));
evalcond[4]=((((-1.0)*r02*x8536))+(((-1.0)*cj0*x8535))+((r00*x8538))+(((-1.0)*gconst142*r01*x8534))+((cj0*x8532)));
evalcond[5]=((((-1.0)*sj0*x8535))+(((-1.0)*gconst142*r11*x8534))+((r10*x8538))+(((-1.0)*r12*x8536))+((sj0*x8532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8539=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8539;
j4eval[1]=IKsign(x8539);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8540=((1.0)*cj5);
IkReal x8541=((((-1.0)*r01*x8540))+(((-1.0)*r00*sj5)));
j4eval[0]=x8541;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8540)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8542=cj5*cj5;
IkReal x8543=r11*r11;
IkReal x8544=(r11*sj5);
IkReal x8545=(cj5*r10);
IkReal x8546=((((-1.0)*x8542*x8543))+(r12*r12)+x8543+(((-2.0)*x8544*x8545))+((x8542*(r10*r10))));
j4eval[0]=x8546;
j4eval[1]=IKsign(x8546);
j4eval[2]=((IKabs(r12))+(IKabs((x8545+(((-1.0)*x8544))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8547=cj5*cj5;
IkReal x8548=r11*r11;
IkReal x8549=(cj5*r10);
IkReal x8550=(r11*sj5);
CheckValue<IkReal> x8551=IKPowWithIntegerCheck(IKsign((((x8547*(r10*r10)))+(r12*r12)+x8548+(((-2.0)*x8549*x8550))+(((-1.0)*x8547*x8548)))),-1);
if(!x8551.valid){
continue;
}
CheckValue<IkReal> x8552 = IKatan2WithCheck(IkReal((x8549+(((-1.0)*x8550)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8551.value)))+(x8552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8553=IKsin(j4);
IkReal x8554=IKcos(j4);
IkReal x8555=(cj5*r10);
IkReal x8556=(r01*sj5);
IkReal x8557=(cj5*r00);
IkReal x8558=(cj5*r20);
IkReal x8559=((1.0)*x8554);
IkReal x8560=((1.0)*x8553);
IkReal x8561=(sj5*x8553);
evalcond[0]=((((-1.0)*r22*x8559))+(((-1.0)*x8558*x8560))+((r21*x8561)));
evalcond[1]=((((-1.0)*x8557*x8560))+((x8553*x8556))+(((-1.0)*r02*x8559)));
evalcond[2]=((((-1.0)*r12*x8560))+((x8554*x8555))+(((-1.0)*r11*sj5*x8559)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8559))+(((-1.0)*x8555*x8560))+((r11*x8561)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8559))+((cj1*sj2))+((x8554*x8558))+(((-1.0)*r22*x8560)));
evalcond[5]=(((x8554*x8557))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8556*x8559))+(((-1.0)*r02*x8560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8562=((1.0)*cj5);
CheckValue<IkReal> x8563 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8563.valid){
continue;
}
CheckValue<IkReal> x8564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8562))+(((-1.0)*r00*sj5)))),-1);
if(!x8564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8563.value)+(((1.5707963267949)*(x8564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8565=IKsin(j4);
IkReal x8566=IKcos(j4);
IkReal x8567=(cj5*r10);
IkReal x8568=(r01*sj5);
IkReal x8569=(cj5*r00);
IkReal x8570=(cj5*r20);
IkReal x8571=((1.0)*x8566);
IkReal x8572=((1.0)*x8565);
IkReal x8573=(sj5*x8565);
evalcond[0]=(((r21*x8573))+(((-1.0)*x8570*x8572))+(((-1.0)*r22*x8571)));
evalcond[1]=((((-1.0)*r02*x8571))+(((-1.0)*x8569*x8572))+((x8565*x8568)));
evalcond[2]=((((-1.0)*r11*sj5*x8571))+(((-1.0)*r12*x8572))+((x8566*x8567)));
evalcond[3]=((1.0)+(((-1.0)*x8567*x8572))+((r11*x8573))+(((-1.0)*r12*x8571)));
evalcond[4]=((((-1.0)*r21*sj5*x8571))+((cj2*sj1))+((x8566*x8570))+((cj1*sj2))+(((-1.0)*r22*x8572)));
evalcond[5]=((((-1.0)*r02*x8572))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8568*x8571))+((x8566*x8569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8574=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8574.valid){
continue;
}
CheckValue<IkReal> x8575 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8574.value)))+(x8575.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8576=IKsin(j4);
IkReal x8577=IKcos(j4);
IkReal x8578=(cj5*r10);
IkReal x8579=(r01*sj5);
IkReal x8580=(cj5*r00);
IkReal x8581=(cj5*r20);
IkReal x8582=((1.0)*x8577);
IkReal x8583=((1.0)*x8576);
IkReal x8584=(sj5*x8576);
evalcond[0]=((((-1.0)*r22*x8582))+((r21*x8584))+(((-1.0)*x8581*x8583)));
evalcond[1]=((((-1.0)*x8580*x8583))+(((-1.0)*r02*x8582))+((x8576*x8579)));
evalcond[2]=(((x8577*x8578))+(((-1.0)*r12*x8583))+(((-1.0)*r11*sj5*x8582)));
evalcond[3]=((1.0)+((r11*x8584))+(((-1.0)*r12*x8582))+(((-1.0)*x8578*x8583)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8583))+(((-1.0)*r21*sj5*x8582))+((x8577*x8581))+((cj1*sj2)));
evalcond[5]=(((x8577*x8580))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8583))+(((-1.0)*x8579*x8582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8585=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8585;
j4eval[1]=IKsign(x8585);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8586=((1.0)*cj5);
IkReal x8587=((((-1.0)*r21*x8586))+(((-1.0)*r20*sj5)));
j4eval[0]=x8587;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8586))))));
j4eval[2]=IKsign(x8587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8588=cj5*cj5;
IkReal x8589=r11*r11;
IkReal x8590=(cj5*r10);
IkReal x8591=(r11*sj5);
IkReal x8592=(((x8588*x8589))+(((-1.0)*x8589))+(((2.0)*x8590*x8591))+(((-1.0)*x8588*(r10*r10)))+(((-1.0)*(r12*r12))));
j4eval[0]=x8592;
j4eval[1]=((IKabs((x8590+(((-1.0)*x8591)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8593=cj5*cj5;
IkReal x8594=r11*r11;
IkReal x8595=(cj5*r10);
IkReal x8596=(r11*sj5);
CheckValue<IkReal> x8597=IKPowWithIntegerCheck(IKsign(((((2.0)*x8595*x8596))+(((-1.0)*x8594))+(((-1.0)*(r12*r12)))+((x8593*x8594))+(((-1.0)*x8593*(r10*r10))))),-1);
if(!x8597.valid){
continue;
}
CheckValue<IkReal> x8598 = IKatan2WithCheck(IkReal((x8595+(((-1.0)*x8596)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8597.value)))+(x8598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8599=IKsin(j4);
IkReal x8600=IKcos(j4);
IkReal x8601=(cj5*r10);
IkReal x8602=(r01*sj5);
IkReal x8603=(cj5*r00);
IkReal x8604=(cj5*r20);
IkReal x8605=((1.0)*x8600);
IkReal x8606=((1.0)*x8599);
IkReal x8607=(sj5*x8599);
evalcond[0]=((((-1.0)*r22*x8605))+(((-1.0)*x8604*x8606))+((r21*x8607)));
evalcond[1]=(((x8599*x8602))+(((-1.0)*r02*x8605))+(((-1.0)*x8603*x8606)));
evalcond[2]=((((-1.0)*r12*x8606))+(((-1.0)*r11*sj5*x8605))+((x8600*x8601)));
evalcond[3]=((-1.0)+(((-1.0)*x8601*x8606))+((r11*x8607))+(((-1.0)*r12*x8605)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8606))+(((-1.0)*r21*sj5*x8605))+((x8600*x8604)));
evalcond[5]=((((-1.0)*x8602*x8605))+(((-1.0)*r02*x8606))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8600*x8603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8608=((1.0)*cj5);
CheckValue<IkReal> x8609=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8608))+(((-1.0)*r20*sj5)))),-1);
if(!x8609.valid){
continue;
}
CheckValue<IkReal> x8610 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8608))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8609.value)))+(x8610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8611=IKsin(j4);
IkReal x8612=IKcos(j4);
IkReal x8613=(cj5*r10);
IkReal x8614=(r01*sj5);
IkReal x8615=(cj5*r00);
IkReal x8616=(cj5*r20);
IkReal x8617=((1.0)*x8612);
IkReal x8618=((1.0)*x8611);
IkReal x8619=(sj5*x8611);
evalcond[0]=((((-1.0)*r22*x8617))+((r21*x8619))+(((-1.0)*x8616*x8618)));
evalcond[1]=((((-1.0)*r02*x8617))+((x8611*x8614))+(((-1.0)*x8615*x8618)));
evalcond[2]=((((-1.0)*r12*x8618))+(((-1.0)*r11*sj5*x8617))+((x8612*x8613)));
evalcond[3]=((-1.0)+((r11*x8619))+(((-1.0)*r12*x8617))+(((-1.0)*x8613*x8618)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8618))+(((-1.0)*r21*sj5*x8617))+((x8612*x8616)));
evalcond[5]=((((-1.0)*x8614*x8617))+(((-1.0)*r02*x8618))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8612*x8615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8620 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8620.valid){
continue;
}
CheckValue<IkReal> x8621=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8620.value)+(((1.5707963267949)*(x8621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8622=IKsin(j4);
IkReal x8623=IKcos(j4);
IkReal x8624=(cj5*r10);
IkReal x8625=(r01*sj5);
IkReal x8626=(cj5*r00);
IkReal x8627=(cj5*r20);
IkReal x8628=((1.0)*x8623);
IkReal x8629=((1.0)*x8622);
IkReal x8630=(sj5*x8622);
evalcond[0]=(((r21*x8630))+(((-1.0)*x8627*x8629))+(((-1.0)*r22*x8628)));
evalcond[1]=((((-1.0)*x8626*x8629))+((x8622*x8625))+(((-1.0)*r02*x8628)));
evalcond[2]=((((-1.0)*r12*x8629))+((x8623*x8624))+(((-1.0)*r11*sj5*x8628)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8628))+(((-1.0)*x8624*x8629))+((r11*x8630)));
evalcond[4]=(((cj2*sj1))+((x8623*x8627))+((cj1*sj2))+(((-1.0)*r21*sj5*x8628))+(((-1.0)*r22*x8629)));
evalcond[5]=(((x8623*x8626))+(((-1.0)*x8625*x8628))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x8629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8631=((-1.0)*r00);
IkReal x8633 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8633)==0){
continue;
}
IkReal x8632=pow(x8633,-0.5);
CheckValue<IkReal> x8634 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8631),IKFAST_ATAN2_MAGTHRESH);
if(!x8634.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8634.value));
IkReal gconst145=(r01*x8632);
IkReal gconst146=(x8631*x8632);
CheckValue<IkReal> x8635 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8635.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8635.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8636=((-1.0)*r00);
IkReal x8637=x8632;
CheckValue<IkReal> x8639 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8636),IKFAST_ATAN2_MAGTHRESH);
if(!x8639.valid){
continue;
}
IkReal x8638=((-1.0)*(x8639.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8638;
IkReal gconst144=x8638;
IkReal gconst145=(r01*x8637);
IkReal gconst146=(x8636*x8637);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8640=((1.0)*sj0);
IkReal x8641=((1.0)*gconst145);
CheckValue<IkReal> x8642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8641)))),-1);
if(!x8642.valid){
continue;
}
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8640)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8641))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8642.value)))+(x8643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8644=IKsin(j4);
IkReal x8645=IKcos(j4);
IkReal x8646=(gconst146*r10);
IkReal x8647=(sj1*sj2);
IkReal x8648=(gconst146*r20);
IkReal x8649=(gconst146*r00);
IkReal x8650=((1.0)*x8645);
IkReal x8651=((1.0)*x8644);
IkReal x8652=(gconst145*x8644);
IkReal x8653=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8652))+(((-1.0)*r22*x8650))+(((-1.0)*x8648*x8651)));
evalcond[1]=((((-1.0)*x8646*x8651))+(((-1.0)*r12*x8650))+cj0+((r11*x8652)));
evalcond[2]=(((r01*x8652))+(((-1.0)*sj0))+(((-1.0)*x8649*x8651))+(((-1.0)*r02*x8650)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8650))+((x8645*x8648))+(((-1.0)*r22*x8651)));
evalcond[4]=(((cj0*x8647))+(((-1.0)*gconst145*r01*x8650))+((x8645*x8649))+(((-1.0)*cj0*x8653))+(((-1.0)*r02*x8651)));
evalcond[5]=((((-1.0)*gconst145*r11*x8650))+(((-1.0)*r12*x8651))+(((-1.0)*sj0*x8653))+((x8645*x8646))+((sj0*x8647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8654=((1.0)*gconst146);
CheckValue<IkReal> x8655 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8654))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8655.valid){
continue;
}
CheckValue<IkReal> x8656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8654))+(((-1.0)*gconst145*r10)))),-1);
if(!x8656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8655.value)+(((1.5707963267949)*(x8656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8657=IKsin(j4);
IkReal x8658=IKcos(j4);
IkReal x8659=(gconst146*r10);
IkReal x8660=(sj1*sj2);
IkReal x8661=(gconst146*r20);
IkReal x8662=(gconst146*r00);
IkReal x8663=((1.0)*x8658);
IkReal x8664=((1.0)*x8657);
IkReal x8665=(gconst145*x8657);
IkReal x8666=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8661*x8664))+(((-1.0)*r22*x8663))+((r21*x8665)));
evalcond[1]=(cj0+(((-1.0)*r12*x8663))+((r11*x8665))+(((-1.0)*x8659*x8664)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8662*x8664))+(((-1.0)*r02*x8663))+((r01*x8665)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8664))+(((-1.0)*gconst145*r21*x8663))+((x8658*x8661)));
evalcond[4]=(((cj0*x8660))+(((-1.0)*cj0*x8666))+(((-1.0)*r02*x8664))+((x8658*x8662))+(((-1.0)*gconst145*r01*x8663)));
evalcond[5]=((((-1.0)*sj0*x8666))+((sj0*x8660))+(((-1.0)*gconst145*r11*x8663))+(((-1.0)*r12*x8664))+((x8658*x8659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8667=((-1.0)*r01);
IkReal x8669 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8669)==0){
continue;
}
IkReal x8668=pow(x8669,-0.5);
CheckValue<IkReal> x8670 = IKatan2WithCheck(IkReal(x8667),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8670.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8670.value))));
IkReal gconst148=(x8667*x8668);
IkReal gconst149=((1.0)*r00*x8668);
CheckValue<IkReal> x8671 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8671.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8671.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8672=((-1.0)*r01);
CheckValue<IkReal> x8675 = IKatan2WithCheck(IkReal(x8672),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8675.valid){
continue;
}
IkReal x8673=((1.0)*(x8675.value));
IkReal x8674=x8668;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8673)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8673)));
IkReal gconst148=(x8672*x8674);
IkReal gconst149=((1.0)*r00*x8674);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8676=((-1.0)*r01);
CheckValue<IkReal> x8679 = IKatan2WithCheck(IkReal(x8676),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8679.valid){
continue;
}
IkReal x8677=((1.0)*(x8679.value));
IkReal x8678=x8668;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8677)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8677)));
IkReal gconst148=(x8676*x8678);
IkReal gconst149=((1.0)*r00*x8678);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8680=((-1.0)*r01);
CheckValue<IkReal> x8683 = IKatan2WithCheck(IkReal(x8680),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8683.valid){
continue;
}
IkReal x8681=((1.0)*(x8683.value));
IkReal x8682=x8668;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8681)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8681)));
IkReal gconst148=(x8680*x8682);
IkReal gconst149=((1.0)*r00*x8682);
IkReal x8684=r02*r02;
IkReal x8685=(r12*sj0);
IkReal x8686=((1.0)*cj0);
IkReal x8687=x8668;
j4eval[0]=((IKabs(((((-1.0)*r02*x8686))+(((-1.0)*x8685)))))+(IKabs((((r02*x8685*x8687))+(((-1.0)*x8686*x8687))+((cj0*x8684*x8687))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8688=((1.0)*sj0);
IkReal x8689=((1.0)*gconst148);
CheckValue<IkReal> x8690=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8689)))),-1);
if(!x8690.valid){
continue;
}
CheckValue<IkReal> x8691 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8688))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst148*r11*x8688))+((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8689))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8690.value)))+(x8691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8692=IKsin(j4);
IkReal x8693=IKcos(j4);
IkReal x8694=(gconst148*r11);
IkReal x8695=(sj1*sj2);
IkReal x8696=((1.0)*x8693);
IkReal x8697=(gconst149*x8693);
IkReal x8698=(gconst148*x8692);
IkReal x8699=((1.0)*cj1*cj2);
IkReal x8700=((1.0)*x8692);
evalcond[0]=(((r21*x8698))+(((-1.0)*gconst149*r20*x8700))+(((-1.0)*r22*x8696)));
evalcond[1]=((((-1.0)*gconst149*r10*x8700))+cj0+(((-1.0)*r12*x8696))+((x8692*x8694)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8700))+(((-1.0)*r02*x8696))+((r01*x8698)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8696))+((r20*x8697))+(((-1.0)*r22*x8700)));
evalcond[4]=(((cj0*x8695))+(((-1.0)*cj0*x8699))+((r00*x8697))+(((-1.0)*r02*x8700))+(((-1.0)*gconst148*r01*x8696)));
evalcond[5]=(((sj0*x8695))+(((-1.0)*sj0*x8699))+((r10*x8697))+(((-1.0)*x8694*x8696))+(((-1.0)*r12*x8700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8701=((1.0)*gconst149);
CheckValue<IkReal> x8702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8701)))),-1);
if(!x8702.valid){
continue;
}
CheckValue<IkReal> x8703 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8701))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8702.value)))+(x8703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8704=IKsin(j4);
IkReal x8705=IKcos(j4);
IkReal x8706=(gconst148*r11);
IkReal x8707=(sj1*sj2);
IkReal x8708=((1.0)*x8705);
IkReal x8709=(gconst149*x8705);
IkReal x8710=(gconst148*x8704);
IkReal x8711=((1.0)*cj1*cj2);
IkReal x8712=((1.0)*x8704);
evalcond[0]=((((-1.0)*gconst149*r20*x8712))+(((-1.0)*r22*x8708))+((r21*x8710)));
evalcond[1]=(((x8704*x8706))+cj0+(((-1.0)*gconst149*r10*x8712))+(((-1.0)*r12*x8708)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8712))+((r01*x8710))+(((-1.0)*r02*x8708)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8708))+((cj1*sj2))+(((-1.0)*r22*x8712))+((r20*x8709)));
evalcond[4]=((((-1.0)*r02*x8712))+(((-1.0)*gconst148*r01*x8708))+((cj0*x8707))+(((-1.0)*cj0*x8711))+((r00*x8709)));
evalcond[5]=(((r10*x8709))+(((-1.0)*sj0*x8711))+(((-1.0)*x8706*x8708))+(((-1.0)*r12*x8712))+((sj0*x8707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8713=((1.0)*gconst149);
CheckValue<IkReal> x8714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8713))+(((-1.0)*gconst148*r00)))),-1);
if(!x8714.valid){
continue;
}
CheckValue<IkReal> x8715 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8714.value)))+(x8715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8716=IKsin(j4);
IkReal x8717=IKcos(j4);
IkReal x8718=(gconst148*r11);
IkReal x8719=(sj1*sj2);
IkReal x8720=((1.0)*x8717);
IkReal x8721=(gconst149*x8717);
IkReal x8722=(gconst148*x8716);
IkReal x8723=((1.0)*cj1*cj2);
IkReal x8724=((1.0)*x8716);
evalcond[0]=(((r21*x8722))+(((-1.0)*gconst149*r20*x8724))+(((-1.0)*r22*x8720)));
evalcond[1]=((((-1.0)*gconst149*r10*x8724))+cj0+((x8716*x8718))+(((-1.0)*r12*x8720)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8724))+(((-1.0)*r02*x8720))+((r01*x8722)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8720))+((cj1*sj2))+((r20*x8721))+(((-1.0)*r22*x8724)));
evalcond[4]=((((-1.0)*cj0*x8723))+((cj0*x8719))+(((-1.0)*gconst148*r01*x8720))+(((-1.0)*r02*x8724))+((r00*x8721)));
evalcond[5]=(((r10*x8721))+((sj0*x8719))+(((-1.0)*x8718*x8720))+(((-1.0)*sj0*x8723))+(((-1.0)*r12*x8724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8725=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8725;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8726=((1.0)*cj5);
IkReal x8727=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8726)));
j4eval[0]=x8727;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8726))))));
j4eval[2]=IKsign(x8727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8728=cj5*cj5;
IkReal x8729=r01*r01;
IkReal x8730=(r01*sj5);
IkReal x8731=(cj5*r00);
IkReal x8732=((((-1.0)*(r02*r02)))+(((-1.0)*x8729))+(((-1.0)*x8728*(r00*r00)))+((x8728*x8729))+(((2.0)*x8730*x8731)));
j4eval[0]=x8732;
j4eval[1]=IKsign(x8732);
j4eval[2]=((IKabs((x8731+(((-1.0)*x8730)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8733=cj5*cj5;
IkReal x8734=r01*r01;
IkReal x8735=(r01*sj5);
IkReal x8736=(cj5*r00);
CheckValue<IkReal> x8737=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x8734))+((x8733*x8734))+(((-1.0)*x8733*(r00*r00)))+(((2.0)*x8735*x8736)))),-1);
if(!x8737.valid){
continue;
}
CheckValue<IkReal> x8738 = IKatan2WithCheck(IkReal((x8736+(((-1.0)*x8735)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8737.value)))+(x8738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8739=IKsin(j4);
IkReal x8740=IKcos(j4);
IkReal x8741=(cj5*r10);
IkReal x8742=(r01*sj5);
IkReal x8743=(cj5*r00);
IkReal x8744=(cj5*r20);
IkReal x8745=((1.0)*x8740);
IkReal x8746=((1.0)*x8739);
IkReal x8747=(sj5*x8739);
evalcond[0]=((((-1.0)*r22*x8745))+(((-1.0)*x8744*x8746))+((r21*x8747)));
evalcond[1]=((((-1.0)*r12*x8745))+(((-1.0)*x8741*x8746))+((r11*x8747)));
evalcond[2]=((((-1.0)*x8742*x8745))+((x8740*x8743))+(((-1.0)*r02*x8746)));
evalcond[3]=((-1.0)+(((-1.0)*x8743*x8746))+((x8739*x8742))+(((-1.0)*r02*x8745)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8745))+((cj1*sj2))+((x8740*x8744))+(((-1.0)*r22*x8746)));
evalcond[5]=((((-1.0)*r12*x8746))+((x8740*x8741))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8748=((1.0)*cj5);
CheckValue<IkReal> x8749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8748))+(((-1.0)*r10*sj5)))),-1);
if(!x8749.valid){
continue;
}
CheckValue<IkReal> x8750 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8749.value)))+(x8750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8751=IKsin(j4);
IkReal x8752=IKcos(j4);
IkReal x8753=(cj5*r10);
IkReal x8754=(r01*sj5);
IkReal x8755=(cj5*r00);
IkReal x8756=(cj5*r20);
IkReal x8757=((1.0)*x8752);
IkReal x8758=((1.0)*x8751);
IkReal x8759=(sj5*x8751);
evalcond[0]=((((-1.0)*r22*x8757))+(((-1.0)*x8756*x8758))+((r21*x8759)));
evalcond[1]=(((r11*x8759))+(((-1.0)*x8753*x8758))+(((-1.0)*r12*x8757)));
evalcond[2]=((((-1.0)*x8754*x8757))+((x8752*x8755))+(((-1.0)*r02*x8758)));
evalcond[3]=((-1.0)+(((-1.0)*x8755*x8758))+(((-1.0)*r02*x8757))+((x8751*x8754)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8758))+((cj1*sj2))+((x8752*x8756))+(((-1.0)*r21*sj5*x8757)));
evalcond[5]=((((-1.0)*cj1*cj2))+((x8752*x8753))+((sj1*sj2))+(((-1.0)*r11*sj5*x8757))+(((-1.0)*r12*x8758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8760=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8760.valid){
continue;
}
CheckValue<IkReal> x8761 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8760.value)))+(x8761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8762=IKsin(j4);
IkReal x8763=IKcos(j4);
IkReal x8764=(cj5*r10);
IkReal x8765=(r01*sj5);
IkReal x8766=(cj5*r00);
IkReal x8767=(cj5*r20);
IkReal x8768=((1.0)*x8763);
IkReal x8769=((1.0)*x8762);
IkReal x8770=(sj5*x8762);
evalcond[0]=((((-1.0)*x8767*x8769))+(((-1.0)*r22*x8768))+((r21*x8770)));
evalcond[1]=((((-1.0)*r12*x8768))+((r11*x8770))+(((-1.0)*x8764*x8769)));
evalcond[2]=((((-1.0)*r02*x8769))+(((-1.0)*x8765*x8768))+((x8763*x8766)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8768))+(((-1.0)*x8766*x8769))+((x8762*x8765)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8769))+(((-1.0)*r21*sj5*x8768))+((x8763*x8767)));
evalcond[5]=((((-1.0)*r11*sj5*x8768))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8769))+((x8763*x8764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8771=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8771;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8772=((1.0)*cj5);
IkReal x8773=((((-1.0)*r21*x8772))+(((-1.0)*r20*sj5)));
j4eval[0]=x8773;
j4eval[1]=((IKabs(((((-1.0)*r10*x8772))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8774=cj5*cj5;
IkReal x8775=r01*r01;
IkReal x8776=(cj5*r00);
IkReal x8777=(r01*sj5);
IkReal x8778=(x8775+((x8774*(r00*r00)))+(((-1.0)*x8774*x8775))+(r02*r02)+(((-2.0)*x8776*x8777)));
j4eval[0]=x8778;
j4eval[1]=((IKabs(r02))+(IKabs((x8776+(((-1.0)*x8777))))));
j4eval[2]=IKsign(x8778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8779=cj5*cj5;
IkReal x8780=r01*r01;
IkReal x8781=(r01*sj5);
IkReal x8782=(cj5*r00);
CheckValue<IkReal> x8783=IKPowWithIntegerCheck(IKsign((x8780+((x8779*(r00*r00)))+(((-2.0)*x8781*x8782))+(((-1.0)*x8779*x8780))+(r02*r02))),-1);
if(!x8783.valid){
continue;
}
CheckValue<IkReal> x8784 = IKatan2WithCheck(IkReal((x8782+(((-1.0)*x8781)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8783.value)))+(x8784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8785=IKsin(j4);
IkReal x8786=IKcos(j4);
IkReal x8787=(cj5*r10);
IkReal x8788=(r01*sj5);
IkReal x8789=(cj5*r00);
IkReal x8790=(cj5*r20);
IkReal x8791=((1.0)*x8786);
IkReal x8792=((1.0)*x8785);
IkReal x8793=(sj5*x8785);
evalcond[0]=(((r21*x8793))+(((-1.0)*x8790*x8792))+(((-1.0)*r22*x8791)));
evalcond[1]=((((-1.0)*r12*x8791))+((r11*x8793))+(((-1.0)*x8787*x8792)));
evalcond[2]=(((x8786*x8789))+(((-1.0)*x8788*x8791))+(((-1.0)*r02*x8792)));
evalcond[3]=((1.0)+(((-1.0)*x8789*x8792))+((x8785*x8788))+(((-1.0)*r02*x8791)));
evalcond[4]=(((cj2*sj1))+((x8786*x8790))+((cj1*sj2))+(((-1.0)*r22*x8792))+(((-1.0)*r21*sj5*x8791)));
evalcond[5]=((((-1.0)*r12*x8792))+((x8786*x8787))+(((-1.0)*r11*sj5*x8791))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8794=((1.0)*cj5);
CheckValue<IkReal> x8795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8794))+(((-1.0)*r20*sj5)))),-1);
if(!x8795.valid){
continue;
}
CheckValue<IkReal> x8796 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8795.value)))+(x8796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8797=IKsin(j4);
IkReal x8798=IKcos(j4);
IkReal x8799=(cj5*r10);
IkReal x8800=(r01*sj5);
IkReal x8801=(cj5*r00);
IkReal x8802=(cj5*r20);
IkReal x8803=((1.0)*x8798);
IkReal x8804=((1.0)*x8797);
IkReal x8805=(sj5*x8797);
evalcond[0]=(((r21*x8805))+(((-1.0)*r22*x8803))+(((-1.0)*x8802*x8804)));
evalcond[1]=((((-1.0)*r12*x8803))+((r11*x8805))+(((-1.0)*x8799*x8804)));
evalcond[2]=((((-1.0)*x8800*x8803))+(((-1.0)*r02*x8804))+((x8798*x8801)));
evalcond[3]=((1.0)+((x8797*x8800))+(((-1.0)*r02*x8803))+(((-1.0)*x8801*x8804)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8804))+((cj1*sj2))+(((-1.0)*r21*sj5*x8803))+((x8798*x8802)));
evalcond[5]=((((-1.0)*r12*x8804))+(((-1.0)*sj1*sj2))+((x8798*x8799))+((cj1*cj2))+(((-1.0)*r11*sj5*x8803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8806 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8806.valid){
continue;
}
CheckValue<IkReal> x8807=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8806.value)+(((1.5707963267949)*(x8807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8808=IKsin(j4);
IkReal x8809=IKcos(j4);
IkReal x8810=(cj5*r10);
IkReal x8811=(r01*sj5);
IkReal x8812=(cj5*r00);
IkReal x8813=(cj5*r20);
IkReal x8814=((1.0)*x8809);
IkReal x8815=((1.0)*x8808);
IkReal x8816=(sj5*x8808);
evalcond[0]=(((r21*x8816))+(((-1.0)*r22*x8814))+(((-1.0)*x8813*x8815)));
evalcond[1]=((((-1.0)*r12*x8814))+((r11*x8816))+(((-1.0)*x8810*x8815)));
evalcond[2]=((((-1.0)*r02*x8815))+((x8809*x8812))+(((-1.0)*x8811*x8814)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8814))+((x8808*x8811))+(((-1.0)*x8812*x8815)));
evalcond[4]=((((-1.0)*r22*x8815))+((cj2*sj1))+((x8809*x8813))+((cj1*sj2))+(((-1.0)*r21*sj5*x8814)));
evalcond[5]=((((-1.0)*r12*x8815))+((x8809*x8810))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8817=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8817);
rxp1_1=(px*r21);
rxp1_2=(r11*x8817);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8818=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8818);
rxp1_1=(px*r21);
rxp1_2=(r11*x8818);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8819=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8819);
rxp1_1=(px*r21);
rxp1_2=(r11*x8819);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8822=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8822.valid){
continue;
}
IkReal x8820=x8822.value;
IkReal x8821=(sj0*x8820);
cj4array[0]=((((-1.0)*sj1*sj2*x8821))+((cj1*cj2*x8821)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8823=IKsin(j4);
IkReal x8824=IKcos(j4);
IkReal x8825=(r21*sj5);
IkReal x8826=(cj5*r20);
IkReal x8827=((1.0)*x8823);
IkReal x8828=((1.0)*x8824);
evalcond[0]=((-1.0)*r02*x8823);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8828)));
evalcond[2]=(((x8823*x8825))+(((-1.0)*x8826*x8827)));
evalcond[3]=((((-1.0)*cj5*r10*x8827))+((r11*sj5*x8823)));
evalcond[4]=(((cj2*sj1))+((x8824*x8826))+((cj1*sj2))+(((-1.0)*x8825*x8828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8831=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8831.valid){
continue;
}
IkReal x8829=x8831.value;
IkReal x8830=((1.0)*x8829);
cj4array[0]=((((-1.0)*cj1*sj2*x8830))+(((-1.0)*cj2*sj1*x8830)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8832=IKsin(j4);
IkReal x8833=IKcos(j4);
IkReal x8834=(r11*sj5);
IkReal x8835=((1.0)*sj0);
IkReal x8836=((1.0)*x8833);
IkReal x8837=((1.0)*cj5*x8832);
evalcond[0]=((-1.0)*r02*x8832);
evalcond[1]=((((-1.0)*r02*x8836))+(((-1.0)*x8835)));
evalcond[2]=((((-1.0)*r20*x8837))+((r21*sj5*x8832)));
evalcond[3]=((((-1.0)*r10*x8837))+((x8832*x8834)));
evalcond[4]=((((-1.0)*cj1*cj2*x8835))+(((-1.0)*x8834*x8836))+((cj5*r10*x8833))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8838=IKPowWithIntegerCheck(r02,-1);
if(!x8838.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8838.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8839=IKsin(j4);
IkReal x8840=IKcos(j4);
IkReal x8841=(cj5*x8840);
IkReal x8842=(sj5*x8839);
IkReal x8843=((1.0)*sj5*x8840);
IkReal x8844=((1.0)*cj5*x8839);
evalcond[0]=((-1.0)*r02*x8839);
evalcond[1]=(((r21*x8842))+(((-1.0)*r20*x8844)));
evalcond[2]=((((-1.0)*r10*x8844))+((r11*x8842)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8841))+(((-1.0)*r21*x8843)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8841))+((sj0*sj1*sj2))+(((-1.0)*r11*x8843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8845=((1.0)*sj0);
IkReal x8846=((1.0)*cj0);
CheckValue<IkReal> x8847 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8846))+(((-1.0)*r12*x8845)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8846))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8847.valid){
continue;
}
CheckValue<IkReal> x8848=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8847.value)+(((1.5707963267949)*(x8848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8849=IKsin(j4);
IkReal x8850=IKcos(j4);
IkReal x8851=(cj5*r10);
IkReal x8852=(sj1*sj2);
IkReal x8853=(r01*sj5);
IkReal x8854=(cj5*r00);
IkReal x8855=(cj5*r20);
IkReal x8856=((1.0)*x8850);
IkReal x8857=((1.0)*cj1*cj2);
IkReal x8858=((1.0)*x8849);
IkReal x8859=(sj5*x8849);
evalcond[0]=((((-1.0)*r22*x8856))+((r21*x8859))+(((-1.0)*x8855*x8858)));
evalcond[1]=((((-1.0)*x8851*x8858))+cj0+(((-1.0)*r12*x8856))+((r11*x8859)));
evalcond[2]=((((-1.0)*sj0))+((x8849*x8853))+(((-1.0)*x8854*x8858))+(((-1.0)*r02*x8856)));
evalcond[3]=(((cj2*sj1))+((x8850*x8855))+(((-1.0)*r22*x8858))+((cj1*sj2))+(((-1.0)*r21*sj5*x8856)));
evalcond[4]=(((x8850*x8854))+(((-1.0)*x8853*x8856))+(((-1.0)*cj0*x8857))+((cj0*x8852))+(((-1.0)*r02*x8858)));
evalcond[5]=(((sj0*x8852))+((x8850*x8851))+(((-1.0)*r12*x8858))+(((-1.0)*r11*sj5*x8856))+(((-1.0)*sj0*x8857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8860=((1.0)*cj5);
CheckValue<IkReal> x8861 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8861.valid){
continue;
}
CheckValue<IkReal> x8862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8860)))),-1);
if(!x8862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8861.value)+(((1.5707963267949)*(x8862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8863=IKsin(j4);
IkReal x8864=IKcos(j4);
IkReal x8865=(cj5*r10);
IkReal x8866=(sj1*sj2);
IkReal x8867=(r01*sj5);
IkReal x8868=(cj5*r00);
IkReal x8869=(cj5*r20);
IkReal x8870=((1.0)*x8864);
IkReal x8871=((1.0)*cj1*cj2);
IkReal x8872=((1.0)*x8863);
IkReal x8873=(sj5*x8863);
evalcond[0]=((((-1.0)*r22*x8870))+(((-1.0)*x8869*x8872))+((r21*x8873)));
evalcond[1]=(cj0+(((-1.0)*x8865*x8872))+((r11*x8873))+(((-1.0)*r12*x8870)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8870))+(((-1.0)*x8868*x8872))+((x8863*x8867)));
evalcond[3]=(((cj2*sj1))+((x8864*x8869))+(((-1.0)*r21*sj5*x8870))+(((-1.0)*r22*x8872))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r02*x8872))+((x8864*x8868))+(((-1.0)*x8867*x8870))+((cj0*x8866))+(((-1.0)*cj0*x8871)));
evalcond[5]=((((-1.0)*r11*sj5*x8870))+((x8864*x8865))+(((-1.0)*r12*x8872))+((sj0*x8866))+(((-1.0)*sj0*x8871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8874=((1.0)*cj5);
CheckValue<IkReal> x8875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8874))+(((-1.0)*r00*sj5)))),-1);
if(!x8875.valid){
continue;
}
CheckValue<IkReal> x8876 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8875.value)))+(x8876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8877=IKsin(j4);
IkReal x8878=IKcos(j4);
IkReal x8879=(cj5*r10);
IkReal x8880=(sj1*sj2);
IkReal x8881=(r01*sj5);
IkReal x8882=(cj5*r00);
IkReal x8883=(cj5*r20);
IkReal x8884=((1.0)*x8878);
IkReal x8885=((1.0)*cj1*cj2);
IkReal x8886=((1.0)*x8877);
IkReal x8887=(sj5*x8877);
evalcond[0]=((((-1.0)*r22*x8884))+((r21*x8887))+(((-1.0)*x8883*x8886)));
evalcond[1]=(cj0+(((-1.0)*r12*x8884))+(((-1.0)*x8879*x8886))+((r11*x8887)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8882*x8886))+(((-1.0)*r02*x8884))+((x8877*x8881)));
evalcond[3]=((((-1.0)*r22*x8886))+((cj2*sj1))+((x8878*x8883))+((cj1*sj2))+(((-1.0)*r21*sj5*x8884)));
evalcond[4]=((((-1.0)*x8881*x8884))+((x8878*x8882))+(((-1.0)*cj0*x8885))+(((-1.0)*r02*x8886))+((cj0*x8880)));
evalcond[5]=((((-1.0)*r12*x8886))+((sj0*x8880))+(((-1.0)*r11*sj5*x8884))+(((-1.0)*sj0*x8885))+((x8878*x8879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8888=cj1*cj1;
IkReal x8889=cj2*cj2;
IkReal x8890=(sj1*sj2);
IkReal x8891=((156900000.0)*py);
IkReal x8892=(cj1*cj5);
IkReal x8893=((14850585.0)*cj2);
IkReal x8894=(r00*sj5);
IkReal x8895=((16090500.0)*cj1);
IkReal x8896=((4132419.0)*cj5);
IkReal x8897=(r10*sj5);
IkReal x8898=((170000000.0)*cj1);
IkReal x8899=((156900000.0)*px);
IkReal x8900=(cj1*cj2);
IkReal x8901=((14850585.0)*cj5);
CheckValue<IkReal> x8902=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((-123088050.0)*x8890*x8900))+(((133365000.0)*cj2*x8888))+(((-61544025.0)*x8889))+(((-133365000.0)*cj1*x8890))+(((10705975.0)*x8888))+(((123088050.0)*x8888*x8889)))),-1);
if(!x8902.valid){
continue;
}
CheckValue<IkReal> x8903 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((-1.0)*r01*x8896))+(((-4132419.0)*x8894))+((py*x8898))+(((-14850585.0)*x8890*x8897))+((cj1*x8893*x8897))+((x8895*x8897))+(((16090500.0)*r11*x8892))+((r11*x8892*x8893))+((x8891*x8900))+(((-1.0)*r11*x8890*x8901))+(((-1.0)*x8890*x8891)))),IkReal(((((-14850585.0)*x8890*x8894))+(((16090500.0)*r01*x8892))+(((43660000.0)*py))+((px*x8898))+((cj1*x8893*x8894))+((x8894*x8895))+((r11*x8896))+(((-1.0)*x8890*x8899))+(((4132419.0)*x8897))+((r01*x8892*x8893))+(((-1.0)*r01*x8890*x8901))+((x8899*x8900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8903.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8902.value)))+(x8903.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8904=IKcos(j0);
IkReal x8905=IKsin(j0);
IkReal x8906=((0.425)*cj1);
IkReal x8907=(cj1*cj2);
IkReal x8908=(sj1*sj2);
IkReal x8909=((0.09465)*cj5);
IkReal x8910=((0.09465)*sj5);
IkReal x8911=((0.39225)*x8905);
IkReal x8912=((0.39225)*x8904);
evalcond[0]=((((-1.0)*x8908*x8912))+((x8904*x8906))+(((-1.0)*px))+(((-0.10915)*x8905))+((x8907*x8912))+(((-1.0)*r01*x8909))+(((-1.0)*r00*x8910)));
evalcond[1]=(((x8905*x8906))+(((-1.0)*x8908*x8911))+(((0.10915)*x8904))+(((-1.0)*py))+((x8907*x8911))+(((-1.0)*r11*x8909))+(((-1.0)*r10*x8910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8913=((1.0)*cj5);
IkReal x8914=((((-1.0)*r01*x8913))+(((-1.0)*r00*sj5)));
j4eval[0]=x8914;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8913)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8915=((1.0)*cj5);
IkReal x8916=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8915)));
j4eval[0]=x8916;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x8915))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8917=((1.0)*sj0);
IkReal x8918=((1.0)*cj0);
IkReal x8919=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8919;
j4eval[1]=((IKabs(((((-1.0)*r02*x8918))+(((-1.0)*r12*x8917)))))+(IKabs(((((-1.0)*r11*sj5*x8917))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8918))))));
j4eval[2]=IKsign(x8919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8920=((-1.0)*r20);
IkReal x8922 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8922)==0){
continue;
}
IkReal x8921=pow(x8922,-0.5);
CheckValue<IkReal> x8923 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8920),IKFAST_ATAN2_MAGTHRESH);
if(!x8923.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8923.value));
IkReal gconst1=(r21*x8921);
IkReal gconst2=(x8920*x8921);
CheckValue<IkReal> x8924 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8924.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8924.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8925=((-1.0)*r20);
IkReal x8926=x8921;
CheckValue<IkReal> x8928 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8925),IKFAST_ATAN2_MAGTHRESH);
if(!x8928.valid){
continue;
}
IkReal x8927=((-1.0)*(x8928.value));
sj5=gconst1;
cj5=gconst2;
j5=x8927;
IkReal gconst0=x8927;
IkReal gconst1=(r21*x8926);
IkReal gconst2=(x8925*x8926);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8929=((-1.0)*r20);
IkReal x8930=x8921;
CheckValue<IkReal> x8932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8929),IKFAST_ATAN2_MAGTHRESH);
if(!x8932.valid){
continue;
}
IkReal x8931=((-1.0)*(x8932.value));
sj5=gconst1;
cj5=gconst2;
j5=x8931;
IkReal gconst0=x8931;
IkReal gconst1=(r21*x8930);
IkReal gconst2=(x8929*x8930);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8933=((-1.0)*r20);
IkReal x8934=x8921;
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8933),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
IkReal x8935=((-1.0)*(x8936.value));
sj5=gconst1;
cj5=gconst2;
j5=x8935;
IkReal gconst0=x8935;
IkReal gconst1=(r21*x8934);
IkReal gconst2=(x8933*x8934);
IkReal x8937=r22*r22;
CheckValue<IkReal> x8941=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8937))),-1);
if(!x8941.valid){
continue;
}
IkReal x8938=x8941.value;
IkReal x8939=(sj3*x8938);
IkReal x8940=((((2.0)*x8939*(r20*r20)*(r21*r21)))+((x8939*(r21*r21*r21*r21)))+((sj3*x8937))+((x8939*(r20*r20*r20*r20))));
j4eval[0]=x8940;
j4eval[1]=IKsign(x8940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8942=((-1.0)*r20);
IkReal x8943=x8921;
CheckValue<IkReal> x8945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8942),IKFAST_ATAN2_MAGTHRESH);
if(!x8945.valid){
continue;
}
IkReal x8944=((-1.0)*(x8945.value));
sj5=gconst1;
cj5=gconst2;
j5=x8944;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8944;
IkReal gconst1=(r21*x8943);
IkReal gconst2=(x8942*x8943);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8946=((-1.0)*r20);
IkReal x8947=x8921;
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8946),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
IkReal x8948=((-1.0)*(x8949.value));
sj5=gconst1;
cj5=gconst2;
j5=x8948;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8948;
IkReal gconst1=(r21*x8947);
IkReal gconst2=(x8946*x8947);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8950=((-1.0)*r20);
IkReal x8951=x8921;
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8950),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
IkReal x8952=((-1.0)*(x8953.value));
sj5=gconst1;
cj5=gconst2;
j5=x8952;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8952;
IkReal gconst1=(r21*x8951);
IkReal gconst2=(x8950*x8951);
IkReal x8954=((1.0)*(r22*r22));
CheckValue<IkReal> x8958=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8954))),-1);
if(!x8958.valid){
continue;
}
IkReal x8955=x8958.value;
IkReal x8956=((1.0)*x8955);
IkReal x8957=((((-2.0)*x8955*(r20*r20)*(r21*r21)))+(((-1.0)*x8956*(r20*r20*r20*r20)))+(((-1.0)*x8956*(r21*r21*r21*r21)))+(((-1.0)*x8954)));
j4eval[0]=x8957;
j4eval[1]=IKsign(x8957);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8959=((-1.0)*r20);
IkReal x8960=x8921;
CheckValue<IkReal> x8962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8959),IKFAST_ATAN2_MAGTHRESH);
if(!x8962.valid){
continue;
}
IkReal x8961=((-1.0)*(x8962.value));
sj5=gconst1;
cj5=gconst2;
j5=x8961;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8961;
IkReal gconst1=(r21*x8960);
IkReal gconst2=(x8959*x8960);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8963=((-1.0)*r20);
IkReal x8964=x8921;
CheckValue<IkReal> x8966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8963),IKFAST_ATAN2_MAGTHRESH);
if(!x8966.valid){
continue;
}
IkReal x8965=((-1.0)*(x8966.value));
sj5=gconst1;
cj5=gconst2;
j5=x8965;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8965;
IkReal gconst1=(r21*x8964);
IkReal gconst2=(x8963*x8964);
IkReal x8967=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8971=IKPowWithIntegerCheck(x8967,-1);
if(!x8971.valid){
continue;
}
IkReal x8968=x8971.value;
IkReal x8969=((1.0)*x8968);
IkReal x8970=((((-1.0)*x8969*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8968))+(((-1.0)*x8969*(r10*r10)*(r20*r20))));
j4eval[0]=x8970;
j4eval[1]=r12;
j4eval[2]=x8967;
j4eval[3]=IKsign(x8970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8972=((-1.0)*r20);
IkReal x8973=x8921;
CheckValue<IkReal> x8975 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8972),IKFAST_ATAN2_MAGTHRESH);
if(!x8975.valid){
continue;
}
IkReal x8974=((-1.0)*(x8975.value));
sj5=gconst1;
cj5=gconst2;
j5=x8974;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8974;
IkReal gconst1=(r21*x8973);
IkReal gconst2=(x8972*x8973);
IkReal x8976=r22*r22;
IkReal x8977=(cj1*r12*sj2);
IkReal x8978=(cj2*r12*sj1);
CheckValue<IkReal> x8982=IKPowWithIntegerCheck(((-1.0)+x8976),-1);
if(!x8982.valid){
continue;
}
IkReal x8979=x8982.value;
if((((1.0)+(((-1.0)*x8976)))) < -0.00001)
continue;
IkReal x8980=IKsqrt(((1.0)+(((-1.0)*x8976))));
IkReal x8981=(r22*x8979*x8980);
j4eval[0]=((IKabs((((x8977*x8981))+((x8978*x8981)))))+(IKabs(((((-1.0)*x8978))+(((-1.0)*x8977))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8983=(cj1*sj2);
IkReal x8984=(cj2*sj1);
IkReal x8985=((1.0)*r12);
IkReal x8986=(gconst1*r11);
IkReal x8987=((1.0)*gconst2*r10);
CheckValue<IkReal> x8988=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8988.valid){
continue;
}
CheckValue<IkReal> x8989 = IKatan2WithCheck(IkReal((((x8983*x8986))+(((-1.0)*x8984*x8987))+((x8984*x8986))+(((-1.0)*x8983*x8987)))),IkReal(((((-1.0)*x8984*x8985))+(((-1.0)*x8983*x8985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8988.value)))+(x8989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8990=IKcos(j4);
IkReal x8991=IKsin(j4);
IkReal x8992=((1.0)*x8990);
IkReal x8993=(gconst1*x8990);
IkReal x8994=(gconst1*x8991);
IkReal x8995=((1.0)*gconst2*x8991);
evalcond[0]=(((r11*x8993))+((r12*x8991))+(((-1.0)*gconst2*r10*x8992)));
evalcond[1]=(((r21*x8994))+(((-1.0)*r22*x8992))+(((-1.0)*r20*x8995)));
evalcond[2]=(((r01*x8994))+(((-1.0)*r02*x8992))+(((-1.0)*r00*x8995)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8992))+((r11*x8994))+(((-1.0)*r10*x8995)));
evalcond[4]=(((cj2*sj1))+((r21*x8993))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8992))+((r22*x8991)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8993))+(((-1.0)*gconst2*r00*x8992))+((r02*x8991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8996=(gconst2*r10);
IkReal x8997=(gconst1*r11);
CheckValue<IkReal> x8998=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8996*x8996)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8997*x8997)))+(((2.0)*x8996*x8997)))),-1);
if(!x8998.valid){
continue;
}
CheckValue<IkReal> x8999 = IKatan2WithCheck(IkReal((x8997+(((-1.0)*x8996)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8998.value)))+(x8999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9000=IKcos(j4);
IkReal x9001=IKsin(j4);
IkReal x9002=((1.0)*x9000);
IkReal x9003=(gconst1*x9000);
IkReal x9004=(gconst1*x9001);
IkReal x9005=((1.0)*gconst2*x9001);
evalcond[0]=((((-1.0)*gconst2*r10*x9002))+((r11*x9003))+((r12*x9001)));
evalcond[1]=((((-1.0)*r22*x9002))+((r21*x9004))+(((-1.0)*r20*x9005)));
evalcond[2]=((((-1.0)*r02*x9002))+(((-1.0)*r00*x9005))+((r01*x9004)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9002))+(((-1.0)*r10*x9005))+((r11*x9004)));
evalcond[4]=(((cj2*sj1))+((r21*x9003))+((r22*x9001))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9002)));
evalcond[5]=(((r02*x9001))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9002))+((r01*x9003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9006=((1.0)*gconst2);
CheckValue<IkReal> x9007=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9006)))),-1);
if(!x9007.valid){
continue;
}
CheckValue<IkReal> x9008 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9007.value)))+(x9008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9009=IKcos(j4);
IkReal x9010=IKsin(j4);
IkReal x9011=((1.0)*x9009);
IkReal x9012=(gconst1*x9009);
IkReal x9013=(gconst1*x9010);
IkReal x9014=((1.0)*gconst2*x9010);
evalcond[0]=(((r12*x9010))+(((-1.0)*gconst2*r10*x9011))+((r11*x9012)));
evalcond[1]=((((-1.0)*r22*x9011))+(((-1.0)*r20*x9014))+((r21*x9013)));
evalcond[2]=((((-1.0)*r00*x9014))+(((-1.0)*r02*x9011))+((r01*x9013)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9014))+(((-1.0)*r12*x9011))+((r11*x9013)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9011))+((cj1*sj2))+((r22*x9010))+((r21*x9012)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9010))+((r01*x9012))+(((-1.0)*gconst2*r00*x9011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9015=((-1.0)*r20);
IkReal x9016=x8921;
CheckValue<IkReal> x9018 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9015),IKFAST_ATAN2_MAGTHRESH);
if(!x9018.valid){
continue;
}
IkReal x9017=((-1.0)*(x9018.value));
sj5=gconst1;
cj5=gconst2;
j5=x9017;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9017;
IkReal gconst1=(r21*x9016);
IkReal gconst2=(x9015*x9016);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9019=((-1.0)*r20);
IkReal x9020=x8921;
CheckValue<IkReal> x9022 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9019),IKFAST_ATAN2_MAGTHRESH);
if(!x9022.valid){
continue;
}
IkReal x9021=((-1.0)*(x9022.value));
sj5=gconst1;
cj5=gconst2;
j5=x9021;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9021;
IkReal gconst1=(r21*x9020);
IkReal gconst2=(x9019*x9020);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9023=((-1.0)*r20);
IkReal x9024=x8921;
CheckValue<IkReal> x9026 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9023),IKFAST_ATAN2_MAGTHRESH);
if(!x9026.valid){
continue;
}
IkReal x9025=((-1.0)*(x9026.value));
sj5=gconst1;
cj5=gconst2;
j5=x9025;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9025;
IkReal gconst1=(r21*x9024);
IkReal gconst2=(x9023*x9024);
IkReal x9027=r22*r22;
IkReal x9028=(cj1*r12*sj2);
IkReal x9029=(cj2*r12*sj1);
CheckValue<IkReal> x9033=IKPowWithIntegerCheck(((-1.0)+x9027),-1);
if(!x9033.valid){
continue;
}
IkReal x9030=x9033.value;
if((((1.0)+(((-1.0)*x9027)))) < -0.00001)
continue;
IkReal x9031=IKsqrt(((1.0)+(((-1.0)*x9027))));
IkReal x9032=(r22*x9030*x9031);
j4eval[0]=((IKabs((((x9028*x9032))+((x9029*x9032)))))+(IKabs(((((-1.0)*x9028))+(((-1.0)*x9029))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9034=(cj1*sj2);
IkReal x9035=(cj2*sj1);
IkReal x9036=((1.0)*r12);
IkReal x9037=(gconst1*r11);
IkReal x9038=((1.0)*gconst2*r10);
CheckValue<IkReal> x9039=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9039.valid){
continue;
}
CheckValue<IkReal> x9040 = IKatan2WithCheck(IkReal(((((-1.0)*x9035*x9038))+(((-1.0)*x9034*x9038))+((x9034*x9037))+((x9035*x9037)))),IkReal(((((-1.0)*x9035*x9036))+(((-1.0)*x9034*x9036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9039.value)))+(x9040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9041=IKcos(j4);
IkReal x9042=IKsin(j4);
IkReal x9043=((1.0)*x9041);
IkReal x9044=(gconst1*x9041);
IkReal x9045=(gconst1*x9042);
IkReal x9046=((1.0)*gconst2*x9042);
evalcond[0]=(((r12*x9042))+((r11*x9044))+(((-1.0)*gconst2*r10*x9043)));
evalcond[1]=((((-1.0)*r22*x9043))+(((-1.0)*r20*x9046))+((r21*x9045)));
evalcond[2]=(((r01*x9045))+(((-1.0)*r00*x9046))+(((-1.0)*r02*x9043)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9046))+(((-1.0)*r12*x9043))+((r11*x9045)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9042))+((r21*x9044))+(((-1.0)*gconst2*r20*x9043)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9044))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9043))+((r02*x9042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9047=(gconst1*r11);
IkReal x9048=(gconst2*r10);
CheckValue<IkReal> x9049=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9048*x9048)+(x9047*x9047)+(((-2.0)*x9047*x9048)))),-1);
if(!x9049.valid){
continue;
}
CheckValue<IkReal> x9050 = IKatan2WithCheck(IkReal(((((-1.0)*x9048))+x9047)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9049.value)))+(x9050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9051=IKcos(j4);
IkReal x9052=IKsin(j4);
IkReal x9053=((1.0)*x9051);
IkReal x9054=(gconst1*x9051);
IkReal x9055=(gconst1*x9052);
IkReal x9056=((1.0)*gconst2*x9052);
evalcond[0]=((((-1.0)*gconst2*r10*x9053))+((r12*x9052))+((r11*x9054)));
evalcond[1]=((((-1.0)*r22*x9053))+(((-1.0)*r20*x9056))+((r21*x9055)));
evalcond[2]=((((-1.0)*r02*x9053))+(((-1.0)*r00*x9056))+((r01*x9055)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9056))+(((-1.0)*r12*x9053))+((r11*x9055)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9052))+(((-1.0)*gconst2*r20*x9053))+((r21*x9054)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9054))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9053))+((r02*x9052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9057 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9057.valid){
continue;
}
CheckValue<IkReal> x9058=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9057.value)+(((1.5707963267949)*(x9058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9059=IKcos(j4);
IkReal x9060=IKsin(j4);
IkReal x9061=((1.0)*x9059);
IkReal x9062=(gconst1*x9059);
IkReal x9063=(gconst1*x9060);
IkReal x9064=((1.0)*gconst2*x9060);
evalcond[0]=(((r11*x9062))+((r12*x9060))+(((-1.0)*gconst2*r10*x9061)));
evalcond[1]=((((-1.0)*r20*x9064))+((r21*x9063))+(((-1.0)*r22*x9061)));
evalcond[2]=(((r01*x9063))+(((-1.0)*r02*x9061))+(((-1.0)*r00*x9064)));
evalcond[3]=((-1.0)+((r11*x9063))+(((-1.0)*r10*x9064))+(((-1.0)*r12*x9061)));
evalcond[4]=(((cj2*sj1))+((r22*x9060))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9061))+((r21*x9062)));
evalcond[5]=(((r01*x9062))+(((-1.0)*gconst2*r00*x9061))+(((-1.0)*sj1*sj2))+((r02*x9060))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9065=((-1.0)*r20);
IkReal x9066=x8921;
CheckValue<IkReal> x9068 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9065),IKFAST_ATAN2_MAGTHRESH);
if(!x9068.valid){
continue;
}
IkReal x9067=((-1.0)*(x9068.value));
sj5=gconst1;
cj5=gconst2;
j5=x9067;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9067;
IkReal gconst1=(r21*x9066);
IkReal gconst2=(x9065*x9066);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9069=((-1.0)*r20);
IkReal x9070=x8921;
CheckValue<IkReal> x9072 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9069),IKFAST_ATAN2_MAGTHRESH);
if(!x9072.valid){
continue;
}
IkReal x9071=((-1.0)*(x9072.value));
sj5=gconst1;
cj5=gconst2;
j5=x9071;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9071;
IkReal gconst1=(r21*x9070);
IkReal gconst2=(x9069*x9070);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9073=((-1.0)*r20);
IkReal x9074=x8921;
CheckValue<IkReal> x9076 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9073),IKFAST_ATAN2_MAGTHRESH);
if(!x9076.valid){
continue;
}
IkReal x9075=((-1.0)*(x9076.value));
sj5=gconst1;
cj5=gconst2;
j5=x9075;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9075;
IkReal gconst1=(r21*x9074);
IkReal gconst2=(x9073*x9074);
IkReal x9077=r22*r22;
IkReal x9078=((1.0)*r02);
IkReal x9079=(cj1*sj2);
IkReal x9080=(cj2*sj1);
CheckValue<IkReal> x9084=IKPowWithIntegerCheck(((-1.0)+x9077),-1);
if(!x9084.valid){
continue;
}
IkReal x9081=x9084.value;
if((((1.0)+(((-1.0)*x9077)))) < -0.00001)
continue;
IkReal x9082=IKsqrt(((1.0)+(((-1.0)*x9077))));
IkReal x9083=(r02*r22*x9081*x9082);
j4eval[0]=((IKabs((((x9080*x9083))+((x9079*x9083)))))+(IKabs(((((-1.0)*x9078*x9079))+(((-1.0)*x9078*x9080))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9085=(cj1*sj2);
IkReal x9086=(gconst1*r01);
IkReal x9087=((1.0)*r02);
IkReal x9088=(cj2*sj1);
IkReal x9089=((1.0)*gconst2*r00);
CheckValue<IkReal> x9090 = IKatan2WithCheck(IkReal((((x9085*x9086))+((x9086*x9088))+(((-1.0)*x9085*x9089))+(((-1.0)*x9088*x9089)))),IkReal(((((-1.0)*x9085*x9087))+(((-1.0)*x9087*x9088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9090.valid){
continue;
}
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9090.value)+(((1.5707963267949)*(x9091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9092=IKcos(j4);
IkReal x9093=IKsin(j4);
IkReal x9094=((1.0)*x9092);
IkReal x9095=(gconst1*x9092);
IkReal x9096=(gconst1*x9093);
IkReal x9097=((1.0)*gconst2*x9093);
evalcond[0]=((((-1.0)*gconst2*r00*x9094))+((r01*x9095))+((r02*x9093)));
evalcond[1]=((((-1.0)*r20*x9097))+((r21*x9096))+(((-1.0)*r22*x9094)));
evalcond[2]=(((r11*x9096))+(((-1.0)*r10*x9097))+(((-1.0)*r12*x9094)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9097))+((r01*x9096))+(((-1.0)*r02*x9094)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9094))+((cj1*sj2))+((r21*x9095))+((r22*x9093)));
evalcond[5]=(((r11*x9095))+((r12*x9093))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9098=(gconst1*r01);
IkReal x9099=(gconst2*r00);
CheckValue<IkReal> x9100=IKPowWithIntegerCheck(IKsign(((x9099*x9099)+(((-2.0)*x9098*x9099))+(x9098*x9098)+(r02*r02))),-1);
if(!x9100.valid){
continue;
}
CheckValue<IkReal> x9101 = IKatan2WithCheck(IkReal((x9098+(((-1.0)*x9099)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9100.value)))+(x9101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9102=IKcos(j4);
IkReal x9103=IKsin(j4);
IkReal x9104=((1.0)*x9102);
IkReal x9105=(gconst1*x9102);
IkReal x9106=(gconst1*x9103);
IkReal x9107=((1.0)*gconst2*x9103);
evalcond[0]=(((r02*x9103))+(((-1.0)*gconst2*r00*x9104))+((r01*x9105)));
evalcond[1]=((((-1.0)*r22*x9104))+((r21*x9106))+(((-1.0)*r20*x9107)));
evalcond[2]=((((-1.0)*r10*x9107))+(((-1.0)*r12*x9104))+((r11*x9106)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9104))+(((-1.0)*r00*x9107))+((r01*x9106)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9103))+((r21*x9105))+(((-1.0)*gconst2*r20*x9104)));
evalcond[5]=((((-1.0)*gconst2*r10*x9104))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9103))+((r11*x9105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9108=((1.0)*gconst2);
CheckValue<IkReal> x9109=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9108)))),-1);
if(!x9109.valid){
continue;
}
CheckValue<IkReal> x9110 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9108))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9109.value)))+(x9110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9111=IKcos(j4);
IkReal x9112=IKsin(j4);
IkReal x9113=((1.0)*x9111);
IkReal x9114=(gconst1*x9111);
IkReal x9115=(gconst1*x9112);
IkReal x9116=((1.0)*gconst2*x9112);
evalcond[0]=((((-1.0)*gconst2*r00*x9113))+((r01*x9114))+((r02*x9112)));
evalcond[1]=(((r21*x9115))+(((-1.0)*r22*x9113))+(((-1.0)*r20*x9116)));
evalcond[2]=((((-1.0)*r10*x9116))+((r11*x9115))+(((-1.0)*r12*x9113)));
evalcond[3]=((-1.0)+((r01*x9115))+(((-1.0)*r02*x9113))+(((-1.0)*r00*x9116)));
evalcond[4]=(((r21*x9114))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9113))+((r22*x9112)));
evalcond[5]=(((r12*x9112))+((r11*x9114))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9117=((-1.0)*r20);
IkReal x9118=x8921;
CheckValue<IkReal> x9120 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9117),IKFAST_ATAN2_MAGTHRESH);
if(!x9120.valid){
continue;
}
IkReal x9119=((-1.0)*(x9120.value));
sj5=gconst1;
cj5=gconst2;
j5=x9119;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9119;
IkReal gconst1=(r21*x9118);
IkReal gconst2=(x9117*x9118);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9121=((-1.0)*r20);
IkReal x9122=x8921;
CheckValue<IkReal> x9124 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9121),IKFAST_ATAN2_MAGTHRESH);
if(!x9124.valid){
continue;
}
IkReal x9123=((-1.0)*(x9124.value));
sj5=gconst1;
cj5=gconst2;
j5=x9123;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9123;
IkReal gconst1=(r21*x9122);
IkReal gconst2=(x9121*x9122);
IkReal x9125=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9129=IKPowWithIntegerCheck(x9125,-1);
if(!x9129.valid){
continue;
}
IkReal x9126=x9129.value;
IkReal x9127=((1.0)*x9126);
IkReal x9128=((((-1.0)*x9127*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9126))+(((-1.0)*x9127*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02))));
j4eval[0]=x9128;
j4eval[1]=IKsign(x9128);
j4eval[2]=r02;
j4eval[3]=x9125;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9130=((-1.0)*r20);
IkReal x9131=x8921;
CheckValue<IkReal> x9133 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9130),IKFAST_ATAN2_MAGTHRESH);
if(!x9133.valid){
continue;
}
IkReal x9132=((-1.0)*(x9133.value));
sj5=gconst1;
cj5=gconst2;
j5=x9132;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9132;
IkReal gconst1=(r21*x9131);
IkReal gconst2=(x9130*x9131);
IkReal x9134=r22*r22;
IkReal x9135=((1.0)*r02);
IkReal x9136=(cj1*sj2);
IkReal x9137=(cj2*sj1);
CheckValue<IkReal> x9141=IKPowWithIntegerCheck(((-1.0)+x9134),-1);
if(!x9141.valid){
continue;
}
IkReal x9138=x9141.value;
if((((1.0)+(((-1.0)*x9134)))) < -0.00001)
continue;
IkReal x9139=IKsqrt(((1.0)+(((-1.0)*x9134))));
IkReal x9140=(r02*r22*x9138*x9139);
j4eval[0]=((IKabs((((x9136*x9140))+((x9137*x9140)))))+(IKabs(((((-1.0)*x9135*x9136))+(((-1.0)*x9135*x9137))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9142=(cj1*sj2);
IkReal x9143=(gconst1*r01);
IkReal x9144=((1.0)*r02);
IkReal x9145=(cj2*sj1);
IkReal x9146=((1.0)*gconst2*r00);
CheckValue<IkReal> x9147 = IKatan2WithCheck(IkReal(((((-1.0)*x9142*x9146))+((x9143*x9145))+((x9142*x9143))+(((-1.0)*x9145*x9146)))),IkReal(((((-1.0)*x9142*x9144))+(((-1.0)*x9144*x9145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9147.valid){
continue;
}
CheckValue<IkReal> x9148=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9147.value)+(((1.5707963267949)*(x9148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9149=IKcos(j4);
IkReal x9150=IKsin(j4);
IkReal x9151=((1.0)*x9149);
IkReal x9152=(gconst1*x9149);
IkReal x9153=(gconst1*x9150);
IkReal x9154=((1.0)*gconst2*x9150);
evalcond[0]=(((r02*x9150))+(((-1.0)*gconst2*r00*x9151))+((r01*x9152)));
evalcond[1]=((((-1.0)*r20*x9154))+(((-1.0)*r22*x9151))+((r21*x9153)));
evalcond[2]=(((r11*x9153))+(((-1.0)*r12*x9151))+(((-1.0)*r10*x9154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9151))+((r01*x9153))+(((-1.0)*r00*x9154)));
evalcond[4]=(((cj2*sj1))+((r22*x9150))+(((-1.0)*gconst2*r20*x9151))+((cj1*sj2))+((r21*x9152)));
evalcond[5]=(((r11*x9152))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9151))+((cj1*cj2))+((r12*x9150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9155=(gconst1*r01);
IkReal x9156=(gconst2*r00);
CheckValue<IkReal> x9157 = IKatan2WithCheck(IkReal((x9155+(((-1.0)*x9156)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9157.valid){
continue;
}
CheckValue<IkReal> x9158=IKPowWithIntegerCheck(IKsign(((((2.0)*x9155*x9156))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9156*x9156)))+(((-1.0)*(x9155*x9155))))),-1);
if(!x9158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9157.value)+(((1.5707963267949)*(x9158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9159=IKcos(j4);
IkReal x9160=IKsin(j4);
IkReal x9161=((1.0)*x9159);
IkReal x9162=(gconst1*x9159);
IkReal x9163=(gconst1*x9160);
IkReal x9164=((1.0)*gconst2*x9160);
evalcond[0]=(((r01*x9162))+((r02*x9160))+(((-1.0)*gconst2*r00*x9161)));
evalcond[1]=((((-1.0)*r22*x9161))+((r21*x9163))+(((-1.0)*r20*x9164)));
evalcond[2]=((((-1.0)*r12*x9161))+(((-1.0)*r10*x9164))+((r11*x9163)));
evalcond[3]=((1.0)+((r01*x9163))+(((-1.0)*r02*x9161))+(((-1.0)*r00*x9164)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9160))+((r21*x9162))+(((-1.0)*gconst2*r20*x9161)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9161))+((r11*x9162))+((r12*x9160))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9165 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9165.valid){
continue;
}
CheckValue<IkReal> x9166=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9165.value)+(((1.5707963267949)*(x9166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9167=IKcos(j4);
IkReal x9168=IKsin(j4);
IkReal x9169=((1.0)*x9167);
IkReal x9170=(gconst1*x9167);
IkReal x9171=(gconst1*x9168);
IkReal x9172=((1.0)*gconst2*x9168);
evalcond[0]=(((r02*x9168))+((r01*x9170))+(((-1.0)*gconst2*r00*x9169)));
evalcond[1]=((((-1.0)*r22*x9169))+((r21*x9171))+(((-1.0)*r20*x9172)));
evalcond[2]=((((-1.0)*r12*x9169))+(((-1.0)*r10*x9172))+((r11*x9171)));
evalcond[3]=((1.0)+((r01*x9171))+(((-1.0)*r02*x9169))+(((-1.0)*r00*x9172)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9168))+((r21*x9170))+(((-1.0)*gconst2*r20*x9169)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9169))+((r12*x9168))+((cj1*cj2))+((r11*x9170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9173=((-1.0)*r20);
IkReal x9174=((-1.0)*px);
CheckValue<IkReal> x9176 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9173),IKFAST_ATAN2_MAGTHRESH);
if(!x9176.valid){
continue;
}
IkReal x9175=((-1.0)*(x9176.value));
sj5=gconst1;
cj5=gconst2;
j5=x9175;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9174);
rxp1_1=(px*r21);
rxp1_2=(r11*x9174);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9175;
IkReal gconst1=r21;
IkReal gconst2=x9173;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9177=((-1.0)*r20);
IkReal x9178=((-1.0)*px);
CheckValue<IkReal> x9180 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9177),IKFAST_ATAN2_MAGTHRESH);
if(!x9180.valid){
continue;
}
IkReal x9179=((-1.0)*(x9180.value));
sj5=gconst1;
cj5=gconst2;
j5=x9179;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9178);
rxp1_1=(px*r21);
rxp1_2=(r11*x9178);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9179;
IkReal gconst1=r21;
IkReal gconst2=x9177;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9181=((-1.0)*r20);
IkReal x9182=((-1.0)*px);
CheckValue<IkReal> x9184 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9181),IKFAST_ATAN2_MAGTHRESH);
if(!x9184.valid){
continue;
}
IkReal x9183=((-1.0)*(x9184.value));
sj5=gconst1;
cj5=gconst2;
j5=x9183;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9182);
rxp1_1=(px*r21);
rxp1_2=(r11*x9182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9183;
IkReal gconst1=r21;
IkReal gconst2=x9181;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9187=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9187.valid){
continue;
}
IkReal x9185=x9187.value;
IkReal x9186=(sj0*x9185);
cj4array[0]=(((cj1*cj2*x9186))+(((-1.0)*sj1*sj2*x9186)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9188=IKsin(j4);
IkReal x9189=IKcos(j4);
IkReal x9190=((1.0)*gconst2);
IkReal x9191=(gconst1*r21);
evalcond[0]=(r02*x9188);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9189)));
evalcond[2]=(((x9188*x9191))+(((-1.0)*r20*x9188*x9190)));
evalcond[3]=(((gconst1*r11*x9188))+(((-1.0)*r10*x9188*x9190)));
evalcond[4]=(((cj2*sj1))+((x9189*x9191))+((cj1*sj2))+(((-1.0)*r20*x9189*x9190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9194=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9194.valid){
continue;
}
IkReal x9192=x9194.value;
IkReal x9193=((1.0)*x9192);
cj4array[0]=((((-1.0)*cj2*sj1*x9193))+(((-1.0)*cj1*sj2*x9193)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9195=IKsin(j4);
IkReal x9196=IKcos(j4);
IkReal x9197=((1.0)*sj0);
IkReal x9198=(gconst1*x9195);
IkReal x9199=((1.0)*x9196);
IkReal x9200=((1.0)*gconst2*x9195);
evalcond[0]=(r02*x9195);
evalcond[1]=((((-1.0)*r02*x9199))+(((-1.0)*x9197)));
evalcond[2]=(((r21*x9198))+(((-1.0)*r20*x9200)));
evalcond[3]=((((-1.0)*r10*x9200))+((r11*x9198)));
evalcond[4]=((((-1.0)*gconst2*r10*x9199))+((gconst1*r11*x9196))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9201=IKPowWithIntegerCheck(r02,-1);
if(!x9201.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9201.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9202=IKsin(j4);
IkReal x9203=IKcos(j4);
IkReal x9204=(gconst1*r21);
IkReal x9205=(gconst1*r11);
IkReal x9206=((1.0)*gconst2*r10);
IkReal x9207=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9202);
evalcond[1]=(((x9202*x9204))+(((-1.0)*x9202*x9207)));
evalcond[2]=(((x9202*x9205))+(((-1.0)*x9202*x9206)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9203*x9204))+(((-1.0)*x9203*x9207)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x9203*x9205))+(((-1.0)*x9203*x9206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9208=(cj2*sj1);
IkReal x9209=(cj1*sj2);
IkReal x9210=(gconst1*r21);
IkReal x9211=((1.0)*gconst2*r20);
CheckValue<IkReal> x9212 = IKatan2WithCheck(IkReal((((r22*x9209))+((r22*x9208)))),IkReal((((x9209*x9210))+(((-1.0)*x9208*x9211))+((x9208*x9210))+(((-1.0)*x9209*x9211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9212.valid){
continue;
}
CheckValue<IkReal> x9213=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9210))+(((-1.0)*gconst2*r20*x9211))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9210*x9210))))),-1);
if(!x9213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9212.value)+(((1.5707963267949)*(x9213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9214=IKsin(j4);
IkReal x9215=IKcos(j4);
IkReal x9216=(sj1*sj2);
IkReal x9217=(gconst2*r10);
IkReal x9218=(gconst2*r00);
IkReal x9219=(gconst2*r20);
IkReal x9220=((1.0)*x9215);
IkReal x9221=(gconst1*x9215);
IkReal x9222=((1.0)*cj1*cj2);
IkReal x9223=(gconst1*x9214);
IkReal x9224=((1.0)*x9214);
evalcond[0]=((((-1.0)*x9219*x9224))+((r21*x9223))+(((-1.0)*r22*x9220)));
evalcond[1]=(cj0+(((-1.0)*x9217*x9224))+((r11*x9223))+(((-1.0)*r12*x9220)));
evalcond[2]=(((r01*x9223))+(((-1.0)*sj0))+(((-1.0)*r02*x9220))+(((-1.0)*x9218*x9224)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9219*x9220))+((r21*x9221))+((r22*x9214)));
evalcond[4]=(((r01*x9221))+(((-1.0)*cj0*x9222))+((r02*x9214))+((cj0*x9216))+(((-1.0)*x9218*x9220)));
evalcond[5]=((((-1.0)*x9217*x9220))+((r12*x9214))+((r11*x9221))+((sj0*x9216))+(((-1.0)*sj0*x9222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9225=((1.0)*gconst2);
CheckValue<IkReal> x9226 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9225))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9226.valid){
continue;
}
CheckValue<IkReal> x9227=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9225)))),-1);
if(!x9227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9226.value)+(((1.5707963267949)*(x9227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9228=IKsin(j4);
IkReal x9229=IKcos(j4);
IkReal x9230=(sj1*sj2);
IkReal x9231=(gconst2*r10);
IkReal x9232=(gconst2*r00);
IkReal x9233=(gconst2*r20);
IkReal x9234=((1.0)*x9229);
IkReal x9235=(gconst1*x9229);
IkReal x9236=((1.0)*cj1*cj2);
IkReal x9237=(gconst1*x9228);
IkReal x9238=((1.0)*x9228);
evalcond[0]=(((r21*x9237))+(((-1.0)*x9233*x9238))+(((-1.0)*r22*x9234)));
evalcond[1]=(cj0+(((-1.0)*r12*x9234))+((r11*x9237))+(((-1.0)*x9231*x9238)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9232*x9238))+((r01*x9237))+(((-1.0)*r02*x9234)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9235))+((r22*x9228))+(((-1.0)*x9233*x9234)));
evalcond[4]=((((-1.0)*cj0*x9236))+((cj0*x9230))+((r02*x9228))+(((-1.0)*x9232*x9234))+((r01*x9235)));
evalcond[5]=((((-1.0)*sj0*x9236))+((r12*x9228))+((r11*x9235))+((sj0*x9230))+(((-1.0)*x9231*x9234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9239=((1.0)*gconst2);
CheckValue<IkReal> x9240=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9239)))),-1);
if(!x9240.valid){
continue;
}
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9239))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9240.value)))+(x9241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9242=IKsin(j4);
IkReal x9243=IKcos(j4);
IkReal x9244=(sj1*sj2);
IkReal x9245=(gconst2*r10);
IkReal x9246=(gconst2*r00);
IkReal x9247=(gconst2*r20);
IkReal x9248=((1.0)*x9243);
IkReal x9249=(gconst1*x9243);
IkReal x9250=((1.0)*cj1*cj2);
IkReal x9251=(gconst1*x9242);
IkReal x9252=((1.0)*x9242);
evalcond[0]=((((-1.0)*r22*x9248))+(((-1.0)*x9247*x9252))+((r21*x9251)));
evalcond[1]=(cj0+(((-1.0)*r12*x9248))+(((-1.0)*x9245*x9252))+((r11*x9251)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9246*x9252))+((r01*x9251))+(((-1.0)*r02*x9248)));
evalcond[3]=((((-1.0)*x9247*x9248))+((cj2*sj1))+((cj1*sj2))+((r21*x9249))+((r22*x9242)));
evalcond[4]=((((-1.0)*cj0*x9250))+((cj0*x9244))+(((-1.0)*x9246*x9248))+((r02*x9242))+((r01*x9249)));
evalcond[5]=((((-1.0)*x9245*x9248))+((r12*x9242))+((sj0*x9244))+((r11*x9249))+(((-1.0)*sj0*x9250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9253=((-1.0)*r20);
IkReal x9254=x8921;
CheckValue<IkReal> x9256 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9253),IKFAST_ATAN2_MAGTHRESH);
if(!x9256.valid){
continue;
}
IkReal x9255=((-1.0)*(x9256.value));
sj5=gconst1;
cj5=gconst2;
j5=x9255;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9255;
IkReal gconst1=(r21*x9254);
IkReal gconst2=(x9253*x9254);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9257=((-1.0)*r20);
IkReal x9258=x8921;
CheckValue<IkReal> x9260 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9257),IKFAST_ATAN2_MAGTHRESH);
if(!x9260.valid){
continue;
}
IkReal x9259=((-1.0)*(x9260.value));
sj5=gconst1;
cj5=gconst2;
j5=x9259;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9259;
IkReal gconst1=(r21*x9258);
IkReal gconst2=(x9257*x9258);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9261=((-1.0)*r20);
IkReal x9262=x8921;
CheckValue<IkReal> x9264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9261),IKFAST_ATAN2_MAGTHRESH);
if(!x9264.valid){
continue;
}
IkReal x9263=((-1.0)*(x9264.value));
sj5=gconst1;
cj5=gconst2;
j5=x9263;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9263;
IkReal gconst1=(r21*x9262);
IkReal gconst2=(x9261*x9262);
IkReal x9265=r22*r22;
CheckValue<IkReal> x9268=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9265))),-1);
if(!x9268.valid){
continue;
}
IkReal x9266=x9268.value;
IkReal x9267=(x9265+((x9266*(r20*r20*r20*r20)))+((x9266*(r21*r21*r21*r21)))+(((2.0)*x9266*(r20*r20)*(r21*r21))));
j4eval[0]=x9267;
j4eval[1]=IKsign(x9267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9269=((-1.0)*r20);
IkReal x9270=x8921;
CheckValue<IkReal> x9272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9269),IKFAST_ATAN2_MAGTHRESH);
if(!x9272.valid){
continue;
}
IkReal x9271=((-1.0)*(x9272.value));
sj5=gconst1;
cj5=gconst2;
j5=x9271;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9271;
IkReal gconst1=(r21*x9270);
IkReal gconst2=(x9269*x9270);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9273=((-1.0)*r20);
IkReal x9274=x8921;
CheckValue<IkReal> x9276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9273),IKFAST_ATAN2_MAGTHRESH);
if(!x9276.valid){
continue;
}
IkReal x9275=((-1.0)*(x9276.value));
sj5=gconst1;
cj5=gconst2;
j5=x9275;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9275;
IkReal gconst1=(r21*x9274);
IkReal gconst2=(x9273*x9274);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9277=((-1.0)*r20);
IkReal x9278=x8921;
CheckValue<IkReal> x9280 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9277),IKFAST_ATAN2_MAGTHRESH);
if(!x9280.valid){
continue;
}
IkReal x9279=((-1.0)*(x9280.value));
sj5=gconst1;
cj5=gconst2;
j5=x9279;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9279;
IkReal gconst1=(r21*x9278);
IkReal gconst2=(x9277*x9278);
IkReal x9281=r22*r22;
IkReal x9282=(cj1*r12*sj2);
IkReal x9283=(cj2*r12*sj1);
CheckValue<IkReal> x9287=IKPowWithIntegerCheck(((-1.0)+x9281),-1);
if(!x9287.valid){
continue;
}
IkReal x9284=x9287.value;
if((((1.0)+(((-1.0)*x9281)))) < -0.00001)
continue;
IkReal x9285=IKsqrt(((1.0)+(((-1.0)*x9281))));
IkReal x9286=((1.0)*r22*x9284*x9285);
j4eval[0]=((IKabs(((((-1.0)*x9282*x9286))+(((-1.0)*x9283*x9286)))))+(IKabs((x9283+x9282))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9288=((1.0)*gconst1);
IkReal x9289=(cj2*sj1);
IkReal x9290=(gconst2*r10);
IkReal x9291=(cj1*sj2);
CheckValue<IkReal> x9292 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9288*x9291))+(((-1.0)*r11*x9288*x9289))+((x9289*x9290))+((x9290*x9291)))),IkReal((((r12*x9289))+((r12*x9291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9292.valid){
continue;
}
CheckValue<IkReal> x9293=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9288)))),-1);
if(!x9293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9292.value)+(((1.5707963267949)*(x9293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9294=IKsin(j4);
IkReal x9295=IKcos(j4);
IkReal x9296=((1.0)*x9295);
IkReal x9297=(gconst2*x9295);
IkReal x9298=(gconst1*x9294);
IkReal x9299=((1.0)*x9294);
evalcond[0]=((((-1.0)*gconst2*r20*x9299))+(((-1.0)*r22*x9296))+((r21*x9298)));
evalcond[1]=((((-1.0)*gconst2*r00*x9299))+((r01*x9298))+(((-1.0)*r02*x9296)));
evalcond[2]=((((-1.0)*gconst1*r11*x9296))+((r10*x9297))+(((-1.0)*r12*x9299)));
evalcond[3]=((1.0)+((r11*x9298))+(((-1.0)*gconst2*r10*x9299))+(((-1.0)*r12*x9296)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9296))+((cj1*sj2))+(((-1.0)*r22*x9299))+((r20*x9297)));
evalcond[5]=(((r00*x9297))+(((-1.0)*gconst1*r01*x9296))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9300=(gconst1*r11);
IkReal x9301=(gconst2*r10);
CheckValue<IkReal> x9302=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9300*x9300)+(x9301*x9301)+(((-2.0)*x9300*x9301)))),-1);
if(!x9302.valid){
continue;
}
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal((x9301+(((-1.0)*x9300)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9302.value)))+(x9303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9304=IKsin(j4);
IkReal x9305=IKcos(j4);
IkReal x9306=((1.0)*x9305);
IkReal x9307=(gconst2*x9305);
IkReal x9308=(gconst1*x9304);
IkReal x9309=((1.0)*x9304);
evalcond[0]=(((r21*x9308))+(((-1.0)*r22*x9306))+(((-1.0)*gconst2*r20*x9309)));
evalcond[1]=((((-1.0)*gconst2*r00*x9309))+((r01*x9308))+(((-1.0)*r02*x9306)));
evalcond[2]=((((-1.0)*gconst1*r11*x9306))+((r10*x9307))+(((-1.0)*r12*x9309)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9309))+((r11*x9308))+(((-1.0)*r12*x9306)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9306))+((cj1*sj2))+((r20*x9307))+(((-1.0)*r22*x9309)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9306))+(((-1.0)*r02*x9309))+((r00*x9307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9310=((1.0)*gconst2);
CheckValue<IkReal> x9311 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9310))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9311.valid){
continue;
}
CheckValue<IkReal> x9312=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9310)))),-1);
if(!x9312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9311.value)+(((1.5707963267949)*(x9312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9313=IKsin(j4);
IkReal x9314=IKcos(j4);
IkReal x9315=((1.0)*x9314);
IkReal x9316=(gconst2*x9314);
IkReal x9317=(gconst1*x9313);
IkReal x9318=((1.0)*x9313);
evalcond[0]=(((r21*x9317))+(((-1.0)*r22*x9315))+(((-1.0)*gconst2*r20*x9318)));
evalcond[1]=((((-1.0)*gconst2*r00*x9318))+((r01*x9317))+(((-1.0)*r02*x9315)));
evalcond[2]=((((-1.0)*gconst1*r11*x9315))+((r10*x9316))+(((-1.0)*r12*x9318)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9318))+((r11*x9317))+(((-1.0)*r12*x9315)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9315))+((cj1*sj2))+((r20*x9316))+(((-1.0)*r22*x9318)));
evalcond[5]=((((-1.0)*gconst1*r01*x9315))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9318))+((r00*x9316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9319=((-1.0)*r20);
IkReal x9320=x8921;
CheckValue<IkReal> x9322 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9319),IKFAST_ATAN2_MAGTHRESH);
if(!x9322.valid){
continue;
}
IkReal x9321=((-1.0)*(x9322.value));
sj5=gconst1;
cj5=gconst2;
j5=x9321;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9321;
IkReal gconst1=(r21*x9320);
IkReal gconst2=(x9319*x9320);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9323=((-1.0)*r20);
IkReal x9324=x8921;
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9323),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
IkReal x9325=((-1.0)*(x9326.value));
sj5=gconst1;
cj5=gconst2;
j5=x9325;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9325;
IkReal gconst1=(r21*x9324);
IkReal gconst2=(x9323*x9324);
IkReal x9327=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9331=IKPowWithIntegerCheck(x9327,-1);
if(!x9331.valid){
continue;
}
IkReal x9328=x9331.value;
IkReal x9329=((1.0)*x9328);
IkReal x9330=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9328))+(((-1.0)*x9329*(r11*r11)*(r21*r21)))+(((-1.0)*x9329*(r10*r10)*(r20*r20))));
j4eval[0]=x9330;
j4eval[1]=r12;
j4eval[2]=x9327;
j4eval[3]=IKsign(x9330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9332=((-1.0)*r20);
IkReal x9333=x8921;
CheckValue<IkReal> x9335 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9332),IKFAST_ATAN2_MAGTHRESH);
if(!x9335.valid){
continue;
}
IkReal x9334=((-1.0)*(x9335.value));
sj5=gconst1;
cj5=gconst2;
j5=x9334;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9334;
IkReal gconst1=(r21*x9333);
IkReal gconst2=(x9332*x9333);
IkReal x9336=r22*r22;
IkReal x9337=(cj1*r12*sj2);
IkReal x9338=(cj2*r12*sj1);
CheckValue<IkReal> x9342=IKPowWithIntegerCheck(((-1.0)+x9336),-1);
if(!x9342.valid){
continue;
}
IkReal x9339=x9342.value;
if((((1.0)+(((-1.0)*x9336)))) < -0.00001)
continue;
IkReal x9340=IKsqrt(((1.0)+(((-1.0)*x9336))));
IkReal x9341=((1.0)*r22*x9339*x9340);
j4eval[0]=((IKabs((x9337+x9338)))+(IKabs(((((-1.0)*x9337*x9341))+(((-1.0)*x9338*x9341))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9343=((1.0)*gconst1);
IkReal x9344=(cj2*sj1);
IkReal x9345=(gconst2*r10);
IkReal x9346=(cj1*sj2);
CheckValue<IkReal> x9347 = IKatan2WithCheck(IkReal((((x9345*x9346))+(((-1.0)*r11*x9343*x9344))+(((-1.0)*r11*x9343*x9346))+((x9344*x9345)))),IkReal((((r12*x9346))+((r12*x9344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9347.valid){
continue;
}
CheckValue<IkReal> x9348=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9343)))),-1);
if(!x9348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9347.value)+(((1.5707963267949)*(x9348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9349=IKsin(j4);
IkReal x9350=IKcos(j4);
IkReal x9351=((1.0)*x9350);
IkReal x9352=(gconst2*x9350);
IkReal x9353=(gconst1*x9349);
IkReal x9354=((1.0)*x9349);
evalcond[0]=((((-1.0)*r22*x9351))+(((-1.0)*gconst2*r20*x9354))+((r21*x9353)));
evalcond[1]=((((-1.0)*r02*x9351))+((r01*x9353))+(((-1.0)*gconst2*r00*x9354)));
evalcond[2]=((((-1.0)*r12*x9354))+((r10*x9352))+(((-1.0)*gconst1*r11*x9351)));
evalcond[3]=((-1.0)+((r11*x9353))+(((-1.0)*r12*x9351))+(((-1.0)*gconst2*r10*x9354)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9354))+((cj1*sj2))+((r20*x9352))+(((-1.0)*gconst1*r21*x9351)));
evalcond[5]=((((-1.0)*gconst1*r01*x9351))+(((-1.0)*r02*x9354))+(((-1.0)*sj1*sj2))+((r00*x9352))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9355=(gconst1*r11);
IkReal x9356=(gconst2*r10);
CheckValue<IkReal> x9357 = IKatan2WithCheck(IkReal((x9356+(((-1.0)*x9355)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9357.valid){
continue;
}
CheckValue<IkReal> x9358=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x9355*x9355)))+(((-1.0)*(x9356*x9356)))+(((2.0)*x9355*x9356)))),-1);
if(!x9358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9357.value)+(((1.5707963267949)*(x9358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9359=IKsin(j4);
IkReal x9360=IKcos(j4);
IkReal x9361=((1.0)*x9360);
IkReal x9362=(gconst2*x9360);
IkReal x9363=(gconst1*x9359);
IkReal x9364=((1.0)*x9359);
evalcond[0]=(((r21*x9363))+(((-1.0)*r22*x9361))+(((-1.0)*gconst2*r20*x9364)));
evalcond[1]=((((-1.0)*r02*x9361))+((r01*x9363))+(((-1.0)*gconst2*r00*x9364)));
evalcond[2]=((((-1.0)*gconst1*r11*x9361))+(((-1.0)*r12*x9364))+((r10*x9362)));
evalcond[3]=((-1.0)+((r11*x9363))+(((-1.0)*gconst2*r10*x9364))+(((-1.0)*r12*x9361)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9361))+((cj1*sj2))+(((-1.0)*r22*x9364))+((r20*x9362)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9364))+(((-1.0)*gconst1*r01*x9361))+((cj1*cj2))+((r00*x9362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9365 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9365.valid){
continue;
}
CheckValue<IkReal> x9366=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9365.value)+(((1.5707963267949)*(x9366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9367=IKsin(j4);
IkReal x9368=IKcos(j4);
IkReal x9369=((1.0)*x9368);
IkReal x9370=(gconst2*x9368);
IkReal x9371=(gconst1*x9367);
IkReal x9372=((1.0)*x9367);
evalcond[0]=(((r21*x9371))+(((-1.0)*gconst2*r20*x9372))+(((-1.0)*r22*x9369)));
evalcond[1]=((((-1.0)*r02*x9369))+(((-1.0)*gconst2*r00*x9372))+((r01*x9371)));
evalcond[2]=((((-1.0)*gconst1*r11*x9369))+(((-1.0)*r12*x9372))+((r10*x9370)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9372))+((r11*x9371))+(((-1.0)*r12*x9369)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9369))+((cj1*sj2))+(((-1.0)*r22*x9372))+((r20*x9370)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9372))+(((-1.0)*gconst1*r01*x9369))+((cj1*cj2))+((r00*x9370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9373=((-1.0)*r20);
IkReal x9374=x8921;
CheckValue<IkReal> x9376 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9373),IKFAST_ATAN2_MAGTHRESH);
if(!x9376.valid){
continue;
}
IkReal x9375=((-1.0)*(x9376.value));
sj5=gconst1;
cj5=gconst2;
j5=x9375;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9375;
IkReal gconst1=(r21*x9374);
IkReal gconst2=(x9373*x9374);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9377=((-1.0)*r20);
IkReal x9378=x8921;
CheckValue<IkReal> x9380 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9377),IKFAST_ATAN2_MAGTHRESH);
if(!x9380.valid){
continue;
}
IkReal x9379=((-1.0)*(x9380.value));
sj5=gconst1;
cj5=gconst2;
j5=x9379;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9379;
IkReal gconst1=(r21*x9378);
IkReal gconst2=(x9377*x9378);
IkReal x9381=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9385=IKPowWithIntegerCheck(x9381,-1);
if(!x9385.valid){
continue;
}
IkReal x9382=x9385.value;
IkReal x9383=((1.0)*x9382);
IkReal x9384=((((-1.0)*(r02*r02)))+(((-1.0)*x9383*(r00*r00)*(r20*r20)))+(((-1.0)*x9383*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9382)));
j4eval[0]=x9384;
j4eval[1]=IKsign(x9384);
j4eval[2]=r02;
j4eval[3]=x9381;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9386=((-1.0)*r20);
IkReal x9387=x8921;
CheckValue<IkReal> x9389 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9386),IKFAST_ATAN2_MAGTHRESH);
if(!x9389.valid){
continue;
}
IkReal x9388=((-1.0)*(x9389.value));
sj5=gconst1;
cj5=gconst2;
j5=x9388;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9388;
IkReal gconst1=(r21*x9387);
IkReal gconst2=(x9386*x9387);
IkReal x9390=r22*r22;
IkReal x9391=(cj1*r02*sj2);
IkReal x9392=(cj2*r02*sj1);
CheckValue<IkReal> x9396=IKPowWithIntegerCheck(((-1.0)+x9390),-1);
if(!x9396.valid){
continue;
}
IkReal x9393=x9396.value;
if((((1.0)+(((-1.0)*x9390)))) < -0.00001)
continue;
IkReal x9394=IKsqrt(((1.0)+(((-1.0)*x9390))));
IkReal x9395=((1.0)*r22*x9393*x9394);
j4eval[0]=((IKabs(((((-1.0)*x9391*x9395))+(((-1.0)*x9392*x9395)))))+(IKabs((x9392+x9391))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9397=(cj2*sj1);
IkReal x9398=(cj1*sj2);
IkReal x9399=(gconst2*r00);
IkReal x9400=((1.0)*gconst1*r01);
CheckValue<IkReal> x9401 = IKatan2WithCheck(IkReal((((x9398*x9399))+(((-1.0)*x9397*x9400))+(((-1.0)*x9398*x9400))+((x9397*x9399)))),IkReal((((r02*x9397))+((r02*x9398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9401.valid){
continue;
}
CheckValue<IkReal> x9402=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9401.value)+(((1.5707963267949)*(x9402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9403=IKsin(j4);
IkReal x9404=IKcos(j4);
IkReal x9405=(gconst1*r11);
IkReal x9406=(gconst1*r21);
IkReal x9407=(gconst1*r01);
IkReal x9408=((1.0)*x9404);
IkReal x9409=(gconst2*x9404);
IkReal x9410=((1.0)*x9403);
evalcond[0]=((((-1.0)*r22*x9408))+(((-1.0)*gconst2*r20*x9410))+((x9403*x9406)));
evalcond[1]=((((-1.0)*r12*x9408))+((x9403*x9405))+(((-1.0)*gconst2*r10*x9410)));
evalcond[2]=((((-1.0)*r02*x9410))+(((-1.0)*x9407*x9408))+((r00*x9409)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9410))+((x9403*x9407))+(((-1.0)*r02*x9408)));
evalcond[4]=((((-1.0)*x9406*x9408))+((cj2*sj1))+((cj1*sj2))+((r20*x9409))+(((-1.0)*r22*x9410)));
evalcond[5]=((((-1.0)*r12*x9410))+(((-1.0)*x9405*x9408))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x9409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9411=(gconst2*r00);
IkReal x9412=(gconst1*r01);
CheckValue<IkReal> x9413 = IKatan2WithCheck(IkReal((x9411+(((-1.0)*x9412)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9413.valid){
continue;
}
CheckValue<IkReal> x9414=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9411*x9411)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9412*x9412)))+(((2.0)*x9411*x9412)))),-1);
if(!x9414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9413.value)+(((1.5707963267949)*(x9414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9415=IKsin(j4);
IkReal x9416=IKcos(j4);
IkReal x9417=(gconst1*r11);
IkReal x9418=(gconst1*r21);
IkReal x9419=(gconst1*r01);
IkReal x9420=((1.0)*x9416);
IkReal x9421=(gconst2*x9416);
IkReal x9422=((1.0)*x9415);
evalcond[0]=((((-1.0)*gconst2*r20*x9422))+(((-1.0)*r22*x9420))+((x9415*x9418)));
evalcond[1]=((((-1.0)*gconst2*r10*x9422))+(((-1.0)*r12*x9420))+((x9415*x9417)));
evalcond[2]=(((r00*x9421))+(((-1.0)*r02*x9422))+(((-1.0)*x9419*x9420)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9420))+((x9415*x9419))+(((-1.0)*gconst2*r00*x9422)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9421))+(((-1.0)*r22*x9422))+(((-1.0)*x9418*x9420)));
evalcond[5]=((((-1.0)*x9417*x9420))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9422))+((r10*x9421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9423=((1.0)*gconst2);
CheckValue<IkReal> x9424 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9423))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9424.valid){
continue;
}
CheckValue<IkReal> x9425=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9423)))),-1);
if(!x9425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9424.value)+(((1.5707963267949)*(x9425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9426=IKsin(j4);
IkReal x9427=IKcos(j4);
IkReal x9428=(gconst1*r11);
IkReal x9429=(gconst1*r21);
IkReal x9430=(gconst1*r01);
IkReal x9431=((1.0)*x9427);
IkReal x9432=(gconst2*x9427);
IkReal x9433=((1.0)*x9426);
evalcond[0]=(((x9426*x9429))+(((-1.0)*gconst2*r20*x9433))+(((-1.0)*r22*x9431)));
evalcond[1]=((((-1.0)*gconst2*r10*x9433))+((x9426*x9428))+(((-1.0)*r12*x9431)));
evalcond[2]=((((-1.0)*r02*x9433))+(((-1.0)*x9430*x9431))+((r00*x9432)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9433))+((x9426*x9430))+(((-1.0)*r02*x9431)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9432))+(((-1.0)*r22*x9433))+(((-1.0)*x9429*x9431)));
evalcond[5]=((((-1.0)*x9428*x9431))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9433))+((r10*x9432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9434=((-1.0)*r20);
IkReal x9435=x8921;
CheckValue<IkReal> x9437 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9434),IKFAST_ATAN2_MAGTHRESH);
if(!x9437.valid){
continue;
}
IkReal x9436=((-1.0)*(x9437.value));
sj5=gconst1;
cj5=gconst2;
j5=x9436;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9436;
IkReal gconst1=(r21*x9435);
IkReal gconst2=(x9434*x9435);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9438=((-1.0)*r20);
IkReal x9439=x8921;
CheckValue<IkReal> x9441 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9438),IKFAST_ATAN2_MAGTHRESH);
if(!x9441.valid){
continue;
}
IkReal x9440=((-1.0)*(x9441.value));
sj5=gconst1;
cj5=gconst2;
j5=x9440;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9440;
IkReal gconst1=(r21*x9439);
IkReal gconst2=(x9438*x9439);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9442=((-1.0)*r20);
IkReal x9443=x8921;
CheckValue<IkReal> x9445 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9442),IKFAST_ATAN2_MAGTHRESH);
if(!x9445.valid){
continue;
}
IkReal x9444=((-1.0)*(x9445.value));
sj5=gconst1;
cj5=gconst2;
j5=x9444;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9444;
IkReal gconst1=(r21*x9443);
IkReal gconst2=(x9442*x9443);
IkReal x9446=r22*r22;
IkReal x9447=(cj1*r02*sj2);
IkReal x9448=(cj2*r02*sj1);
CheckValue<IkReal> x9452=IKPowWithIntegerCheck(((-1.0)+x9446),-1);
if(!x9452.valid){
continue;
}
IkReal x9449=x9452.value;
if((((1.0)+(((-1.0)*x9446)))) < -0.00001)
continue;
IkReal x9450=IKsqrt(((1.0)+(((-1.0)*x9446))));
IkReal x9451=((1.0)*r22*x9449*x9450);
j4eval[0]=((IKabs((x9448+x9447)))+(IKabs(((((-1.0)*x9447*x9451))+(((-1.0)*x9448*x9451))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9453=(cj2*sj1);
IkReal x9454=(cj1*sj2);
IkReal x9455=(gconst2*r00);
IkReal x9456=((1.0)*gconst1*r01);
CheckValue<IkReal> x9457 = IKatan2WithCheck(IkReal((((x9453*x9455))+(((-1.0)*x9453*x9456))+(((-1.0)*x9454*x9456))+((x9454*x9455)))),IkReal((((r02*x9454))+((r02*x9453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9457.valid){
continue;
}
CheckValue<IkReal> x9458=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9457.value)+(((1.5707963267949)*(x9458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9459=IKsin(j4);
IkReal x9460=IKcos(j4);
IkReal x9461=(gconst1*r11);
IkReal x9462=(gconst1*r21);
IkReal x9463=(gconst1*r01);
IkReal x9464=((1.0)*x9460);
IkReal x9465=(gconst2*x9460);
IkReal x9466=((1.0)*x9459);
evalcond[0]=(((x9459*x9462))+(((-1.0)*gconst2*r20*x9466))+(((-1.0)*r22*x9464)));
evalcond[1]=(((x9459*x9461))+(((-1.0)*r12*x9464))+(((-1.0)*gconst2*r10*x9466)));
evalcond[2]=(((r00*x9465))+(((-1.0)*x9463*x9464))+(((-1.0)*r02*x9466)));
evalcond[3]=((1.0)+((x9459*x9463))+(((-1.0)*gconst2*r00*x9466))+(((-1.0)*r02*x9464)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9462*x9464))+(((-1.0)*r22*x9466))+((r20*x9465)));
evalcond[5]=(((r10*x9465))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9466))+((cj1*cj2))+(((-1.0)*x9461*x9464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9467=(gconst1*r01);
IkReal x9468=(gconst2*r00);
CheckValue<IkReal> x9469 = IKatan2WithCheck(IkReal((x9468+(((-1.0)*x9467)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9469.valid){
continue;
}
CheckValue<IkReal> x9470=IKPowWithIntegerCheck(IKsign(((x9467*x9467)+(x9468*x9468)+(((-2.0)*x9467*x9468))+(r02*r02))),-1);
if(!x9470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9469.value)+(((1.5707963267949)*(x9470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9471=IKsin(j4);
IkReal x9472=IKcos(j4);
IkReal x9473=(gconst1*r11);
IkReal x9474=(gconst1*r21);
IkReal x9475=(gconst1*r01);
IkReal x9476=((1.0)*x9472);
IkReal x9477=(gconst2*x9472);
IkReal x9478=((1.0)*x9471);
evalcond[0]=((((-1.0)*gconst2*r20*x9478))+(((-1.0)*r22*x9476))+((x9471*x9474)));
evalcond[1]=((((-1.0)*r12*x9476))+((x9471*x9473))+(((-1.0)*gconst2*r10*x9478)));
evalcond[2]=((((-1.0)*r02*x9478))+((r00*x9477))+(((-1.0)*x9475*x9476)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9476))+(((-1.0)*gconst2*r00*x9478))+((x9471*x9475)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9478))+(((-1.0)*x9474*x9476))+((r20*x9477)));
evalcond[5]=(((r10*x9477))+(((-1.0)*sj1*sj2))+(((-1.0)*x9473*x9476))+(((-1.0)*r12*x9478))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9479 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9479.valid){
continue;
}
CheckValue<IkReal> x9480=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9479.value)+(((1.5707963267949)*(x9480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9481=IKsin(j4);
IkReal x9482=IKcos(j4);
IkReal x9483=(gconst1*r11);
IkReal x9484=(gconst1*r21);
IkReal x9485=(gconst1*r01);
IkReal x9486=((1.0)*x9482);
IkReal x9487=(gconst2*x9482);
IkReal x9488=((1.0)*x9481);
evalcond[0]=((((-1.0)*r22*x9486))+(((-1.0)*gconst2*r20*x9488))+((x9481*x9484)));
evalcond[1]=((((-1.0)*gconst2*r10*x9488))+((x9481*x9483))+(((-1.0)*r12*x9486)));
evalcond[2]=((((-1.0)*x9485*x9486))+((r00*x9487))+(((-1.0)*r02*x9488)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9488))+(((-1.0)*r02*x9486))+((x9481*x9485)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9484*x9486))+((cj1*sj2))+((r20*x9487))+(((-1.0)*r22*x9488)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9483*x9486))+((cj1*cj2))+((r10*x9487))+(((-1.0)*r12*x9488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9489=((-1.0)*r20);
IkReal x9490=((-1.0)*px);
CheckValue<IkReal> x9492 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9489),IKFAST_ATAN2_MAGTHRESH);
if(!x9492.valid){
continue;
}
IkReal x9491=((-1.0)*(x9492.value));
sj5=gconst1;
cj5=gconst2;
j5=x9491;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9490);
rxp1_1=(px*r21);
rxp1_2=(r11*x9490);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9491;
IkReal gconst1=r21;
IkReal gconst2=x9489;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9493=((-1.0)*r20);
IkReal x9494=((-1.0)*px);
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9493),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
IkReal x9495=((-1.0)*(x9496.value));
sj5=gconst1;
cj5=gconst2;
j5=x9495;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9494);
rxp1_1=(px*r21);
rxp1_2=(r11*x9494);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9495;
IkReal gconst1=r21;
IkReal gconst2=x9493;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9497=((-1.0)*r20);
IkReal x9498=((-1.0)*px);
CheckValue<IkReal> x9500 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9497),IKFAST_ATAN2_MAGTHRESH);
if(!x9500.valid){
continue;
}
IkReal x9499=((-1.0)*(x9500.value));
sj5=gconst1;
cj5=gconst2;
j5=x9499;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9498);
rxp1_1=(px*r21);
rxp1_2=(r11*x9498);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9499;
IkReal gconst1=r21;
IkReal gconst2=x9497;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9503=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9503.valid){
continue;
}
IkReal x9501=x9503.value;
IkReal x9502=(sj0*x9501);
cj4array[0]=((((-1.0)*sj1*sj2*x9502))+((cj1*cj2*x9502)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9504=IKsin(j4);
IkReal x9505=IKcos(j4);
IkReal x9506=(gconst1*x9504);
IkReal x9507=((1.0)*x9505);
IkReal x9508=((1.0)*gconst2*x9504);
evalcond[0]=((-1.0)*r02*x9504);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9507)));
evalcond[2]=(((r21*x9506))+(((-1.0)*r20*x9508)));
evalcond[3]=(((r11*x9506))+(((-1.0)*r10*x9508)));
evalcond[4]=((((-1.0)*gconst1*r21*x9507))+((cj2*sj1))+((cj1*sj2))+((gconst2*r20*x9505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9511=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9511.valid){
continue;
}
IkReal x9509=x9511.value;
IkReal x9510=((1.0)*x9509);
cj4array[0]=((((-1.0)*cj2*sj1*x9510))+(((-1.0)*cj1*sj2*x9510)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9512=IKsin(j4);
IkReal x9513=IKcos(j4);
IkReal x9514=(gconst2*r10);
IkReal x9515=((1.0)*sj0);
IkReal x9516=(gconst1*r11);
IkReal x9517=((1.0)*x9512);
IkReal x9518=((1.0)*x9513);
evalcond[0]=((-1.0)*r02*x9512);
evalcond[1]=((((-1.0)*r02*x9518))+(((-1.0)*x9515)));
evalcond[2]=((((-1.0)*gconst2*r20*x9517))+((gconst1*r21*x9512)));
evalcond[3]=((((-1.0)*x9514*x9517))+((x9512*x9516)));
evalcond[4]=((((-1.0)*cj1*cj2*x9515))+(((-1.0)*x9516*x9518))+((x9513*x9514))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9519=IKPowWithIntegerCheck(r02,-1);
if(!x9519.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9519.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9520=IKsin(j4);
IkReal x9521=IKcos(j4);
IkReal x9522=(gconst2*r10);
IkReal x9523=(gconst1*r11);
IkReal x9524=(gconst1*r21);
IkReal x9525=(gconst2*r20);
IkReal x9526=((1.0)*x9520);
IkReal x9527=((1.0)*x9521);
evalcond[0]=((-1.0)*r02*x9520);
evalcond[1]=(((x9520*x9524))+(((-1.0)*x9525*x9526)));
evalcond[2]=(((x9520*x9523))+(((-1.0)*x9522*x9526)));
evalcond[3]=(((cj2*sj1))+((x9521*x9525))+((cj1*sj2))+(((-1.0)*x9524*x9527)));
evalcond[4]=(((x9521*x9522))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*x9523*x9527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9528=(cj2*sj1);
IkReal x9529=(cj1*sj2);
IkReal x9530=(gconst1*r21);
IkReal x9531=((1.0)*gconst2*r20);
CheckValue<IkReal> x9532 = IKatan2WithCheck(IkReal((((r22*x9528))+((r22*x9529)))),IkReal((((x9529*x9530))+((x9528*x9530))+(((-1.0)*x9529*x9531))+(((-1.0)*x9528*x9531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9532.valid){
continue;
}
CheckValue<IkReal> x9533=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9530*x9530)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9530)))),-1);
if(!x9533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9532.value)+(((1.5707963267949)*(x9533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9534=IKsin(j4);
IkReal x9535=IKcos(j4);
IkReal x9536=(gconst1*r11);
IkReal x9537=(sj1*sj2);
IkReal x9538=(gconst1*r21);
IkReal x9539=(gconst1*r01);
IkReal x9540=((1.0)*x9535);
IkReal x9541=(gconst2*x9535);
IkReal x9542=((1.0)*cj1*cj2);
IkReal x9543=((1.0)*x9534);
evalcond[0]=((((-1.0)*r22*x9540))+((x9534*x9538))+(((-1.0)*gconst2*r20*x9543)));
evalcond[1]=((((-1.0)*r12*x9540))+cj0+(((-1.0)*gconst2*r10*x9543))+((x9534*x9536)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9540))+((x9534*x9539))+(((-1.0)*gconst2*r00*x9543)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9543))+((r20*x9541))+(((-1.0)*x9538*x9540)));
evalcond[4]=((((-1.0)*cj0*x9542))+(((-1.0)*r02*x9543))+(((-1.0)*x9539*x9540))+((cj0*x9537))+((r00*x9541)));
evalcond[5]=((((-1.0)*x9536*x9540))+(((-1.0)*r12*x9543))+(((-1.0)*sj0*x9542))+((sj0*x9537))+((r10*x9541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9544=((1.0)*gconst2);
CheckValue<IkReal> x9545 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9544))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9545.valid){
continue;
}
CheckValue<IkReal> x9546=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9544)))),-1);
if(!x9546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9545.value)+(((1.5707963267949)*(x9546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9547=IKsin(j4);
IkReal x9548=IKcos(j4);
IkReal x9549=(gconst1*r11);
IkReal x9550=(sj1*sj2);
IkReal x9551=(gconst1*r21);
IkReal x9552=(gconst1*r01);
IkReal x9553=((1.0)*x9548);
IkReal x9554=(gconst2*x9548);
IkReal x9555=((1.0)*cj1*cj2);
IkReal x9556=((1.0)*x9547);
evalcond[0]=((((-1.0)*r22*x9553))+((x9547*x9551))+(((-1.0)*gconst2*r20*x9556)));
evalcond[1]=(cj0+((x9547*x9549))+(((-1.0)*gconst2*r10*x9556))+(((-1.0)*r12*x9553)));
evalcond[2]=((((-1.0)*sj0))+((x9547*x9552))+(((-1.0)*r02*x9553))+(((-1.0)*gconst2*r00*x9556)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9551*x9553))+(((-1.0)*r22*x9556))+((cj1*sj2))+((r20*x9554)));
evalcond[4]=((((-1.0)*cj0*x9555))+(((-1.0)*r02*x9556))+((r00*x9554))+((cj0*x9550))+(((-1.0)*x9552*x9553)));
evalcond[5]=(((sj0*x9550))+(((-1.0)*sj0*x9555))+((r10*x9554))+(((-1.0)*x9549*x9553))+(((-1.0)*r12*x9556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9557=((1.0)*gconst2);
CheckValue<IkReal> x9558 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9558.valid){
continue;
}
CheckValue<IkReal> x9559=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9557)))),-1);
if(!x9559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9558.value)+(((1.5707963267949)*(x9559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9560=IKsin(j4);
IkReal x9561=IKcos(j4);
IkReal x9562=(gconst1*r11);
IkReal x9563=(sj1*sj2);
IkReal x9564=(gconst1*r21);
IkReal x9565=(gconst1*r01);
IkReal x9566=((1.0)*x9561);
IkReal x9567=(gconst2*x9561);
IkReal x9568=((1.0)*cj1*cj2);
IkReal x9569=((1.0)*x9560);
evalcond[0]=((((-1.0)*gconst2*r20*x9569))+((x9560*x9564))+(((-1.0)*r22*x9566)));
evalcond[1]=(cj0+((x9560*x9562))+(((-1.0)*gconst2*r10*x9569))+(((-1.0)*r12*x9566)));
evalcond[2]=((((-1.0)*gconst2*r00*x9569))+(((-1.0)*sj0))+((x9560*x9565))+(((-1.0)*r02*x9566)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9569))+(((-1.0)*x9564*x9566))+((r20*x9567)));
evalcond[4]=(((cj0*x9563))+((r00*x9567))+(((-1.0)*cj0*x9568))+(((-1.0)*x9565*x9566))+(((-1.0)*r02*x9569)));
evalcond[5]=(((sj0*x9563))+(((-1.0)*r12*x9569))+(((-1.0)*x9562*x9566))+(((-1.0)*sj0*x9568))+((r10*x9567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9570=((-1.0)*r20);
IkReal x9571=x8921;
CheckValue<IkReal> x9573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9570),IKFAST_ATAN2_MAGTHRESH);
if(!x9573.valid){
continue;
}
IkReal x9572=((-1.0)*(x9573.value));
sj5=gconst1;
cj5=gconst2;
j5=x9572;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9572;
IkReal gconst1=(r21*x9571);
IkReal gconst2=(x9570*x9571);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9574=((-1.0)*r20);
IkReal x9575=x8921;
CheckValue<IkReal> x9577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9574),IKFAST_ATAN2_MAGTHRESH);
if(!x9577.valid){
continue;
}
IkReal x9576=((-1.0)*(x9577.value));
sj5=gconst1;
cj5=gconst2;
j5=x9576;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9576;
IkReal gconst1=(r21*x9575);
IkReal gconst2=(x9574*x9575);
CheckValue<IkReal> x9585=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9585.valid){
continue;
}
IkReal x9578=x9585.value;
IkReal x9579=(sj3*x9578);
IkReal x9580=(r11*x9579);
IkReal x9581=(r00*x9579);
IkReal x9582=(r01*x9579);
IkReal x9583=(r10*x9579);
IkReal x9584=(r20*r21*x9579);
j4eval[0]=IKsign((((r00*r20*r21*x9580))+((r02*r12*sj3))+((r10*x9581*(r20*r20)))+((r10*r20*r21*x9582))+((r01*x9580*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9586=gconst2*gconst2;
IkReal x9587=gconst1*gconst1;
IkReal x9588=((1.0)*cj3);
IkReal x9589=((1.0)*sj3);
IkReal x9590=(r11*sj3);
IkReal x9591=(r10*sj3);
IkReal x9592=(gconst1*gconst2*r00);
IkReal x9593=(gconst1*gconst2*r01);
IkReal x9594=(r00*x9586);
IkReal x9595=(r01*x9587);
CheckValue<IkReal> x9596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9588*x9594))+(((-1.0)*r02*r12*x9588))+(((-1.0)*r11*x9588*x9595))+((cj3*r11*x9592))+((cj3*r10*x9593)))),-1);
if(!x9596.valid){
continue;
}
CheckValue<IkReal> x9597 = IKatan2WithCheck(IkReal((((gconst2*r02*x9590))+((gconst1*r02*x9591)))),IkReal(((((-1.0)*r11*x9589*x9594))+((x9591*x9595))+(((-1.0)*r10*x9589*x9592))+((x9590*x9593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9596.value)))+(x9597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9598=IKsin(j4);
IkReal x9599=IKcos(j4);
IkReal x9600=(sj1*sj2);
IkReal x9601=(gconst1*sj3);
IkReal x9602=(cj3*gconst1);
IkReal x9603=(cj3*gconst2);
IkReal x9604=((1.0)*cj2);
IkReal x9605=(cj1*sj2);
IkReal x9606=(gconst2*sj3);
IkReal x9607=(cj1*x9604);
IkReal x9608=((1.0)*x9599);
IkReal x9609=((1.0)*x9598);
IkReal x9610=(gconst1*x9598);
IkReal x9611=(cj3*x9598);
IkReal x9612=(x9599*x9606);
evalcond[0]=((((-1.0)*r22*x9608))+(((-1.0)*gconst2*r20*x9609))+((r21*x9610)));
evalcond[1]=(((r01*x9610))+(((-1.0)*r02*x9608))+(((-1.0)*gconst2*r00*x9609)));
evalcond[2]=((1.0)+((r11*x9610))+(((-1.0)*r12*x9608))+(((-1.0)*gconst2*r10*x9609)));
evalcond[3]=(((r10*x9601))+((r11*x9606))+((r12*x9611))+((r11*x9599*x9602))+(((-1.0)*r10*x9603*x9608)));
evalcond[4]=(((r10*x9612))+((r10*x9602))+((r11*x9603))+(((-1.0)*r11*x9601*x9608))+(((-1.0)*r12*sj3*x9609)));
evalcond[5]=(((cj2*sj1))+((r21*x9606))+((r22*x9611))+((r21*x9599*x9602))+((r20*x9601))+x9605+(((-1.0)*r20*x9603*x9608)));
evalcond[6]=((((-1.0)*x9607))+((r01*x9599*x9602))+((r00*x9601))+((r01*x9606))+((r02*x9611))+x9600+(((-1.0)*r00*x9603*x9608)));
evalcond[7]=(((r20*x9612))+((r21*x9603))+(((-1.0)*x9607))+((r20*x9602))+x9600+(((-1.0)*r22*sj3*x9609))+(((-1.0)*r21*x9601*x9608)));
evalcond[8]=((((-1.0)*r02*sj3*x9609))+(((-1.0)*sj1*x9604))+((r00*x9612))+((r00*x9602))+(((-1.0)*r01*x9601*x9608))+((r01*x9603))+(((-1.0)*x9605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9613=gconst2*gconst2;
IkReal x9614=gconst1*gconst1;
IkReal x9615=(gconst2*r11);
IkReal x9616=(cj3*r02);
IkReal x9617=(gconst1*r01);
IkReal x9618=(cj3*r10);
IkReal x9619=(r10*sj3);
IkReal x9620=((1.0)*gconst1*r00);
IkReal x9621=(r01*x9614);
IkReal x9622=(r00*x9613);
CheckValue<IkReal> x9623=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9619*x9622))+((r11*sj3*x9621))+(((-1.0)*gconst2*x9617*x9619))+(((-1.0)*sj3*x9615*x9620)))),-1);
if(!x9623.valid){
continue;
}
CheckValue<IkReal> x9624 = IKatan2WithCheck(IkReal((((x9615*x9616))+((gconst1*r10*x9616)))),IkReal((((x9618*x9621))+((cj3*x9615*x9617))+(((-1.0)*cj3*r11*x9622))+(((-1.0)*gconst2*x9618*x9620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9623.value)))+(x9624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9625=IKsin(j4);
IkReal x9626=IKcos(j4);
IkReal x9627=(sj1*sj2);
IkReal x9628=(gconst1*sj3);
IkReal x9629=(cj3*gconst1);
IkReal x9630=(cj3*gconst2);
IkReal x9631=((1.0)*cj2);
IkReal x9632=(cj1*sj2);
IkReal x9633=(gconst2*sj3);
IkReal x9634=(cj1*x9631);
IkReal x9635=((1.0)*x9626);
IkReal x9636=((1.0)*x9625);
IkReal x9637=(gconst1*x9625);
IkReal x9638=(cj3*x9625);
IkReal x9639=(x9626*x9633);
evalcond[0]=((((-1.0)*r22*x9635))+((r21*x9637))+(((-1.0)*gconst2*r20*x9636)));
evalcond[1]=(((r01*x9637))+(((-1.0)*gconst2*r00*x9636))+(((-1.0)*r02*x9635)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9636))+(((-1.0)*r12*x9635))+((r11*x9637)));
evalcond[3]=((((-1.0)*r10*x9630*x9635))+((r10*x9628))+((r11*x9626*x9629))+((r12*x9638))+((r11*x9633)));
evalcond[4]=(((r10*x9639))+((r10*x9629))+(((-1.0)*r12*sj3*x9636))+((r11*x9630))+(((-1.0)*r11*x9628*x9635)));
evalcond[5]=(((cj2*sj1))+((r20*x9628))+(((-1.0)*r20*x9630*x9635))+((r21*x9633))+((r22*x9638))+x9632+((r21*x9626*x9629)));
evalcond[6]=((((-1.0)*r00*x9630*x9635))+((r01*x9633))+((r00*x9628))+((r01*x9626*x9629))+x9627+((r02*x9638))+(((-1.0)*x9634)));
evalcond[7]=(((r20*x9629))+((r20*x9639))+(((-1.0)*r21*x9628*x9635))+((r21*x9630))+(((-1.0)*r22*sj3*x9636))+x9627+(((-1.0)*x9634)));
evalcond[8]=(((r00*x9639))+((r01*x9630))+((r00*x9629))+(((-1.0)*x9632))+(((-1.0)*r02*sj3*x9636))+(((-1.0)*sj1*x9631))+(((-1.0)*r01*x9628*x9635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9640=((1.0)*gconst2);
CheckValue<IkReal> x9641 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9640))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9641.valid){
continue;
}
CheckValue<IkReal> x9642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9640)))),-1);
if(!x9642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9641.value)+(((1.5707963267949)*(x9642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9643=IKsin(j4);
IkReal x9644=IKcos(j4);
IkReal x9645=(sj1*sj2);
IkReal x9646=(gconst1*sj3);
IkReal x9647=(cj3*gconst1);
IkReal x9648=(cj3*gconst2);
IkReal x9649=((1.0)*cj2);
IkReal x9650=(cj1*sj2);
IkReal x9651=(gconst2*sj3);
IkReal x9652=(cj1*x9649);
IkReal x9653=((1.0)*x9644);
IkReal x9654=((1.0)*x9643);
IkReal x9655=(gconst1*x9643);
IkReal x9656=(cj3*x9643);
IkReal x9657=(x9644*x9651);
evalcond[0]=((((-1.0)*gconst2*r20*x9654))+((r21*x9655))+(((-1.0)*r22*x9653)));
evalcond[1]=(((r01*x9655))+(((-1.0)*gconst2*r00*x9654))+(((-1.0)*r02*x9653)));
evalcond[2]=((1.0)+((r11*x9655))+(((-1.0)*r12*x9653))+(((-1.0)*gconst2*r10*x9654)));
evalcond[3]=(((r11*x9644*x9647))+(((-1.0)*r10*x9648*x9653))+((r11*x9651))+((r12*x9656))+((r10*x9646)));
evalcond[4]=(((r11*x9648))+(((-1.0)*r11*x9646*x9653))+((r10*x9647))+((r10*x9657))+(((-1.0)*r12*sj3*x9654)));
evalcond[5]=(((cj2*sj1))+((r21*x9651))+x9650+(((-1.0)*r20*x9648*x9653))+((r20*x9646))+((r22*x9656))+((r21*x9644*x9647)));
evalcond[6]=(((r01*x9651))+((r00*x9646))+x9645+((r02*x9656))+((r01*x9644*x9647))+(((-1.0)*r00*x9648*x9653))+(((-1.0)*x9652)));
evalcond[7]=((((-1.0)*r21*x9646*x9653))+((r20*x9657))+x9645+((r20*x9647))+(((-1.0)*r22*sj3*x9654))+((r21*x9648))+(((-1.0)*x9652)));
evalcond[8]=((((-1.0)*sj1*x9649))+(((-1.0)*r02*sj3*x9654))+((r00*x9657))+((r00*x9647))+((r01*x9648))+(((-1.0)*r01*x9646*x9653))+(((-1.0)*x9650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9658=((-1.0)*r20);
IkReal x9659=x8921;
CheckValue<IkReal> x9661 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9658),IKFAST_ATAN2_MAGTHRESH);
if(!x9661.valid){
continue;
}
IkReal x9660=((-1.0)*(x9661.value));
sj5=gconst1;
cj5=gconst2;
j5=x9660;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9660;
IkReal gconst1=(r21*x9659);
IkReal gconst2=(x9658*x9659);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9662=((-1.0)*r20);
IkReal x9663=x8921;
CheckValue<IkReal> x9665 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9662),IKFAST_ATAN2_MAGTHRESH);
if(!x9665.valid){
continue;
}
IkReal x9664=((-1.0)*(x9665.value));
sj5=gconst1;
cj5=gconst2;
j5=x9664;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9664;
IkReal gconst1=(r21*x9663);
IkReal gconst2=(x9662*x9663);
CheckValue<IkReal> x9673=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9673.valid){
continue;
}
IkReal x9666=x9673.value;
IkReal x9667=(sj3*x9666);
IkReal x9668=(r11*x9667);
IkReal x9669=(r00*x9667);
IkReal x9670=(r01*x9667);
IkReal x9671=(r10*x9667);
IkReal x9672=(r20*r21*x9667);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9668*(r21*r21)))+((r00*r20*r21*x9668))+((r10*r20*r21*x9670))+((r10*x9669*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9674=gconst2*gconst2;
IkReal x9675=gconst1*gconst1;
IkReal x9676=((1.0)*cj3);
IkReal x9677=((1.0)*sj3);
IkReal x9678=(r11*sj3);
IkReal x9679=(r10*sj3);
IkReal x9680=(gconst1*gconst2*r00);
IkReal x9681=(gconst1*gconst2*r01);
IkReal x9682=(r00*x9674);
IkReal x9683=(r01*x9675);
CheckValue<IkReal> x9684 = IKatan2WithCheck(IkReal((((gconst1*r02*x9679))+((gconst2*r02*x9678)))),IkReal(((((-1.0)*r10*x9677*x9680))+(((-1.0)*r11*x9677*x9682))+((x9679*x9683))+((x9678*x9681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9684.valid){
continue;
}
CheckValue<IkReal> x9685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9676))+((cj3*r11*x9680))+((cj3*r10*x9681))+(((-1.0)*r10*x9676*x9682))+(((-1.0)*r11*x9676*x9683)))),-1);
if(!x9685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9684.value)+(((1.5707963267949)*(x9685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9686=IKsin(j4);
IkReal x9687=IKcos(j4);
IkReal x9688=(cj2*sj1);
IkReal x9689=(cj1*sj2);
IkReal x9690=(gconst1*sj3);
IkReal x9691=(cj3*gconst1);
IkReal x9692=(sj1*sj2);
IkReal x9693=(cj3*gconst2);
IkReal x9694=(cj1*cj2);
IkReal x9695=(gconst2*sj3);
IkReal x9696=((1.0)*x9687);
IkReal x9697=((1.0)*x9686);
IkReal x9698=(gconst1*x9686);
IkReal x9699=(cj3*x9686);
IkReal x9700=(x9689+x9688);
IkReal x9701=(x9687*x9695);
evalcond[0]=(((r21*x9698))+(((-1.0)*r22*x9696))+(((-1.0)*gconst2*r20*x9697)));
evalcond[1]=((((-1.0)*gconst2*r00*x9697))+(((-1.0)*r02*x9696))+((r01*x9698)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9697))+(((-1.0)*r12*x9696))+((r11*x9698)));
evalcond[3]=((((-1.0)*r10*x9693*x9696))+((r11*x9687*x9691))+((r12*x9699))+((r11*x9695))+((r10*x9690)));
evalcond[4]=(((r10*x9701))+(((-1.0)*r11*x9690*x9696))+((r11*x9693))+((r10*x9691))+(((-1.0)*r12*sj3*x9697)));
evalcond[5]=(((r22*x9699))+x9700+((r21*x9695))+((r21*x9687*x9691))+((r20*x9690))+(((-1.0)*r20*x9693*x9696)));
evalcond[6]=((((-1.0)*x9692))+((r01*x9687*x9691))+((r02*x9699))+x9694+(((-1.0)*r00*x9693*x9696))+((r00*x9690))+((r01*x9695)));
evalcond[7]=((((-1.0)*r01*x9690*x9696))+(((-1.0)*r02*sj3*x9697))+((r00*x9701))+x9700+((r00*x9691))+((r01*x9693)));
evalcond[8]=((((-1.0)*x9694))+(((-1.0)*r21*x9690*x9696))+(((-1.0)*r22*sj3*x9697))+((r20*x9701))+((r21*x9693))+x9692+((r20*x9691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9702=gconst2*gconst2;
IkReal x9703=gconst1*gconst1;
IkReal x9704=(gconst2*r11);
IkReal x9705=(cj3*r02);
IkReal x9706=(gconst1*r01);
IkReal x9707=(cj3*r10);
IkReal x9708=(r10*sj3);
IkReal x9709=((1.0)*gconst1*r00);
IkReal x9710=(r01*x9703);
IkReal x9711=(r00*x9702);
CheckValue<IkReal> x9712 = IKatan2WithCheck(IkReal((((x9704*x9705))+((gconst1*r10*x9705)))),IkReal((((cj3*x9704*x9706))+((x9707*x9710))+(((-1.0)*gconst2*x9707*x9709))+(((-1.0)*cj3*r11*x9711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9712.valid){
continue;
}
CheckValue<IkReal> x9713=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9704*x9709))+((r11*sj3*x9710))+(((-1.0)*gconst2*x9706*x9708))+((x9708*x9711)))),-1);
if(!x9713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9712.value)+(((1.5707963267949)*(x9713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9714=IKsin(j4);
IkReal x9715=IKcos(j4);
IkReal x9716=(cj2*sj1);
IkReal x9717=(cj1*sj2);
IkReal x9718=(gconst1*sj3);
IkReal x9719=(cj3*gconst1);
IkReal x9720=(sj1*sj2);
IkReal x9721=(cj3*gconst2);
IkReal x9722=(cj1*cj2);
IkReal x9723=(gconst2*sj3);
IkReal x9724=((1.0)*x9715);
IkReal x9725=((1.0)*x9714);
IkReal x9726=(gconst1*x9714);
IkReal x9727=(cj3*x9714);
IkReal x9728=(x9717+x9716);
IkReal x9729=(x9715*x9723);
evalcond[0]=((((-1.0)*gconst2*r20*x9725))+(((-1.0)*r22*x9724))+((r21*x9726)));
evalcond[1]=(((r01*x9726))+(((-1.0)*r02*x9724))+(((-1.0)*gconst2*r00*x9725)));
evalcond[2]=((-1.0)+((r11*x9726))+(((-1.0)*r12*x9724))+(((-1.0)*gconst2*r10*x9725)));
evalcond[3]=(((r11*x9723))+((r12*x9727))+((r10*x9718))+(((-1.0)*r10*x9721*x9724))+((r11*x9715*x9719)));
evalcond[4]=(((r11*x9721))+(((-1.0)*r12*sj3*x9725))+(((-1.0)*r11*x9718*x9724))+((r10*x9719))+((r10*x9729)));
evalcond[5]=(x9728+((r20*x9718))+(((-1.0)*r20*x9721*x9724))+((r21*x9723))+((r22*x9727))+((r21*x9715*x9719)));
evalcond[6]=(((r01*x9723))+((r02*x9727))+x9722+(((-1.0)*r00*x9721*x9724))+((r01*x9715*x9719))+((r00*x9718))+(((-1.0)*x9720)));
evalcond[7]=(((r01*x9721))+(((-1.0)*r02*sj3*x9725))+x9728+((r00*x9719))+(((-1.0)*r01*x9718*x9724))+((r00*x9729)));
evalcond[8]=(x9720+((r20*x9729))+((r20*x9719))+(((-1.0)*r21*x9718*x9724))+(((-1.0)*r22*sj3*x9725))+((r21*x9721))+(((-1.0)*x9722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9730 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9730.valid){
continue;
}
CheckValue<IkReal> x9731=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9730.value)+(((1.5707963267949)*(x9731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9732=IKsin(j4);
IkReal x9733=IKcos(j4);
IkReal x9734=(cj2*sj1);
IkReal x9735=(cj1*sj2);
IkReal x9736=(gconst1*sj3);
IkReal x9737=(cj3*gconst1);
IkReal x9738=(sj1*sj2);
IkReal x9739=(cj3*gconst2);
IkReal x9740=(cj1*cj2);
IkReal x9741=(gconst2*sj3);
IkReal x9742=((1.0)*x9733);
IkReal x9743=((1.0)*x9732);
IkReal x9744=(gconst1*x9732);
IkReal x9745=(cj3*x9732);
IkReal x9746=(x9735+x9734);
IkReal x9747=(x9733*x9741);
evalcond[0]=(((r21*x9744))+(((-1.0)*gconst2*r20*x9743))+(((-1.0)*r22*x9742)));
evalcond[1]=((((-1.0)*gconst2*r00*x9743))+(((-1.0)*r02*x9742))+((r01*x9744)));
evalcond[2]=((-1.0)+((r11*x9744))+(((-1.0)*gconst2*r10*x9743))+(((-1.0)*r12*x9742)));
evalcond[3]=(((r11*x9741))+(((-1.0)*r10*x9739*x9742))+((r11*x9733*x9737))+((r12*x9745))+((r10*x9736)));
evalcond[4]=(((r11*x9739))+((r10*x9747))+(((-1.0)*r12*sj3*x9743))+(((-1.0)*r11*x9736*x9742))+((r10*x9737)));
evalcond[5]=(((r21*x9741))+((r22*x9745))+(((-1.0)*r20*x9739*x9742))+((r20*x9736))+x9746+((r21*x9733*x9737)));
evalcond[6]=((((-1.0)*r00*x9739*x9742))+((r01*x9733*x9737))+((r02*x9745))+x9740+((r01*x9741))+(((-1.0)*x9738))+((r00*x9736)));
evalcond[7]=((((-1.0)*r02*sj3*x9743))+x9746+(((-1.0)*r01*x9736*x9742))+((r00*x9747))+((r01*x9739))+((r00*x9737)));
evalcond[8]=(((r20*x9737))+(((-1.0)*x9740))+x9738+(((-1.0)*r21*x9736*x9742))+((r20*x9747))+((r21*x9739))+(((-1.0)*r22*sj3*x9743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9748=((-1.0)*r20);
IkReal x9749=x8921;
CheckValue<IkReal> x9751 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9748),IKFAST_ATAN2_MAGTHRESH);
if(!x9751.valid){
continue;
}
IkReal x9750=((-1.0)*(x9751.value));
sj5=gconst1;
cj5=gconst2;
j5=x9750;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9750;
IkReal gconst1=(r21*x9749);
IkReal gconst2=(x9748*x9749);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9752=((-1.0)*r20);
IkReal x9753=x8921;
CheckValue<IkReal> x9755 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9752),IKFAST_ATAN2_MAGTHRESH);
if(!x9755.valid){
continue;
}
IkReal x9754=((-1.0)*(x9755.value));
sj5=gconst1;
cj5=gconst2;
j5=x9754;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9754;
IkReal gconst1=(r21*x9753);
IkReal gconst2=(x9752*x9753);
CheckValue<IkReal> x9763=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9763.valid){
continue;
}
IkReal x9756=x9763.value;
IkReal x9757=(sj3*x9756);
IkReal x9758=(r11*x9757);
IkReal x9759=(r00*x9757);
IkReal x9760=(r01*x9757);
IkReal x9761=(r10*x9757);
IkReal x9762=(r20*r21*x9757);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9758))+((r10*x9759*(r20*r20)))+((r10*r20*r21*x9760))+((r01*x9758*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9764=gconst1*gconst1;
IkReal x9765=gconst2*gconst2;
IkReal x9766=((1.0)*cj3);
IkReal x9767=(gconst2*r10);
IkReal x9768=(r01*sj3);
IkReal x9769=(gconst1*r00*sj3);
IkReal x9770=(gconst1*gconst2*r11);
IkReal x9771=(r10*x9765);
IkReal x9772=(r11*x9764);
CheckValue<IkReal> x9773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9766*x9771))+(((-1.0)*r02*r12*x9766))+((cj3*gconst1*r01*x9767))+(((-1.0)*r01*x9766*x9772))+((cj3*r00*x9770)))),-1);
if(!x9773.valid){
continue;
}
CheckValue<IkReal> x9774 = IKatan2WithCheck(IkReal((((r12*x9769))+((gconst2*r12*x9768)))),IkReal((((r00*sj3*x9772))+((x9768*x9770))+(((-1.0)*x9768*x9771))+(((-1.0)*x9767*x9769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9773.value)))+(x9774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9775=IKsin(j4);
IkReal x9776=IKcos(j4);
IkReal x9777=(sj1*sj2);
IkReal x9778=(gconst1*sj3);
IkReal x9779=(cj3*gconst1);
IkReal x9780=(cj3*gconst2);
IkReal x9781=((1.0)*cj2);
IkReal x9782=(cj1*sj2);
IkReal x9783=(gconst2*sj3);
IkReal x9784=(cj1*x9781);
IkReal x9785=((1.0)*x9776);
IkReal x9786=((1.0)*x9775);
IkReal x9787=(gconst1*x9775);
IkReal x9788=(cj3*x9775);
IkReal x9789=(x9776*x9783);
evalcond[0]=(((r21*x9787))+(((-1.0)*gconst2*r20*x9786))+(((-1.0)*r22*x9785)));
evalcond[1]=((((-1.0)*r12*x9785))+((r11*x9787))+(((-1.0)*gconst2*r10*x9786)));
evalcond[2]=((-1.0)+((r01*x9787))+(((-1.0)*gconst2*r00*x9786))+(((-1.0)*r02*x9785)));
evalcond[3]=(((r01*x9783))+((r00*x9778))+(((-1.0)*r00*x9780*x9785))+((r02*x9788))+((r01*x9776*x9779)));
evalcond[4]=(((r00*x9789))+(((-1.0)*r02*sj3*x9786))+((r01*x9780))+((r00*x9779))+(((-1.0)*r01*x9778*x9785)));
evalcond[5]=(((cj2*sj1))+((r21*x9783))+((r21*x9776*x9779))+((r22*x9788))+x9782+((r20*x9778))+(((-1.0)*r20*x9780*x9785)));
evalcond[6]=(((r10*x9778))+((r11*x9776*x9779))+x9777+((r11*x9783))+(((-1.0)*r10*x9780*x9785))+((r12*x9788))+(((-1.0)*x9784)));
evalcond[7]=(((r21*x9780))+(((-1.0)*r22*sj3*x9786))+x9777+((r20*x9779))+((r20*x9789))+(((-1.0)*r21*x9778*x9785))+(((-1.0)*x9784)));
evalcond[8]=(((r10*x9779))+(((-1.0)*sj1*x9781))+(((-1.0)*r12*sj3*x9786))+((r10*x9789))+((r11*x9780))+(((-1.0)*x9782))+(((-1.0)*r11*x9778*x9785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9790=gconst2*gconst2;
IkReal x9791=gconst1*gconst1;
IkReal x9792=(gconst1*r00);
IkReal x9793=(r11*sj3);
IkReal x9794=((1.0)*gconst2);
IkReal x9795=(cj3*r12);
IkReal x9796=(cj3*r11);
IkReal x9797=(gconst2*r01);
IkReal x9798=(cj3*r10);
IkReal x9799=(r10*sj3);
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal((((x9792*x9795))+((x9795*x9797)))),IkReal((((gconst1*x9796*x9797))+((r00*x9791*x9796))+(((-1.0)*r01*x9790*x9798))+(((-1.0)*x9792*x9794*x9798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
CheckValue<IkReal> x9801=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9790*x9799))+(((-1.0)*x9792*x9793*x9794))+((r01*x9791*x9793))+(((-1.0)*gconst1*r01*x9794*x9799)))),-1);
if(!x9801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9800.value)+(((1.5707963267949)*(x9801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9802=IKsin(j4);
IkReal x9803=IKcos(j4);
IkReal x9804=(sj1*sj2);
IkReal x9805=(gconst1*sj3);
IkReal x9806=(cj3*gconst1);
IkReal x9807=(cj3*gconst2);
IkReal x9808=((1.0)*cj2);
IkReal x9809=(cj1*sj2);
IkReal x9810=(gconst2*sj3);
IkReal x9811=(cj1*x9808);
IkReal x9812=((1.0)*x9803);
IkReal x9813=((1.0)*x9802);
IkReal x9814=(gconst1*x9802);
IkReal x9815=(cj3*x9802);
IkReal x9816=(x9803*x9810);
evalcond[0]=(((r21*x9814))+(((-1.0)*r22*x9812))+(((-1.0)*gconst2*r20*x9813)));
evalcond[1]=((((-1.0)*gconst2*r10*x9813))+((r11*x9814))+(((-1.0)*r12*x9812)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9813))+(((-1.0)*r02*x9812))+((r01*x9814)));
evalcond[3]=(((r00*x9805))+((r02*x9815))+(((-1.0)*r00*x9807*x9812))+((r01*x9803*x9806))+((r01*x9810)));
evalcond[4]=(((r00*x9806))+(((-1.0)*r01*x9805*x9812))+(((-1.0)*r02*sj3*x9813))+((r01*x9807))+((r00*x9816)));
evalcond[5]=(((cj2*sj1))+((r21*x9810))+((r21*x9803*x9806))+((r22*x9815))+(((-1.0)*r20*x9807*x9812))+((r20*x9805))+x9809);
evalcond[6]=(((r10*x9805))+(((-1.0)*x9811))+((r12*x9815))+((r11*x9810))+((r11*x9803*x9806))+(((-1.0)*r10*x9807*x9812))+x9804);
evalcond[7]=(((r21*x9807))+(((-1.0)*x9811))+(((-1.0)*r22*sj3*x9813))+(((-1.0)*r21*x9805*x9812))+((r20*x9806))+x9804+((r20*x9816)));
evalcond[8]=(((r10*x9806))+(((-1.0)*x9809))+((r11*x9807))+(((-1.0)*r11*x9805*x9812))+(((-1.0)*r12*sj3*x9813))+(((-1.0)*sj1*x9808))+((r10*x9816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9817=((1.0)*gconst2);
CheckValue<IkReal> x9818=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9817)))),-1);
if(!x9818.valid){
continue;
}
CheckValue<IkReal> x9819 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9818.value)))+(x9819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9820=IKsin(j4);
IkReal x9821=IKcos(j4);
IkReal x9822=(sj1*sj2);
IkReal x9823=(gconst1*sj3);
IkReal x9824=(cj3*gconst1);
IkReal x9825=(cj3*gconst2);
IkReal x9826=((1.0)*cj2);
IkReal x9827=(cj1*sj2);
IkReal x9828=(gconst2*sj3);
IkReal x9829=(cj1*x9826);
IkReal x9830=((1.0)*x9821);
IkReal x9831=((1.0)*x9820);
IkReal x9832=(gconst1*x9820);
IkReal x9833=(cj3*x9820);
IkReal x9834=(x9821*x9828);
evalcond[0]=(((r21*x9832))+(((-1.0)*r22*x9830))+(((-1.0)*gconst2*r20*x9831)));
evalcond[1]=(((r11*x9832))+(((-1.0)*gconst2*r10*x9831))+(((-1.0)*r12*x9830)));
evalcond[2]=((-1.0)+((r01*x9832))+(((-1.0)*r02*x9830))+(((-1.0)*gconst2*r00*x9831)));
evalcond[3]=(((r01*x9821*x9824))+((r00*x9823))+((r01*x9828))+((r02*x9833))+(((-1.0)*r00*x9825*x9830)));
evalcond[4]=((((-1.0)*r02*sj3*x9831))+((r00*x9834))+(((-1.0)*r01*x9823*x9830))+((r00*x9824))+((r01*x9825)));
evalcond[5]=(((r20*x9823))+((cj2*sj1))+(((-1.0)*r20*x9825*x9830))+((r22*x9833))+((r21*x9828))+((r21*x9821*x9824))+x9827);
evalcond[6]=(((r11*x9828))+(((-1.0)*x9829))+((r12*x9833))+(((-1.0)*r10*x9825*x9830))+x9822+((r10*x9823))+((r11*x9821*x9824)));
evalcond[7]=(((r20*x9824))+(((-1.0)*x9829))+(((-1.0)*r21*x9823*x9830))+(((-1.0)*r22*sj3*x9831))+((r21*x9825))+((r20*x9834))+x9822);
evalcond[8]=((((-1.0)*r11*x9823*x9830))+((r10*x9834))+((r11*x9825))+(((-1.0)*r12*sj3*x9831))+(((-1.0)*x9827))+((r10*x9824))+(((-1.0)*sj1*x9826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9835=((-1.0)*r20);
IkReal x9836=x8921;
CheckValue<IkReal> x9838 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9835),IKFAST_ATAN2_MAGTHRESH);
if(!x9838.valid){
continue;
}
IkReal x9837=((-1.0)*(x9838.value));
sj5=gconst1;
cj5=gconst2;
j5=x9837;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9837;
IkReal gconst1=(r21*x9836);
IkReal gconst2=(x9835*x9836);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9839=((-1.0)*r20);
IkReal x9840=x8921;
CheckValue<IkReal> x9842 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9839),IKFAST_ATAN2_MAGTHRESH);
if(!x9842.valid){
continue;
}
IkReal x9841=((-1.0)*(x9842.value));
sj5=gconst1;
cj5=gconst2;
j5=x9841;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9841;
IkReal gconst1=(r21*x9840);
IkReal gconst2=(x9839*x9840);
CheckValue<IkReal> x9850=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9850.valid){
continue;
}
IkReal x9843=x9850.value;
IkReal x9844=(sj3*x9843);
IkReal x9845=(r11*x9844);
IkReal x9846=(r00*x9844);
IkReal x9847=(r01*x9844);
IkReal x9848=(r10*x9844);
IkReal x9849=(r20*r21*x9844);
j4eval[0]=IKsign((((r00*r20*r21*x9845))+((r02*r12*sj3))+((r10*r20*r21*x9847))+((r01*x9845*(r21*r21)))+((r10*x9846*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9851=gconst1*gconst1;
IkReal x9852=gconst2*gconst2;
IkReal x9853=((1.0)*cj3);
IkReal x9854=(gconst2*r10);
IkReal x9855=(r01*sj3);
IkReal x9856=(gconst1*r00*sj3);
IkReal x9857=(gconst1*gconst2*r11);
IkReal x9858=(r10*x9852);
IkReal x9859=(r11*x9851);
CheckValue<IkReal> x9860 = IKatan2WithCheck(IkReal((((gconst2*r12*x9855))+((r12*x9856)))),IkReal((((x9855*x9857))+(((-1.0)*x9854*x9856))+(((-1.0)*x9855*x9858))+((r00*sj3*x9859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9860.valid){
continue;
}
CheckValue<IkReal> x9861=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9857))+(((-1.0)*r02*r12*x9853))+(((-1.0)*r00*x9853*x9858))+((cj3*gconst1*r01*x9854))+(((-1.0)*r01*x9853*x9859)))),-1);
if(!x9861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9860.value)+(((1.5707963267949)*(x9861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9862=IKsin(j4);
IkReal x9863=IKcos(j4);
IkReal x9864=(cj2*sj1);
IkReal x9865=(cj1*sj2);
IkReal x9866=(gconst1*sj3);
IkReal x9867=(cj3*gconst1);
IkReal x9868=(sj1*sj2);
IkReal x9869=(cj3*gconst2);
IkReal x9870=(cj1*cj2);
IkReal x9871=(gconst2*sj3);
IkReal x9872=((1.0)*x9863);
IkReal x9873=((1.0)*x9862);
IkReal x9874=(gconst1*x9862);
IkReal x9875=(cj3*x9862);
IkReal x9876=(x9865+x9864);
IkReal x9877=(x9863*x9871);
evalcond[0]=((((-1.0)*gconst2*r20*x9873))+((r21*x9874))+(((-1.0)*r22*x9872)));
evalcond[1]=((((-1.0)*gconst2*r10*x9873))+((r11*x9874))+(((-1.0)*r12*x9872)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9872))+(((-1.0)*gconst2*r00*x9873))+((r01*x9874)));
evalcond[3]=(((r02*x9875))+((r00*x9866))+((r01*x9863*x9867))+((r01*x9871))+(((-1.0)*r00*x9869*x9872)));
evalcond[4]=(((r00*x9867))+(((-1.0)*r02*sj3*x9873))+(((-1.0)*r01*x9866*x9872))+((r01*x9869))+((r00*x9877)));
evalcond[5]=((((-1.0)*r20*x9869*x9872))+((r21*x9871))+((r22*x9875))+((r21*x9863*x9867))+((r20*x9866))+x9876);
evalcond[6]=(((r12*x9875))+(((-1.0)*r10*x9869*x9872))+(((-1.0)*x9868))+((r11*x9863*x9867))+((r10*x9866))+((r11*x9871))+x9870);
evalcond[7]=((((-1.0)*r12*sj3*x9873))+((r10*x9877))+((r11*x9869))+(((-1.0)*r11*x9866*x9872))+((r10*x9867))+x9876);
evalcond[8]=((((-1.0)*x9870))+((r20*x9877))+(((-1.0)*r21*x9866*x9872))+(((-1.0)*r22*sj3*x9873))+((r21*x9869))+((r20*x9867))+x9868);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9878=gconst2*gconst2;
IkReal x9879=gconst1*gconst1;
IkReal x9880=(gconst1*r00);
IkReal x9881=(r11*sj3);
IkReal x9882=((1.0)*gconst2);
IkReal x9883=(cj3*r12);
IkReal x9884=(cj3*r11);
IkReal x9885=(gconst2*r01);
IkReal x9886=(cj3*r10);
IkReal x9887=(r10*sj3);
CheckValue<IkReal> x9888=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9880*x9881*x9882))+((r02*r12*sj3))+((r00*x9878*x9887))+((r01*x9879*x9881))+(((-1.0)*gconst1*r01*x9882*x9887)))),-1);
if(!x9888.valid){
continue;
}
CheckValue<IkReal> x9889 = IKatan2WithCheck(IkReal((((x9880*x9883))+((x9883*x9885)))),IkReal(((((-1.0)*x9880*x9882*x9886))+((r00*x9879*x9884))+(((-1.0)*r01*x9878*x9886))+((gconst1*x9884*x9885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9888.value)))+(x9889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9890=IKsin(j4);
IkReal x9891=IKcos(j4);
IkReal x9892=(cj2*sj1);
IkReal x9893=(cj1*sj2);
IkReal x9894=(gconst1*sj3);
IkReal x9895=(cj3*gconst1);
IkReal x9896=(sj1*sj2);
IkReal x9897=(cj3*gconst2);
IkReal x9898=(cj1*cj2);
IkReal x9899=(gconst2*sj3);
IkReal x9900=((1.0)*x9891);
IkReal x9901=((1.0)*x9890);
IkReal x9902=(gconst1*x9890);
IkReal x9903=(cj3*x9890);
IkReal x9904=(x9892+x9893);
IkReal x9905=(x9891*x9899);
evalcond[0]=((((-1.0)*gconst2*r20*x9901))+(((-1.0)*r22*x9900))+((r21*x9902)));
evalcond[1]=((((-1.0)*r12*x9900))+((r11*x9902))+(((-1.0)*gconst2*r10*x9901)));
evalcond[2]=((1.0)+((r01*x9902))+(((-1.0)*r02*x9900))+(((-1.0)*gconst2*r00*x9901)));
evalcond[3]=(((r02*x9903))+((r01*x9899))+((r00*x9894))+((r01*x9891*x9895))+(((-1.0)*r00*x9897*x9900)));
evalcond[4]=(((r01*x9897))+((r00*x9895))+((r00*x9905))+(((-1.0)*r01*x9894*x9900))+(((-1.0)*r02*sj3*x9901)));
evalcond[5]=(((r21*x9891*x9895))+((r22*x9903))+((r21*x9899))+((r20*x9894))+x9904+(((-1.0)*r20*x9897*x9900)));
evalcond[6]=(((r12*x9903))+((r11*x9891*x9895))+(((-1.0)*r10*x9897*x9900))+((r11*x9899))+(((-1.0)*x9896))+((r10*x9894))+x9898);
evalcond[7]=(((r11*x9897))+(((-1.0)*r11*x9894*x9900))+x9904+((r10*x9895))+((r10*x9905))+(((-1.0)*r12*sj3*x9901)));
evalcond[8]=((((-1.0)*r21*x9894*x9900))+(((-1.0)*r22*sj3*x9901))+((r20*x9905))+((r21*x9897))+(((-1.0)*x9898))+((r20*x9895))+x9896);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9906 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9906.valid){
continue;
}
CheckValue<IkReal> x9907=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9906.value)+(((1.5707963267949)*(x9907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9908=IKsin(j4);
IkReal x9909=IKcos(j4);
IkReal x9910=(cj2*sj1);
IkReal x9911=(cj1*sj2);
IkReal x9912=(gconst1*sj3);
IkReal x9913=(cj3*gconst1);
IkReal x9914=(sj1*sj2);
IkReal x9915=(cj3*gconst2);
IkReal x9916=(cj1*cj2);
IkReal x9917=(gconst2*sj3);
IkReal x9918=((1.0)*x9909);
IkReal x9919=((1.0)*x9908);
IkReal x9920=(gconst1*x9908);
IkReal x9921=(cj3*x9908);
IkReal x9922=(x9911+x9910);
IkReal x9923=(x9909*x9917);
evalcond[0]=((((-1.0)*gconst2*r20*x9919))+(((-1.0)*r22*x9918))+((r21*x9920)));
evalcond[1]=((((-1.0)*gconst2*r10*x9919))+(((-1.0)*r12*x9918))+((r11*x9920)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9918))+(((-1.0)*gconst2*r00*x9919))+((r01*x9920)));
evalcond[3]=(((r01*x9909*x9913))+((r02*x9921))+((r01*x9917))+((r00*x9912))+(((-1.0)*r00*x9915*x9918)));
evalcond[4]=((((-1.0)*r01*x9912*x9918))+((r01*x9915))+((r00*x9913))+((r00*x9923))+(((-1.0)*r02*sj3*x9919)));
evalcond[5]=(((r20*x9912))+(((-1.0)*r20*x9915*x9918))+((r21*x9909*x9913))+((r21*x9917))+x9922+((r22*x9921)));
evalcond[6]=((((-1.0)*x9914))+(((-1.0)*r10*x9915*x9918))+((r11*x9917))+((r12*x9921))+((r11*x9909*x9913))+x9916+((r10*x9912)));
evalcond[7]=(((r10*x9923))+((r11*x9915))+(((-1.0)*r11*x9912*x9918))+x9922+((r10*x9913))+(((-1.0)*r12*sj3*x9919)));
evalcond[8]=((((-1.0)*r22*sj3*x9919))+((r20*x9913))+(((-1.0)*x9916))+((r20*x9923))+(((-1.0)*r21*x9912*x9918))+((r21*x9915))+x9914);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9924=((-1.0)*r20);
IkReal x9925=((-1.0)*px);
CheckValue<IkReal> x9927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9924),IKFAST_ATAN2_MAGTHRESH);
if(!x9927.valid){
continue;
}
IkReal x9926=((-1.0)*(x9927.value));
sj5=gconst1;
cj5=gconst2;
j5=x9926;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9925);
rxp1_1=(px*r21);
rxp1_2=(r11*x9925);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9926;
IkReal gconst1=r21;
IkReal gconst2=x9924;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9928=((-1.0)*r20);
IkReal x9929=((-1.0)*px);
CheckValue<IkReal> x9931 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9928),IKFAST_ATAN2_MAGTHRESH);
if(!x9931.valid){
continue;
}
IkReal x9930=((-1.0)*(x9931.value));
sj5=gconst1;
cj5=gconst2;
j5=x9930;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9929);
rxp1_1=(px*r21);
rxp1_2=(r11*x9929);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9930;
IkReal gconst1=r21;
IkReal gconst2=x9928;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9932=((-1.0)*r20);
IkReal x9933=((-1.0)*px);
CheckValue<IkReal> x9935 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9932),IKFAST_ATAN2_MAGTHRESH);
if(!x9935.valid){
continue;
}
IkReal x9934=((-1.0)*(x9935.value));
sj5=gconst1;
cj5=gconst2;
j5=x9934;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9933);
rxp1_1=(px*r21);
rxp1_2=(r11*x9933);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9934;
IkReal gconst1=r21;
IkReal gconst2=x9932;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9936=((-1.0)*r20);
IkReal x9937=((-1.0)*px);
CheckValue<IkReal> x9939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9936),IKFAST_ATAN2_MAGTHRESH);
if(!x9939.valid){
continue;
}
IkReal x9938=((-1.0)*(x9939.value));
sj5=gconst1;
cj5=gconst2;
j5=x9938;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9937);
rxp1_1=(px*r21);
rxp1_2=(r11*x9937);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9938;
IkReal gconst1=r21;
IkReal gconst2=x9936;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9940=((-1.0)*r20);
IkReal x9941=((-1.0)*px);
CheckValue<IkReal> x9943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9940),IKFAST_ATAN2_MAGTHRESH);
if(!x9943.valid){
continue;
}
IkReal x9942=((-1.0)*(x9943.value));
sj5=gconst1;
cj5=gconst2;
j5=x9942;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9941);
rxp1_1=(px*r21);
rxp1_2=(r11*x9941);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9942;
IkReal gconst1=r21;
IkReal gconst2=x9940;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9944=((-1.0)*r20);
IkReal x9945=((-1.0)*px);
CheckValue<IkReal> x9947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9944),IKFAST_ATAN2_MAGTHRESH);
if(!x9947.valid){
continue;
}
IkReal x9946=((-1.0)*(x9947.value));
sj5=gconst1;
cj5=gconst2;
j5=x9946;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9945);
rxp1_1=(px*r21);
rxp1_2=(r11*x9945);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9946;
IkReal gconst1=r21;
IkReal gconst2=x9944;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9950=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9950.valid){
continue;
}
IkReal x9948=x9950.value;
IkReal x9949=(sj0*x9948);
cj4array[0]=(((cj1*sj2*x9949))+((cj2*sj1*x9949)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9951=IKsin(j4);
IkReal x9952=IKcos(j4);
IkReal x9953=(gconst1*x9951);
IkReal x9954=((1.0)*x9952);
IkReal x9955=((1.0)*gconst2*x9951);
evalcond[0]=((-1.0)*r02*x9951);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9954)));
evalcond[2]=((((-1.0)*r20*x9955))+((r21*x9953)));
evalcond[3]=(((r11*x9953))+(((-1.0)*r10*x9955)));
evalcond[4]=((((-1.0)*gconst1*r21*x9954))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9957=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9957.valid){
continue;
}
IkReal x9956=x9957.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9956))+((cj1*cj2*x9956)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9958=IKsin(j4);
IkReal x9959=IKcos(j4);
IkReal x9960=(gconst2*r10);
IkReal x9961=((1.0)*sj0);
IkReal x9962=((1.0)*x9958);
IkReal x9963=(gconst1*x9958);
IkReal x9964=((1.0)*x9959);
evalcond[0]=((-1.0)*r02*x9958);
evalcond[1]=((((-1.0)*x9961))+(((-1.0)*r02*x9964)));
evalcond[2]=(((r21*x9963))+(((-1.0)*gconst2*r20*x9962)));
evalcond[3]=((((-1.0)*x9960*x9962))+((r11*x9963)));
evalcond[4]=((((-1.0)*cj2*sj1*x9961))+(((-1.0)*cj1*sj2*x9961))+((x9959*x9960))+(((-1.0)*gconst1*r11*x9964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9965=IKPowWithIntegerCheck(r02,-1);
if(!x9965.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9965.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9966=IKsin(j4);
IkReal x9967=IKcos(j4);
IkReal x9968=(gconst2*r10);
IkReal x9969=((1.0)*sj0);
IkReal x9970=(gconst1*r11);
IkReal x9971=(gconst1*r21);
IkReal x9972=(gconst2*r20);
IkReal x9973=((1.0)*x9966);
IkReal x9974=((1.0)*x9967);
evalcond[0]=((-1.0)*r02*x9966);
evalcond[1]=(((x9966*x9971))+(((-1.0)*x9972*x9973)));
evalcond[2]=((((-1.0)*x9968*x9973))+((x9966*x9970)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9971*x9974))+((x9967*x9972)));
evalcond[4]=((((-1.0)*cj2*sj1*x9969))+(((-1.0)*cj1*sj2*x9969))+((x9967*x9968))+(((-1.0)*x9970*x9974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9975=((-1.0)*r20);
IkReal x9976=((-1.0)*px);
CheckValue<IkReal> x9978 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9975),IKFAST_ATAN2_MAGTHRESH);
if(!x9978.valid){
continue;
}
IkReal x9977=((-1.0)*(x9978.value));
sj5=gconst1;
cj5=gconst2;
j5=x9977;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9976);
rxp1_1=(px*r21);
rxp1_2=(r11*x9976);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9977;
IkReal gconst1=r21;
IkReal gconst2=x9975;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9979=((-1.0)*r20);
IkReal x9980=((-1.0)*px);
CheckValue<IkReal> x9982 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9979),IKFAST_ATAN2_MAGTHRESH);
if(!x9982.valid){
continue;
}
IkReal x9981=((-1.0)*(x9982.value));
sj5=gconst1;
cj5=gconst2;
j5=x9981;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9980);
rxp1_1=(px*r21);
rxp1_2=(r11*x9980);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9981;
IkReal gconst1=r21;
IkReal gconst2=x9979;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9983=((-1.0)*r20);
IkReal x9984=((-1.0)*px);
CheckValue<IkReal> x9986 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9983),IKFAST_ATAN2_MAGTHRESH);
if(!x9986.valid){
continue;
}
IkReal x9985=((-1.0)*(x9986.value));
sj5=gconst1;
cj5=gconst2;
j5=x9985;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9984);
rxp1_1=(px*r21);
rxp1_2=(r11*x9984);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9985;
IkReal gconst1=r21;
IkReal gconst2=x9983;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9989=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9989.valid){
continue;
}
IkReal x9987=x9989.value;
IkReal x9988=(sj0*x9987);
cj4array[0]=(((cj1*sj2*x9988))+((cj2*sj1*x9988)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9990=IKsin(j4);
IkReal x9991=IKcos(j4);
IkReal x9992=((1.0)*gconst2);
IkReal x9993=(gconst1*r21);
evalcond[0]=(r02*x9990);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9991)));
evalcond[2]=(((x9990*x9993))+(((-1.0)*r20*x9990*x9992)));
evalcond[3]=(((gconst1*r11*x9990))+(((-1.0)*r10*x9990*x9992)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9991*x9993))+(((-1.0)*r20*x9991*x9992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9995=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9995.valid){
continue;
}
IkReal x9994=x9995.value;
cj4array[0]=(((cj1*cj2*x9994))+(((-1.0)*sj1*sj2*x9994)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9996=IKsin(j4);
IkReal x9997=IKcos(j4);
IkReal x9998=((1.0)*sj0);
IkReal x9999=(gconst1*x9996);
IkReal x10000=((1.0)*x9997);
IkReal x10001=((1.0)*gconst2*x9996);
evalcond[0]=(r02*x9996);
evalcond[1]=((((-1.0)*r02*x10000))+(((-1.0)*x9998)));
evalcond[2]=((((-1.0)*r20*x10001))+((r21*x9999)));
evalcond[3]=(((r11*x9999))+(((-1.0)*r10*x10001)));
evalcond[4]=(((gconst1*r11*x9997))+(((-1.0)*cj2*sj1*x9998))+(((-1.0)*cj1*sj2*x9998))+(((-1.0)*gconst2*r10*x10000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10002=IKPowWithIntegerCheck(r02,-1);
if(!x10002.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10002.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10003=IKsin(j4);
IkReal x10004=IKcos(j4);
IkReal x10005=(gconst1*r21);
IkReal x10006=((1.0)*sj0);
IkReal x10007=(gconst1*r11);
IkReal x10008=((1.0)*gconst2*r10);
IkReal x10009=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10003);
evalcond[1]=(((x10003*x10005))+(((-1.0)*x10003*x10009)));
evalcond[2]=(((x10003*x10007))+(((-1.0)*x10003*x10008)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10004*x10009))+((x10004*x10005)));
evalcond[4]=((((-1.0)*cj2*sj1*x10006))+(((-1.0)*x10004*x10008))+(((-1.0)*cj1*sj2*x10006))+((x10004*x10007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10011=IKPowWithIntegerCheck(r02,-1);
if(!x10011.valid){
continue;
}
IkReal x10010=x10011.value;
CheckValue<IkReal> x10012=IKPowWithIntegerCheck(cj3,-1);
if(!x10012.valid){
continue;
}
if( IKabs((x10010*(x10012.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10010)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10010*(x10012.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10010))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10010*(x10012.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10010));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10013=IKsin(j4);
IkReal x10014=IKcos(j4);
IkReal x10015=(gconst2*r10);
IkReal x10016=(gconst1*r11);
IkReal x10017=(sj1*sj2);
IkReal x10018=(gconst2*r20);
IkReal x10019=(cj2*sj1);
IkReal x10020=((1.0)*sj0);
IkReal x10021=(gconst1*r20);
IkReal x10022=(gconst2*r11);
IkReal x10023=(gconst1*r21);
IkReal x10024=((1.0)*cj0);
IkReal x10025=(gconst1*r10);
IkReal x10026=(cj1*sj2);
IkReal x10027=(gconst2*r21);
IkReal x10028=(sj3*x10014);
IkReal x10029=((1.0)*cj1*cj2);
IkReal x10030=(cj3*x10014);
IkReal x10031=(r02*x10013);
IkReal x10032=((1.0)*x10013);
evalcond[0]=((((-1.0)*x10020))+(((-1.0)*r02*x10014)));
evalcond[1]=(((x10013*x10023))+(((-1.0)*x10018*x10032)));
evalcond[2]=(((x10013*x10016))+cj0+(((-1.0)*x10015*x10032)));
evalcond[3]=(((cj0*x10017))+((cj3*x10031))+(((-1.0)*cj1*cj2*x10024)));
evalcond[4]=((((-1.0)*sj3*x10031))+(((-1.0)*x10019*x10024))+(((-1.0)*x10024*x10026)));
evalcond[5]=(((sj3*x10021))+((sj3*x10027))+x10026+x10019+(((-1.0)*x10018*x10030))+((x10023*x10030)));
evalcond[6]=(((x10018*x10028))+(((-1.0)*x10023*x10028))+x10017+(((-1.0)*x10029))+((cj3*x10027))+((cj3*x10021)));
evalcond[7]=((((-1.0)*x10015*x10030))+((x10016*x10030))+((sj3*x10025))+((sj3*x10022))+(((-1.0)*cj1*cj2*x10020))+((sj0*x10017)));
evalcond[8]=((((-1.0)*x10019*x10020))+((cj3*x10022))+((cj3*x10025))+(((-1.0)*x10020*x10026))+((x10015*x10028))+(((-1.0)*x10016*x10028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10033=((1.0)*sj3);
IkReal x10034=((1.0)*gconst2);
CheckValue<IkReal> x10035=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10034))),-1);
if(!x10035.valid){
continue;
}
CheckValue<IkReal> x10036=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10034))),-1);
if(!x10036.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10035.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10036.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10033))+(((-1.0)*gconst2*r21*x10033)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10035.value)))+IKsqr(((x10036.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10033))+(((-1.0)*gconst2*r21*x10033))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10035.value)), ((x10036.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10033))+(((-1.0)*gconst2*r21*x10033))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10037=IKsin(j4);
IkReal x10038=IKcos(j4);
IkReal x10039=(gconst2*r10);
IkReal x10040=(gconst1*r11);
IkReal x10041=(sj1*sj2);
IkReal x10042=(gconst2*r20);
IkReal x10043=(cj2*sj1);
IkReal x10044=((1.0)*sj0);
IkReal x10045=(gconst1*r20);
IkReal x10046=(gconst2*r11);
IkReal x10047=(gconst1*r21);
IkReal x10048=((1.0)*cj0);
IkReal x10049=(gconst1*r10);
IkReal x10050=(cj1*sj2);
IkReal x10051=(gconst2*r21);
IkReal x10052=(sj3*x10038);
IkReal x10053=((1.0)*cj1*cj2);
IkReal x10054=(cj3*x10038);
IkReal x10055=(r02*x10037);
IkReal x10056=((1.0)*x10037);
evalcond[0]=((((-1.0)*r02*x10038))+(((-1.0)*x10044)));
evalcond[1]=((((-1.0)*x10042*x10056))+((x10037*x10047)));
evalcond[2]=(cj0+(((-1.0)*x10039*x10056))+((x10037*x10040)));
evalcond[3]=((((-1.0)*cj1*cj2*x10048))+((cj0*x10041))+((cj3*x10055)));
evalcond[4]=((((-1.0)*x10043*x10048))+(((-1.0)*sj3*x10055))+(((-1.0)*x10048*x10050)));
evalcond[5]=(((sj3*x10051))+((sj3*x10045))+x10050+x10043+(((-1.0)*x10042*x10054))+((x10047*x10054)));
evalcond[6]=((((-1.0)*x10047*x10052))+(((-1.0)*x10053))+x10041+((cj3*x10045))+((x10042*x10052))+((cj3*x10051)));
evalcond[7]=(((sj0*x10041))+((x10040*x10054))+((sj3*x10049))+((sj3*x10046))+(((-1.0)*cj1*cj2*x10044))+(((-1.0)*x10039*x10054)));
evalcond[8]=((((-1.0)*x10043*x10044))+(((-1.0)*x10044*x10050))+((x10039*x10052))+((cj3*x10049))+((cj3*x10046))+(((-1.0)*x10040*x10052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10057=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10057.valid){
continue;
}
CheckValue<IkReal> x10058=IKPowWithIntegerCheck(r02,-1);
if(!x10058.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10057.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10058.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10057.value)))+IKsqr(((-1.0)*sj0*(x10058.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10057.value)), ((-1.0)*sj0*(x10058.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10059=IKsin(j4);
IkReal x10060=IKcos(j4);
IkReal x10061=(gconst2*r10);
IkReal x10062=(gconst1*r11);
IkReal x10063=(sj1*sj2);
IkReal x10064=(gconst2*r20);
IkReal x10065=(cj2*sj1);
IkReal x10066=((1.0)*sj0);
IkReal x10067=(gconst1*r20);
IkReal x10068=(gconst2*r11);
IkReal x10069=(gconst1*r21);
IkReal x10070=((1.0)*cj0);
IkReal x10071=(gconst1*r10);
IkReal x10072=(cj1*sj2);
IkReal x10073=(gconst2*r21);
IkReal x10074=(sj3*x10060);
IkReal x10075=((1.0)*cj1*cj2);
IkReal x10076=(cj3*x10060);
IkReal x10077=(r02*x10059);
IkReal x10078=((1.0)*x10059);
evalcond[0]=((((-1.0)*x10066))+(((-1.0)*r02*x10060)));
evalcond[1]=((((-1.0)*x10064*x10078))+((x10059*x10069)));
evalcond[2]=(cj0+(((-1.0)*x10061*x10078))+((x10059*x10062)));
evalcond[3]=((((-1.0)*cj1*cj2*x10070))+((cj0*x10063))+((cj3*x10077)));
evalcond[4]=((((-1.0)*sj3*x10077))+(((-1.0)*x10070*x10072))+(((-1.0)*x10065*x10070)));
evalcond[5]=(((sj3*x10067))+((sj3*x10073))+(((-1.0)*x10064*x10076))+x10072+x10065+((x10069*x10076)));
evalcond[6]=(((x10064*x10074))+(((-1.0)*x10075))+x10063+(((-1.0)*x10069*x10074))+((cj3*x10067))+((cj3*x10073)));
evalcond[7]=(((sj3*x10068))+((sj3*x10071))+((x10062*x10076))+(((-1.0)*cj1*cj2*x10066))+((sj0*x10063))+(((-1.0)*x10061*x10076)));
evalcond[8]=((((-1.0)*x10066*x10072))+(((-1.0)*x10062*x10074))+((x10061*x10074))+((cj3*x10068))+((cj3*x10071))+(((-1.0)*x10065*x10066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10079=gconst1*gconst1;
IkReal x10080=r21*r21;
IkReal x10081=gconst2*gconst2;
IkReal x10082=r20*r20;
IkReal x10083=(gconst2*r20);
IkReal x10084=(cj1*cj2);
IkReal x10085=(sj1*sj2);
IkReal x10086=(gconst1*r21);
IkReal x10087=(cj3*gconst2);
IkReal x10088=(cj3*r20);
CheckValue<IkReal> x10089=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10079*x10080))+(((-2.0)*sj3*x10083*x10086))+((sj3*x10081*x10082)))),-1);
if(!x10089.valid){
continue;
}
CheckValue<IkReal> x10090 = IKatan2WithCheck(IkReal((((gconst1*r22*x10088))+((r21*r22*x10087))+(((-1.0)*r22*x10084))+((r22*x10085)))),IkReal((((gconst1*x10080*x10087))+(((-1.0)*x10084*x10086))+((x10085*x10086))+(((-1.0)*x10083*x10085))+(((-1.0)*r21*x10081*x10088))+(((-1.0)*gconst1*x10082*x10087))+((r21*x10079*x10088))+((x10083*x10084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10089.value)))+(x10090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10091=IKsin(j4);
IkReal x10092=IKcos(j4);
IkReal x10093=(cj3*gconst1);
IkReal x10094=(gconst1*r01);
IkReal x10095=(gconst1*r11);
IkReal x10096=(sj1*sj2);
IkReal x10097=(cj3*gconst2);
IkReal x10098=(gconst1*sj3);
IkReal x10099=(gconst2*sj3);
IkReal x10100=((1.0)*sj0);
IkReal x10101=(cj1*sj2);
IkReal x10102=((1.0)*x10092);
IkReal x10103=((1.0)*x10091);
IkReal x10104=((1.0)*cj1*cj2);
IkReal x10105=(cj3*x10091);
IkReal x10106=((1.0)*cj2*sj1);
IkReal x10107=(x10092*x10099);
evalcond[0]=((((-1.0)*gconst2*r20*x10103))+(((-1.0)*r22*x10102))+((gconst1*r21*x10091)));
evalcond[1]=((((-1.0)*r12*x10102))+((x10091*x10095))+cj0+(((-1.0)*gconst2*r10*x10103)));
evalcond[2]=(((x10091*x10094))+(((-1.0)*r02*x10102))+(((-1.0)*gconst2*r00*x10103))+(((-1.0)*x10100)));
evalcond[3]=(((cj2*sj1))+x10101+((r21*x10092*x10093))+((r21*x10099))+((r20*x10098))+(((-1.0)*r20*x10097*x10102))+((r22*x10105)));
evalcond[4]=(((r20*x10107))+x10096+((r21*x10097))+(((-1.0)*r21*x10098*x10102))+(((-1.0)*r22*sj3*x10103))+((r20*x10093))+(((-1.0)*x10104)));
evalcond[5]=((((-1.0)*cj0*x10104))+((cj0*x10096))+(((-1.0)*r00*x10097*x10102))+((r02*x10105))+((r01*x10092*x10093))+((r01*x10099))+((r00*x10098)));
evalcond[6]=(((r11*x10099))+((r11*x10092*x10093))+(((-1.0)*cj1*cj2*x10100))+(((-1.0)*r10*x10097*x10102))+((sj0*x10096))+((r10*x10098))+((r12*x10105)));
evalcond[7]=(((r00*x10107))+(((-1.0)*cj0*x10106))+(((-1.0)*sj3*x10094*x10102))+(((-1.0)*cj0*x10101))+(((-1.0)*r02*sj3*x10103))+((r01*x10097))+((r00*x10093)));
evalcond[8]=((((-1.0)*r12*sj3*x10103))+((r11*x10097))+(((-1.0)*x10100*x10101))+(((-1.0)*cj2*sj1*x10100))+((r10*x10107))+((r10*x10093))+(((-1.0)*sj3*x10095*x10102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10108=((1.0)*gconst2);
CheckValue<IkReal> x10109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10108))+(((-1.0)*gconst1*r10)))),-1);
if(!x10109.valid){
continue;
}
CheckValue<IkReal> x10110 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10108))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10109.value)))+(x10110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10111=IKsin(j4);
IkReal x10112=IKcos(j4);
IkReal x10113=(cj3*gconst1);
IkReal x10114=(gconst1*r01);
IkReal x10115=(gconst1*r11);
IkReal x10116=(sj1*sj2);
IkReal x10117=(cj3*gconst2);
IkReal x10118=(gconst1*sj3);
IkReal x10119=(gconst2*sj3);
IkReal x10120=((1.0)*sj0);
IkReal x10121=(cj1*sj2);
IkReal x10122=((1.0)*x10112);
IkReal x10123=((1.0)*x10111);
IkReal x10124=((1.0)*cj1*cj2);
IkReal x10125=(cj3*x10111);
IkReal x10126=((1.0)*cj2*sj1);
IkReal x10127=(x10112*x10119);
evalcond[0]=(((gconst1*r21*x10111))+(((-1.0)*gconst2*r20*x10123))+(((-1.0)*r22*x10122)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10123))+(((-1.0)*r12*x10122))+((x10111*x10115)));
evalcond[2]=((((-1.0)*gconst2*r00*x10123))+(((-1.0)*r02*x10122))+(((-1.0)*x10120))+((x10111*x10114)));
evalcond[3]=(((r21*x10119))+((cj2*sj1))+((r20*x10118))+x10121+(((-1.0)*r20*x10117*x10122))+((r22*x10125))+((r21*x10112*x10113)));
evalcond[4]=(((r21*x10117))+((r20*x10127))+((r20*x10113))+(((-1.0)*r22*sj3*x10123))+x10116+(((-1.0)*x10124))+(((-1.0)*r21*x10118*x10122)));
evalcond[5]=(((r01*x10119))+((cj0*x10116))+(((-1.0)*r00*x10117*x10122))+((r00*x10118))+((r01*x10112*x10113))+((r02*x10125))+(((-1.0)*cj0*x10124)));
evalcond[6]=((((-1.0)*r10*x10117*x10122))+((r11*x10112*x10113))+((r11*x10119))+((sj0*x10116))+((r10*x10118))+((r12*x10125))+(((-1.0)*cj1*cj2*x10120)));
evalcond[7]=(((r01*x10117))+((r00*x10113))+(((-1.0)*cj0*x10121))+(((-1.0)*sj3*x10114*x10122))+((r00*x10127))+(((-1.0)*cj0*x10126))+(((-1.0)*r02*sj3*x10123)));
evalcond[8]=((((-1.0)*x10120*x10121))+((r10*x10127))+(((-1.0)*sj3*x10115*x10122))+(((-1.0)*cj2*sj1*x10120))+((r11*x10117))+(((-1.0)*r12*sj3*x10123))+((r10*x10113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10128=((1.0)*gconst2);
CheckValue<IkReal> x10129=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10128)))),-1);
if(!x10129.valid){
continue;
}
CheckValue<IkReal> x10130 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10128))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10129.value)))+(x10130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10131=IKsin(j4);
IkReal x10132=IKcos(j4);
IkReal x10133=(cj3*gconst1);
IkReal x10134=(gconst1*r01);
IkReal x10135=(gconst1*r11);
IkReal x10136=(sj1*sj2);
IkReal x10137=(cj3*gconst2);
IkReal x10138=(gconst1*sj3);
IkReal x10139=(gconst2*sj3);
IkReal x10140=((1.0)*sj0);
IkReal x10141=(cj1*sj2);
IkReal x10142=((1.0)*x10132);
IkReal x10143=((1.0)*x10131);
IkReal x10144=((1.0)*cj1*cj2);
IkReal x10145=(cj3*x10131);
IkReal x10146=((1.0)*cj2*sj1);
IkReal x10147=(x10132*x10139);
evalcond[0]=(((gconst1*r21*x10131))+(((-1.0)*gconst2*r20*x10143))+(((-1.0)*r22*x10142)));
evalcond[1]=(cj0+((x10131*x10135))+(((-1.0)*r12*x10142))+(((-1.0)*gconst2*r10*x10143)));
evalcond[2]=((((-1.0)*r02*x10142))+(((-1.0)*x10140))+((x10131*x10134))+(((-1.0)*gconst2*r00*x10143)));
evalcond[3]=(((cj2*sj1))+((r20*x10138))+((r21*x10139))+x10141+((r22*x10145))+((r21*x10132*x10133))+(((-1.0)*r20*x10137*x10142)));
evalcond[4]=(((r20*x10133))+((r21*x10137))+(((-1.0)*r21*x10138*x10142))+x10136+(((-1.0)*r22*sj3*x10143))+(((-1.0)*x10144))+((r20*x10147)));
evalcond[5]=(((r02*x10145))+((cj0*x10136))+((r01*x10139))+(((-1.0)*r00*x10137*x10142))+((r00*x10138))+((r01*x10132*x10133))+(((-1.0)*cj0*x10144)));
evalcond[6]=(((r11*x10132*x10133))+((r11*x10139))+((r12*x10145))+(((-1.0)*cj1*cj2*x10140))+((r10*x10138))+(((-1.0)*r10*x10137*x10142))+((sj0*x10136)));
evalcond[7]=((((-1.0)*r02*sj3*x10143))+(((-1.0)*sj3*x10134*x10142))+(((-1.0)*cj0*x10141))+((r01*x10137))+((r00*x10133))+((r00*x10147))+(((-1.0)*cj0*x10146)));
evalcond[8]=(((r11*x10137))+((r10*x10133))+((r10*x10147))+(((-1.0)*sj3*x10135*x10142))+(((-1.0)*cj2*sj1*x10140))+(((-1.0)*r12*sj3*x10143))+(((-1.0)*x10140*x10141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10148=((-1.0)*r21);
IkReal x10150 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10150)==0){
continue;
}
IkReal x10149=pow(x10150,-0.5);
CheckValue<IkReal> x10151 = IKatan2WithCheck(IkReal(x10148),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10151.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10151.value))));
IkReal gconst4=(x10148*x10149);
IkReal gconst5=((1.0)*r20*x10149);
CheckValue<IkReal> x10152 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10152.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10152.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10153=((-1.0)*r21);
CheckValue<IkReal> x10156 = IKatan2WithCheck(IkReal(x10153),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10156.valid){
continue;
}
IkReal x10154=((1.0)*(x10156.value));
IkReal x10155=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10154)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10154)));
IkReal gconst4=(x10153*x10155);
IkReal gconst5=((1.0)*r20*x10155);
IkReal x10157=r22*r22;
IkReal x10158=((1.0)*x10157);
CheckValue<IkReal> x10162=IKPowWithIntegerCheck(((-1.0)+x10157),-1);
if(!x10162.valid){
continue;
}
IkReal x10159=x10162.value;
if((((1.0)+(((-1.0)*x10158)))) < -0.00001)
continue;
IkReal x10160=IKsqrt(((1.0)+(((-1.0)*x10158))));
IkReal x10161=(cj0*x10159*x10160);
j4eval[0]=((IKabs(((((-1.0)*x10158*x10161))+x10161)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10163=((-1.0)*r21);
CheckValue<IkReal> x10166 = IKatan2WithCheck(IkReal(x10163),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10166.valid){
continue;
}
IkReal x10164=((1.0)*(x10166.value));
IkReal x10165=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10164)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10164)));
IkReal gconst4=(x10163*x10165);
IkReal gconst5=((1.0)*r20*x10165);
IkReal x10167=r22*r22;
IkReal x10168=((1.0)*x10167);
CheckValue<IkReal> x10172=IKPowWithIntegerCheck(((-1.0)+x10167),-1);
if(!x10172.valid){
continue;
}
IkReal x10169=x10172.value;
if((((1.0)+(((-1.0)*x10168)))) < -0.00001)
continue;
IkReal x10170=IKsqrt(((1.0)+(((-1.0)*x10168))));
IkReal x10171=(sj0*x10169*x10170);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10171+(((-1.0)*x10168*x10171))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10173=((-1.0)*r21);
CheckValue<IkReal> x10176 = IKatan2WithCheck(IkReal(x10173),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10176.valid){
continue;
}
IkReal x10174=((1.0)*(x10176.value));
IkReal x10175=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10174)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10174)));
IkReal gconst4=(x10173*x10175);
IkReal gconst5=((1.0)*r20*x10175);
IkReal x10177=r22*r22;
IkReal x10178=(r12*sj0);
IkReal x10179=(cj0*r02);
CheckValue<IkReal> x10183=IKPowWithIntegerCheck(((-1.0)+x10177),-1);
if(!x10183.valid){
continue;
}
IkReal x10180=x10183.value;
if((((1.0)+(((-1.0)*x10177)))) < -0.00001)
continue;
IkReal x10181=IKsqrt(((1.0)+(((-1.0)*x10177))));
IkReal x10182=(r22*x10180*x10181);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10178*x10182))+((x10179*x10182)))))+(IKabs(((((-1.0)*x10178))+(((-1.0)*x10179))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10184=((-1.0)*r21);
CheckValue<IkReal> x10187 = IKatan2WithCheck(IkReal(x10184),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10187.valid){
continue;
}
IkReal x10185=((1.0)*(x10187.value));
IkReal x10186=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10185)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10185)));
IkReal gconst4=(x10184*x10186);
IkReal gconst5=((1.0)*r20*x10186);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10188=((-1.0)*r21);
CheckValue<IkReal> x10191 = IKatan2WithCheck(IkReal(x10188),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10191.valid){
continue;
}
IkReal x10189=((1.0)*(x10191.value));
IkReal x10190=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10189)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10189)));
IkReal gconst4=(x10188*x10190);
IkReal gconst5=((1.0)*r20*x10190);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10192=((-1.0)*r21);
CheckValue<IkReal> x10195 = IKatan2WithCheck(IkReal(x10192),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10195.valid){
continue;
}
IkReal x10193=((1.0)*(x10195.value));
IkReal x10194=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10193)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10193)));
IkReal gconst4=(x10192*x10194);
IkReal gconst5=((1.0)*r20*x10194);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10196=((-1.0)*r21);
CheckValue<IkReal> x10199 = IKatan2WithCheck(IkReal(x10196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10199.valid){
continue;
}
IkReal x10197=((1.0)*(x10199.value));
IkReal x10198=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10197)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10197)));
IkReal gconst4=(x10196*x10198);
IkReal gconst5=((1.0)*r20*x10198);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10200=((-1.0)*r21);
CheckValue<IkReal> x10203 = IKatan2WithCheck(IkReal(x10200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10203.valid){
continue;
}
IkReal x10201=((1.0)*(x10203.value));
IkReal x10202=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10201)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10201)));
IkReal gconst4=(x10200*x10202);
IkReal gconst5=((1.0)*r20*x10202);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10204=((-1.0)*r21);
CheckValue<IkReal> x10207 = IKatan2WithCheck(IkReal(x10204),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10207.valid){
continue;
}
IkReal x10205=((1.0)*(x10207.value));
IkReal x10206=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10205)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10205)));
IkReal gconst4=(x10204*x10206);
IkReal gconst5=((1.0)*r20*x10206);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10208=(gconst5*r10);
IkReal x10209=(gconst4*r11);
CheckValue<IkReal> x10210=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10208*x10208)+(((-2.0)*x10208*x10209))+(x10209*x10209))),-1);
if(!x10210.valid){
continue;
}
CheckValue<IkReal> x10211 = IKatan2WithCheck(IkReal(((((-1.0)*x10209))+x10208)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10210.value)))+(x10211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10212=IKsin(j4);
IkReal x10213=IKcos(j4);
IkReal x10214=(gconst4*r11);
IkReal x10215=((1.0)*cj1);
IkReal x10216=(gconst5*r10);
IkReal x10217=(gconst4*r01);
IkReal x10218=(gconst5*r00);
IkReal x10219=(gconst4*r21);
IkReal x10220=(gconst5*r20);
IkReal x10221=((1.0)*x10213);
IkReal x10222=((1.0)*x10212);
evalcond[0]=((((-1.0)*x10220*x10222))+(((-1.0)*r22*x10221))+((x10212*x10219)));
evalcond[1]=((((-1.0)*r02*x10221))+(((-1.0)*x10218*x10222))+((x10212*x10217)));
evalcond[2]=((((-1.0)*x10214*x10221))+((x10213*x10216))+(((-1.0)*r12*x10222)));
evalcond[3]=((1.0)+(((-1.0)*x10216*x10222))+(((-1.0)*r12*x10221))+((x10212*x10214)));
evalcond[4]=(((x10213*x10220))+((sj1*sj2))+(((-1.0)*cj2*x10215))+(((-1.0)*x10219*x10221))+(((-1.0)*r22*x10222)));
evalcond[5]=((((-1.0)*r02*x10222))+(((-1.0)*sj2*x10215))+(((-1.0)*x10217*x10221))+(((-1.0)*cj2*sj1))+((x10213*x10218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10223=((1.0)*gconst5);
CheckValue<IkReal> x10224 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10223))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10224.valid){
continue;
}
CheckValue<IkReal> x10225=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10223)))),-1);
if(!x10225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10224.value)+(((1.5707963267949)*(x10225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10226=IKsin(j4);
IkReal x10227=IKcos(j4);
IkReal x10228=(gconst4*r11);
IkReal x10229=((1.0)*cj1);
IkReal x10230=(gconst5*r10);
IkReal x10231=(gconst4*r01);
IkReal x10232=(gconst5*r00);
IkReal x10233=(gconst4*r21);
IkReal x10234=(gconst5*r20);
IkReal x10235=((1.0)*x10227);
IkReal x10236=((1.0)*x10226);
evalcond[0]=((((-1.0)*x10234*x10236))+((x10226*x10233))+(((-1.0)*r22*x10235)));
evalcond[1]=((((-1.0)*x10232*x10236))+((x10226*x10231))+(((-1.0)*r02*x10235)));
evalcond[2]=(((x10227*x10230))+(((-1.0)*r12*x10236))+(((-1.0)*x10228*x10235)));
evalcond[3]=((1.0)+(((-1.0)*x10230*x10236))+(((-1.0)*r12*x10235))+((x10226*x10228)));
evalcond[4]=((((-1.0)*x10233*x10235))+(((-1.0)*cj2*x10229))+((sj1*sj2))+(((-1.0)*r22*x10236))+((x10227*x10234)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10229))+((x10227*x10232))+(((-1.0)*x10231*x10235))+(((-1.0)*r02*x10236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10237 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10237.valid){
continue;
}
CheckValue<IkReal> x10238=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10237.value)+(((1.5707963267949)*(x10238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10239=IKsin(j4);
IkReal x10240=IKcos(j4);
IkReal x10241=(gconst4*r11);
IkReal x10242=((1.0)*cj1);
IkReal x10243=(gconst5*r10);
IkReal x10244=(gconst4*r01);
IkReal x10245=(gconst5*r00);
IkReal x10246=(gconst4*r21);
IkReal x10247=(gconst5*r20);
IkReal x10248=((1.0)*x10240);
IkReal x10249=((1.0)*x10239);
evalcond[0]=(((x10239*x10246))+(((-1.0)*x10247*x10249))+(((-1.0)*r22*x10248)));
evalcond[1]=(((x10239*x10244))+(((-1.0)*x10245*x10249))+(((-1.0)*r02*x10248)));
evalcond[2]=((((-1.0)*x10241*x10248))+((x10240*x10243))+(((-1.0)*r12*x10249)));
evalcond[3]=((1.0)+((x10239*x10241))+(((-1.0)*r12*x10248))+(((-1.0)*x10243*x10249)));
evalcond[4]=(((x10240*x10247))+(((-1.0)*cj2*x10242))+((sj1*sj2))+(((-1.0)*x10246*x10248))+(((-1.0)*r22*x10249)));
evalcond[5]=(((x10240*x10245))+(((-1.0)*cj2*sj1))+(((-1.0)*x10244*x10248))+(((-1.0)*sj2*x10242))+(((-1.0)*r02*x10249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10250=((-1.0)*r21);
CheckValue<IkReal> x10253 = IKatan2WithCheck(IkReal(x10250),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10253.valid){
continue;
}
IkReal x10251=((1.0)*(x10253.value));
IkReal x10252=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10251)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10251)));
IkReal gconst4=(x10250*x10252);
IkReal gconst5=((1.0)*r20*x10252);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10254=((-1.0)*r21);
CheckValue<IkReal> x10257 = IKatan2WithCheck(IkReal(x10254),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10257.valid){
continue;
}
IkReal x10255=((1.0)*(x10257.value));
IkReal x10256=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10255)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10255)));
IkReal gconst4=(x10254*x10256);
IkReal gconst5=((1.0)*r20*x10256);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10258=((-1.0)*r21);
CheckValue<IkReal> x10261 = IKatan2WithCheck(IkReal(x10258),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10261.valid){
continue;
}
IkReal x10259=((1.0)*(x10261.value));
IkReal x10260=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10259)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10259)));
IkReal gconst4=(x10258*x10260);
IkReal gconst5=((1.0)*r20*x10260);
IkReal x10262=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10266=IKPowWithIntegerCheck(x10262,-1);
if(!x10266.valid){
continue;
}
IkReal x10263=x10266.value;
IkReal x10264=((1.0)*x10263);
IkReal x10265=((((-1.0)*x10264*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10263))+(((-1.0)*x10264*(r10*r10)*(r20*r20))));
j4eval[0]=x10265;
j4eval[1]=r12;
j4eval[2]=x10262;
j4eval[3]=IKsign(x10265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10267=(gconst5*r10);
IkReal x10268=(gconst4*r11);
CheckValue<IkReal> x10269=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10268*x10268)))+(((2.0)*x10267*x10268))+(((-1.0)*(x10267*x10267)))+(((-1.0)*(r12*r12))))),-1);
if(!x10269.valid){
continue;
}
CheckValue<IkReal> x10270 = IKatan2WithCheck(IkReal(((((-1.0)*x10267))+x10268)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10269.value)))+(x10270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10271=IKcos(j4);
IkReal x10272=IKsin(j4);
IkReal x10273=(gconst4*r11);
IkReal x10274=(gconst5*r10);
IkReal x10275=((1.0)*cj1);
IkReal x10276=(gconst5*r00);
IkReal x10277=(gconst5*r20);
IkReal x10278=((1.0)*x10271);
IkReal x10279=(gconst4*x10271);
IkReal x10280=((1.0)*x10272);
IkReal x10281=(gconst4*x10272);
evalcond[0]=((((-1.0)*x10274*x10278))+((r12*x10272))+((x10271*x10273)));
evalcond[1]=((((-1.0)*r22*x10278))+(((-1.0)*x10277*x10280))+((r21*x10281)));
evalcond[2]=(((r01*x10281))+(((-1.0)*x10276*x10280))+(((-1.0)*r02*x10278)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10278))+(((-1.0)*x10274*x10280))+((x10272*x10273)));
evalcond[4]=(((sj1*sj2))+((r21*x10279))+(((-1.0)*cj2*x10275))+(((-1.0)*x10277*x10278))+((r22*x10272)));
evalcond[5]=(((r01*x10279))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10275))+(((-1.0)*x10276*x10278))+((r02*x10272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10282=((1.0)*gconst5);
CheckValue<IkReal> x10283 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10283.valid){
continue;
}
CheckValue<IkReal> x10284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10282)))),-1);
if(!x10284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10283.value)+(((1.5707963267949)*(x10284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10285=IKcos(j4);
IkReal x10286=IKsin(j4);
IkReal x10287=(gconst4*r11);
IkReal x10288=(gconst5*r10);
IkReal x10289=((1.0)*cj1);
IkReal x10290=(gconst5*r00);
IkReal x10291=(gconst5*r20);
IkReal x10292=((1.0)*x10285);
IkReal x10293=(gconst4*x10285);
IkReal x10294=((1.0)*x10286);
IkReal x10295=(gconst4*x10286);
evalcond[0]=(((r12*x10286))+(((-1.0)*x10288*x10292))+((x10285*x10287)));
evalcond[1]=((((-1.0)*x10291*x10294))+((r21*x10295))+(((-1.0)*r22*x10292)));
evalcond[2]=((((-1.0)*r02*x10292))+(((-1.0)*x10290*x10294))+((r01*x10295)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10292))+(((-1.0)*x10288*x10294))+((x10286*x10287)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10291*x10292))+((r22*x10286))+((r21*x10293))+(((-1.0)*cj2*x10289)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10290*x10292))+((r02*x10286))+((r01*x10293))+(((-1.0)*sj2*x10289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10296 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10296.valid){
continue;
}
CheckValue<IkReal> x10297=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10296.value)+(((1.5707963267949)*(x10297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10298=IKcos(j4);
IkReal x10299=IKsin(j4);
IkReal x10300=(gconst4*r11);
IkReal x10301=(gconst5*r10);
IkReal x10302=((1.0)*cj1);
IkReal x10303=(gconst5*r00);
IkReal x10304=(gconst5*r20);
IkReal x10305=((1.0)*x10298);
IkReal x10306=(gconst4*x10298);
IkReal x10307=((1.0)*x10299);
IkReal x10308=(gconst4*x10299);
evalcond[0]=((((-1.0)*x10301*x10305))+((r12*x10299))+((x10298*x10300)));
evalcond[1]=((((-1.0)*r22*x10305))+(((-1.0)*x10304*x10307))+((r21*x10308)));
evalcond[2]=((((-1.0)*r02*x10305))+((r01*x10308))+(((-1.0)*x10303*x10307)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10305))+(((-1.0)*x10301*x10307))+((x10299*x10300)));
evalcond[4]=((((-1.0)*cj2*x10302))+((sj1*sj2))+(((-1.0)*x10304*x10305))+((r21*x10306))+((r22*x10299)));
evalcond[5]=((((-1.0)*sj2*x10302))+(((-1.0)*cj2*sj1))+((r01*x10306))+((r02*x10299))+(((-1.0)*x10303*x10305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10309=((-1.0)*r21);
CheckValue<IkReal> x10312 = IKatan2WithCheck(IkReal(x10309),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10312.valid){
continue;
}
IkReal x10310=((1.0)*(x10312.value));
IkReal x10311=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10310)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10310)));
IkReal gconst4=(x10309*x10311);
IkReal gconst5=((1.0)*r20*x10311);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10313=((-1.0)*r21);
CheckValue<IkReal> x10316 = IKatan2WithCheck(IkReal(x10313),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10316.valid){
continue;
}
IkReal x10314=((1.0)*(x10316.value));
IkReal x10315=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10314)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10314)));
IkReal gconst4=(x10313*x10315);
IkReal gconst5=((1.0)*r20*x10315);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10317=((-1.0)*r21);
CheckValue<IkReal> x10320 = IKatan2WithCheck(IkReal(x10317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10320.valid){
continue;
}
IkReal x10318=((1.0)*(x10320.value));
IkReal x10319=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10318)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10318)));
IkReal gconst4=(x10317*x10319);
IkReal gconst5=((1.0)*r20*x10319);
IkReal x10321=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10325=IKPowWithIntegerCheck(x10321,-1);
if(!x10325.valid){
continue;
}
IkReal x10322=x10325.value;
IkReal x10323=((1.0)*x10322);
IkReal x10324=((((-1.0)*(r12*r12)))+(((-1.0)*x10323*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10322))+(((-1.0)*x10323*(r10*r10)*(r20*r20))));
j4eval[0]=x10324;
j4eval[1]=r12;
j4eval[2]=x10321;
j4eval[3]=IKsign(x10324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10326=(gconst5*r10);
IkReal x10327=(gconst4*r11);
CheckValue<IkReal> x10328=IKPowWithIntegerCheck(IKsign(((((2.0)*x10326*x10327))+(((-1.0)*(x10326*x10326)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10327*x10327))))),-1);
if(!x10328.valid){
continue;
}
CheckValue<IkReal> x10329 = IKatan2WithCheck(IkReal(((((-1.0)*x10326))+x10327)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10328.value)))+(x10329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10330=IKcos(j4);
IkReal x10331=IKsin(j4);
IkReal x10332=(gconst4*r11);
IkReal x10333=(gconst5*r10);
IkReal x10334=(gconst5*r00);
IkReal x10335=(gconst5*r20);
IkReal x10336=((1.0)*x10330);
IkReal x10337=(gconst4*x10330);
IkReal x10338=((1.0)*x10331);
IkReal x10339=(gconst4*x10331);
evalcond[0]=((((-1.0)*x10333*x10336))+((r12*x10331))+((x10330*x10332)));
evalcond[1]=((((-1.0)*r22*x10336))+((r21*x10339))+(((-1.0)*x10335*x10338)));
evalcond[2]=((((-1.0)*x10334*x10338))+((r01*x10339))+(((-1.0)*r02*x10336)));
evalcond[3]=((1.0)+(((-1.0)*x10333*x10338))+(((-1.0)*r12*x10336))+((x10331*x10332)));
evalcond[4]=(((cj2*sj1))+((r22*x10331))+((cj1*sj2))+((r21*x10337))+(((-1.0)*x10335*x10336)));
evalcond[5]=(((r02*x10331))+(((-1.0)*x10334*x10336))+((r01*x10337))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10340=((1.0)*gconst5);
CheckValue<IkReal> x10341 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10341.valid){
continue;
}
CheckValue<IkReal> x10342=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10340)))),-1);
if(!x10342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10341.value)+(((1.5707963267949)*(x10342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10343=IKcos(j4);
IkReal x10344=IKsin(j4);
IkReal x10345=(gconst4*r11);
IkReal x10346=(gconst5*r10);
IkReal x10347=(gconst5*r00);
IkReal x10348=(gconst5*r20);
IkReal x10349=((1.0)*x10343);
IkReal x10350=(gconst4*x10343);
IkReal x10351=((1.0)*x10344);
IkReal x10352=(gconst4*x10344);
evalcond[0]=(((x10343*x10345))+((r12*x10344))+(((-1.0)*x10346*x10349)));
evalcond[1]=(((r21*x10352))+(((-1.0)*x10348*x10351))+(((-1.0)*r22*x10349)));
evalcond[2]=(((r01*x10352))+(((-1.0)*r02*x10349))+(((-1.0)*x10347*x10351)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10349))+((x10344*x10345))+(((-1.0)*x10346*x10351)));
evalcond[4]=(((r21*x10350))+((cj2*sj1))+((cj1*sj2))+((r22*x10344))+(((-1.0)*x10348*x10349)));
evalcond[5]=(((r01*x10350))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10347*x10349))+((r02*x10344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10353 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10353.valid){
continue;
}
CheckValue<IkReal> x10354=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10353.value)+(((1.5707963267949)*(x10354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10355=IKcos(j4);
IkReal x10356=IKsin(j4);
IkReal x10357=(gconst4*r11);
IkReal x10358=(gconst5*r10);
IkReal x10359=(gconst5*r00);
IkReal x10360=(gconst5*r20);
IkReal x10361=((1.0)*x10355);
IkReal x10362=(gconst4*x10355);
IkReal x10363=((1.0)*x10356);
IkReal x10364=(gconst4*x10356);
evalcond[0]=(((x10355*x10357))+(((-1.0)*x10358*x10361))+((r12*x10356)));
evalcond[1]=(((r21*x10364))+(((-1.0)*x10360*x10363))+(((-1.0)*r22*x10361)));
evalcond[2]=((((-1.0)*x10359*x10363))+((r01*x10364))+(((-1.0)*r02*x10361)));
evalcond[3]=((1.0)+(((-1.0)*x10358*x10363))+(((-1.0)*r12*x10361))+((x10356*x10357)));
evalcond[4]=(((cj2*sj1))+((r21*x10362))+(((-1.0)*x10360*x10361))+((cj1*sj2))+((r22*x10356)));
evalcond[5]=((((-1.0)*x10359*x10361))+((r01*x10362))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10365=((-1.0)*r21);
CheckValue<IkReal> x10368 = IKatan2WithCheck(IkReal(x10365),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10368.valid){
continue;
}
IkReal x10366=((1.0)*(x10368.value));
IkReal x10367=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10366)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10366)));
IkReal gconst4=(x10365*x10367);
IkReal gconst5=((1.0)*r20*x10367);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10369=((-1.0)*r21);
CheckValue<IkReal> x10372 = IKatan2WithCheck(IkReal(x10369),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10372.valid){
continue;
}
IkReal x10370=((1.0)*(x10372.value));
IkReal x10371=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10370)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10370)));
IkReal gconst4=(x10369*x10371);
IkReal gconst5=((1.0)*r20*x10371);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10373=((-1.0)*r21);
CheckValue<IkReal> x10376 = IKatan2WithCheck(IkReal(x10373),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10376.valid){
continue;
}
IkReal x10374=((1.0)*(x10376.value));
IkReal x10375=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10374)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10374)));
IkReal gconst4=(x10373*x10375);
IkReal gconst5=((1.0)*r20*x10375);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10377=(gconst5*r10);
IkReal x10378=(gconst4*r11);
CheckValue<IkReal> x10379 = IKatan2WithCheck(IkReal((x10377+(((-1.0)*x10378)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10379.valid){
continue;
}
CheckValue<IkReal> x10380=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10378*x10378)+(x10377*x10377)+(((-2.0)*x10377*x10378)))),-1);
if(!x10380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10379.value)+(((1.5707963267949)*(x10380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10381=IKsin(j4);
IkReal x10382=IKcos(j4);
IkReal x10383=(gconst4*r11);
IkReal x10384=(gconst5*r10);
IkReal x10385=(gconst4*r01);
IkReal x10386=(gconst5*r00);
IkReal x10387=(gconst4*r21);
IkReal x10388=(gconst5*r20);
IkReal x10389=((1.0)*x10382);
IkReal x10390=((1.0)*x10381);
evalcond[0]=(((x10381*x10387))+(((-1.0)*x10388*x10390))+(((-1.0)*r22*x10389)));
evalcond[1]=(((x10381*x10385))+(((-1.0)*x10386*x10390))+(((-1.0)*r02*x10389)));
evalcond[2]=((((-1.0)*r12*x10390))+((x10382*x10384))+(((-1.0)*x10383*x10389)));
evalcond[3]=((1.0)+(((-1.0)*x10384*x10390))+((x10381*x10383))+(((-1.0)*r12*x10389)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10387*x10389))+((cj1*sj2))+(((-1.0)*r22*x10390))+((x10382*x10388)));
evalcond[5]=((((-1.0)*x10385*x10389))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10390))+((x10382*x10386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10391=((1.0)*gconst5);
CheckValue<IkReal> x10392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10391)))),-1);
if(!x10392.valid){
continue;
}
CheckValue<IkReal> x10393 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10391))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10392.value)))+(x10393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10394=IKsin(j4);
IkReal x10395=IKcos(j4);
IkReal x10396=(gconst4*r11);
IkReal x10397=(gconst5*r10);
IkReal x10398=(gconst4*r01);
IkReal x10399=(gconst5*r00);
IkReal x10400=(gconst4*r21);
IkReal x10401=(gconst5*r20);
IkReal x10402=((1.0)*x10395);
IkReal x10403=((1.0)*x10394);
evalcond[0]=((((-1.0)*x10401*x10403))+(((-1.0)*r22*x10402))+((x10394*x10400)));
evalcond[1]=(((x10394*x10398))+(((-1.0)*x10399*x10403))+(((-1.0)*r02*x10402)));
evalcond[2]=(((x10395*x10397))+(((-1.0)*x10396*x10402))+(((-1.0)*r12*x10403)));
evalcond[3]=((1.0)+(((-1.0)*x10397*x10403))+((x10394*x10396))+(((-1.0)*r12*x10402)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10403))+((x10395*x10401))+(((-1.0)*x10400*x10402)));
evalcond[5]=(((x10395*x10399))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10398*x10402))+(((-1.0)*r02*x10403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10404 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10404.valid){
continue;
}
CheckValue<IkReal> x10405=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10404.value)+(((1.5707963267949)*(x10405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10406=IKsin(j4);
IkReal x10407=IKcos(j4);
IkReal x10408=(gconst4*r11);
IkReal x10409=(gconst5*r10);
IkReal x10410=(gconst4*r01);
IkReal x10411=(gconst5*r00);
IkReal x10412=(gconst4*r21);
IkReal x10413=(gconst5*r20);
IkReal x10414=((1.0)*x10407);
IkReal x10415=((1.0)*x10406);
evalcond[0]=((((-1.0)*x10413*x10415))+((x10406*x10412))+(((-1.0)*r22*x10414)));
evalcond[1]=((((-1.0)*r02*x10414))+((x10406*x10410))+(((-1.0)*x10411*x10415)));
evalcond[2]=(((x10407*x10409))+(((-1.0)*r12*x10415))+(((-1.0)*x10408*x10414)));
evalcond[3]=((1.0)+(((-1.0)*x10409*x10415))+((x10406*x10408))+(((-1.0)*r12*x10414)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10412*x10414))+((x10407*x10413))+((cj1*sj2))+(((-1.0)*r22*x10415)));
evalcond[5]=((((-1.0)*r02*x10415))+((x10407*x10411))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10410*x10414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10416=gconst4*gconst4;
IkReal x10417=gconst5*gconst5;
IkReal x10418=(r10*r21);
IkReal x10419=((1.0)*cj3);
IkReal x10420=(r11*r21);
IkReal x10421=(r11*r20);
IkReal x10422=(r22*sj3);
IkReal x10423=(gconst4*r10);
IkReal x10424=((1.0)*sj3);
IkReal x10425=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10426 = IKatan2WithCheck(IkReal((((x10422*x10423))+((gconst5*r11*x10422)))),IkReal(((((-1.0)*x10417*x10421*x10424))+(((-1.0)*gconst5*r20*x10423*x10424))+((gconst4*gconst5*sj3*x10420))+((sj3*x10416*x10418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10426.valid){
continue;
}
CheckValue<IkReal> x10427=IKPowWithIntegerCheck(IKsign((((x10421*x10425))+(((-1.0)*r12*r22*x10419))+(((-1.0)*r10*r20*x10417*x10419))+(((-1.0)*x10416*x10419*x10420))+((x10418*x10425)))),-1);
if(!x10427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10426.value)+(((1.5707963267949)*(x10427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10428=IKsin(j4);
IkReal x10429=IKcos(j4);
IkReal x10430=(sj1*sj2);
IkReal x10431=(gconst5*sj3);
IkReal x10432=(cj3*gconst5);
IkReal x10433=(gconst4*r11);
IkReal x10434=((1.0)*cj1);
IkReal x10435=(gconst4*r01);
IkReal x10436=(cj2*sj1);
IkReal x10437=(gconst4*r21);
IkReal x10438=(gconst4*sj3);
IkReal x10439=(cj3*gconst4);
IkReal x10440=(cj2*x10434);
IkReal x10441=((1.0)*x10429);
IkReal x10442=((1.0)*x10428);
IkReal x10443=(cj3*x10428);
IkReal x10444=(cj3*x10429);
evalcond[0]=((((-1.0)*gconst5*r20*x10442))+((x10428*x10437))+(((-1.0)*r22*x10441)));
evalcond[1]=((((-1.0)*r02*x10441))+((x10428*x10435))+(((-1.0)*gconst5*r00*x10442)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10441))+((x10428*x10433))+(((-1.0)*gconst5*r10*x10442)));
evalcond[3]=(((r12*x10443))+((x10433*x10444))+((r10*x10438))+((r11*x10431))+(((-1.0)*r10*x10432*x10441)));
evalcond[4]=((((-1.0)*r12*sj3*x10442))+(((-1.0)*sj3*x10433*x10441))+((r10*x10439))+((r11*x10432))+((r10*x10429*x10431)));
evalcond[5]=(((r22*x10443))+((cj1*sj2))+((x10437*x10444))+(((-1.0)*r20*x10432*x10441))+x10436+((r20*x10438))+((r21*x10431)));
evalcond[6]=((((-1.0)*r00*x10432*x10441))+((r01*x10431))+(((-1.0)*x10440))+((r02*x10443))+x10430+((x10435*x10444))+((r00*x10438)));
evalcond[7]=((((-1.0)*sj3*x10437*x10441))+(((-1.0)*r22*sj3*x10442))+(((-1.0)*x10440))+x10430+((r20*x10429*x10431))+((r20*x10439))+((r21*x10432)));
evalcond[8]=(((r01*x10432))+(((-1.0)*sj3*x10435*x10441))+(((-1.0)*r02*sj3*x10442))+((r00*x10429*x10431))+(((-1.0)*sj2*x10434))+(((-1.0)*x10436))+((r00*x10439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10445=((1.0)*gconst5);
CheckValue<IkReal> x10446=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10445)))),-1);
if(!x10446.valid){
continue;
}
CheckValue<IkReal> x10447 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10445))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10446.value)))+(x10447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10448=IKsin(j4);
IkReal x10449=IKcos(j4);
IkReal x10450=(sj1*sj2);
IkReal x10451=(gconst5*sj3);
IkReal x10452=(cj3*gconst5);
IkReal x10453=(gconst4*r11);
IkReal x10454=((1.0)*cj1);
IkReal x10455=(gconst4*r01);
IkReal x10456=(cj2*sj1);
IkReal x10457=(gconst4*r21);
IkReal x10458=(gconst4*sj3);
IkReal x10459=(cj3*gconst4);
IkReal x10460=(cj2*x10454);
IkReal x10461=((1.0)*x10449);
IkReal x10462=((1.0)*x10448);
IkReal x10463=(cj3*x10448);
IkReal x10464=(cj3*x10449);
evalcond[0]=((((-1.0)*gconst5*r20*x10462))+(((-1.0)*r22*x10461))+((x10448*x10457)));
evalcond[1]=((((-1.0)*r02*x10461))+(((-1.0)*gconst5*r00*x10462))+((x10448*x10455)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10462))+((x10448*x10453))+(((-1.0)*r12*x10461)));
evalcond[3]=(((r10*x10458))+(((-1.0)*r10*x10452*x10461))+((r12*x10463))+((r11*x10451))+((x10453*x10464)));
evalcond[4]=(((r10*x10459))+((r10*x10449*x10451))+((r11*x10452))+(((-1.0)*r12*sj3*x10462))+(((-1.0)*sj3*x10453*x10461)));
evalcond[5]=(((cj1*sj2))+((r22*x10463))+((x10457*x10464))+x10456+((r21*x10451))+(((-1.0)*r20*x10452*x10461))+((r20*x10458)));
evalcond[6]=(((x10455*x10464))+((r00*x10458))+((r01*x10451))+x10450+((r02*x10463))+(((-1.0)*r00*x10452*x10461))+(((-1.0)*x10460)));
evalcond[7]=((((-1.0)*sj3*x10457*x10461))+(((-1.0)*r22*sj3*x10462))+x10450+((r21*x10452))+((r20*x10449*x10451))+((r20*x10459))+(((-1.0)*x10460)));
evalcond[8]=((((-1.0)*x10456))+((r00*x10449*x10451))+(((-1.0)*sj3*x10455*x10461))+((r00*x10459))+((r01*x10452))+(((-1.0)*r02*sj3*x10462))+(((-1.0)*sj2*x10454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10465 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10465.valid){
continue;
}
CheckValue<IkReal> x10466=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10465.value)+(((1.5707963267949)*(x10466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10467=IKsin(j4);
IkReal x10468=IKcos(j4);
IkReal x10469=(sj1*sj2);
IkReal x10470=(gconst5*sj3);
IkReal x10471=(cj3*gconst5);
IkReal x10472=(gconst4*r11);
IkReal x10473=((1.0)*cj1);
IkReal x10474=(gconst4*r01);
IkReal x10475=(cj2*sj1);
IkReal x10476=(gconst4*r21);
IkReal x10477=(gconst4*sj3);
IkReal x10478=(cj3*gconst4);
IkReal x10479=(cj2*x10473);
IkReal x10480=((1.0)*x10468);
IkReal x10481=((1.0)*x10467);
IkReal x10482=(cj3*x10467);
IkReal x10483=(cj3*x10468);
evalcond[0]=((((-1.0)*r22*x10480))+((x10467*x10476))+(((-1.0)*gconst5*r20*x10481)));
evalcond[1]=(((x10467*x10474))+(((-1.0)*r02*x10480))+(((-1.0)*gconst5*r00*x10481)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10481))+(((-1.0)*r12*x10480))+((x10467*x10472)));
evalcond[3]=(((r12*x10482))+(((-1.0)*r10*x10471*x10480))+((x10472*x10483))+((r11*x10470))+((r10*x10477)));
evalcond[4]=((((-1.0)*sj3*x10472*x10480))+((r10*x10468*x10470))+((r11*x10471))+(((-1.0)*r12*sj3*x10481))+((r10*x10478)));
evalcond[5]=(((r20*x10477))+((cj1*sj2))+((r22*x10482))+(((-1.0)*r20*x10471*x10480))+((r21*x10470))+x10475+((x10476*x10483)));
evalcond[6]=(((x10474*x10483))+(((-1.0)*r00*x10471*x10480))+((r01*x10470))+((r00*x10477))+((r02*x10482))+x10469+(((-1.0)*x10479)));
evalcond[7]=((((-1.0)*sj3*x10476*x10480))+((r20*x10478))+(((-1.0)*r22*sj3*x10481))+((r20*x10468*x10470))+((r21*x10471))+x10469+(((-1.0)*x10479)));
evalcond[8]=((((-1.0)*x10475))+((r01*x10471))+(((-1.0)*sj3*x10474*x10480))+((r00*x10478))+((r00*x10468*x10470))+(((-1.0)*sj2*x10473))+(((-1.0)*r02*sj3*x10481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10484=((-1.0)*r21);
CheckValue<IkReal> x10487 = IKatan2WithCheck(IkReal(x10484),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10487.valid){
continue;
}
IkReal x10485=((1.0)*(x10487.value));
IkReal x10486=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10485)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10485)));
IkReal gconst4=(x10484*x10486);
IkReal gconst5=((1.0)*r20*x10486);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10488=((-1.0)*r21);
CheckValue<IkReal> x10491 = IKatan2WithCheck(IkReal(x10488),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10491.valid){
continue;
}
IkReal x10489=((1.0)*(x10491.value));
IkReal x10490=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10489)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10489)));
IkReal gconst4=(x10488*x10490);
IkReal gconst5=((1.0)*r20*x10490);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10492=((-1.0)*r21);
CheckValue<IkReal> x10495 = IKatan2WithCheck(IkReal(x10492),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10495.valid){
continue;
}
IkReal x10493=((1.0)*(x10495.value));
IkReal x10494=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10493)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10493)));
IkReal gconst4=(x10492*x10494);
IkReal gconst5=((1.0)*r20*x10494);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10496=((-1.0)*r21);
CheckValue<IkReal> x10499 = IKatan2WithCheck(IkReal(x10496),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10499.valid){
continue;
}
IkReal x10497=((1.0)*(x10499.value));
IkReal x10498=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10497)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10497)));
IkReal gconst4=(x10496*x10498);
IkReal gconst5=((1.0)*r20*x10498);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10500=((-1.0)*r21);
CheckValue<IkReal> x10503 = IKatan2WithCheck(IkReal(x10500),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10503.valid){
continue;
}
IkReal x10501=((1.0)*(x10503.value));
IkReal x10502=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10501)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10501)));
IkReal gconst4=(x10500*x10502);
IkReal gconst5=((1.0)*r20*x10502);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10504=((-1.0)*r21);
CheckValue<IkReal> x10507 = IKatan2WithCheck(IkReal(x10504),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10507.valid){
continue;
}
IkReal x10505=((1.0)*(x10507.value));
IkReal x10506=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10505)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10505)));
IkReal gconst4=(x10504*x10506);
IkReal gconst5=((1.0)*r20*x10506);
IkReal x10508=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10512=IKPowWithIntegerCheck(x10508,-1);
if(!x10512.valid){
continue;
}
IkReal x10509=x10512.value;
IkReal x10510=((1.0)*x10509);
IkReal x10511=((((-1.0)*x10510*(r11*r11)*(r21*r21)))+(((-1.0)*x10510*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10509)));
j4eval[0]=x10511;
j4eval[1]=r12;
j4eval[2]=x10508;
j4eval[3]=IKsign(x10511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10513=(gconst5*r10);
IkReal x10514=(gconst4*r11);
CheckValue<IkReal> x10515 = IKatan2WithCheck(IkReal(((((-1.0)*x10514))+x10513)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10515.valid){
continue;
}
CheckValue<IkReal> x10516=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10513*x10513)))+(((-1.0)*(r12*r12)))+(((2.0)*x10513*x10514))+(((-1.0)*(x10514*x10514))))),-1);
if(!x10516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10515.value)+(((1.5707963267949)*(x10516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10517=IKsin(j4);
IkReal x10518=IKcos(j4);
IkReal x10519=(gconst4*r11);
IkReal x10520=(gconst5*r10);
IkReal x10521=(gconst4*r01);
IkReal x10522=(gconst5*r00);
IkReal x10523=(gconst4*r21);
IkReal x10524=(gconst5*r20);
IkReal x10525=((1.0)*x10518);
IkReal x10526=((1.0)*x10517);
evalcond[0]=(((x10517*x10523))+(((-1.0)*r22*x10525))+(((-1.0)*x10524*x10526)));
evalcond[1]=(((x10517*x10521))+(((-1.0)*r02*x10525))+(((-1.0)*x10522*x10526)));
evalcond[2]=((((-1.0)*r12*x10526))+((x10518*x10520))+(((-1.0)*x10519*x10525)));
evalcond[3]=((-1.0)+(((-1.0)*x10520*x10526))+(((-1.0)*r12*x10525))+((x10517*x10519)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10521*x10525))+((cj1*sj2))+(((-1.0)*r02*x10526))+((x10518*x10522)));
evalcond[5]=((((-1.0)*r22*x10526))+(((-1.0)*x10523*x10525))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10518*x10524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10527=((1.0)*gconst5);
CheckValue<IkReal> x10528 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10528.valid){
continue;
}
CheckValue<IkReal> x10529=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10527))+(((-1.0)*gconst4*r20)))),-1);
if(!x10529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10528.value)+(((1.5707963267949)*(x10529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10530=IKsin(j4);
IkReal x10531=IKcos(j4);
IkReal x10532=(gconst4*r11);
IkReal x10533=(gconst5*r10);
IkReal x10534=(gconst4*r01);
IkReal x10535=(gconst5*r00);
IkReal x10536=(gconst4*r21);
IkReal x10537=(gconst5*r20);
IkReal x10538=((1.0)*x10531);
IkReal x10539=((1.0)*x10530);
evalcond[0]=((((-1.0)*r22*x10538))+(((-1.0)*x10537*x10539))+((x10530*x10536)));
evalcond[1]=(((x10530*x10534))+(((-1.0)*r02*x10538))+(((-1.0)*x10535*x10539)));
evalcond[2]=((((-1.0)*r12*x10539))+((x10531*x10533))+(((-1.0)*x10532*x10538)));
evalcond[3]=((-1.0)+((x10530*x10532))+(((-1.0)*r12*x10538))+(((-1.0)*x10533*x10539)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10539))+((x10531*x10535))+(((-1.0)*x10534*x10538)));
evalcond[5]=((((-1.0)*r22*x10539))+(((-1.0)*x10536*x10538))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10531*x10537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10540=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10540.valid){
continue;
}
CheckValue<IkReal> x10541 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10540.value)))+(x10541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10542=IKsin(j4);
IkReal x10543=IKcos(j4);
IkReal x10544=(gconst4*r11);
IkReal x10545=(gconst5*r10);
IkReal x10546=(gconst4*r01);
IkReal x10547=(gconst5*r00);
IkReal x10548=(gconst4*r21);
IkReal x10549=(gconst5*r20);
IkReal x10550=((1.0)*x10543);
IkReal x10551=((1.0)*x10542);
evalcond[0]=(((x10542*x10548))+(((-1.0)*r22*x10550))+(((-1.0)*x10549*x10551)));
evalcond[1]=((((-1.0)*x10547*x10551))+(((-1.0)*r02*x10550))+((x10542*x10546)));
evalcond[2]=((((-1.0)*r12*x10551))+((x10543*x10545))+(((-1.0)*x10544*x10550)));
evalcond[3]=((-1.0)+(((-1.0)*x10545*x10551))+(((-1.0)*r12*x10550))+((x10542*x10544)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10546*x10550))+((cj1*sj2))+((x10543*x10547))+(((-1.0)*r02*x10551)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10543*x10549))+(((-1.0)*x10548*x10550))+(((-1.0)*r22*x10551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10552=((-1.0)*r21);
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(x10552),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
IkReal x10553=((1.0)*(x10555.value));
IkReal x10554=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10553)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10553)));
IkReal gconst4=(x10552*x10554);
IkReal gconst5=((1.0)*r20*x10554);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10556=((-1.0)*r21);
CheckValue<IkReal> x10559 = IKatan2WithCheck(IkReal(x10556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10559.valid){
continue;
}
IkReal x10557=((1.0)*(x10559.value));
IkReal x10558=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10557)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10557)));
IkReal gconst4=(x10556*x10558);
IkReal gconst5=((1.0)*r20*x10558);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10560=((-1.0)*r21);
CheckValue<IkReal> x10563 = IKatan2WithCheck(IkReal(x10560),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10563.valid){
continue;
}
IkReal x10561=((1.0)*(x10563.value));
IkReal x10562=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10561)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10561)));
IkReal gconst4=(x10560*x10562);
IkReal gconst5=((1.0)*r20*x10562);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10564=(gconst5*r10);
IkReal x10565=(gconst4*r11);
CheckValue<IkReal> x10566 = IKatan2WithCheck(IkReal(((((-1.0)*x10564))+x10565)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10566.valid){
continue;
}
CheckValue<IkReal> x10567=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10564*x10565))+(x10565*x10565)+(x10564*x10564))),-1);
if(!x10567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10566.value)+(((1.5707963267949)*(x10567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10568=IKcos(j4);
IkReal x10569=IKsin(j4);
IkReal x10570=(gconst4*r11);
IkReal x10571=(gconst5*r10);
IkReal x10572=(gconst5*r00);
IkReal x10573=(gconst5*r20);
IkReal x10574=((1.0)*x10568);
IkReal x10575=(gconst4*x10568);
IkReal x10576=((1.0)*x10569);
IkReal x10577=(gconst4*x10569);
evalcond[0]=((((-1.0)*x10571*x10574))+((x10568*x10570))+((r12*x10569)));
evalcond[1]=((((-1.0)*r22*x10574))+((r21*x10577))+(((-1.0)*x10573*x10576)));
evalcond[2]=(((r01*x10577))+(((-1.0)*x10572*x10576))+(((-1.0)*r02*x10574)));
evalcond[3]=((-1.0)+(((-1.0)*x10571*x10576))+(((-1.0)*r12*x10574))+((x10569*x10570)));
evalcond[4]=(((cj2*sj1))+((r01*x10575))+((cj1*sj2))+((r02*x10569))+(((-1.0)*x10572*x10574)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10575))+(((-1.0)*x10573*x10574))+((r22*x10569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10578=((1.0)*gconst5);
CheckValue<IkReal> x10579=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10578)))),-1);
if(!x10579.valid){
continue;
}
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10578))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10579.value)))+(x10580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10581=IKcos(j4);
IkReal x10582=IKsin(j4);
IkReal x10583=(gconst4*r11);
IkReal x10584=(gconst5*r10);
IkReal x10585=(gconst5*r00);
IkReal x10586=(gconst5*r20);
IkReal x10587=((1.0)*x10581);
IkReal x10588=(gconst4*x10581);
IkReal x10589=((1.0)*x10582);
IkReal x10590=(gconst4*x10582);
evalcond[0]=(((r12*x10582))+((x10581*x10583))+(((-1.0)*x10584*x10587)));
evalcond[1]=(((r21*x10590))+(((-1.0)*r22*x10587))+(((-1.0)*x10586*x10589)));
evalcond[2]=(((r01*x10590))+(((-1.0)*r02*x10587))+(((-1.0)*x10585*x10589)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10587))+(((-1.0)*x10584*x10589))+((x10582*x10583)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10582))+(((-1.0)*x10585*x10587))+((r01*x10588)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10588))+((r22*x10582))+(((-1.0)*x10586*x10587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10591=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10591.valid){
continue;
}
CheckValue<IkReal> x10592 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10591.value)))+(x10592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10593=IKcos(j4);
IkReal x10594=IKsin(j4);
IkReal x10595=(gconst4*r11);
IkReal x10596=(gconst5*r10);
IkReal x10597=(gconst5*r00);
IkReal x10598=(gconst5*r20);
IkReal x10599=((1.0)*x10593);
IkReal x10600=(gconst4*x10593);
IkReal x10601=((1.0)*x10594);
IkReal x10602=(gconst4*x10594);
evalcond[0]=(((r12*x10594))+(((-1.0)*x10596*x10599))+((x10593*x10595)));
evalcond[1]=((((-1.0)*x10598*x10601))+((r21*x10602))+(((-1.0)*r22*x10599)));
evalcond[2]=(((r01*x10602))+(((-1.0)*r02*x10599))+(((-1.0)*x10597*x10601)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10599))+((x10594*x10595))+(((-1.0)*x10596*x10601)));
evalcond[4]=(((r01*x10600))+((cj2*sj1))+(((-1.0)*x10597*x10599))+((cj1*sj2))+((r02*x10594)));
evalcond[5]=(((r21*x10600))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10594))+(((-1.0)*x10598*x10599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10603=((-1.0)*r21);
CheckValue<IkReal> x10606 = IKatan2WithCheck(IkReal(x10603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10606.valid){
continue;
}
IkReal x10604=((1.0)*(x10606.value));
IkReal x10605=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10604)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10604)));
IkReal gconst4=(x10603*x10605);
IkReal gconst5=((1.0)*r20*x10605);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10607=((-1.0)*r21);
CheckValue<IkReal> x10610 = IKatan2WithCheck(IkReal(x10607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10610.valid){
continue;
}
IkReal x10608=((1.0)*(x10610.value));
IkReal x10609=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10608)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10608)));
IkReal gconst4=(x10607*x10609);
IkReal gconst5=((1.0)*r20*x10609);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10611=((-1.0)*r21);
CheckValue<IkReal> x10614 = IKatan2WithCheck(IkReal(x10611),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10614.valid){
continue;
}
IkReal x10612=((1.0)*(x10614.value));
IkReal x10613=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10612)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10612)));
IkReal gconst4=(x10611*x10613);
IkReal gconst5=((1.0)*r20*x10613);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10615=(gconst5*r10);
IkReal x10616=(gconst4*r11);
CheckValue<IkReal> x10617=IKPowWithIntegerCheck(IKsign(((x10615*x10615)+(x10616*x10616)+(r12*r12)+(((-2.0)*x10615*x10616)))),-1);
if(!x10617.valid){
continue;
}
CheckValue<IkReal> x10618 = IKatan2WithCheck(IkReal(((((-1.0)*x10615))+x10616)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10617.value)))+(x10618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10619=IKcos(j4);
IkReal x10620=IKsin(j4);
IkReal x10621=(gconst5*r10);
IkReal x10622=(gconst5*r00);
IkReal x10623=(gconst5*r20);
IkReal x10624=((1.0)*x10619);
IkReal x10625=(gconst4*x10620);
IkReal x10626=(gconst4*x10619);
IkReal x10627=((1.0)*x10620);
evalcond[0]=(((r11*x10626))+(((-1.0)*x10621*x10624))+((r12*x10620)));
evalcond[1]=(((r21*x10625))+(((-1.0)*x10623*x10627))+(((-1.0)*r22*x10624)));
evalcond[2]=((((-1.0)*r02*x10624))+((r01*x10625))+(((-1.0)*x10622*x10627)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10624))+((r11*x10625))+(((-1.0)*x10621*x10627)));
evalcond[4]=(((r21*x10626))+((cj2*sj1))+(((-1.0)*x10623*x10624))+((cj1*sj2))+((r22*x10620)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10626))+((r02*x10620))+(((-1.0)*x10622*x10624))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10628=((1.0)*gconst5);
CheckValue<IkReal> x10629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10628))+(((-1.0)*gconst4*r20)))),-1);
if(!x10629.valid){
continue;
}
CheckValue<IkReal> x10630 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10628))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10629.value)))+(x10630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10631=IKcos(j4);
IkReal x10632=IKsin(j4);
IkReal x10633=(gconst5*r10);
IkReal x10634=(gconst5*r00);
IkReal x10635=(gconst5*r20);
IkReal x10636=((1.0)*x10631);
IkReal x10637=(gconst4*x10632);
IkReal x10638=(gconst4*x10631);
IkReal x10639=((1.0)*x10632);
evalcond[0]=((((-1.0)*x10633*x10636))+((r12*x10632))+((r11*x10638)));
evalcond[1]=((((-1.0)*x10635*x10639))+(((-1.0)*r22*x10636))+((r21*x10637)));
evalcond[2]=((((-1.0)*r02*x10636))+(((-1.0)*x10634*x10639))+((r01*x10637)));
evalcond[3]=((-1.0)+(((-1.0)*x10633*x10639))+(((-1.0)*r12*x10636))+((r11*x10637)));
evalcond[4]=((((-1.0)*x10635*x10636))+((cj2*sj1))+((cj1*sj2))+((r22*x10632))+((r21*x10638)));
evalcond[5]=((((-1.0)*x10634*x10636))+((r01*x10638))+(((-1.0)*sj1*sj2))+((r02*x10632))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10640=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10640.valid){
continue;
}
CheckValue<IkReal> x10641 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10640.value)))+(x10641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10642=IKcos(j4);
IkReal x10643=IKsin(j4);
IkReal x10644=(gconst5*r10);
IkReal x10645=(gconst5*r00);
IkReal x10646=(gconst5*r20);
IkReal x10647=((1.0)*x10642);
IkReal x10648=(gconst4*x10643);
IkReal x10649=(gconst4*x10642);
IkReal x10650=((1.0)*x10643);
evalcond[0]=((((-1.0)*x10644*x10647))+((r11*x10649))+((r12*x10643)));
evalcond[1]=(((r21*x10648))+(((-1.0)*x10646*x10650))+(((-1.0)*r22*x10647)));
evalcond[2]=((((-1.0)*r02*x10647))+((r01*x10648))+(((-1.0)*x10645*x10650)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10647))+(((-1.0)*x10644*x10650))+((r11*x10648)));
evalcond[4]=(((r21*x10649))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10646*x10647))+((r22*x10643)));
evalcond[5]=(((r01*x10649))+(((-1.0)*sj1*sj2))+(((-1.0)*x10645*x10647))+((r02*x10643))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10651=((-1.0)*r21);
CheckValue<IkReal> x10654 = IKatan2WithCheck(IkReal(x10651),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10654.valid){
continue;
}
IkReal x10652=((1.0)*(x10654.value));
IkReal x10653=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10652)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10652)));
IkReal gconst4=(x10651*x10653);
IkReal gconst5=((1.0)*r20*x10653);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10655=((-1.0)*r21);
CheckValue<IkReal> x10658 = IKatan2WithCheck(IkReal(x10655),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10658.valid){
continue;
}
IkReal x10656=((1.0)*(x10658.value));
IkReal x10657=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10656)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10656)));
IkReal gconst4=(x10655*x10657);
IkReal gconst5=((1.0)*r20*x10657);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10659=((-1.0)*r21);
CheckValue<IkReal> x10662 = IKatan2WithCheck(IkReal(x10659),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10662.valid){
continue;
}
IkReal x10660=((1.0)*(x10662.value));
IkReal x10661=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10660)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10660)));
IkReal gconst4=(x10659*x10661);
IkReal gconst5=((1.0)*r20*x10661);
IkReal x10663=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10667=IKPowWithIntegerCheck(x10663,-1);
if(!x10667.valid){
continue;
}
IkReal x10664=x10667.value;
IkReal x10665=((1.0)*x10664);
IkReal x10666=((((-1.0)*x10665*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10665*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10664)));
j4eval[0]=x10666;
j4eval[1]=r12;
j4eval[2]=x10663;
j4eval[3]=IKsign(x10666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10668=(gconst5*r10);
IkReal x10669=(gconst4*r11);
CheckValue<IkReal> x10670=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10668*x10668)))+(((-1.0)*(x10669*x10669)))+(((2.0)*x10668*x10669))+(((-1.0)*(r12*r12))))),-1);
if(!x10670.valid){
continue;
}
CheckValue<IkReal> x10671 = IKatan2WithCheck(IkReal(((((-1.0)*x10669))+x10668)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10670.value)))+(x10671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10672=IKsin(j4);
IkReal x10673=IKcos(j4);
IkReal x10674=(gconst4*r11);
IkReal x10675=(gconst5*r10);
IkReal x10676=(gconst5*r00);
IkReal x10677=(gconst5*r20);
IkReal x10678=((1.0)*x10673);
IkReal x10679=(gconst4*x10672);
IkReal x10680=((1.0)*x10672);
evalcond[0]=((((-1.0)*x10677*x10680))+(((-1.0)*r22*x10678))+((r21*x10679)));
evalcond[1]=((((-1.0)*r02*x10678))+((r01*x10679))+(((-1.0)*x10676*x10680)));
evalcond[2]=((((-1.0)*r12*x10680))+(((-1.0)*x10674*x10678))+((x10673*x10675)));
evalcond[3]=((-1.0)+(((-1.0)*x10675*x10680))+((x10672*x10674))+(((-1.0)*r12*x10678)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10680))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10678))+((x10673*x10677)));
evalcond[5]=((((-1.0)*r02*x10680))+(((-1.0)*sj1*sj2))+((x10673*x10676))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10681=((1.0)*gconst5);
CheckValue<IkReal> x10682 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10682.valid){
continue;
}
CheckValue<IkReal> x10683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10681))+(((-1.0)*gconst4*r20)))),-1);
if(!x10683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10682.value)+(((1.5707963267949)*(x10683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10684=IKsin(j4);
IkReal x10685=IKcos(j4);
IkReal x10686=(gconst4*r11);
IkReal x10687=(gconst5*r10);
IkReal x10688=(gconst5*r00);
IkReal x10689=(gconst5*r20);
IkReal x10690=((1.0)*x10685);
IkReal x10691=(gconst4*x10684);
IkReal x10692=((1.0)*x10684);
evalcond[0]=(((r21*x10691))+(((-1.0)*x10689*x10692))+(((-1.0)*r22*x10690)));
evalcond[1]=((((-1.0)*x10688*x10692))+(((-1.0)*r02*x10690))+((r01*x10691)));
evalcond[2]=((((-1.0)*r12*x10692))+(((-1.0)*x10686*x10690))+((x10685*x10687)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10690))+(((-1.0)*x10687*x10692))+((x10684*x10686)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10690))+((cj1*sj2))+((x10685*x10689))+(((-1.0)*r22*x10692)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10685*x10688))+(((-1.0)*r02*x10692))+(((-1.0)*gconst4*r01*x10690))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10693=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10693.valid){
continue;
}
CheckValue<IkReal> x10694 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10693.value)))+(x10694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10695=IKsin(j4);
IkReal x10696=IKcos(j4);
IkReal x10697=(gconst4*r11);
IkReal x10698=(gconst5*r10);
IkReal x10699=(gconst5*r00);
IkReal x10700=(gconst5*r20);
IkReal x10701=((1.0)*x10696);
IkReal x10702=(gconst4*x10695);
IkReal x10703=((1.0)*x10695);
evalcond[0]=((((-1.0)*r22*x10701))+((r21*x10702))+(((-1.0)*x10700*x10703)));
evalcond[1]=(((r01*x10702))+(((-1.0)*x10699*x10703))+(((-1.0)*r02*x10701)));
evalcond[2]=((((-1.0)*r12*x10703))+(((-1.0)*x10697*x10701))+((x10696*x10698)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10701))+(((-1.0)*x10698*x10703))+((x10695*x10697)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10701))+((cj1*sj2))+(((-1.0)*r22*x10703))+((x10696*x10700)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10701))+(((-1.0)*r02*x10703))+((cj1*cj2))+((x10696*x10699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10704=((-1.0)*r21);
IkReal x10705=((-1.0)*px);
CheckValue<IkReal> x10707 = IKatan2WithCheck(IkReal(x10704),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10707.valid){
continue;
}
IkReal x10706=((1.0)*(x10707.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10706)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10705);
rxp1_1=(px*r21);
rxp1_2=(r11*x10705);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10706)));
IkReal gconst4=x10704;
IkReal gconst5=((1.0)*r20);
IkReal x10708=((1.0)*cj3);
IkReal x10709=(r10*r20);
IkReal x10710=(r11*r21);
j4eval[0]=((((-1.0)*x10710))+(((-1.0)*x10709)));
j4eval[1]=((((-1.0)*x10708*x10710))+(((-1.0)*x10708*x10709)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10711=((-1.0)*r21);
IkReal x10712=((-1.0)*px);
CheckValue<IkReal> x10714 = IKatan2WithCheck(IkReal(x10711),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10714.valid){
continue;
}
IkReal x10713=((1.0)*(x10714.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10713)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10712);
rxp1_1=(px*r21);
rxp1_2=(r11*x10712);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10713)));
IkReal gconst4=x10711;
IkReal gconst5=((1.0)*r20);
IkReal x10715=((1.0)*r11*r21);
IkReal x10716=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10716))+(((-1.0)*x10715)));
j4eval[1]=(((sj3*x10715))+((sj3*x10716)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10717=((-1.0)*r21);
IkReal x10718=((-1.0)*px);
CheckValue<IkReal> x10720 = IKatan2WithCheck(IkReal(x10717),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10720.valid){
continue;
}
IkReal x10719=((1.0)*(x10720.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10719)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10718);
rxp1_1=(px*r21);
rxp1_2=(r11*x10718);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10719)));
IkReal gconst4=x10717;
IkReal gconst5=((1.0)*r20);
IkReal x10721=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10721))+(((-1.0)*r10*r20*x10721)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10722=((1.0)*r10);
CheckValue<IkReal> x10723=IKPowWithIntegerCheck(cj3,-1);
if(!x10723.valid){
continue;
}
CheckValue<IkReal> x10724=IKPowWithIntegerCheck(r02,-1);
if(!x10724.valid){
continue;
}
CheckValue<IkReal> x10725=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10722))),-1);
if(!x10725.valid){
continue;
}
if( IKabs(((x10723.value)*(x10724.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10725.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10722)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10723.value)*(x10724.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10725.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10722))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10723.value)*(x10724.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10725.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10722))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10726=IKsin(j4);
IkReal x10727=IKcos(j4);
IkReal x10728=(cj2*sj1);
IkReal x10729=(cj1*sj2);
IkReal x10730=(gconst5*sj3);
IkReal x10731=(gconst4*r11);
IkReal x10732=(sj1*sj2);
IkReal x10733=((1.0)*gconst5);
IkReal x10734=(cj1*cj2);
IkReal x10735=(gconst4*r21);
IkReal x10736=(cj3*gconst4);
IkReal x10737=(gconst4*sj3);
IkReal x10738=(cj3*gconst5);
IkReal x10739=(r20*x10727);
IkReal x10740=(r10*x10727);
IkReal x10741=(cj3*x10727);
IkReal x10742=(r02*x10726);
IkReal x10743=(x10729+x10728);
IkReal x10744=((1.0)*sj3*x10727);
evalcond[0]=((-1.0)*r02*x10727);
evalcond[1]=((((-1.0)*r20*x10726*x10733))+((x10726*x10735)));
evalcond[2]=(((cj3*x10742))+(((-1.0)*x10732))+x10734);
evalcond[3]=((((-1.0)*sj3*x10742))+x10743);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10726*x10733))+((x10726*x10731)));
evalcond[5]=(((r10*x10737))+((x10731*x10741))+(((-1.0)*cj3*x10733*x10740))+((r11*x10730)));
evalcond[6]=((((-1.0)*x10731*x10744))+((r10*x10736))+((x10730*x10740))+((r11*x10738)));
evalcond[7]=((((-1.0)*cj3*x10733*x10739))+((r21*x10730))+((x10735*x10741))+((r20*x10737))+x10743);
evalcond[8]=(((x10730*x10739))+((r21*x10738))+(((-1.0)*x10735*x10744))+((r20*x10736))+(((-1.0)*x10734))+x10732);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10745=((1.0)*gconst5);
IkReal x10746=(gconst4*r11);
CheckValue<IkReal> x10747=IKPowWithIntegerCheck(((((-1.0)*r10*x10745))+x10746),-1);
if(!x10747.valid){
continue;
}
CheckValue<IkReal> x10748=IKPowWithIntegerCheck(((((-1.0)*sj3*x10746))+((gconst5*r10*sj3))),-1);
if(!x10748.valid){
continue;
}
if( IKabs(x10747.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10748.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10745)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10747.value)+IKsqr(((x10748.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10745))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10747.value, ((x10748.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10745))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10749=IKsin(j4);
IkReal x10750=IKcos(j4);
IkReal x10751=(cj2*sj1);
IkReal x10752=(cj1*sj2);
IkReal x10753=(gconst5*sj3);
IkReal x10754=(gconst4*r11);
IkReal x10755=(sj1*sj2);
IkReal x10756=((1.0)*gconst5);
IkReal x10757=(cj1*cj2);
IkReal x10758=(gconst4*r21);
IkReal x10759=(cj3*gconst4);
IkReal x10760=(gconst4*sj3);
IkReal x10761=(cj3*gconst5);
IkReal x10762=(r20*x10750);
IkReal x10763=(r10*x10750);
IkReal x10764=(cj3*x10750);
IkReal x10765=(r02*x10749);
IkReal x10766=(x10752+x10751);
IkReal x10767=((1.0)*sj3*x10750);
evalcond[0]=((-1.0)*r02*x10750);
evalcond[1]=(((x10749*x10758))+(((-1.0)*r20*x10749*x10756)));
evalcond[2]=(((cj3*x10765))+x10757+(((-1.0)*x10755)));
evalcond[3]=((((-1.0)*sj3*x10765))+x10766);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10749*x10756))+((x10749*x10754)));
evalcond[5]=((((-1.0)*cj3*x10756*x10763))+((r11*x10753))+((r10*x10760))+((x10754*x10764)));
evalcond[6]=((((-1.0)*x10754*x10767))+((r10*x10759))+((r11*x10761))+((x10753*x10763)));
evalcond[7]=(((r20*x10760))+(((-1.0)*cj3*x10756*x10762))+x10766+((x10758*x10764))+((r21*x10753)));
evalcond[8]=(((r21*x10761))+((r20*x10759))+x10755+(((-1.0)*x10758*x10767))+((x10753*x10762))+(((-1.0)*x10757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10768=((1.0)*sj3);
IkReal x10769=(gconst4*r11);
IkReal x10770=((1.0)*gconst5*r10);
CheckValue<IkReal> x10771=IKPowWithIntegerCheck(((((-1.0)*x10770))+x10769),-1);
if(!x10771.valid){
continue;
}
CheckValue<IkReal> x10772=IKPowWithIntegerCheck((((cj3*x10769))+(((-1.0)*cj3*x10770))),-1);
if(!x10772.valid){
continue;
}
if( IKabs(x10771.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10772.value)*(((((-1.0)*gconst5*r11*x10768))+(((-1.0)*gconst4*r10*x10768)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10771.value)+IKsqr(((x10772.value)*(((((-1.0)*gconst5*r11*x10768))+(((-1.0)*gconst4*r10*x10768))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10771.value, ((x10772.value)*(((((-1.0)*gconst5*r11*x10768))+(((-1.0)*gconst4*r10*x10768))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10773=IKsin(j4);
IkReal x10774=IKcos(j4);
IkReal x10775=(cj2*sj1);
IkReal x10776=(cj1*sj2);
IkReal x10777=(gconst5*sj3);
IkReal x10778=(gconst4*r11);
IkReal x10779=(sj1*sj2);
IkReal x10780=((1.0)*gconst5);
IkReal x10781=(cj1*cj2);
IkReal x10782=(gconst4*r21);
IkReal x10783=(cj3*gconst4);
IkReal x10784=(gconst4*sj3);
IkReal x10785=(cj3*gconst5);
IkReal x10786=(r20*x10774);
IkReal x10787=(r10*x10774);
IkReal x10788=(cj3*x10774);
IkReal x10789=(r02*x10773);
IkReal x10790=(x10775+x10776);
IkReal x10791=((1.0)*sj3*x10774);
evalcond[0]=((-1.0)*r02*x10774);
evalcond[1]=(((x10773*x10782))+(((-1.0)*r20*x10773*x10780)));
evalcond[2]=((((-1.0)*x10779))+x10781+((cj3*x10789)));
evalcond[3]=((((-1.0)*sj3*x10789))+x10790);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10773*x10780))+((x10773*x10778)));
evalcond[5]=(((r11*x10777))+(((-1.0)*cj3*x10780*x10787))+((x10778*x10788))+((r10*x10784)));
evalcond[6]=(((r11*x10785))+((x10777*x10787))+(((-1.0)*x10778*x10791))+((r10*x10783)));
evalcond[7]=((((-1.0)*cj3*x10780*x10786))+((x10782*x10788))+((r20*x10784))+((r21*x10777))+x10790);
evalcond[8]=(((r21*x10785))+((x10777*x10786))+((r20*x10783))+(((-1.0)*x10781))+x10779+(((-1.0)*x10782*x10791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10792=gconst4*gconst4;
IkReal x10793=gconst5*gconst5;
IkReal x10794=(r10*r21);
IkReal x10795=((1.0)*cj3);
IkReal x10796=(r11*r21);
IkReal x10797=(r11*r20);
IkReal x10798=(r22*sj3);
IkReal x10799=(gconst4*r10);
IkReal x10800=((1.0)*sj3);
IkReal x10801=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10802 = IKatan2WithCheck(IkReal((((x10798*x10799))+((gconst5*r11*x10798)))),IkReal(((((-1.0)*gconst5*r20*x10799*x10800))+(((-1.0)*x10793*x10797*x10800))+((gconst4*gconst5*sj3*x10796))+((sj3*x10792*x10794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10802.valid){
continue;
}
CheckValue<IkReal> x10803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10795))+(((-1.0)*r10*r20*x10793*x10795))+((x10794*x10801))+((x10797*x10801))+(((-1.0)*x10792*x10795*x10796)))),-1);
if(!x10803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10802.value)+(((1.5707963267949)*(x10803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10804=IKsin(j4);
IkReal x10805=IKcos(j4);
IkReal x10806=(cj2*sj1);
IkReal x10807=(cj1*sj2);
IkReal x10808=(gconst5*sj3);
IkReal x10809=(gconst4*r11);
IkReal x10810=(sj1*sj2);
IkReal x10811=(gconst5*r10);
IkReal x10812=(cj1*cj2);
IkReal x10813=(gconst4*r01);
IkReal x10814=(gconst4*r21);
IkReal x10815=(gconst5*r00);
IkReal x10816=(gconst4*sj3);
IkReal x10817=(cj3*gconst5);
IkReal x10818=(cj3*gconst4);
IkReal x10819=((1.0)*x10805);
IkReal x10820=((1.0)*x10804);
IkReal x10821=(cj3*x10804);
IkReal x10822=(cj3*x10805);
IkReal x10823=(x10806+x10807);
evalcond[0]=(((x10804*x10814))+(((-1.0)*gconst5*r20*x10820))+(((-1.0)*r22*x10819)));
evalcond[1]=((((-1.0)*x10815*x10820))+(((-1.0)*r02*x10819))+((x10804*x10813)));
evalcond[2]=((-1.0)+(((-1.0)*x10811*x10820))+(((-1.0)*r12*x10819))+((x10804*x10809)));
evalcond[3]=(((r12*x10821))+(((-1.0)*cj3*x10811*x10819))+((r11*x10808))+((x10809*x10822))+((r10*x10816)));
evalcond[4]=((((-1.0)*sj3*x10809*x10819))+((r10*x10805*x10808))+(((-1.0)*r12*sj3*x10820))+((r10*x10818))+((r11*x10817)));
evalcond[5]=(((x10814*x10822))+(((-1.0)*r20*x10817*x10819))+((r20*x10816))+((r21*x10808))+((r22*x10821))+x10823);
evalcond[6]=((((-1.0)*x10810))+((r02*x10821))+((x10813*x10822))+((r01*x10808))+(((-1.0)*cj3*x10815*x10819))+((r00*x10816))+x10812);
evalcond[7]=((((-1.0)*r02*sj3*x10820))+(((-1.0)*sj3*x10813*x10819))+((r00*x10805*x10808))+((r01*x10817))+((r00*x10818))+x10823);
evalcond[8]=((((-1.0)*x10812))+((r20*x10805*x10808))+((r20*x10818))+(((-1.0)*r22*sj3*x10820))+(((-1.0)*sj3*x10814*x10819))+((r21*x10817))+x10810);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10824=((1.0)*gconst5);
CheckValue<IkReal> x10825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10824))+(((-1.0)*gconst4*r20)))),-1);
if(!x10825.valid){
continue;
}
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10825.value)))+(x10826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10827=IKsin(j4);
IkReal x10828=IKcos(j4);
IkReal x10829=(cj2*sj1);
IkReal x10830=(cj1*sj2);
IkReal x10831=(gconst5*sj3);
IkReal x10832=(gconst4*r11);
IkReal x10833=(sj1*sj2);
IkReal x10834=(gconst5*r10);
IkReal x10835=(cj1*cj2);
IkReal x10836=(gconst4*r01);
IkReal x10837=(gconst4*r21);
IkReal x10838=(gconst5*r00);
IkReal x10839=(gconst4*sj3);
IkReal x10840=(cj3*gconst5);
IkReal x10841=(cj3*gconst4);
IkReal x10842=((1.0)*x10828);
IkReal x10843=((1.0)*x10827);
IkReal x10844=(cj3*x10827);
IkReal x10845=(cj3*x10828);
IkReal x10846=(x10830+x10829);
evalcond[0]=(((x10827*x10837))+(((-1.0)*r22*x10842))+(((-1.0)*gconst5*r20*x10843)));
evalcond[1]=((((-1.0)*r02*x10842))+((x10827*x10836))+(((-1.0)*x10838*x10843)));
evalcond[2]=((-1.0)+((x10827*x10832))+(((-1.0)*x10834*x10843))+(((-1.0)*r12*x10842)));
evalcond[3]=(((x10832*x10845))+(((-1.0)*cj3*x10834*x10842))+((r10*x10839))+((r12*x10844))+((r11*x10831)));
evalcond[4]=((((-1.0)*sj3*x10832*x10842))+((r10*x10828*x10831))+((r11*x10840))+(((-1.0)*r12*sj3*x10843))+((r10*x10841)));
evalcond[5]=((((-1.0)*r20*x10840*x10842))+((r22*x10844))+((r20*x10839))+((r21*x10831))+((x10837*x10845))+x10846);
evalcond[6]=((((-1.0)*x10833))+((r02*x10844))+((r01*x10831))+((r00*x10839))+(((-1.0)*cj3*x10838*x10842))+((x10836*x10845))+x10835);
evalcond[7]=(((r01*x10840))+((r00*x10841))+(((-1.0)*r02*sj3*x10843))+((r00*x10828*x10831))+(((-1.0)*sj3*x10836*x10842))+x10846);
evalcond[8]=((((-1.0)*x10835))+(((-1.0)*r22*sj3*x10843))+((r21*x10840))+(((-1.0)*sj3*x10837*x10842))+((r20*x10841))+((r20*x10828*x10831))+x10833);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10847=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10847.valid){
continue;
}
CheckValue<IkReal> x10848 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10847.value)))+(x10848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10849=IKsin(j4);
IkReal x10850=IKcos(j4);
IkReal x10851=(cj2*sj1);
IkReal x10852=(cj1*sj2);
IkReal x10853=(gconst5*sj3);
IkReal x10854=(gconst4*r11);
IkReal x10855=(sj1*sj2);
IkReal x10856=(gconst5*r10);
IkReal x10857=(cj1*cj2);
IkReal x10858=(gconst4*r01);
IkReal x10859=(gconst4*r21);
IkReal x10860=(gconst5*r00);
IkReal x10861=(gconst4*sj3);
IkReal x10862=(cj3*gconst5);
IkReal x10863=(cj3*gconst4);
IkReal x10864=((1.0)*x10850);
IkReal x10865=((1.0)*x10849);
IkReal x10866=(cj3*x10849);
IkReal x10867=(cj3*x10850);
IkReal x10868=(x10851+x10852);
evalcond[0]=((((-1.0)*r22*x10864))+(((-1.0)*gconst5*r20*x10865))+((x10849*x10859)));
evalcond[1]=((((-1.0)*x10860*x10865))+((x10849*x10858))+(((-1.0)*r02*x10864)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10864))+((x10849*x10854))+(((-1.0)*x10856*x10865)));
evalcond[3]=(((r11*x10853))+((x10854*x10867))+((r12*x10866))+((r10*x10861))+(((-1.0)*cj3*x10856*x10864)));
evalcond[4]=(((r11*x10862))+((r10*x10863))+((r10*x10850*x10853))+(((-1.0)*r12*sj3*x10865))+(((-1.0)*sj3*x10854*x10864)));
evalcond[5]=(((x10859*x10867))+(((-1.0)*r20*x10862*x10864))+((r21*x10853))+((r20*x10861))+((r22*x10866))+x10868);
evalcond[6]=((((-1.0)*cj3*x10860*x10864))+((r01*x10853))+((r00*x10861))+((x10858*x10867))+(((-1.0)*x10855))+((r02*x10866))+x10857);
evalcond[7]=(((r00*x10850*x10853))+((r00*x10863))+(((-1.0)*sj3*x10858*x10864))+((r01*x10862))+(((-1.0)*r02*sj3*x10865))+x10868);
evalcond[8]=((((-1.0)*r22*sj3*x10865))+((r21*x10862))+((r20*x10863))+(((-1.0)*sj3*x10859*x10864))+(((-1.0)*x10857))+((r20*x10850*x10853))+x10855);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10869=((-1.0)*r21);
CheckValue<IkReal> x10872 = IKatan2WithCheck(IkReal(x10869),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10872.valid){
continue;
}
IkReal x10870=((1.0)*(x10872.value));
IkReal x10871=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10870)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10870)));
IkReal gconst4=(x10869*x10871);
IkReal gconst5=((1.0)*r20*x10871);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10873=((-1.0)*r21);
CheckValue<IkReal> x10876 = IKatan2WithCheck(IkReal(x10873),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10876.valid){
continue;
}
IkReal x10874=((1.0)*(x10876.value));
IkReal x10875=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10874)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10874)));
IkReal gconst4=(x10873*x10875);
IkReal gconst5=((1.0)*r20*x10875);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10877=((-1.0)*r21);
CheckValue<IkReal> x10880 = IKatan2WithCheck(IkReal(x10877),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10880.valid){
continue;
}
IkReal x10878=((1.0)*(x10880.value));
IkReal x10879=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10878)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10878)));
IkReal gconst4=(x10877*x10879);
IkReal gconst5=((1.0)*r20*x10879);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10881=((-1.0)*r21);
CheckValue<IkReal> x10884 = IKatan2WithCheck(IkReal(x10881),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10884.valid){
continue;
}
IkReal x10882=((1.0)*(x10884.value));
IkReal x10883=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10882)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10882)));
IkReal gconst4=(x10881*x10883);
IkReal gconst5=((1.0)*r20*x10883);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10885=((-1.0)*r21);
CheckValue<IkReal> x10888 = IKatan2WithCheck(IkReal(x10885),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10888.valid){
continue;
}
IkReal x10886=((1.0)*(x10888.value));
IkReal x10887=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10886)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10886)));
IkReal gconst4=(x10885*x10887);
IkReal gconst5=((1.0)*r20*x10887);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10889=((-1.0)*r21);
CheckValue<IkReal> x10892 = IKatan2WithCheck(IkReal(x10889),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10892.valid){
continue;
}
IkReal x10890=((1.0)*(x10892.value));
IkReal x10891=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10890)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10890)));
IkReal gconst4=(x10889*x10891);
IkReal gconst5=((1.0)*r20*x10891);
IkReal x10893=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(x10893,-1);
if(!x10897.valid){
continue;
}
IkReal x10894=x10897.value;
IkReal x10895=((1.0)*x10894);
IkReal x10896=((((-1.0)*x10895*(r00*r00)*(r20*r20)))+(((-1.0)*x10895*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10894)));
j4eval[0]=x10896;
j4eval[1]=r02;
j4eval[2]=x10893;
j4eval[3]=IKsign(x10896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10898=(gconst5*r00);
IkReal x10899=(gconst4*r01);
CheckValue<IkReal> x10900=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10898*x10898)))+(((2.0)*x10898*x10899))+(((-1.0)*(x10899*x10899)))+(((-1.0)*(r02*r02))))),-1);
if(!x10900.valid){
continue;
}
CheckValue<IkReal> x10901 = IKatan2WithCheck(IkReal(((((-1.0)*x10899))+x10898)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10900.value)))+(x10901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10902=IKsin(j4);
IkReal x10903=IKcos(j4);
IkReal x10904=(gconst4*r11);
IkReal x10905=((1.0)*cj1);
IkReal x10906=(gconst5*r10);
IkReal x10907=(gconst4*r01);
IkReal x10908=(gconst5*r00);
IkReal x10909=(gconst4*r21);
IkReal x10910=(gconst5*r20);
IkReal x10911=((1.0)*x10903);
IkReal x10912=((1.0)*x10902);
evalcond[0]=(((x10902*x10909))+(((-1.0)*r22*x10911))+(((-1.0)*x10910*x10912)));
evalcond[1]=((((-1.0)*r12*x10911))+((x10902*x10904))+(((-1.0)*x10906*x10912)));
evalcond[2]=((((-1.0)*r02*x10912))+((x10903*x10908))+(((-1.0)*x10907*x10911)));
evalcond[3]=((-1.0)+(((-1.0)*x10908*x10912))+(((-1.0)*r02*x10911))+((x10902*x10907)));
evalcond[4]=((((-1.0)*r22*x10912))+((sj1*sj2))+(((-1.0)*cj2*x10905))+(((-1.0)*x10909*x10911))+((x10903*x10910)));
evalcond[5]=((((-1.0)*r12*x10912))+((x10903*x10906))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10905))+(((-1.0)*x10904*x10911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10913=((1.0)*gconst5);
CheckValue<IkReal> x10914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10913))+(((-1.0)*gconst4*r10)))),-1);
if(!x10914.valid){
continue;
}
CheckValue<IkReal> x10915 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10913))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10914.value)))+(x10915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10916=IKsin(j4);
IkReal x10917=IKcos(j4);
IkReal x10918=(gconst4*r11);
IkReal x10919=((1.0)*cj1);
IkReal x10920=(gconst5*r10);
IkReal x10921=(gconst4*r01);
IkReal x10922=(gconst5*r00);
IkReal x10923=(gconst4*r21);
IkReal x10924=(gconst5*r20);
IkReal x10925=((1.0)*x10917);
IkReal x10926=((1.0)*x10916);
evalcond[0]=((((-1.0)*r22*x10925))+(((-1.0)*x10924*x10926))+((x10916*x10923)));
evalcond[1]=((((-1.0)*x10920*x10926))+(((-1.0)*r12*x10925))+((x10916*x10918)));
evalcond[2]=(((x10917*x10922))+(((-1.0)*r02*x10926))+(((-1.0)*x10921*x10925)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10925))+((x10916*x10921))+(((-1.0)*x10922*x10926)));
evalcond[4]=(((x10917*x10924))+(((-1.0)*r22*x10926))+((sj1*sj2))+(((-1.0)*cj2*x10919))+(((-1.0)*x10923*x10925)));
evalcond[5]=((((-1.0)*sj2*x10919))+((x10917*x10920))+(((-1.0)*r12*x10926))+(((-1.0)*cj2*sj1))+(((-1.0)*x10918*x10925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10927 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10927.valid){
continue;
}
CheckValue<IkReal> x10928=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10927.value)+(((1.5707963267949)*(x10928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10929=IKsin(j4);
IkReal x10930=IKcos(j4);
IkReal x10931=(gconst4*r11);
IkReal x10932=((1.0)*cj1);
IkReal x10933=(gconst5*r10);
IkReal x10934=(gconst4*r01);
IkReal x10935=(gconst5*r00);
IkReal x10936=(gconst4*r21);
IkReal x10937=(gconst5*r20);
IkReal x10938=((1.0)*x10930);
IkReal x10939=((1.0)*x10929);
evalcond[0]=((((-1.0)*r22*x10938))+((x10929*x10936))+(((-1.0)*x10937*x10939)));
evalcond[1]=((((-1.0)*r12*x10938))+((x10929*x10931))+(((-1.0)*x10933*x10939)));
evalcond[2]=(((x10930*x10935))+(((-1.0)*r02*x10939))+(((-1.0)*x10934*x10938)));
evalcond[3]=((-1.0)+((x10929*x10934))+(((-1.0)*r02*x10938))+(((-1.0)*x10935*x10939)));
evalcond[4]=(((x10930*x10937))+(((-1.0)*r22*x10939))+((sj1*sj2))+(((-1.0)*x10936*x10938))+(((-1.0)*cj2*x10932)));
evalcond[5]=(((x10930*x10933))+(((-1.0)*r12*x10939))+(((-1.0)*x10931*x10938))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10940=((-1.0)*r21);
CheckValue<IkReal> x10943 = IKatan2WithCheck(IkReal(x10940),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10943.valid){
continue;
}
IkReal x10941=((1.0)*(x10943.value));
IkReal x10942=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10941)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10941)));
IkReal gconst4=(x10940*x10942);
IkReal gconst5=((1.0)*r20*x10942);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10944=((-1.0)*r21);
CheckValue<IkReal> x10947 = IKatan2WithCheck(IkReal(x10944),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10947.valid){
continue;
}
IkReal x10945=((1.0)*(x10947.value));
IkReal x10946=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10945)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10945)));
IkReal gconst4=(x10944*x10946);
IkReal gconst5=((1.0)*r20*x10946);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10948=((-1.0)*r21);
CheckValue<IkReal> x10951 = IKatan2WithCheck(IkReal(x10948),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10951.valid){
continue;
}
IkReal x10949=((1.0)*(x10951.value));
IkReal x10950=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10949)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10949)));
IkReal gconst4=(x10948*x10950);
IkReal gconst5=((1.0)*r20*x10950);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10952=(gconst4*r01);
IkReal x10953=(gconst5*r00);
CheckValue<IkReal> x10954 = IKatan2WithCheck(IkReal(((((-1.0)*x10953))+x10952)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10954.valid){
continue;
}
CheckValue<IkReal> x10955=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10952*x10953))+(x10952*x10952)+(x10953*x10953)+(r02*r02))),-1);
if(!x10955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10954.value)+(((1.5707963267949)*(x10955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10956=IKcos(j4);
IkReal x10957=IKsin(j4);
IkReal x10958=(gconst4*r11);
IkReal x10959=(gconst5*r10);
IkReal x10960=((1.0)*cj1);
IkReal x10961=(gconst5*r00);
IkReal x10962=(gconst5*r20);
IkReal x10963=((1.0)*x10956);
IkReal x10964=(gconst4*x10956);
IkReal x10965=((1.0)*x10957);
IkReal x10966=(gconst4*x10957);
evalcond[0]=((((-1.0)*x10961*x10963))+((r02*x10957))+((r01*x10964)));
evalcond[1]=((((-1.0)*r22*x10963))+(((-1.0)*x10962*x10965))+((r21*x10966)));
evalcond[2]=((((-1.0)*x10959*x10965))+(((-1.0)*r12*x10963))+((x10957*x10958)));
evalcond[3]=((-1.0)+(((-1.0)*x10961*x10965))+((r01*x10966))+(((-1.0)*r02*x10963)));
evalcond[4]=(((r22*x10957))+((sj1*sj2))+(((-1.0)*x10962*x10963))+((r21*x10964))+(((-1.0)*cj2*x10960)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10959*x10963))+((x10956*x10958))+(((-1.0)*sj2*x10960))+((r12*x10957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10967=((1.0)*gconst5);
CheckValue<IkReal> x10968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10967))+(((-1.0)*gconst4*r10)))),-1);
if(!x10968.valid){
continue;
}
CheckValue<IkReal> x10969 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10967))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10968.value)))+(x10969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10970=IKcos(j4);
IkReal x10971=IKsin(j4);
IkReal x10972=(gconst4*r11);
IkReal x10973=(gconst5*r10);
IkReal x10974=((1.0)*cj1);
IkReal x10975=(gconst5*r00);
IkReal x10976=(gconst5*r20);
IkReal x10977=((1.0)*x10970);
IkReal x10978=(gconst4*x10970);
IkReal x10979=((1.0)*x10971);
IkReal x10980=(gconst4*x10971);
evalcond[0]=(((r02*x10971))+((r01*x10978))+(((-1.0)*x10975*x10977)));
evalcond[1]=(((r21*x10980))+(((-1.0)*x10976*x10979))+(((-1.0)*r22*x10977)));
evalcond[2]=((((-1.0)*x10973*x10979))+((x10971*x10972))+(((-1.0)*r12*x10977)));
evalcond[3]=((-1.0)+((r01*x10980))+(((-1.0)*r02*x10977))+(((-1.0)*x10975*x10979)));
evalcond[4]=((((-1.0)*cj2*x10974))+(((-1.0)*x10976*x10977))+((r22*x10971))+((sj1*sj2))+((r21*x10978)));
evalcond[5]=((((-1.0)*x10973*x10977))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10974))+((r12*x10971))+((x10970*x10972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10981 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10981.valid){
continue;
}
CheckValue<IkReal> x10982=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10981.value)+(((1.5707963267949)*(x10982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10983=IKcos(j4);
IkReal x10984=IKsin(j4);
IkReal x10985=(gconst4*r11);
IkReal x10986=(gconst5*r10);
IkReal x10987=((1.0)*cj1);
IkReal x10988=(gconst5*r00);
IkReal x10989=(gconst5*r20);
IkReal x10990=((1.0)*x10983);
IkReal x10991=(gconst4*x10983);
IkReal x10992=((1.0)*x10984);
IkReal x10993=(gconst4*x10984);
evalcond[0]=(((r01*x10991))+(((-1.0)*x10988*x10990))+((r02*x10984)));
evalcond[1]=(((r21*x10993))+(((-1.0)*x10989*x10992))+(((-1.0)*r22*x10990)));
evalcond[2]=((((-1.0)*x10986*x10992))+(((-1.0)*r12*x10990))+((x10984*x10985)));
evalcond[3]=((-1.0)+((r01*x10993))+(((-1.0)*x10988*x10992))+(((-1.0)*r02*x10990)));
evalcond[4]=(((r22*x10984))+((r21*x10991))+(((-1.0)*x10989*x10990))+(((-1.0)*cj2*x10987))+((sj1*sj2)));
evalcond[5]=(((r12*x10984))+(((-1.0)*sj2*x10987))+(((-1.0)*cj2*sj1))+(((-1.0)*x10986*x10990))+((x10983*x10985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10994=((-1.0)*r21);
CheckValue<IkReal> x10997 = IKatan2WithCheck(IkReal(x10994),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10997.valid){
continue;
}
IkReal x10995=((1.0)*(x10997.value));
IkReal x10996=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10995)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10995)));
IkReal gconst4=(x10994*x10996);
IkReal gconst5=((1.0)*r20*x10996);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10998=((-1.0)*r21);
CheckValue<IkReal> x11001 = IKatan2WithCheck(IkReal(x10998),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11001.valid){
continue;
}
IkReal x10999=((1.0)*(x11001.value));
IkReal x11000=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10999)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10999)));
IkReal gconst4=(x10998*x11000);
IkReal gconst5=((1.0)*r20*x11000);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11002=((-1.0)*r21);
CheckValue<IkReal> x11005 = IKatan2WithCheck(IkReal(x11002),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11005.valid){
continue;
}
IkReal x11003=((1.0)*(x11005.value));
IkReal x11004=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11003)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11003)));
IkReal gconst4=(x11002*x11004);
IkReal gconst5=((1.0)*r20*x11004);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11006=(gconst4*r01);
IkReal x11007=(gconst5*r00);
CheckValue<IkReal> x11008 = IKatan2WithCheck(IkReal((x11006+(((-1.0)*x11007)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11008.valid){
continue;
}
CheckValue<IkReal> x11009=IKPowWithIntegerCheck(IKsign(((x11007*x11007)+(((-2.0)*x11006*x11007))+(r02*r02)+(x11006*x11006))),-1);
if(!x11009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11008.value)+(((1.5707963267949)*(x11009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11010=IKcos(j4);
IkReal x11011=IKsin(j4);
IkReal x11012=(gconst4*r11);
IkReal x11013=(gconst5*r10);
IkReal x11014=(gconst5*r00);
IkReal x11015=(gconst5*r20);
IkReal x11016=((1.0)*x11010);
IkReal x11017=(gconst4*x11010);
IkReal x11018=((1.0)*x11011);
IkReal x11019=(gconst4*x11011);
evalcond[0]=((((-1.0)*x11014*x11016))+((r01*x11017))+((r02*x11011)));
evalcond[1]=((((-1.0)*r22*x11016))+(((-1.0)*x11015*x11018))+((r21*x11019)));
evalcond[2]=((((-1.0)*x11013*x11018))+(((-1.0)*r12*x11016))+((x11011*x11012)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11016))+(((-1.0)*x11014*x11018))+((r01*x11019)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11015*x11016))+((r22*x11011))+((r21*x11017)));
evalcond[5]=((((-1.0)*x11013*x11016))+((x11010*x11012))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11020=((1.0)*gconst5);
CheckValue<IkReal> x11021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11020))+(((-1.0)*gconst4*r10)))),-1);
if(!x11021.valid){
continue;
}
CheckValue<IkReal> x11022 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11020))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11021.value)))+(x11022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11023=IKcos(j4);
IkReal x11024=IKsin(j4);
IkReal x11025=(gconst4*r11);
IkReal x11026=(gconst5*r10);
IkReal x11027=(gconst5*r00);
IkReal x11028=(gconst5*r20);
IkReal x11029=((1.0)*x11023);
IkReal x11030=(gconst4*x11023);
IkReal x11031=((1.0)*x11024);
IkReal x11032=(gconst4*x11024);
evalcond[0]=(((r01*x11030))+((r02*x11024))+(((-1.0)*x11027*x11029)));
evalcond[1]=((((-1.0)*x11028*x11031))+((r21*x11032))+(((-1.0)*r22*x11029)));
evalcond[2]=(((x11024*x11025))+(((-1.0)*x11026*x11031))+(((-1.0)*r12*x11029)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11029))+((r01*x11032))+(((-1.0)*x11027*x11031)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11028*x11029))+((r21*x11030))+((cj1*sj2))+((r22*x11024)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11024))+(((-1.0)*x11026*x11029))+((x11023*x11025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11033 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11033.valid){
continue;
}
CheckValue<IkReal> x11034=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11033.value)+(((1.5707963267949)*(x11034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11035=IKcos(j4);
IkReal x11036=IKsin(j4);
IkReal x11037=(gconst4*r11);
IkReal x11038=(gconst5*r10);
IkReal x11039=(gconst5*r00);
IkReal x11040=(gconst5*r20);
IkReal x11041=((1.0)*x11035);
IkReal x11042=(gconst4*x11035);
IkReal x11043=((1.0)*x11036);
IkReal x11044=(gconst4*x11036);
evalcond[0]=(((r01*x11042))+((r02*x11036))+(((-1.0)*x11039*x11041)));
evalcond[1]=((((-1.0)*r22*x11041))+((r21*x11044))+(((-1.0)*x11040*x11043)));
evalcond[2]=(((x11036*x11037))+(((-1.0)*r12*x11041))+(((-1.0)*x11038*x11043)));
evalcond[3]=((-1.0)+((r01*x11044))+(((-1.0)*r02*x11041))+(((-1.0)*x11039*x11043)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11036))+((r21*x11042))+(((-1.0)*x11040*x11041)));
evalcond[5]=(((x11035*x11037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11036))+(((-1.0)*x11038*x11041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11045=((-1.0)*r21);
CheckValue<IkReal> x11048 = IKatan2WithCheck(IkReal(x11045),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11048.valid){
continue;
}
IkReal x11046=((1.0)*(x11048.value));
IkReal x11047=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11046)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11046)));
IkReal gconst4=(x11045*x11047);
IkReal gconst5=((1.0)*r20*x11047);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11049=((-1.0)*r21);
CheckValue<IkReal> x11052 = IKatan2WithCheck(IkReal(x11049),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11052.valid){
continue;
}
IkReal x11050=((1.0)*(x11052.value));
IkReal x11051=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11050)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11050)));
IkReal gconst4=(x11049*x11051);
IkReal gconst5=((1.0)*r20*x11051);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11053=((-1.0)*r21);
CheckValue<IkReal> x11056 = IKatan2WithCheck(IkReal(x11053),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11056.valid){
continue;
}
IkReal x11054=((1.0)*(x11056.value));
IkReal x11055=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11054)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11054)));
IkReal gconst4=(x11053*x11055);
IkReal gconst5=((1.0)*r20*x11055);
IkReal x11057=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11061=IKPowWithIntegerCheck(x11057,-1);
if(!x11061.valid){
continue;
}
IkReal x11058=x11061.value;
IkReal x11059=((1.0)*x11058);
IkReal x11060=((((-1.0)*x11059*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11059*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11058)));
j4eval[0]=x11060;
j4eval[1]=r02;
j4eval[2]=x11057;
j4eval[3]=IKsign(x11060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11062=(gconst5*r00);
IkReal x11063=(gconst4*r01);
CheckValue<IkReal> x11064 = IKatan2WithCheck(IkReal((x11062+(((-1.0)*x11063)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11064.valid){
continue;
}
CheckValue<IkReal> x11065=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11062*x11063))+(((-1.0)*(x11062*x11062)))+(((-1.0)*(x11063*x11063))))),-1);
if(!x11065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11064.value)+(((1.5707963267949)*(x11065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11066=IKsin(j4);
IkReal x11067=IKcos(j4);
IkReal x11068=(gconst4*r11);
IkReal x11069=(gconst5*r10);
IkReal x11070=(gconst4*r01);
IkReal x11071=(gconst5*r00);
IkReal x11072=(gconst4*r21);
IkReal x11073=(gconst5*r20);
IkReal x11074=((1.0)*x11067);
IkReal x11075=((1.0)*x11066);
evalcond[0]=(((x11066*x11072))+(((-1.0)*x11073*x11075))+(((-1.0)*r22*x11074)));
evalcond[1]=(((x11066*x11068))+(((-1.0)*x11069*x11075))+(((-1.0)*r12*x11074)));
evalcond[2]=((((-1.0)*x11070*x11074))+(((-1.0)*r02*x11075))+((x11067*x11071)));
evalcond[3]=((-1.0)+((x11066*x11070))+(((-1.0)*x11071*x11075))+(((-1.0)*r02*x11074)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11072*x11074))+((cj1*sj2))+(((-1.0)*r22*x11075))+((x11067*x11073)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11068*x11074))+((x11067*x11069))+(((-1.0)*r12*x11075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11076=((1.0)*gconst5);
CheckValue<IkReal> x11077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11076))+(((-1.0)*gconst4*r10)))),-1);
if(!x11077.valid){
continue;
}
CheckValue<IkReal> x11078 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11076))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11077.value)))+(x11078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11079=IKsin(j4);
IkReal x11080=IKcos(j4);
IkReal x11081=(gconst4*r11);
IkReal x11082=(gconst5*r10);
IkReal x11083=(gconst4*r01);
IkReal x11084=(gconst5*r00);
IkReal x11085=(gconst4*r21);
IkReal x11086=(gconst5*r20);
IkReal x11087=((1.0)*x11080);
IkReal x11088=((1.0)*x11079);
evalcond[0]=(((x11079*x11085))+(((-1.0)*r22*x11087))+(((-1.0)*x11086*x11088)));
evalcond[1]=(((x11079*x11081))+(((-1.0)*x11082*x11088))+(((-1.0)*r12*x11087)));
evalcond[2]=((((-1.0)*r02*x11088))+((x11080*x11084))+(((-1.0)*x11083*x11087)));
evalcond[3]=((-1.0)+((x11079*x11083))+(((-1.0)*r02*x11087))+(((-1.0)*x11084*x11088)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11088))+(((-1.0)*x11085*x11087))+((x11080*x11086)));
evalcond[5]=((((-1.0)*x11081*x11087))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11088))+((x11080*x11082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11089 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11089.valid){
continue;
}
CheckValue<IkReal> x11090=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11089.value)+(((1.5707963267949)*(x11090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11091=IKsin(j4);
IkReal x11092=IKcos(j4);
IkReal x11093=(gconst4*r11);
IkReal x11094=(gconst5*r10);
IkReal x11095=(gconst4*r01);
IkReal x11096=(gconst5*r00);
IkReal x11097=(gconst4*r21);
IkReal x11098=(gconst5*r20);
IkReal x11099=((1.0)*x11092);
IkReal x11100=((1.0)*x11091);
evalcond[0]=((((-1.0)*x11098*x11100))+(((-1.0)*r22*x11099))+((x11091*x11097)));
evalcond[1]=((((-1.0)*r12*x11099))+((x11091*x11093))+(((-1.0)*x11094*x11100)));
evalcond[2]=(((x11092*x11096))+(((-1.0)*x11095*x11099))+(((-1.0)*r02*x11100)));
evalcond[3]=((-1.0)+(((-1.0)*x11096*x11100))+(((-1.0)*r02*x11099))+((x11091*x11095)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11092*x11098))+(((-1.0)*r22*x11100))+(((-1.0)*x11097*x11099)));
evalcond[5]=(((x11092*x11094))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11093*x11099))+(((-1.0)*r12*x11100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11101=gconst4*gconst4;
IkReal x11102=gconst5*gconst5;
IkReal x11103=(r01*r20);
IkReal x11104=(gconst4*sj3);
IkReal x11105=(r01*r21);
IkReal x11106=((1.0)*cj3);
IkReal x11107=(r00*r21);
IkReal x11108=(r00*r20);
IkReal x11109=(cj3*gconst4*gconst5);
IkReal x11110=((1.0)*x11102);
CheckValue<IkReal> x11111=IKPowWithIntegerCheck(IKsign((((x11103*x11109))+((x11107*x11109))+(((-1.0)*r02*r22*x11106))+(((-1.0)*x11101*x11105*x11106))+(((-1.0)*x11102*x11106*x11108)))),-1);
if(!x11111.valid){
continue;
}
CheckValue<IkReal> x11112 = IKatan2WithCheck(IkReal((((r00*r22*x11104))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11104*x11108))+((sj3*x11101*x11107))+(((-1.0)*sj3*x11103*x11110))+((gconst5*x11104*x11105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11111.value)))+(x11112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11113=IKsin(j4);
IkReal x11114=IKcos(j4);
IkReal x11115=(sj1*sj2);
IkReal x11116=(gconst5*sj3);
IkReal x11117=(gconst4*r11);
IkReal x11118=(gconst5*r10);
IkReal x11119=((1.0)*cj1);
IkReal x11120=(gconst4*r01);
IkReal x11121=(cj2*sj1);
IkReal x11122=(gconst5*r00);
IkReal x11123=(gconst4*sj3);
IkReal x11124=(cj3*gconst5);
IkReal x11125=(cj3*gconst4);
IkReal x11126=(gconst4*r21);
IkReal x11127=(cj2*x11119);
IkReal x11128=((1.0)*x11114);
IkReal x11129=((1.0)*x11113);
IkReal x11130=(cj3*x11113);
IkReal x11131=(cj3*x11114);
evalcond[0]=((((-1.0)*gconst5*r20*x11129))+((x11113*x11126))+(((-1.0)*r22*x11128)));
evalcond[1]=((((-1.0)*r12*x11128))+((x11113*x11117))+(((-1.0)*x11118*x11129)));
evalcond[2]=((-1.0)+((x11113*x11120))+(((-1.0)*x11122*x11129))+(((-1.0)*r02*x11128)));
evalcond[3]=(((r02*x11130))+((x11120*x11131))+(((-1.0)*cj3*x11122*x11128))+((r00*x11123))+((r01*x11116)));
evalcond[4]=(((r00*x11114*x11116))+(((-1.0)*sj3*x11120*x11128))+(((-1.0)*r02*sj3*x11129))+((r00*x11125))+((r01*x11124)));
evalcond[5]=(((r22*x11130))+((r21*x11114*x11125))+((cj1*sj2))+x11121+((r21*x11116))+(((-1.0)*r20*x11124*x11128))+((r20*x11123)));
evalcond[6]=((((-1.0)*x11127))+(((-1.0)*cj3*x11118*x11128))+((x11117*x11131))+((r10*x11123))+x11115+((r11*x11116))+((r12*x11130)));
evalcond[7]=((((-1.0)*x11127))+((r21*x11124))+x11115+((r20*x11114*x11116))+(((-1.0)*r21*x11123*x11128))+(((-1.0)*r22*sj3*x11129))+((r20*x11125)));
evalcond[8]=((((-1.0)*x11121))+(((-1.0)*r12*sj3*x11129))+((r10*x11125))+((r11*x11124))+(((-1.0)*sj2*x11119))+(((-1.0)*sj3*x11117*x11128))+((r10*x11114*x11116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11132=((1.0)*gconst5);
CheckValue<IkReal> x11133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11132))+(((-1.0)*gconst4*r10)))),-1);
if(!x11133.valid){
continue;
}
CheckValue<IkReal> x11134 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11132))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11133.value)))+(x11134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11135=IKsin(j4);
IkReal x11136=IKcos(j4);
IkReal x11137=(sj1*sj2);
IkReal x11138=(gconst5*sj3);
IkReal x11139=(gconst4*r11);
IkReal x11140=(gconst5*r10);
IkReal x11141=((1.0)*cj1);
IkReal x11142=(gconst4*r01);
IkReal x11143=(cj2*sj1);
IkReal x11144=(gconst5*r00);
IkReal x11145=(gconst4*sj3);
IkReal x11146=(cj3*gconst5);
IkReal x11147=(cj3*gconst4);
IkReal x11148=(gconst4*r21);
IkReal x11149=(cj2*x11141);
IkReal x11150=((1.0)*x11136);
IkReal x11151=((1.0)*x11135);
IkReal x11152=(cj3*x11135);
IkReal x11153=(cj3*x11136);
evalcond[0]=((((-1.0)*gconst5*r20*x11151))+((x11135*x11148))+(((-1.0)*r22*x11150)));
evalcond[1]=((((-1.0)*x11140*x11151))+((x11135*x11139))+(((-1.0)*r12*x11150)));
evalcond[2]=((-1.0)+((x11135*x11142))+(((-1.0)*r02*x11150))+(((-1.0)*x11144*x11151)));
evalcond[3]=(((r00*x11145))+((r02*x11152))+(((-1.0)*cj3*x11144*x11150))+((x11142*x11153))+((r01*x11138)));
evalcond[4]=(((r01*x11146))+((r00*x11147))+(((-1.0)*sj3*x11142*x11150))+((r00*x11136*x11138))+(((-1.0)*r02*sj3*x11151)));
evalcond[5]=(((r21*x11136*x11147))+((r22*x11152))+((cj1*sj2))+((r21*x11138))+x11143+(((-1.0)*r20*x11146*x11150))+((r20*x11145)));
evalcond[6]=((((-1.0)*cj3*x11140*x11150))+x11137+((r12*x11152))+((r10*x11145))+((r11*x11138))+((x11139*x11153))+(((-1.0)*x11149)));
evalcond[7]=((((-1.0)*r21*x11145*x11150))+((r21*x11146))+x11137+((r20*x11136*x11138))+((r20*x11147))+(((-1.0)*x11149))+(((-1.0)*r22*sj3*x11151)));
evalcond[8]=((((-1.0)*sj3*x11139*x11150))+(((-1.0)*r12*sj3*x11151))+(((-1.0)*x11143))+((r11*x11146))+((r10*x11136*x11138))+((r10*x11147))+(((-1.0)*sj2*x11141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11154 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11154.valid){
continue;
}
CheckValue<IkReal> x11155=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11154.value)+(((1.5707963267949)*(x11155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11156=IKsin(j4);
IkReal x11157=IKcos(j4);
IkReal x11158=(sj1*sj2);
IkReal x11159=(gconst5*sj3);
IkReal x11160=(gconst4*r11);
IkReal x11161=(gconst5*r10);
IkReal x11162=((1.0)*cj1);
IkReal x11163=(gconst4*r01);
IkReal x11164=(cj2*sj1);
IkReal x11165=(gconst5*r00);
IkReal x11166=(gconst4*sj3);
IkReal x11167=(cj3*gconst5);
IkReal x11168=(cj3*gconst4);
IkReal x11169=(gconst4*r21);
IkReal x11170=(cj2*x11162);
IkReal x11171=((1.0)*x11157);
IkReal x11172=((1.0)*x11156);
IkReal x11173=(cj3*x11156);
IkReal x11174=(cj3*x11157);
evalcond[0]=((((-1.0)*r22*x11171))+((x11156*x11169))+(((-1.0)*gconst5*r20*x11172)));
evalcond[1]=((((-1.0)*x11161*x11172))+(((-1.0)*r12*x11171))+((x11156*x11160)));
evalcond[2]=((-1.0)+((x11156*x11163))+(((-1.0)*x11165*x11172))+(((-1.0)*r02*x11171)));
evalcond[3]=(((r01*x11159))+((r00*x11166))+((x11163*x11174))+((r02*x11173))+(((-1.0)*cj3*x11165*x11171)));
evalcond[4]=(((r01*x11167))+((r00*x11157*x11159))+((r00*x11168))+(((-1.0)*r02*sj3*x11172))+(((-1.0)*sj3*x11163*x11171)));
evalcond[5]=((((-1.0)*r20*x11167*x11171))+((r20*x11166))+((r21*x11159))+((cj1*sj2))+x11164+((r22*x11173))+((r21*x11157*x11168)));
evalcond[6]=(((x11160*x11174))+((r12*x11173))+(((-1.0)*x11170))+((r11*x11159))+x11158+(((-1.0)*cj3*x11161*x11171))+((r10*x11166)));
evalcond[7]=((((-1.0)*r21*x11166*x11171))+(((-1.0)*r22*sj3*x11172))+((r20*x11168))+(((-1.0)*x11170))+x11158+((r21*x11167))+((r20*x11157*x11159)));
evalcond[8]=(((r10*x11157*x11159))+(((-1.0)*sj2*x11162))+((r11*x11167))+(((-1.0)*x11164))+(((-1.0)*r12*sj3*x11172))+(((-1.0)*sj3*x11160*x11171))+((r10*x11168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11175=((-1.0)*r21);
CheckValue<IkReal> x11178 = IKatan2WithCheck(IkReal(x11175),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11178.valid){
continue;
}
IkReal x11176=((1.0)*(x11178.value));
IkReal x11177=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11176)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11176)));
IkReal gconst4=(x11175*x11177);
IkReal gconst5=((1.0)*r20*x11177);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11179=((-1.0)*r21);
CheckValue<IkReal> x11182 = IKatan2WithCheck(IkReal(x11179),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11182.valid){
continue;
}
IkReal x11180=((1.0)*(x11182.value));
IkReal x11181=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11180)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11180)));
IkReal gconst4=(x11179*x11181);
IkReal gconst5=((1.0)*r20*x11181);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11183=((-1.0)*r21);
CheckValue<IkReal> x11186 = IKatan2WithCheck(IkReal(x11183),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11186.valid){
continue;
}
IkReal x11184=((1.0)*(x11186.value));
IkReal x11185=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11184)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11184)));
IkReal gconst4=(x11183*x11185);
IkReal gconst5=((1.0)*r20*x11185);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11187=((-1.0)*r21);
CheckValue<IkReal> x11190 = IKatan2WithCheck(IkReal(x11187),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11190.valid){
continue;
}
IkReal x11188=((1.0)*(x11190.value));
IkReal x11189=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11188)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11188)));
IkReal gconst4=(x11187*x11189);
IkReal gconst5=((1.0)*r20*x11189);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11191=((-1.0)*r21);
CheckValue<IkReal> x11194 = IKatan2WithCheck(IkReal(x11191),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11194.valid){
continue;
}
IkReal x11192=((1.0)*(x11194.value));
IkReal x11193=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11192)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11192)));
IkReal gconst4=(x11191*x11193);
IkReal gconst5=((1.0)*r20*x11193);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11195=((-1.0)*r21);
CheckValue<IkReal> x11198 = IKatan2WithCheck(IkReal(x11195),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11198.valid){
continue;
}
IkReal x11196=((1.0)*(x11198.value));
IkReal x11197=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11196)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11196)));
IkReal gconst4=(x11195*x11197);
IkReal gconst5=((1.0)*r20*x11197);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11199=(gconst5*r00);
IkReal x11200=(gconst4*r01);
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal((x11199+(((-1.0)*x11200)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
CheckValue<IkReal> x11202=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11199*x11200))+(x11200*x11200)+(r02*r02)+(x11199*x11199))),-1);
if(!x11202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11201.value)+(((1.5707963267949)*(x11202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11203=IKsin(j4);
IkReal x11204=IKcos(j4);
IkReal x11205=(gconst4*r11);
IkReal x11206=(gconst5*r10);
IkReal x11207=(gconst4*r01);
IkReal x11208=(gconst5*r00);
IkReal x11209=(gconst4*r21);
IkReal x11210=(gconst5*r20);
IkReal x11211=((1.0)*x11204);
IkReal x11212=((1.0)*x11203);
evalcond[0]=(((x11203*x11209))+(((-1.0)*x11210*x11212))+(((-1.0)*r22*x11211)));
evalcond[1]=((((-1.0)*r12*x11211))+((x11203*x11205))+(((-1.0)*x11206*x11212)));
evalcond[2]=(((x11204*x11208))+(((-1.0)*x11207*x11211))+(((-1.0)*r02*x11212)));
evalcond[3]=((1.0)+((x11203*x11207))+(((-1.0)*r02*x11211))+(((-1.0)*x11208*x11212)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11204*x11206))+(((-1.0)*r12*x11212))+(((-1.0)*x11205*x11211)));
evalcond[5]=((((-1.0)*x11209*x11211))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11204*x11210))+(((-1.0)*r22*x11212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11213=((1.0)*gconst5);
CheckValue<IkReal> x11214 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11214.valid){
continue;
}
CheckValue<IkReal> x11215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11213))+(((-1.0)*gconst4*r20)))),-1);
if(!x11215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11214.value)+(((1.5707963267949)*(x11215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11216=IKsin(j4);
IkReal x11217=IKcos(j4);
IkReal x11218=(gconst4*r11);
IkReal x11219=(gconst5*r10);
IkReal x11220=(gconst4*r01);
IkReal x11221=(gconst5*r00);
IkReal x11222=(gconst4*r21);
IkReal x11223=(gconst5*r20);
IkReal x11224=((1.0)*x11217);
IkReal x11225=((1.0)*x11216);
evalcond[0]=((((-1.0)*x11223*x11225))+((x11216*x11222))+(((-1.0)*r22*x11224)));
evalcond[1]=(((x11216*x11218))+(((-1.0)*x11219*x11225))+(((-1.0)*r12*x11224)));
evalcond[2]=((((-1.0)*x11220*x11224))+((x11217*x11221))+(((-1.0)*r02*x11225)));
evalcond[3]=((1.0)+((x11216*x11220))+(((-1.0)*x11221*x11225))+(((-1.0)*r02*x11224)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11217*x11219))+(((-1.0)*x11218*x11224))+(((-1.0)*r12*x11225)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11222*x11224))+((x11217*x11223))+(((-1.0)*r22*x11225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11226=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11226.valid){
continue;
}
CheckValue<IkReal> x11227 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11226.value)))+(x11227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11228=IKsin(j4);
IkReal x11229=IKcos(j4);
IkReal x11230=(gconst4*r11);
IkReal x11231=(gconst5*r10);
IkReal x11232=(gconst4*r01);
IkReal x11233=(gconst5*r00);
IkReal x11234=(gconst4*r21);
IkReal x11235=(gconst5*r20);
IkReal x11236=((1.0)*x11229);
IkReal x11237=((1.0)*x11228);
evalcond[0]=(((x11228*x11234))+(((-1.0)*x11235*x11237))+(((-1.0)*r22*x11236)));
evalcond[1]=((((-1.0)*x11231*x11237))+((x11228*x11230))+(((-1.0)*r12*x11236)));
evalcond[2]=((((-1.0)*r02*x11237))+(((-1.0)*x11232*x11236))+((x11229*x11233)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11236))+(((-1.0)*x11233*x11237))+((x11228*x11232)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11230*x11236))+((cj1*sj2))+((x11229*x11231))+(((-1.0)*r12*x11237)));
evalcond[5]=(((x11229*x11235))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11237))+(((-1.0)*x11234*x11236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11238=((-1.0)*r21);
CheckValue<IkReal> x11241 = IKatan2WithCheck(IkReal(x11238),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11241.valid){
continue;
}
IkReal x11239=((1.0)*(x11241.value));
IkReal x11240=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11239)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11239)));
IkReal gconst4=(x11238*x11240);
IkReal gconst5=((1.0)*r20*x11240);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11242=((-1.0)*r21);
CheckValue<IkReal> x11245 = IKatan2WithCheck(IkReal(x11242),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11245.valid){
continue;
}
IkReal x11243=((1.0)*(x11245.value));
IkReal x11244=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11243)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11243)));
IkReal gconst4=(x11242*x11244);
IkReal gconst5=((1.0)*r20*x11244);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11246=((-1.0)*r21);
CheckValue<IkReal> x11249 = IKatan2WithCheck(IkReal(x11246),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11249.valid){
continue;
}
IkReal x11247=((1.0)*(x11249.value));
IkReal x11248=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11247)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11247)));
IkReal gconst4=(x11246*x11248);
IkReal gconst5=((1.0)*r20*x11248);
IkReal x11250=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11254=IKPowWithIntegerCheck(x11250,-1);
if(!x11254.valid){
continue;
}
IkReal x11251=x11254.value;
IkReal x11252=((1.0)*x11251);
IkReal x11253=((((-2.0)*r00*r01*r20*r21*x11251))+(((-1.0)*(r02*r02)))+(((-1.0)*x11252*(r00*r00)*(r20*r20)))+(((-1.0)*x11252*(r01*r01)*(r21*r21))));
j4eval[0]=x11253;
j4eval[1]=IKsign(x11253);
j4eval[2]=r02;
j4eval[3]=x11250;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11255=(gconst4*r01);
IkReal x11256=(gconst5*r00);
CheckValue<IkReal> x11257=IKPowWithIntegerCheck(IKsign(((((2.0)*x11255*x11256))+(((-1.0)*(x11255*x11255)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11256*x11256))))),-1);
if(!x11257.valid){
continue;
}
CheckValue<IkReal> x11258 = IKatan2WithCheck(IkReal(((((-1.0)*x11256))+x11255)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11257.value)))+(x11258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11259=IKcos(j4);
IkReal x11260=IKsin(j4);
IkReal x11261=(gconst4*r11);
IkReal x11262=(gconst5*r10);
IkReal x11263=(gconst5*r00);
IkReal x11264=(gconst5*r20);
IkReal x11265=((1.0)*x11259);
IkReal x11266=(gconst4*x11259);
IkReal x11267=((1.0)*x11260);
IkReal x11268=(gconst4*x11260);
evalcond[0]=((((-1.0)*x11263*x11265))+((r02*x11260))+((r01*x11266)));
evalcond[1]=(((r21*x11268))+(((-1.0)*r22*x11265))+(((-1.0)*x11264*x11267)));
evalcond[2]=(((x11260*x11261))+(((-1.0)*r12*x11265))+(((-1.0)*x11262*x11267)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11265))+(((-1.0)*x11263*x11267))+((r01*x11268)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11259*x11261))+(((-1.0)*x11262*x11265))+((r12*x11260)));
evalcond[5]=(((r21*x11266))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11260))+(((-1.0)*x11264*x11265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11269=((1.0)*gconst5);
CheckValue<IkReal> x11270 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11269))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11270.valid){
continue;
}
CheckValue<IkReal> x11271=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11269))+(((-1.0)*gconst4*r20)))),-1);
if(!x11271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11270.value)+(((1.5707963267949)*(x11271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11272=IKcos(j4);
IkReal x11273=IKsin(j4);
IkReal x11274=(gconst4*r11);
IkReal x11275=(gconst5*r10);
IkReal x11276=(gconst5*r00);
IkReal x11277=(gconst5*r20);
IkReal x11278=((1.0)*x11272);
IkReal x11279=(gconst4*x11272);
IkReal x11280=((1.0)*x11273);
IkReal x11281=(gconst4*x11273);
evalcond[0]=(((r01*x11279))+(((-1.0)*x11276*x11278))+((r02*x11273)));
evalcond[1]=(((r21*x11281))+(((-1.0)*r22*x11278))+(((-1.0)*x11277*x11280)));
evalcond[2]=(((x11273*x11274))+(((-1.0)*x11275*x11280))+(((-1.0)*r12*x11278)));
evalcond[3]=((1.0)+(((-1.0)*x11276*x11280))+(((-1.0)*r02*x11278))+((r01*x11281)));
evalcond[4]=(((cj2*sj1))+((r12*x11273))+((cj1*sj2))+(((-1.0)*x11275*x11278))+((x11272*x11274)));
evalcond[5]=(((r22*x11273))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11279))+(((-1.0)*x11277*x11278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11282=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11282.valid){
continue;
}
CheckValue<IkReal> x11283 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11282.value)))+(x11283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11284=IKcos(j4);
IkReal x11285=IKsin(j4);
IkReal x11286=(gconst4*r11);
IkReal x11287=(gconst5*r10);
IkReal x11288=(gconst5*r00);
IkReal x11289=(gconst5*r20);
IkReal x11290=((1.0)*x11284);
IkReal x11291=(gconst4*x11284);
IkReal x11292=((1.0)*x11285);
IkReal x11293=(gconst4*x11285);
evalcond[0]=(((r01*x11291))+((r02*x11285))+(((-1.0)*x11288*x11290)));
evalcond[1]=((((-1.0)*r22*x11290))+((r21*x11293))+(((-1.0)*x11289*x11292)));
evalcond[2]=((((-1.0)*x11287*x11292))+(((-1.0)*r12*x11290))+((x11285*x11286)));
evalcond[3]=((1.0)+((r01*x11293))+(((-1.0)*r02*x11290))+(((-1.0)*x11288*x11292)));
evalcond[4]=(((x11284*x11286))+((cj2*sj1))+((cj1*sj2))+((r12*x11285))+(((-1.0)*x11287*x11290)));
evalcond[5]=(((r22*x11285))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11291))+(((-1.0)*x11289*x11290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11294=((-1.0)*r21);
CheckValue<IkReal> x11297 = IKatan2WithCheck(IkReal(x11294),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11297.valid){
continue;
}
IkReal x11295=((1.0)*(x11297.value));
IkReal x11296=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11295)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11295)));
IkReal gconst4=(x11294*x11296);
IkReal gconst5=((1.0)*r20*x11296);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11298=((-1.0)*r21);
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(x11298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
IkReal x11299=((1.0)*(x11301.value));
IkReal x11300=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11299)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11299)));
IkReal gconst4=(x11298*x11300);
IkReal gconst5=((1.0)*r20*x11300);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11302=((-1.0)*r21);
CheckValue<IkReal> x11305 = IKatan2WithCheck(IkReal(x11302),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11305.valid){
continue;
}
IkReal x11303=((1.0)*(x11305.value));
IkReal x11304=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11303)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11303)));
IkReal gconst4=(x11302*x11304);
IkReal gconst5=((1.0)*r20*x11304);
IkReal x11306=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11310=IKPowWithIntegerCheck(x11306,-1);
if(!x11310.valid){
continue;
}
IkReal x11307=x11310.value;
IkReal x11308=((1.0)*x11307);
IkReal x11309=((((-1.0)*(r02*r02)))+(((-1.0)*x11308*(r01*r01)*(r21*r21)))+(((-1.0)*x11308*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11307)));
j4eval[0]=x11309;
j4eval[1]=IKsign(x11309);
j4eval[2]=r02;
j4eval[3]=x11306;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11311=(gconst4*r01);
IkReal x11312=(gconst5*r00);
CheckValue<IkReal> x11313 = IKatan2WithCheck(IkReal((x11311+(((-1.0)*x11312)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11313.valid){
continue;
}
CheckValue<IkReal> x11314=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11311*x11312))+(((-1.0)*(x11312*x11312)))+(((-1.0)*(x11311*x11311))))),-1);
if(!x11314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11313.value)+(((1.5707963267949)*(x11314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11315=IKcos(j4);
IkReal x11316=IKsin(j4);
IkReal x11317=(gconst5*r10);
IkReal x11318=(gconst5*r00);
IkReal x11319=(gconst5*r20);
IkReal x11320=((1.0)*x11315);
IkReal x11321=(gconst4*x11316);
IkReal x11322=(gconst4*x11315);
IkReal x11323=((1.0)*x11316);
evalcond[0]=(((r02*x11316))+(((-1.0)*x11318*x11320))+((r01*x11322)));
evalcond[1]=((((-1.0)*r22*x11320))+(((-1.0)*x11319*x11323))+((r21*x11321)));
evalcond[2]=((((-1.0)*x11317*x11323))+(((-1.0)*r12*x11320))+((r11*x11321)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11320))+(((-1.0)*x11318*x11323))+((r01*x11321)));
evalcond[4]=(((cj2*sj1))+((r22*x11316))+((cj1*sj2))+(((-1.0)*x11319*x11320))+((r21*x11322)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11317*x11320))+((cj1*cj2))+((r12*x11316))+((r11*x11322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11324=((1.0)*gconst5);
CheckValue<IkReal> x11325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11324))+(((-1.0)*gconst4*r20)))),-1);
if(!x11325.valid){
continue;
}
CheckValue<IkReal> x11326 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11325.value)))+(x11326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11327=IKcos(j4);
IkReal x11328=IKsin(j4);
IkReal x11329=(gconst5*r10);
IkReal x11330=(gconst5*r00);
IkReal x11331=(gconst5*r20);
IkReal x11332=((1.0)*x11327);
IkReal x11333=(gconst4*x11328);
IkReal x11334=(gconst4*x11327);
IkReal x11335=((1.0)*x11328);
evalcond[0]=(((r02*x11328))+(((-1.0)*x11330*x11332))+((r01*x11334)));
evalcond[1]=((((-1.0)*r22*x11332))+(((-1.0)*x11331*x11335))+((r21*x11333)));
evalcond[2]=((((-1.0)*r12*x11332))+((r11*x11333))+(((-1.0)*x11329*x11335)));
evalcond[3]=((1.0)+(((-1.0)*x11330*x11335))+((r01*x11333))+(((-1.0)*r02*x11332)));
evalcond[4]=(((cj2*sj1))+((r22*x11328))+((cj1*sj2))+(((-1.0)*x11331*x11332))+((r21*x11334)));
evalcond[5]=(((r11*x11334))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x11328))+(((-1.0)*x11329*x11332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11336=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11336.valid){
continue;
}
CheckValue<IkReal> x11337 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11336.value)))+(x11337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11338=IKcos(j4);
IkReal x11339=IKsin(j4);
IkReal x11340=(gconst5*r10);
IkReal x11341=(gconst5*r00);
IkReal x11342=(gconst5*r20);
IkReal x11343=((1.0)*x11338);
IkReal x11344=(gconst4*x11339);
IkReal x11345=(gconst4*x11338);
IkReal x11346=((1.0)*x11339);
evalcond[0]=(((r01*x11345))+(((-1.0)*x11341*x11343))+((r02*x11339)));
evalcond[1]=((((-1.0)*x11342*x11346))+(((-1.0)*r22*x11343))+((r21*x11344)));
evalcond[2]=(((r11*x11344))+(((-1.0)*x11340*x11346))+(((-1.0)*r12*x11343)));
evalcond[3]=((1.0)+((r01*x11344))+(((-1.0)*x11341*x11346))+(((-1.0)*r02*x11343)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11342*x11343))+((cj1*sj2))+((r22*x11339))+((r21*x11345)));
evalcond[5]=(((r11*x11345))+((r12*x11339))+(((-1.0)*sj1*sj2))+(((-1.0)*x11340*x11343))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11347=((-1.0)*r21);
CheckValue<IkReal> x11350 = IKatan2WithCheck(IkReal(x11347),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11350.valid){
continue;
}
IkReal x11348=((1.0)*(x11350.value));
IkReal x11349=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11348)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11348)));
IkReal gconst4=(x11347*x11349);
IkReal gconst5=((1.0)*r20*x11349);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11351=((-1.0)*r21);
CheckValue<IkReal> x11354 = IKatan2WithCheck(IkReal(x11351),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11354.valid){
continue;
}
IkReal x11352=((1.0)*(x11354.value));
IkReal x11353=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11352)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11352)));
IkReal gconst4=(x11351*x11353);
IkReal gconst5=((1.0)*r20*x11353);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11355=((-1.0)*r21);
CheckValue<IkReal> x11358 = IKatan2WithCheck(IkReal(x11355),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11358.valid){
continue;
}
IkReal x11356=((1.0)*(x11358.value));
IkReal x11357=x10149;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11356)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11356)));
IkReal gconst4=(x11355*x11357);
IkReal gconst5=((1.0)*r20*x11357);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11359=(gconst5*r00);
IkReal x11360=(gconst4*r01);
CheckValue<IkReal> x11361=IKPowWithIntegerCheck(IKsign(((x11360*x11360)+(((-2.0)*x11359*x11360))+(r02*r02)+(x11359*x11359))),-1);
if(!x11361.valid){
continue;
}
CheckValue<IkReal> x11362 = IKatan2WithCheck(IkReal(((((-1.0)*x11360))+x11359)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11361.value)))+(x11362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11363=IKsin(j4);
IkReal x11364=IKcos(j4);
IkReal x11365=(gconst4*r11);
IkReal x11366=(gconst5*r10);
IkReal x11367=(gconst5*r00);
IkReal x11368=(gconst5*r20);
IkReal x11369=((1.0)*x11364);
IkReal x11370=(gconst4*x11363);
IkReal x11371=((1.0)*x11363);
evalcond[0]=(((r21*x11370))+(((-1.0)*r22*x11369))+(((-1.0)*x11368*x11371)));
evalcond[1]=((((-1.0)*x11366*x11371))+(((-1.0)*r12*x11369))+((x11363*x11365)));
evalcond[2]=((((-1.0)*gconst4*r01*x11369))+(((-1.0)*r02*x11371))+((x11364*x11367)));
evalcond[3]=((1.0)+((r01*x11370))+(((-1.0)*r02*x11369))+(((-1.0)*x11367*x11371)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11371))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11369))+((x11364*x11368)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11371))+((cj1*cj2))+((x11364*x11366))+(((-1.0)*x11365*x11369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11372=((1.0)*gconst5);
CheckValue<IkReal> x11373 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11372))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11373.valid){
continue;
}
CheckValue<IkReal> x11374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11372))+(((-1.0)*gconst4*r20)))),-1);
if(!x11374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11373.value)+(((1.5707963267949)*(x11374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11375=IKsin(j4);
IkReal x11376=IKcos(j4);
IkReal x11377=(gconst4*r11);
IkReal x11378=(gconst5*r10);
IkReal x11379=(gconst5*r00);
IkReal x11380=(gconst5*r20);
IkReal x11381=((1.0)*x11376);
IkReal x11382=(gconst4*x11375);
IkReal x11383=((1.0)*x11375);
evalcond[0]=((((-1.0)*x11380*x11383))+(((-1.0)*r22*x11381))+((r21*x11382)));
evalcond[1]=((((-1.0)*x11378*x11383))+((x11375*x11377))+(((-1.0)*r12*x11381)));
evalcond[2]=(((x11376*x11379))+(((-1.0)*r02*x11383))+(((-1.0)*gconst4*r01*x11381)));
evalcond[3]=((1.0)+(((-1.0)*x11379*x11383))+((r01*x11382))+(((-1.0)*r02*x11381)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11381))+((cj1*sj2))+(((-1.0)*r22*x11383))+((x11376*x11380)));
evalcond[5]=(((x11376*x11378))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11383))+((cj1*cj2))+(((-1.0)*x11377*x11381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11384=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11384.valid){
continue;
}
CheckValue<IkReal> x11385 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11384.value)))+(x11385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11386=IKsin(j4);
IkReal x11387=IKcos(j4);
IkReal x11388=(gconst4*r11);
IkReal x11389=(gconst5*r10);
IkReal x11390=(gconst5*r00);
IkReal x11391=(gconst5*r20);
IkReal x11392=((1.0)*x11387);
IkReal x11393=(gconst4*x11386);
IkReal x11394=((1.0)*x11386);
evalcond[0]=((((-1.0)*x11391*x11394))+(((-1.0)*r22*x11392))+((r21*x11393)));
evalcond[1]=(((x11386*x11388))+(((-1.0)*r12*x11392))+(((-1.0)*x11389*x11394)));
evalcond[2]=((((-1.0)*gconst4*r01*x11392))+((x11387*x11390))+(((-1.0)*r02*x11394)));
evalcond[3]=((1.0)+(((-1.0)*x11390*x11394))+((r01*x11393))+(((-1.0)*r02*x11392)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11392))+((x11387*x11391))+(((-1.0)*r22*x11394)));
evalcond[5]=(((x11387*x11389))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x11394))+(((-1.0)*x11388*x11392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11395=((-1.0)*r21);
IkReal x11396=((-1.0)*r20);
CheckValue<IkReal> x11398 = IKatan2WithCheck(IkReal(x11395),IkReal(x11396),IKFAST_ATAN2_MAGTHRESH);
if(!x11398.valid){
continue;
}
IkReal x11397=((1.0)*(x11398.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11397)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11396);
rxp0_2=(py*r00);
rxp1_0=(py*x11395);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11397)));
IkReal gconst4=x11395;
IkReal gconst5=((1.0)*r20);
IkReal x11399=((1.0)*r01*r21);
IkReal x11400=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11400))+(((-1.0)*x11399)));
j4eval[1]=((((-1.0)*cj3*x11399))+(((-1.0)*cj3*x11400)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11401=((-1.0)*r21);
IkReal x11402=((-1.0)*r20);
CheckValue<IkReal> x11404 = IKatan2WithCheck(IkReal(x11401),IkReal(x11402),IKFAST_ATAN2_MAGTHRESH);
if(!x11404.valid){
continue;
}
IkReal x11403=((1.0)*(x11404.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11403)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11402);
rxp0_2=(py*r00);
rxp1_0=(py*x11401);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11403)));
IkReal gconst4=x11401;
IkReal gconst5=((1.0)*r20);
IkReal x11405=((1.0)*r01*r21);
IkReal x11406=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11406))+(((-1.0)*x11405)));
j4eval[1]=(((sj3*x11405))+((sj3*x11406)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11407=((-1.0)*r21);
IkReal x11408=((-1.0)*r20);
CheckValue<IkReal> x11410 = IKatan2WithCheck(IkReal(x11407),IkReal(x11408),IKFAST_ATAN2_MAGTHRESH);
if(!x11410.valid){
continue;
}
IkReal x11409=((1.0)*(x11410.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11409)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11408);
rxp0_2=(py*r00);
rxp1_0=(py*x11407);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11409)));
IkReal gconst4=x11407;
IkReal gconst5=((1.0)*r20);
IkReal x11411=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11411))+(((-1.0)*r00*r20*x11411)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11412=((1.0)*gconst5);
CheckValue<IkReal> x11413=IKPowWithIntegerCheck(cj3,-1);
if(!x11413.valid){
continue;
}
CheckValue<IkReal> x11414=IKPowWithIntegerCheck(r12,-1);
if(!x11414.valid){
continue;
}
CheckValue<IkReal> x11415=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11412))+((cj3*gconst4*r01))),-1);
if(!x11415.valid){
continue;
}
if( IKabs(((x11413.value)*(x11414.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11415.value)*(((((-1.0)*r01*sj3*x11412))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11413.value)*(x11414.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11415.value)*(((((-1.0)*r01*sj3*x11412))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11413.value)*(x11414.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11415.value)*(((((-1.0)*r01*sj3*x11412))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11416=IKsin(j4);
IkReal x11417=IKcos(j4);
IkReal x11418=(cj2*sj1);
IkReal x11419=(cj1*sj2);
IkReal x11420=(sj1*sj2);
IkReal x11421=(gconst5*sj3);
IkReal x11422=(gconst5*r00);
IkReal x11423=(cj3*gconst5);
IkReal x11424=(gconst4*sj3);
IkReal x11425=(cj3*gconst4);
IkReal x11426=(cj1*cj2);
IkReal x11427=((1.0)*x11416);
IkReal x11428=(gconst4*x11416);
IkReal x11429=((1.0)*x11417);
IkReal x11430=(x11418+x11419);
IkReal x11431=(x11417*x11421);
IkReal x11432=(x11417*x11425);
evalcond[0]=((-1.0)*r12*x11417);
evalcond[1]=(((r21*x11428))+(((-1.0)*gconst5*r20*x11427)));
evalcond[2]=(((cj3*r12*x11416))+x11426+(((-1.0)*x11420)));
evalcond[3]=(x11430+(((-1.0)*r12*sj3*x11427)));
evalcond[4]=((1.0)+((r01*x11428))+(((-1.0)*x11422*x11427)));
evalcond[5]=(((r01*x11432))+((r01*x11421))+(((-1.0)*cj3*x11422*x11429))+((r00*x11424)));
evalcond[6]=((((-1.0)*r01*x11424*x11429))+((r01*x11423))+((r00*x11425))+((r00*x11431)));
evalcond[7]=(((r20*x11424))+x11430+(((-1.0)*r20*x11423*x11429))+((r21*x11421))+((r21*x11432)));
evalcond[8]=(((r20*x11431))+((r20*x11425))+x11420+((r21*x11423))+(((-1.0)*x11426))+(((-1.0)*r21*x11424*x11429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11433=((1.0)*gconst4);
IkReal x11434=(gconst5*r00);
CheckValue<IkReal> x11435=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11434))),-1);
if(!x11435.valid){
continue;
}
CheckValue<IkReal> x11436=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11433))+((sj3*x11434))),-1);
if(!x11436.valid){
continue;
}
if( IKabs(((-1.0)*(x11435.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11436.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11433)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11435.value)))+IKsqr(((x11436.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11433))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11435.value)), ((x11436.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11433))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11437=IKsin(j4);
IkReal x11438=IKcos(j4);
IkReal x11439=(cj2*sj1);
IkReal x11440=(cj1*sj2);
IkReal x11441=(sj1*sj2);
IkReal x11442=(gconst5*sj3);
IkReal x11443=(gconst5*r00);
IkReal x11444=(cj3*gconst5);
IkReal x11445=(gconst4*sj3);
IkReal x11446=(cj3*gconst4);
IkReal x11447=(cj1*cj2);
IkReal x11448=((1.0)*x11437);
IkReal x11449=(gconst4*x11437);
IkReal x11450=((1.0)*x11438);
IkReal x11451=(x11439+x11440);
IkReal x11452=(x11438*x11442);
IkReal x11453=(x11438*x11446);
evalcond[0]=((-1.0)*r12*x11438);
evalcond[1]=((((-1.0)*gconst5*r20*x11448))+((r21*x11449)));
evalcond[2]=((((-1.0)*x11441))+x11447+((cj3*r12*x11437)));
evalcond[3]=(x11451+(((-1.0)*r12*sj3*x11448)));
evalcond[4]=((1.0)+((r01*x11449))+(((-1.0)*x11443*x11448)));
evalcond[5]=(((r00*x11445))+((r01*x11453))+(((-1.0)*cj3*x11443*x11450))+((r01*x11442)));
evalcond[6]=(((r00*x11446))+(((-1.0)*r01*x11445*x11450))+((r00*x11452))+((r01*x11444)));
evalcond[7]=(x11451+((r21*x11453))+(((-1.0)*r20*x11444*x11450))+((r20*x11445))+((r21*x11442)));
evalcond[8]=((((-1.0)*x11447))+x11441+((r20*x11452))+(((-1.0)*r21*x11445*x11450))+((r20*x11446))+((r21*x11444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11454=((1.0)*gconst5);
IkReal x11455=(gconst4*r01);
CheckValue<IkReal> x11456=IKPowWithIntegerCheck(((((-1.0)*r00*x11454))+x11455),-1);
if(!x11456.valid){
continue;
}
CheckValue<IkReal> x11457=IKPowWithIntegerCheck((((cj3*x11455))+(((-1.0)*cj3*r00*x11454))),-1);
if(!x11457.valid){
continue;
}
if( IKabs(((-1.0)*(x11456.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11457.value)*(((((-1.0)*r01*sj3*x11454))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11456.value)))+IKsqr(((x11457.value)*(((((-1.0)*r01*sj3*x11454))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11456.value)), ((x11457.value)*(((((-1.0)*r01*sj3*x11454))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11458=IKsin(j4);
IkReal x11459=IKcos(j4);
IkReal x11460=(cj2*sj1);
IkReal x11461=(cj1*sj2);
IkReal x11462=(sj1*sj2);
IkReal x11463=(gconst5*sj3);
IkReal x11464=(gconst5*r00);
IkReal x11465=(cj3*gconst5);
IkReal x11466=(gconst4*sj3);
IkReal x11467=(cj3*gconst4);
IkReal x11468=(cj1*cj2);
IkReal x11469=((1.0)*x11458);
IkReal x11470=(gconst4*x11458);
IkReal x11471=((1.0)*x11459);
IkReal x11472=(x11461+x11460);
IkReal x11473=(x11459*x11463);
IkReal x11474=(x11459*x11467);
evalcond[0]=((-1.0)*r12*x11459);
evalcond[1]=((((-1.0)*gconst5*r20*x11469))+((r21*x11470)));
evalcond[2]=(x11468+((cj3*r12*x11458))+(((-1.0)*x11462)));
evalcond[3]=(x11472+(((-1.0)*r12*sj3*x11469)));
evalcond[4]=((1.0)+(((-1.0)*x11464*x11469))+((r01*x11470)));
evalcond[5]=(((r01*x11463))+(((-1.0)*cj3*x11464*x11471))+((r00*x11466))+((r01*x11474)));
evalcond[6]=(((r00*x11473))+((r01*x11465))+(((-1.0)*r01*x11466*x11471))+((r00*x11467)));
evalcond[7]=(x11472+((r20*x11466))+((r21*x11474))+((r21*x11463))+(((-1.0)*r20*x11465*x11471)));
evalcond[8]=(x11462+(((-1.0)*r21*x11466*x11471))+((r20*x11473))+((r20*x11467))+((r21*x11465))+(((-1.0)*x11468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11475=gconst4*gconst4;
IkReal x11476=gconst5*gconst5;
IkReal x11477=(r01*r20);
IkReal x11478=(gconst4*sj3);
IkReal x11479=(r01*r21);
IkReal x11480=((1.0)*cj3);
IkReal x11481=(r00*r21);
IkReal x11482=(r00*r20);
IkReal x11483=(cj3*gconst4*gconst5);
IkReal x11484=((1.0)*x11476);
CheckValue<IkReal> x11485=IKPowWithIntegerCheck(IKsign((((x11481*x11483))+(((-1.0)*x11476*x11480*x11482))+(((-1.0)*r02*r22*x11480))+(((-1.0)*x11475*x11479*x11480))+((x11477*x11483)))),-1);
if(!x11485.valid){
continue;
}
CheckValue<IkReal> x11486 = IKatan2WithCheck(IkReal((((r00*r22*x11478))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11478*x11482))+((sj3*x11475*x11481))+(((-1.0)*sj3*x11477*x11484))+((gconst5*x11478*x11479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11485.value)))+(x11486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11487=IKsin(j4);
IkReal x11488=IKcos(j4);
IkReal x11489=(cj2*sj1);
IkReal x11490=(cj1*sj2);
IkReal x11491=(gconst5*sj3);
IkReal x11492=(gconst4*r11);
IkReal x11493=(sj1*sj2);
IkReal x11494=(gconst5*r10);
IkReal x11495=(cj1*cj2);
IkReal x11496=(gconst4*r01);
IkReal x11497=(gconst5*r00);
IkReal x11498=(gconst4*sj3);
IkReal x11499=(cj3*gconst5);
IkReal x11500=(cj3*gconst4);
IkReal x11501=(gconst4*r21);
IkReal x11502=((1.0)*x11488);
IkReal x11503=((1.0)*x11487);
IkReal x11504=(cj3*x11487);
IkReal x11505=(cj3*x11488);
IkReal x11506=(x11490+x11489);
evalcond[0]=((((-1.0)*gconst5*r20*x11503))+(((-1.0)*r22*x11502))+((x11487*x11501)));
evalcond[1]=((((-1.0)*r12*x11502))+(((-1.0)*x11494*x11503))+((x11487*x11492)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11502))+(((-1.0)*x11497*x11503))+((x11487*x11496)));
evalcond[3]=(((r00*x11498))+((x11496*x11505))+(((-1.0)*cj3*x11497*x11502))+((r01*x11491))+((r02*x11504)));
evalcond[4]=(((r00*x11488*x11491))+(((-1.0)*r02*sj3*x11503))+(((-1.0)*sj3*x11496*x11502))+((r00*x11500))+((r01*x11499)));
evalcond[5]=(x11506+((r21*x11491))+((r20*x11498))+(((-1.0)*r20*x11499*x11502))+((r21*x11488*x11500))+((r22*x11504)));
evalcond[6]=(x11495+((x11492*x11505))+((r12*x11504))+((r11*x11491))+((r10*x11498))+(((-1.0)*cj3*x11494*x11502))+(((-1.0)*x11493)));
evalcond[7]=((((-1.0)*r12*sj3*x11503))+x11506+(((-1.0)*sj3*x11492*x11502))+((r11*x11499))+((r10*x11500))+((r10*x11488*x11491)));
evalcond[8]=(x11493+((r20*x11488*x11491))+((r21*x11499))+(((-1.0)*r21*x11498*x11502))+((r20*x11500))+(((-1.0)*r22*sj3*x11503))+(((-1.0)*x11495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11507=((1.0)*gconst5);
CheckValue<IkReal> x11508 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11507))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11508.valid){
continue;
}
CheckValue<IkReal> x11509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11507))+(((-1.0)*gconst4*r20)))),-1);
if(!x11509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11508.value)+(((1.5707963267949)*(x11509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11510=IKsin(j4);
IkReal x11511=IKcos(j4);
IkReal x11512=(cj2*sj1);
IkReal x11513=(cj1*sj2);
IkReal x11514=(gconst5*sj3);
IkReal x11515=(gconst4*r11);
IkReal x11516=(sj1*sj2);
IkReal x11517=(gconst5*r10);
IkReal x11518=(cj1*cj2);
IkReal x11519=(gconst4*r01);
IkReal x11520=(gconst5*r00);
IkReal x11521=(gconst4*sj3);
IkReal x11522=(cj3*gconst5);
IkReal x11523=(cj3*gconst4);
IkReal x11524=(gconst4*r21);
IkReal x11525=((1.0)*x11511);
IkReal x11526=((1.0)*x11510);
IkReal x11527=(cj3*x11510);
IkReal x11528=(cj3*x11511);
IkReal x11529=(x11513+x11512);
evalcond[0]=((((-1.0)*gconst5*r20*x11526))+((x11510*x11524))+(((-1.0)*r22*x11525)));
evalcond[1]=(((x11510*x11515))+(((-1.0)*x11517*x11526))+(((-1.0)*r12*x11525)));
evalcond[2]=((1.0)+((x11510*x11519))+(((-1.0)*r02*x11525))+(((-1.0)*x11520*x11526)));
evalcond[3]=(((r01*x11514))+(((-1.0)*cj3*x11520*x11525))+((x11519*x11528))+((r00*x11521))+((r02*x11527)));
evalcond[4]=((((-1.0)*sj3*x11519*x11525))+(((-1.0)*r02*sj3*x11526))+((r00*x11511*x11514))+((r01*x11522))+((r00*x11523)));
evalcond[5]=(x11529+((r21*x11511*x11523))+((r20*x11521))+((r21*x11514))+(((-1.0)*r20*x11522*x11525))+((r22*x11527)));
evalcond[6]=((((-1.0)*x11516))+x11518+((x11515*x11528))+(((-1.0)*cj3*x11517*x11525))+((r12*x11527))+((r10*x11521))+((r11*x11514)));
evalcond[7]=(x11529+(((-1.0)*r12*sj3*x11526))+((r11*x11522))+(((-1.0)*sj3*x11515*x11525))+((r10*x11523))+((r10*x11511*x11514)));
evalcond[8]=((((-1.0)*x11518))+x11516+((r21*x11522))+((r20*x11523))+(((-1.0)*r21*x11521*x11525))+((r20*x11511*x11514))+(((-1.0)*r22*sj3*x11526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11530=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11530.valid){
continue;
}
CheckValue<IkReal> x11531 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11530.value)))+(x11531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11532=IKsin(j4);
IkReal x11533=IKcos(j4);
IkReal x11534=(cj2*sj1);
IkReal x11535=(cj1*sj2);
IkReal x11536=(gconst5*sj3);
IkReal x11537=(gconst4*r11);
IkReal x11538=(sj1*sj2);
IkReal x11539=(gconst5*r10);
IkReal x11540=(cj1*cj2);
IkReal x11541=(gconst4*r01);
IkReal x11542=(gconst5*r00);
IkReal x11543=(gconst4*sj3);
IkReal x11544=(cj3*gconst5);
IkReal x11545=(cj3*gconst4);
IkReal x11546=(gconst4*r21);
IkReal x11547=((1.0)*x11533);
IkReal x11548=((1.0)*x11532);
IkReal x11549=(cj3*x11532);
IkReal x11550=(cj3*x11533);
IkReal x11551=(x11535+x11534);
evalcond[0]=(((x11532*x11546))+(((-1.0)*gconst5*r20*x11548))+(((-1.0)*r22*x11547)));
evalcond[1]=((((-1.0)*x11539*x11548))+((x11532*x11537))+(((-1.0)*r12*x11547)));
evalcond[2]=((1.0)+((x11532*x11541))+(((-1.0)*r02*x11547))+(((-1.0)*x11542*x11548)));
evalcond[3]=(((r00*x11543))+((x11541*x11550))+((r01*x11536))+(((-1.0)*cj3*x11542*x11547))+((r02*x11549)));
evalcond[4]=(((r00*x11533*x11536))+(((-1.0)*sj3*x11541*x11547))+((r00*x11545))+((r01*x11544))+(((-1.0)*r02*sj3*x11548)));
evalcond[5]=(((r21*x11533*x11545))+x11551+(((-1.0)*r20*x11544*x11547))+((r21*x11536))+((r20*x11543))+((r22*x11549)));
evalcond[6]=(((r10*x11543))+x11540+((x11537*x11550))+((r11*x11536))+((r12*x11549))+(((-1.0)*cj3*x11539*x11547))+(((-1.0)*x11538)));
evalcond[7]=(((r10*x11533*x11536))+((r10*x11545))+(((-1.0)*sj3*x11537*x11547))+x11551+((r11*x11544))+(((-1.0)*r12*sj3*x11548)));
evalcond[8]=(x11538+(((-1.0)*x11540))+((r20*x11545))+(((-1.0)*r22*sj3*x11548))+((r21*x11544))+((r20*x11533*x11536))+(((-1.0)*r21*x11543*x11547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11552=((-1.0)*r21);
IkReal x11553=((-1.0)*px);
CheckValue<IkReal> x11555 = IKatan2WithCheck(IkReal(x11552),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11555.valid){
continue;
}
IkReal x11554=((1.0)*(x11555.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11554)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11553);
rxp1_1=(px*r21);
rxp1_2=(r11*x11553);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11554)));
IkReal gconst4=x11552;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11556=((-1.0)*r21);
IkReal x11557=((-1.0)*px);
CheckValue<IkReal> x11559 = IKatan2WithCheck(IkReal(x11556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11559.valid){
continue;
}
IkReal x11558=((1.0)*(x11559.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11558)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11557);
rxp1_1=(px*r21);
rxp1_2=(r11*x11557);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11558)));
IkReal gconst4=x11556;
IkReal gconst5=((1.0)*r20);
IkReal x11560=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11560*(r10*r10)))+(((-1.0)*x11560))+(((-1.0)*x11560*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11561=((-1.0)*r21);
IkReal x11562=((-1.0)*px);
CheckValue<IkReal> x11564 = IKatan2WithCheck(IkReal(x11561),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11564.valid){
continue;
}
IkReal x11563=((1.0)*(x11564.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11563)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11562);
rxp1_1=(px*r21);
rxp1_2=(r11*x11562);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11563)));
IkReal gconst4=x11561;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11565=((-1.0)*r21);
IkReal x11566=((-1.0)*px);
CheckValue<IkReal> x11568 = IKatan2WithCheck(IkReal(x11565),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11568.valid){
continue;
}
IkReal x11567=((1.0)*(x11568.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11567)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11566);
rxp1_1=(px*r21);
rxp1_2=(r11*x11566);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11567)));
IkReal gconst4=x11565;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11569=((-1.0)*r21);
IkReal x11570=((-1.0)*px);
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal(x11569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
IkReal x11571=((1.0)*(x11572.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11571)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11570);
rxp1_1=(px*r21);
rxp1_2=(r11*x11570);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11571)));
IkReal gconst4=x11569;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11573=((-1.0)*r21);
IkReal x11574=((-1.0)*px);
CheckValue<IkReal> x11576 = IKatan2WithCheck(IkReal(x11573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11576.valid){
continue;
}
IkReal x11575=((1.0)*(x11576.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11575)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11574);
rxp1_1=(px*r21);
rxp1_2=(r11*x11574);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11575)));
IkReal gconst4=x11573;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11579=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11579.valid){
continue;
}
IkReal x11577=x11579.value;
IkReal x11578=(sj0*x11577);
cj4array[0]=(((cj1*sj2*x11578))+((cj2*sj1*x11578)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11580=IKsin(j4);
IkReal x11581=IKcos(j4);
IkReal x11582=(gconst5*r20);
IkReal x11583=(gconst4*x11580);
IkReal x11584=((1.0)*x11581);
IkReal x11585=((1.0)*x11580);
evalcond[0]=((-1.0)*r02*x11580);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11584)));
evalcond[2]=(((r21*x11583))+(((-1.0)*x11582*x11585)));
evalcond[3]=((((-1.0)*gconst5*r10*x11585))+((r11*x11583)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11581*x11582))+(((-1.0)*gconst4*r21*x11584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11587=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11587.valid){
continue;
}
IkReal x11586=x11587.value;
cj4array[0]=(((cj1*cj2*x11586))+(((-1.0)*sj1*sj2*x11586)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11588=IKsin(j4);
IkReal x11589=IKcos(j4);
IkReal x11590=(gconst5*r10);
IkReal x11591=((1.0)*sj0);
IkReal x11592=(gconst4*x11588);
IkReal x11593=((1.0)*x11589);
IkReal x11594=((1.0)*x11588);
evalcond[0]=((-1.0)*r02*x11588);
evalcond[1]=((((-1.0)*x11591))+(((-1.0)*r02*x11593)));
evalcond[2]=((((-1.0)*gconst5*r20*x11594))+((r21*x11592)));
evalcond[3]=((((-1.0)*x11590*x11594))+((r11*x11592)));
evalcond[4]=(((x11589*x11590))+(((-1.0)*cj2*sj1*x11591))+(((-1.0)*gconst4*r11*x11593))+(((-1.0)*cj1*sj2*x11591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11595=IKPowWithIntegerCheck(r02,-1);
if(!x11595.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11595.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11596=IKsin(j4);
IkReal x11597=IKcos(j4);
IkReal x11598=((1.0)*sj0);
IkReal x11599=(gconst5*x11597);
IkReal x11600=(gconst4*x11596);
IkReal x11601=((1.0)*gconst4*x11597);
IkReal x11602=((1.0)*gconst5*x11596);
evalcond[0]=((-1.0)*r02*x11596);
evalcond[1]=((((-1.0)*r20*x11602))+((r21*x11600)));
evalcond[2]=((((-1.0)*r10*x11602))+((r11*x11600)));
evalcond[3]=((((-1.0)*r21*x11601))+((r20*x11599))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r11*x11601))+((r10*x11599))+(((-1.0)*cj2*sj1*x11598))+(((-1.0)*cj1*sj2*x11598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11603=((-1.0)*r21);
IkReal x11604=((-1.0)*px);
CheckValue<IkReal> x11606 = IKatan2WithCheck(IkReal(x11603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11606.valid){
continue;
}
IkReal x11605=((1.0)*(x11606.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11605)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11604);
rxp1_1=(px*r21);
rxp1_2=(r11*x11604);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11605)));
IkReal gconst4=x11603;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11607=((-1.0)*r21);
IkReal x11608=((-1.0)*px);
CheckValue<IkReal> x11610 = IKatan2WithCheck(IkReal(x11607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11610.valid){
continue;
}
IkReal x11609=((1.0)*(x11610.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11609)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11608);
rxp1_1=(px*r21);
rxp1_2=(r11*x11608);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11609)));
IkReal gconst4=x11607;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11611=((-1.0)*r21);
IkReal x11612=((-1.0)*px);
CheckValue<IkReal> x11614 = IKatan2WithCheck(IkReal(x11611),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11614.valid){
continue;
}
IkReal x11613=((1.0)*(x11614.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11613)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11612);
rxp1_1=(px*r21);
rxp1_2=(r11*x11612);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11613)));
IkReal gconst4=x11611;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11617=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11617.valid){
continue;
}
IkReal x11615=x11617.value;
IkReal x11616=(sj0*x11615);
cj4array[0]=(((cj1*sj2*x11616))+((cj2*sj1*x11616)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11618=IKsin(j4);
IkReal x11619=IKcos(j4);
IkReal x11620=(gconst5*r20);
IkReal x11621=(gconst4*x11618);
IkReal x11622=((1.0)*x11619);
IkReal x11623=((1.0)*x11618);
evalcond[0]=(r02*x11618);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11622)));
evalcond[2]=(((r21*x11621))+(((-1.0)*x11620*x11623)));
evalcond[3]=(((r11*x11621))+(((-1.0)*gconst5*r10*x11623)));
evalcond[4]=(((gconst4*r21*x11619))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11620*x11622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11625=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11625.valid){
continue;
}
IkReal x11624=x11625.value;
cj4array[0]=(((cj1*cj2*x11624))+(((-1.0)*sj1*sj2*x11624)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11626=IKsin(j4);
IkReal x11627=IKcos(j4);
IkReal x11628=(gconst4*r11);
IkReal x11629=((1.0)*sj0);
IkReal x11630=(gconst5*r10);
IkReal x11631=((1.0)*x11627);
IkReal x11632=((1.0)*x11626);
evalcond[0]=(r02*x11626);
evalcond[1]=((((-1.0)*r02*x11631))+(((-1.0)*x11629)));
evalcond[2]=(((gconst4*r21*x11626))+(((-1.0)*gconst5*r20*x11632)));
evalcond[3]=(((x11626*x11628))+(((-1.0)*x11630*x11632)));
evalcond[4]=(((x11627*x11628))+(((-1.0)*x11630*x11631))+(((-1.0)*cj1*sj2*x11629))+(((-1.0)*cj2*sj1*x11629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11633=IKPowWithIntegerCheck(r02,-1);
if(!x11633.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11633.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11634=IKsin(j4);
IkReal x11635=IKcos(j4);
IkReal x11636=(gconst4*r11);
IkReal x11637=((1.0)*cj1);
IkReal x11638=(gconst4*r21);
IkReal x11639=((1.0)*gconst5*x11635);
IkReal x11640=((1.0)*gconst5*x11634);
evalcond[0]=(r02*x11634);
evalcond[1]=((((-1.0)*r20*x11640))+((x11634*x11638)));
evalcond[2]=((((-1.0)*r10*x11640))+((x11634*x11636)));
evalcond[3]=(((x11635*x11638))+((sj1*sj2))+(((-1.0)*r20*x11639))+(((-1.0)*cj2*x11637)));
evalcond[4]=(((x11635*x11636))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11639))+(((-1.0)*sj0*sj2*x11637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11642=IKPowWithIntegerCheck(r02,-1);
if(!x11642.valid){
continue;
}
IkReal x11641=x11642.value;
CheckValue<IkReal> x11643=IKPowWithIntegerCheck(cj3,-1);
if(!x11643.valid){
continue;
}
if( IKabs((x11641*(x11643.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11641)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11641*(x11643.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11641))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11641*(x11643.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11641));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11644=IKsin(j4);
IkReal x11645=IKcos(j4);
IkReal x11646=(gconst5*sj3);
IkReal x11647=(gconst4*r11);
IkReal x11648=(sj1*sj2);
IkReal x11649=((1.0)*gconst5);
IkReal x11650=(cj2*sj1);
IkReal x11651=((1.0)*sj0);
IkReal x11652=((1.0)*cj0);
IkReal x11653=(gconst4*r21);
IkReal x11654=(cj1*sj2);
IkReal x11655=(cj3*gconst4);
IkReal x11656=(gconst4*sj3);
IkReal x11657=(cj3*gconst5);
IkReal x11658=(r20*x11645);
IkReal x11659=((1.0)*cj1*cj2);
IkReal x11660=(r10*x11645);
IkReal x11661=(cj3*x11645);
IkReal x11662=(r02*x11644);
IkReal x11663=((1.0)*sj3*x11645);
evalcond[0]=((((-1.0)*x11651))+(((-1.0)*r02*x11645)));
evalcond[1]=(((x11644*x11653))+(((-1.0)*r20*x11644*x11649)));
evalcond[2]=(cj0+((x11644*x11647))+(((-1.0)*r10*x11644*x11649)));
evalcond[3]=((((-1.0)*cj1*cj2*x11652))+((cj0*x11648))+((cj3*x11662)));
evalcond[4]=((((-1.0)*x11650*x11652))+(((-1.0)*sj3*x11662))+(((-1.0)*x11652*x11654)));
evalcond[5]=((((-1.0)*cj3*x11649*x11658))+x11650+x11654+((r21*x11646))+((r20*x11656))+((x11653*x11661)));
evalcond[6]=((((-1.0)*x11659))+x11648+((x11646*x11658))+(((-1.0)*x11653*x11663))+((r21*x11657))+((r20*x11655)));
evalcond[7]=((((-1.0)*cj1*cj2*x11651))+((r11*x11646))+((r10*x11656))+((sj0*x11648))+(((-1.0)*cj3*x11649*x11660))+((x11647*x11661)));
evalcond[8]=(((r11*x11657))+(((-1.0)*x11650*x11651))+((r10*x11655))+(((-1.0)*x11647*x11663))+((x11646*x11660))+(((-1.0)*x11651*x11654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11664=((1.0)*gconst5);
CheckValue<IkReal> x11665=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11664))),-1);
if(!x11665.valid){
continue;
}
CheckValue<IkReal> x11666=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11664))),-1);
if(!x11666.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11665.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11666.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11664)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11665.value)))+IKsqr(((x11666.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11664))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11665.value)), ((x11666.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11664))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11667=IKsin(j4);
IkReal x11668=IKcos(j4);
IkReal x11669=(gconst5*sj3);
IkReal x11670=(gconst4*r11);
IkReal x11671=(sj1*sj2);
IkReal x11672=((1.0)*gconst5);
IkReal x11673=(cj2*sj1);
IkReal x11674=((1.0)*sj0);
IkReal x11675=((1.0)*cj0);
IkReal x11676=(gconst4*r21);
IkReal x11677=(cj1*sj2);
IkReal x11678=(cj3*gconst4);
IkReal x11679=(gconst4*sj3);
IkReal x11680=(cj3*gconst5);
IkReal x11681=(r20*x11668);
IkReal x11682=((1.0)*cj1*cj2);
IkReal x11683=(r10*x11668);
IkReal x11684=(cj3*x11668);
IkReal x11685=(r02*x11667);
IkReal x11686=((1.0)*sj3*x11668);
evalcond[0]=((((-1.0)*r02*x11668))+(((-1.0)*x11674)));
evalcond[1]=((((-1.0)*r20*x11667*x11672))+((x11667*x11676)));
evalcond[2]=(cj0+(((-1.0)*r10*x11667*x11672))+((x11667*x11670)));
evalcond[3]=(((cj0*x11671))+((cj3*x11685))+(((-1.0)*cj1*cj2*x11675)));
evalcond[4]=((((-1.0)*x11673*x11675))+(((-1.0)*x11675*x11677))+(((-1.0)*sj3*x11685)));
evalcond[5]=(((x11676*x11684))+((r21*x11669))+x11673+x11677+((r20*x11679))+(((-1.0)*cj3*x11672*x11681)));
evalcond[6]=(x11671+(((-1.0)*x11682))+((x11669*x11681))+((r21*x11680))+((r20*x11678))+(((-1.0)*x11676*x11686)));
evalcond[7]=(((sj0*x11671))+((r11*x11669))+(((-1.0)*cj1*cj2*x11674))+((r10*x11679))+((x11670*x11684))+(((-1.0)*cj3*x11672*x11683)));
evalcond[8]=((((-1.0)*x11673*x11674))+(((-1.0)*x11674*x11677))+((r11*x11680))+((x11669*x11683))+((r10*x11678))+(((-1.0)*x11670*x11686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11687=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11687.valid){
continue;
}
CheckValue<IkReal> x11688=IKPowWithIntegerCheck(r02,-1);
if(!x11688.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11687.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11688.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11687.value)))+IKsqr(((-1.0)*sj0*(x11688.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11687.value)), ((-1.0)*sj0*(x11688.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11689=IKsin(j4);
IkReal x11690=IKcos(j4);
IkReal x11691=(gconst5*sj3);
IkReal x11692=(gconst4*r11);
IkReal x11693=(sj1*sj2);
IkReal x11694=((1.0)*gconst5);
IkReal x11695=(cj2*sj1);
IkReal x11696=((1.0)*sj0);
IkReal x11697=((1.0)*cj0);
IkReal x11698=(gconst4*r21);
IkReal x11699=(cj1*sj2);
IkReal x11700=(cj3*gconst4);
IkReal x11701=(gconst4*sj3);
IkReal x11702=(cj3*gconst5);
IkReal x11703=(r20*x11690);
IkReal x11704=((1.0)*cj1*cj2);
IkReal x11705=(r10*x11690);
IkReal x11706=(cj3*x11690);
IkReal x11707=(r02*x11689);
IkReal x11708=((1.0)*sj3*x11690);
evalcond[0]=((((-1.0)*x11696))+(((-1.0)*r02*x11690)));
evalcond[1]=((((-1.0)*r20*x11689*x11694))+((x11689*x11698)));
evalcond[2]=(cj0+(((-1.0)*r10*x11689*x11694))+((x11689*x11692)));
evalcond[3]=(((cj0*x11693))+((cj3*x11707))+(((-1.0)*cj1*cj2*x11697)));
evalcond[4]=((((-1.0)*x11697*x11699))+(((-1.0)*x11695*x11697))+(((-1.0)*sj3*x11707)));
evalcond[5]=(x11699+x11695+((x11698*x11706))+((r20*x11701))+(((-1.0)*cj3*x11694*x11703))+((r21*x11691)));
evalcond[6]=(x11693+((x11691*x11703))+(((-1.0)*x11698*x11708))+((r21*x11702))+(((-1.0)*x11704))+((r20*x11700)));
evalcond[7]=(((x11692*x11706))+((r11*x11691))+((sj0*x11693))+((r10*x11701))+(((-1.0)*cj1*cj2*x11696))+(((-1.0)*cj3*x11694*x11705)));
evalcond[8]=((((-1.0)*x11692*x11708))+((x11691*x11705))+(((-1.0)*x11696*x11699))+(((-1.0)*x11695*x11696))+((r10*x11700))+((r11*x11702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11709=((1.0)*sj0);
IkReal x11710=((1.0)*gconst4);
CheckValue<IkReal> x11711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11710))+(((-1.0)*gconst5*r21)))),-1);
if(!x11711.valid){
continue;
}
CheckValue<IkReal> x11712 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11709)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*cj0*r01*x11710))+((gconst5*r10*sj0))+(((-1.0)*gconst4*r11*x11709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11711.value)))+(x11712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11713=IKsin(j4);
IkReal x11714=IKcos(j4);
IkReal x11715=(gconst5*sj3);
IkReal x11716=(cj3*gconst5);
IkReal x11717=(gconst4*r11);
IkReal x11718=(sj1*sj2);
IkReal x11719=(cj2*sj1);
IkReal x11720=((1.0)*sj0);
IkReal x11721=(gconst4*r01);
IkReal x11722=(gconst4*r21);
IkReal x11723=((1.0)*cj0);
IkReal x11724=(cj1*sj2);
IkReal x11725=(gconst4*sj3);
IkReal x11726=(cj3*gconst4);
IkReal x11727=((1.0)*x11714);
IkReal x11728=((1.0)*cj1*cj2);
IkReal x11729=(cj3*x11713);
IkReal x11730=(cj3*x11714);
IkReal x11731=((1.0)*gconst5*x11713);
IkReal x11732=((1.0)*sj3*x11713);
evalcond[0]=((((-1.0)*r20*x11731))+((x11713*x11722))+(((-1.0)*r22*x11727)));
evalcond[1]=(cj0+(((-1.0)*r10*x11731))+(((-1.0)*r12*x11727))+((x11713*x11717)));
evalcond[2]=((((-1.0)*x11720))+(((-1.0)*r00*x11731))+((x11713*x11721))+(((-1.0)*r02*x11727)));
evalcond[3]=(x11724+x11719+((r20*x11725))+(((-1.0)*r20*x11716*x11727))+((r22*x11729))+((x11722*x11730))+((r21*x11715)));
evalcond[4]=(x11718+(((-1.0)*x11728))+((r20*x11714*x11715))+(((-1.0)*sj3*x11722*x11727))+((r20*x11726))+(((-1.0)*r22*x11732))+((r21*x11716)));
evalcond[5]=(((r01*x11715))+((r00*x11725))+((cj0*x11718))+((r02*x11729))+(((-1.0)*cj1*cj2*x11723))+((x11721*x11730))+(((-1.0)*r00*x11716*x11727)));
evalcond[6]=(((r12*x11729))+(((-1.0)*r10*x11716*x11727))+((x11717*x11730))+((sj0*x11718))+((r10*x11725))+(((-1.0)*cj1*cj2*x11720))+((r11*x11715)));
evalcond[7]=(((r01*x11716))+((r00*x11726))+(((-1.0)*x11723*x11724))+(((-1.0)*r02*x11732))+((r00*x11714*x11715))+(((-1.0)*x11719*x11723))+(((-1.0)*sj3*x11721*x11727)));
evalcond[8]=(((r10*x11714*x11715))+(((-1.0)*x11720*x11724))+(((-1.0)*sj3*x11717*x11727))+(((-1.0)*r12*x11732))+((r10*x11726))+(((-1.0)*x11719*x11720))+((r11*x11716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11733=((1.0)*gconst5);
CheckValue<IkReal> x11734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11733))+(((-1.0)*gconst4*r10)))),-1);
if(!x11734.valid){
continue;
}
CheckValue<IkReal> x11735 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11733))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11734.value)))+(x11735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11736=IKsin(j4);
IkReal x11737=IKcos(j4);
IkReal x11738=(gconst5*sj3);
IkReal x11739=(cj3*gconst5);
IkReal x11740=(gconst4*r11);
IkReal x11741=(sj1*sj2);
IkReal x11742=(cj2*sj1);
IkReal x11743=((1.0)*sj0);
IkReal x11744=(gconst4*r01);
IkReal x11745=(gconst4*r21);
IkReal x11746=((1.0)*cj0);
IkReal x11747=(cj1*sj2);
IkReal x11748=(gconst4*sj3);
IkReal x11749=(cj3*gconst4);
IkReal x11750=((1.0)*x11737);
IkReal x11751=((1.0)*cj1*cj2);
IkReal x11752=(cj3*x11736);
IkReal x11753=(cj3*x11737);
IkReal x11754=((1.0)*gconst5*x11736);
IkReal x11755=((1.0)*sj3*x11736);
evalcond[0]=(((x11736*x11745))+(((-1.0)*r22*x11750))+(((-1.0)*r20*x11754)));
evalcond[1]=(((x11736*x11740))+(((-1.0)*r12*x11750))+cj0+(((-1.0)*r10*x11754)));
evalcond[2]=(((x11736*x11744))+(((-1.0)*x11743))+(((-1.0)*r02*x11750))+(((-1.0)*r00*x11754)));
evalcond[3]=(x11742+x11747+((r20*x11748))+(((-1.0)*r20*x11739*x11750))+((r21*x11738))+((x11745*x11753))+((r22*x11752)));
evalcond[4]=(x11741+(((-1.0)*sj3*x11745*x11750))+(((-1.0)*r22*x11755))+((r20*x11749))+((r21*x11739))+((r20*x11737*x11738))+(((-1.0)*x11751)));
evalcond[5]=(((r01*x11738))+((r00*x11748))+((cj0*x11741))+((x11744*x11753))+((r02*x11752))+(((-1.0)*cj1*cj2*x11746))+(((-1.0)*r00*x11739*x11750)));
evalcond[6]=(((x11740*x11753))+((r11*x11738))+((sj0*x11741))+((r12*x11752))+((r10*x11748))+(((-1.0)*cj1*cj2*x11743))+(((-1.0)*r10*x11739*x11750)));
evalcond[7]=(((r01*x11739))+((r00*x11749))+(((-1.0)*x11742*x11746))+(((-1.0)*x11746*x11747))+(((-1.0)*r02*x11755))+((r00*x11737*x11738))+(((-1.0)*sj3*x11744*x11750)));
evalcond[8]=(((r10*x11737*x11738))+((r11*x11739))+(((-1.0)*r12*x11755))+(((-1.0)*x11742*x11743))+(((-1.0)*x11743*x11747))+((r10*x11749))+(((-1.0)*sj3*x11740*x11750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11756=((1.0)*gconst5);
CheckValue<IkReal> x11757 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11756))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11757.valid){
continue;
}
CheckValue<IkReal> x11758=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11756)))),-1);
if(!x11758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11757.value)+(((1.5707963267949)*(x11758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11759=IKsin(j4);
IkReal x11760=IKcos(j4);
IkReal x11761=(gconst5*sj3);
IkReal x11762=(cj3*gconst5);
IkReal x11763=(gconst4*r11);
IkReal x11764=(sj1*sj2);
IkReal x11765=(cj2*sj1);
IkReal x11766=((1.0)*sj0);
IkReal x11767=(gconst4*r01);
IkReal x11768=(gconst4*r21);
IkReal x11769=((1.0)*cj0);
IkReal x11770=(cj1*sj2);
IkReal x11771=(gconst4*sj3);
IkReal x11772=(cj3*gconst4);
IkReal x11773=((1.0)*x11760);
IkReal x11774=((1.0)*cj1*cj2);
IkReal x11775=(cj3*x11759);
IkReal x11776=(cj3*x11760);
IkReal x11777=((1.0)*gconst5*x11759);
IkReal x11778=((1.0)*sj3*x11759);
evalcond[0]=(((x11759*x11768))+(((-1.0)*r22*x11773))+(((-1.0)*r20*x11777)));
evalcond[1]=(((x11759*x11763))+cj0+(((-1.0)*r10*x11777))+(((-1.0)*r12*x11773)));
evalcond[2]=(((x11759*x11767))+(((-1.0)*r02*x11773))+(((-1.0)*r00*x11777))+(((-1.0)*x11766)));
evalcond[3]=(((x11768*x11776))+x11770+x11765+((r20*x11771))+((r22*x11775))+(((-1.0)*r20*x11762*x11773))+((r21*x11761)));
evalcond[4]=((((-1.0)*sj3*x11768*x11773))+x11764+((r20*x11772))+((r20*x11760*x11761))+(((-1.0)*r22*x11778))+(((-1.0)*x11774))+((r21*x11762)));
evalcond[5]=(((cj0*x11764))+(((-1.0)*cj1*cj2*x11769))+(((-1.0)*r00*x11762*x11773))+((r02*x11775))+((r00*x11771))+((r01*x11761))+((x11767*x11776)));
evalcond[6]=((((-1.0)*cj1*cj2*x11766))+((r11*x11761))+((x11763*x11776))+((r10*x11771))+((r12*x11775))+((sj0*x11764))+(((-1.0)*r10*x11762*x11773)));
evalcond[7]=((((-1.0)*sj3*x11767*x11773))+(((-1.0)*x11765*x11769))+(((-1.0)*r02*x11778))+((r00*x11772))+(((-1.0)*x11769*x11770))+((r00*x11760*x11761))+((r01*x11762)));
evalcond[8]=(((r11*x11762))+((r10*x11760*x11761))+((r10*x11772))+(((-1.0)*x11765*x11766))+(((-1.0)*r12*x11778))+(((-1.0)*x11766*x11770))+(((-1.0)*sj3*x11763*x11773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11779=((-1.0)*r10);
IkReal x11781 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11781)==0){
continue;
}
IkReal x11780=pow(x11781,-0.5);
CheckValue<IkReal> x11782 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11779),IKFAST_ATAN2_MAGTHRESH);
if(!x11782.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11782.value));
IkReal gconst7=(r11*x11780);
IkReal gconst8=(x11779*x11780);
CheckValue<IkReal> x11783 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11783.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11783.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11784=((-1.0)*r10);
IkReal x11785=x11780;
CheckValue<IkReal> x11787 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11784),IKFAST_ATAN2_MAGTHRESH);
if(!x11787.valid){
continue;
}
IkReal x11786=((-1.0)*(x11787.value));
sj5=gconst7;
cj5=gconst8;
j5=x11786;
IkReal gconst6=x11786;
IkReal gconst7=(r11*x11785);
IkReal gconst8=(x11784*x11785);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11788=((1.0)*sj0);
IkReal x11789=((1.0)*gconst7);
CheckValue<IkReal> x11790 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11788))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11789))+(((-1.0)*gconst7*r11*x11788))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11790.valid){
continue;
}
CheckValue<IkReal> x11791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11789))+(((-1.0)*gconst8*r21)))),-1);
if(!x11791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11790.value)+(((1.5707963267949)*(x11791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11792=IKsin(j4);
IkReal x11793=IKcos(j4);
IkReal x11794=(gconst7*sj3);
IkReal x11795=(cj3*gconst8);
IkReal x11796=(cj3*gconst7);
IkReal x11797=(sj1*sj2);
IkReal x11798=(cj2*sj1);
IkReal x11799=((1.0)*sj0);
IkReal x11800=((1.0)*cj0);
IkReal x11801=(gconst8*sj3);
IkReal x11802=(cj1*sj2);
IkReal x11803=((1.0)*x11793);
IkReal x11804=((1.0)*x11792);
IkReal x11805=((1.0)*cj1*cj2);
IkReal x11806=(cj3*x11792);
IkReal x11807=(gconst7*x11792);
IkReal x11808=(x11793*x11801);
evalcond[0]=(((r21*x11807))+(((-1.0)*gconst8*r20*x11804))+(((-1.0)*r22*x11803)));
evalcond[1]=((((-1.0)*gconst8*r10*x11804))+cj0+(((-1.0)*r12*x11803))+((r11*x11807)));
evalcond[2]=((((-1.0)*gconst8*r00*x11804))+(((-1.0)*r02*x11803))+((r01*x11807))+(((-1.0)*x11799)));
evalcond[3]=(x11798+((r21*x11801))+((r20*x11794))+((r22*x11806))+(((-1.0)*r20*x11795*x11803))+((r21*x11793*x11796))+x11802);
evalcond[4]=(x11797+((r20*x11796))+(((-1.0)*r22*sj3*x11804))+(((-1.0)*x11805))+((r20*x11808))+((r21*x11795))+(((-1.0)*r21*x11794*x11803)));
evalcond[5]=(((r01*x11793*x11796))+((r02*x11806))+(((-1.0)*r00*x11795*x11803))+(((-1.0)*cj1*cj2*x11800))+((r01*x11801))+((r00*x11794))+((cj0*x11797)));
evalcond[6]=((((-1.0)*cj1*cj2*x11799))+((r10*x11794))+((sj0*x11797))+((r11*x11801))+(((-1.0)*r10*x11795*x11803))+((r12*x11806))+((r11*x11793*x11796)));
evalcond[7]=(((r00*x11808))+(((-1.0)*r02*sj3*x11804))+(((-1.0)*x11798*x11800))+(((-1.0)*r01*x11794*x11803))+(((-1.0)*x11800*x11802))+((r01*x11795))+((r00*x11796)));
evalcond[8]=(((r11*x11795))+((r10*x11796))+(((-1.0)*r11*x11794*x11803))+((r10*x11808))+(((-1.0)*r12*sj3*x11804))+(((-1.0)*x11799*x11802))+(((-1.0)*x11798*x11799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11809=((1.0)*gconst8);
CheckValue<IkReal> x11810 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11809))+((cj0*gconst7*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11810.valid){
continue;
}
CheckValue<IkReal> x11811=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11809)))),-1);
if(!x11811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11810.value)+(((1.5707963267949)*(x11811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11812=IKsin(j4);
IkReal x11813=IKcos(j4);
IkReal x11814=(gconst7*sj3);
IkReal x11815=(cj3*gconst8);
IkReal x11816=(cj3*gconst7);
IkReal x11817=(sj1*sj2);
IkReal x11818=(cj2*sj1);
IkReal x11819=((1.0)*sj0);
IkReal x11820=((1.0)*cj0);
IkReal x11821=(gconst8*sj3);
IkReal x11822=(cj1*sj2);
IkReal x11823=((1.0)*x11813);
IkReal x11824=((1.0)*x11812);
IkReal x11825=((1.0)*cj1*cj2);
IkReal x11826=(cj3*x11812);
IkReal x11827=(gconst7*x11812);
IkReal x11828=(x11813*x11821);
evalcond[0]=((((-1.0)*gconst8*r20*x11824))+(((-1.0)*r22*x11823))+((r21*x11827)));
evalcond[1]=(cj0+(((-1.0)*r12*x11823))+((r11*x11827))+(((-1.0)*gconst8*r10*x11824)));
evalcond[2]=((((-1.0)*gconst8*r00*x11824))+(((-1.0)*r02*x11823))+(((-1.0)*x11819))+((r01*x11827)));
evalcond[3]=(((r21*x11813*x11816))+((r22*x11826))+(((-1.0)*r20*x11815*x11823))+((r20*x11814))+((r21*x11821))+x11818+x11822);
evalcond[4]=((((-1.0)*r22*sj3*x11824))+((r21*x11815))+(((-1.0)*r21*x11814*x11823))+(((-1.0)*x11825))+((r20*x11828))+((r20*x11816))+x11817);
evalcond[5]=(((r00*x11814))+((r02*x11826))+((cj0*x11817))+(((-1.0)*cj1*cj2*x11820))+((r01*x11821))+(((-1.0)*r00*x11815*x11823))+((r01*x11813*x11816)));
evalcond[6]=(((sj0*x11817))+((r11*x11813*x11816))+((r12*x11826))+((r10*x11814))+((r11*x11821))+(((-1.0)*r10*x11815*x11823))+(((-1.0)*cj1*cj2*x11819)));
evalcond[7]=((((-1.0)*x11820*x11822))+(((-1.0)*x11818*x11820))+((r01*x11815))+((r00*x11816))+(((-1.0)*r01*x11814*x11823))+((r00*x11828))+(((-1.0)*r02*sj3*x11824)));
evalcond[8]=((((-1.0)*r11*x11814*x11823))+(((-1.0)*x11819*x11822))+(((-1.0)*x11818*x11819))+((r10*x11828))+((r10*x11816))+(((-1.0)*r12*sj3*x11824))+((r11*x11815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11829=((-1.0)*r11);
IkReal x11831 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11831)==0){
continue;
}
IkReal x11830=pow(x11831,-0.5);
CheckValue<IkReal> x11832 = IKatan2WithCheck(IkReal(x11829),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11832.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11832.value))));
IkReal gconst10=(x11829*x11830);
IkReal gconst11=((1.0)*r10*x11830);
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11833.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11834=((-1.0)*r11);
CheckValue<IkReal> x11837 = IKatan2WithCheck(IkReal(x11834),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11837.valid){
continue;
}
IkReal x11835=((1.0)*(x11837.value));
IkReal x11836=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11835)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11835)));
IkReal gconst10=(x11834*x11836);
IkReal gconst11=((1.0)*r10*x11836);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11838=((-1.0)*r11);
CheckValue<IkReal> x11841 = IKatan2WithCheck(IkReal(x11838),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11841.valid){
continue;
}
IkReal x11839=((1.0)*(x11841.value));
IkReal x11840=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11839)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11839)));
IkReal gconst10=(x11838*x11840);
IkReal gconst11=((1.0)*r10*x11840);
IkReal x11842=r12*r12;
IkReal x11843=((1.0)*sj0);
IkReal x11844=(cj0*r02);
IkReal x11845=x11830;
j4eval[0]=((IKabs(((((-1.0)*x11844))+(((-1.0)*r12*x11843)))))+(IKabs(((((-1.0)*x11843*x11845))+((sj0*x11842*x11845))+((r12*x11844*x11845))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11846=((-1.0)*r11);
CheckValue<IkReal> x11849 = IKatan2WithCheck(IkReal(x11846),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11849.valid){
continue;
}
IkReal x11847=((1.0)*(x11849.value));
IkReal x11848=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11847)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11847)));
IkReal gconst10=(x11846*x11848);
IkReal gconst11=((1.0)*r10*x11848);
IkReal x11850=((1.0)*cj3);
CheckValue<IkReal> x11855=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11855.valid){
continue;
}
IkReal x11851=x11855.value;
IkReal x11852=(cj3*x11851);
IkReal x11853=(x11850*x11851);
IkReal x11854=((((-1.0)*x11853*(r10*r10)*(r20*r20)))+(((-1.0)*x11853*(r11*r11)*(r21*r21)))+(((-1.0)*x11850*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x11852)));
j4eval[0]=x11854;
j4eval[1]=IKsign(x11854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11856=((-1.0)*r11);
CheckValue<IkReal> x11859 = IKatan2WithCheck(IkReal(x11856),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11859.valid){
continue;
}
IkReal x11857=((1.0)*(x11859.value));
IkReal x11858=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11857)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11857)));
IkReal gconst10=(x11856*x11858);
IkReal gconst11=((1.0)*r10*x11858);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11860=((-1.0)*r11);
CheckValue<IkReal> x11863 = IKatan2WithCheck(IkReal(x11860),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11863.valid){
continue;
}
IkReal x11861=((1.0)*(x11863.value));
IkReal x11862=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11861)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11861)));
IkReal gconst10=(x11860*x11862);
IkReal gconst11=((1.0)*r10*x11862);
IkReal x11864=r12*r12;
IkReal x11865=((1.0)*sj0);
IkReal x11866=(cj0*r02);
IkReal x11867=x11830;
j4eval[0]=((IKabs(((((-1.0)*x11866))+(((-1.0)*r12*x11865)))))+(IKabs(((((-1.0)*x11865*x11867))+((r12*x11866*x11867))+((sj0*x11864*x11867))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11868=((-1.0)*r11);
CheckValue<IkReal> x11871 = IKatan2WithCheck(IkReal(x11868),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11871.valid){
continue;
}
IkReal x11869=((1.0)*(x11871.value));
IkReal x11870=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11869)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11869)));
IkReal gconst10=(x11868*x11870);
IkReal gconst11=((1.0)*r10*x11870);
IkReal x11872=r12*r12;
IkReal x11873=(cj1*cj2*r22);
IkReal x11874=(r22*sj1*sj2);
CheckValue<IkReal> x11878=IKPowWithIntegerCheck(((-1.0)+x11872),-1);
if(!x11878.valid){
continue;
}
IkReal x11875=x11878.value;
if((((1.0)+(((-1.0)*x11872)))) < -0.00001)
continue;
IkReal x11876=IKsqrt(((1.0)+(((-1.0)*x11872))));
IkReal x11877=(r12*x11875*x11876);
j4eval[0]=((IKabs(((((-1.0)*x11874*x11877))+((x11873*x11877)))))+(IKabs(((((-1.0)*x11873))+x11874))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11879=((-1.0)*r11);
CheckValue<IkReal> x11882 = IKatan2WithCheck(IkReal(x11879),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11882.valid){
continue;
}
IkReal x11880=((1.0)*(x11882.value));
IkReal x11881=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11880)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11880)));
IkReal gconst10=(x11879*x11881);
IkReal gconst11=((1.0)*r10*x11881);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11883=((-1.0)*r11);
CheckValue<IkReal> x11886 = IKatan2WithCheck(IkReal(x11883),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11886.valid){
continue;
}
IkReal x11884=((1.0)*(x11886.value));
IkReal x11885=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11884)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11884)));
IkReal gconst10=(x11883*x11885);
IkReal gconst11=((1.0)*r10*x11885);
IkReal x11887=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11891=IKPowWithIntegerCheck(x11887,-1);
if(!x11891.valid){
continue;
}
IkReal x11888=x11891.value;
IkReal x11889=((1.0)*x11888);
IkReal x11890=((((-1.0)*x11889*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11888))+(((-1.0)*x11889*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02))));
j4eval[0]=x11890;
j4eval[1]=IKsign(x11890);
j4eval[2]=r02;
j4eval[3]=x11887;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11892=((-1.0)*r11);
CheckValue<IkReal> x11895 = IKatan2WithCheck(IkReal(x11892),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11895.valid){
continue;
}
IkReal x11893=((1.0)*(x11895.value));
IkReal x11894=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11893)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11893)));
IkReal gconst10=(x11892*x11894);
IkReal gconst11=((1.0)*r10*x11894);
IkReal x11896=r12*r12;
IkReal x11897=(cj1*cj2*r22);
IkReal x11898=(r22*sj1*sj2);
CheckValue<IkReal> x11902=IKPowWithIntegerCheck(((-1.0)+x11896),-1);
if(!x11902.valid){
continue;
}
IkReal x11899=x11902.value;
if((((1.0)+(((-1.0)*x11896)))) < -0.00001)
continue;
IkReal x11900=IKsqrt(((1.0)+(((-1.0)*x11896))));
IkReal x11901=(r12*x11899*x11900);
j4eval[0]=((IKabs(((((-1.0)*x11897))+x11898)))+(IKabs((((x11897*x11901))+(((-1.0)*x11898*x11901))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11903=(gconst10*r21);
IkReal x11904=(gconst11*r20);
IkReal x11905=(sj1*sj2);
IkReal x11906=(cj1*cj2);
CheckValue<IkReal> x11907 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11906))+((r22*x11905)))),IkReal(((((-1.0)*x11903*x11906))+((x11903*x11905))+((x11904*x11906))+(((-1.0)*x11904*x11905)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11907.valid){
continue;
}
CheckValue<IkReal> x11908=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11903*x11904))+(r22*r22)+(x11903*x11903)+(x11904*x11904))),-1);
if(!x11908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11907.value)+(((1.5707963267949)*(x11908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11909=IKsin(j4);
IkReal x11910=IKcos(j4);
IkReal x11911=((1.0)*cj2);
IkReal x11912=((1.0)*x11910);
IkReal x11913=(gconst10*x11909);
IkReal x11914=((1.0)*x11909);
IkReal x11915=(gconst11*x11910);
IkReal x11916=(gconst11*x11914);
evalcond[0]=((((-1.0)*r22*x11912))+(((-1.0)*r20*x11916))+((r21*x11913)));
evalcond[1]=(((r11*x11913))+(((-1.0)*r12*x11912))+(((-1.0)*r10*x11916)));
evalcond[2]=(((r00*x11915))+(((-1.0)*gconst10*r01*x11912))+(((-1.0)*r02*x11914)));
evalcond[3]=((-1.0)+((r01*x11913))+(((-1.0)*r02*x11912))+(((-1.0)*r00*x11916)));
evalcond[4]=((((-1.0)*gconst10*r21*x11912))+(((-1.0)*cj1*x11911))+(((-1.0)*r22*x11914))+((sj1*sj2))+((r20*x11915)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11912))+(((-1.0)*sj1*x11911))+((r10*x11915))+(((-1.0)*r12*x11914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11917=(gconst11*r00);
IkReal x11918=(gconst10*r01);
CheckValue<IkReal> x11919 = IKatan2WithCheck(IkReal((x11917+(((-1.0)*x11918)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11919.valid){
continue;
}
CheckValue<IkReal> x11920=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11918*x11918)))+(((-1.0)*(x11917*x11917)))+(((2.0)*x11917*x11918))+(((-1.0)*(r02*r02))))),-1);
if(!x11920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11919.value)+(((1.5707963267949)*(x11920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11921=IKsin(j4);
IkReal x11922=IKcos(j4);
IkReal x11923=((1.0)*cj2);
IkReal x11924=((1.0)*x11922);
IkReal x11925=(gconst10*x11921);
IkReal x11926=((1.0)*x11921);
IkReal x11927=(gconst11*x11922);
IkReal x11928=(gconst11*x11926);
evalcond[0]=((((-1.0)*r20*x11928))+((r21*x11925))+(((-1.0)*r22*x11924)));
evalcond[1]=((((-1.0)*r10*x11928))+((r11*x11925))+(((-1.0)*r12*x11924)));
evalcond[2]=((((-1.0)*r02*x11926))+((r00*x11927))+(((-1.0)*gconst10*r01*x11924)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11924))+(((-1.0)*r00*x11928))+((r01*x11925)));
evalcond[4]=((((-1.0)*cj1*x11923))+((r20*x11927))+((sj1*sj2))+(((-1.0)*r22*x11926))+(((-1.0)*gconst10*r21*x11924)));
evalcond[5]=(((r10*x11927))+(((-1.0)*gconst10*r11*x11924))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11926))+(((-1.0)*sj1*x11923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11929 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11929.valid){
continue;
}
CheckValue<IkReal> x11930=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11929.value)+(((1.5707963267949)*(x11930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11931=IKsin(j4);
IkReal x11932=IKcos(j4);
IkReal x11933=((1.0)*cj2);
IkReal x11934=((1.0)*x11932);
IkReal x11935=(gconst10*x11931);
IkReal x11936=((1.0)*x11931);
IkReal x11937=(gconst11*x11932);
IkReal x11938=(gconst11*x11936);
evalcond[0]=(((r21*x11935))+(((-1.0)*r22*x11934))+(((-1.0)*r20*x11938)));
evalcond[1]=((((-1.0)*r10*x11938))+((r11*x11935))+(((-1.0)*r12*x11934)));
evalcond[2]=((((-1.0)*gconst10*r01*x11934))+(((-1.0)*r02*x11936))+((r00*x11937)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11934))+(((-1.0)*r00*x11938))+((r01*x11935)));
evalcond[4]=(((r20*x11937))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11934))+(((-1.0)*r22*x11936))+(((-1.0)*cj1*x11933)));
evalcond[5]=((((-1.0)*sj1*x11933))+((r10*x11937))+(((-1.0)*gconst10*r11*x11934))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11939=((-1.0)*r11);
CheckValue<IkReal> x11942 = IKatan2WithCheck(IkReal(x11939),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11942.valid){
continue;
}
IkReal x11940=((1.0)*(x11942.value));
IkReal x11941=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11940)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11940)));
IkReal gconst10=(x11939*x11941);
IkReal gconst11=((1.0)*r10*x11941);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11943=((-1.0)*r11);
CheckValue<IkReal> x11946 = IKatan2WithCheck(IkReal(x11943),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11946.valid){
continue;
}
IkReal x11944=((1.0)*(x11946.value));
IkReal x11945=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11944)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11944)));
IkReal gconst10=(x11943*x11945);
IkReal gconst11=((1.0)*r10*x11945);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11947=((-1.0)*r11);
CheckValue<IkReal> x11950 = IKatan2WithCheck(IkReal(x11947),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11950.valid){
continue;
}
IkReal x11948=((1.0)*(x11950.value));
IkReal x11949=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11948)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11948)));
IkReal gconst10=(x11947*x11949);
IkReal gconst11=((1.0)*r10*x11949);
IkReal x11951=r12*r12;
CheckValue<IkReal> x11954=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11951))),-1);
if(!x11954.valid){
continue;
}
IkReal x11952=x11954.value;
IkReal x11953=((1.0)*x11952);
j4eval[0]=IKsign((x11951+(((2.0)*x11952*(r10*r10)*(r11*r11)))+((x11953*(r11*r11*r11*r11)))+((x11953*(r10*r10*r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11955=(cj2*sj1);
IkReal x11956=(gconst10*r11);
IkReal x11957=(gconst11*r10);
IkReal x11958=(cj1*sj2);
CheckValue<IkReal> x11959 = IKatan2WithCheck(IkReal((((r12*x11958))+((r12*x11955)))),IkReal(((((-1.0)*x11955*x11957))+((x11956*x11958))+((x11955*x11956))+(((-1.0)*x11957*x11958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11959.valid){
continue;
}
CheckValue<IkReal> x11960=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11956*x11956)+(x11957*x11957)+(((-2.0)*x11956*x11957)))),-1);
if(!x11960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11959.value)+(((1.5707963267949)*(x11960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11961=IKsin(j4);
IkReal x11962=IKcos(j4);
IkReal x11963=((1.0)*x11962);
IkReal x11964=(gconst10*x11961);
IkReal x11965=((1.0)*x11961);
IkReal x11966=(gconst11*x11962);
IkReal x11967=(gconst11*x11965);
evalcond[0]=((((-1.0)*r20*x11967))+(((-1.0)*r22*x11963))+((r21*x11964)));
evalcond[1]=((((-1.0)*r10*x11967))+(((-1.0)*r12*x11963))+((r11*x11964)));
evalcond[2]=(((r00*x11966))+(((-1.0)*gconst10*r01*x11963))+(((-1.0)*r02*x11965)));
evalcond[3]=((1.0)+((r01*x11964))+(((-1.0)*r00*x11967))+(((-1.0)*r02*x11963)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11965))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11963))+((r10*x11966)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11966))+(((-1.0)*r22*x11965))+(((-1.0)*gconst10*r21*x11963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11968=(gconst11*r00);
IkReal x11969=(gconst10*r01);
CheckValue<IkReal> x11970=IKPowWithIntegerCheck(IKsign(((x11969*x11969)+(x11968*x11968)+(((-2.0)*x11968*x11969))+(r02*r02))),-1);
if(!x11970.valid){
continue;
}
CheckValue<IkReal> x11971 = IKatan2WithCheck(IkReal((x11968+(((-1.0)*x11969)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11970.value)))+(x11971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11972=IKsin(j4);
IkReal x11973=IKcos(j4);
IkReal x11974=((1.0)*x11973);
IkReal x11975=(gconst10*x11972);
IkReal x11976=((1.0)*x11972);
IkReal x11977=(gconst11*x11973);
IkReal x11978=(gconst11*x11976);
evalcond[0]=((((-1.0)*r20*x11978))+(((-1.0)*r22*x11974))+((r21*x11975)));
evalcond[1]=((((-1.0)*r10*x11978))+(((-1.0)*r12*x11974))+((r11*x11975)));
evalcond[2]=(((r00*x11977))+(((-1.0)*gconst10*r01*x11974))+(((-1.0)*r02*x11976)));
evalcond[3]=((1.0)+((r01*x11975))+(((-1.0)*r00*x11978))+(((-1.0)*r02*x11974)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11976))+(((-1.0)*gconst10*r11*x11974))+((cj1*sj2))+((r10*x11977)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11977))+(((-1.0)*r22*x11976))+(((-1.0)*gconst10*r21*x11974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11979=((1.0)*gconst11);
CheckValue<IkReal> x11980=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11979))+(((-1.0)*gconst10*r20)))),-1);
if(!x11980.valid){
continue;
}
CheckValue<IkReal> x11981 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11980.value)))+(x11981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11982=IKsin(j4);
IkReal x11983=IKcos(j4);
IkReal x11984=((1.0)*x11983);
IkReal x11985=(gconst10*x11982);
IkReal x11986=((1.0)*x11982);
IkReal x11987=(gconst11*x11983);
IkReal x11988=(gconst11*x11986);
evalcond[0]=(((r21*x11985))+(((-1.0)*r22*x11984))+(((-1.0)*r20*x11988)));
evalcond[1]=((((-1.0)*r12*x11984))+(((-1.0)*r10*x11988))+((r11*x11985)));
evalcond[2]=((((-1.0)*gconst10*r01*x11984))+(((-1.0)*r02*x11986))+((r00*x11987)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11984))+(((-1.0)*r00*x11988))+((r01*x11985)));
evalcond[4]=((((-1.0)*r12*x11986))+((cj2*sj1))+((r10*x11987))+(((-1.0)*gconst10*r11*x11984))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11984))+((r20*x11987))+(((-1.0)*r22*x11986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11989=((-1.0)*r11);
IkReal x11990=((-1.0)*r10);
CheckValue<IkReal> x11992 = IKatan2WithCheck(IkReal(x11989),IkReal(x11990),IKFAST_ATAN2_MAGTHRESH);
if(!x11992.valid){
continue;
}
IkReal x11991=((1.0)*(x11992.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11991)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11990);
rxp1_1=(px*r21);
rxp1_2=(px*x11989);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11991)));
IkReal gconst10=x11989;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11993=((-1.0)*r11);
IkReal x11994=((-1.0)*r10);
CheckValue<IkReal> x11996 = IKatan2WithCheck(IkReal(x11993),IkReal(x11994),IKFAST_ATAN2_MAGTHRESH);
if(!x11996.valid){
continue;
}
IkReal x11995=((1.0)*(x11996.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11995)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11994);
rxp1_1=(px*r21);
rxp1_2=(px*x11993);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11995)));
IkReal gconst10=x11993;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11997=((-1.0)*r11);
IkReal x11998=((-1.0)*r10);
CheckValue<IkReal> x12000 = IKatan2WithCheck(IkReal(x11997),IkReal(x11998),IKFAST_ATAN2_MAGTHRESH);
if(!x12000.valid){
continue;
}
IkReal x11999=((1.0)*(x12000.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11999)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11998);
rxp1_1=(px*r21);
rxp1_2=(px*x11997);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11999)));
IkReal gconst10=x11997;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12003=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12003.valid){
continue;
}
IkReal x12001=x12003.value;
IkReal x12002=(sj0*x12001);
cj4array[0]=(((cj1*sj2*x12002))+((cj2*sj1*x12002)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12004=IKsin(j4);
IkReal x12005=IKcos(j4);
IkReal x12006=(gconst10*r21);
IkReal x12007=(gconst11*r20);
IkReal x12008=((1.0)*x12004);
IkReal x12009=((1.0)*x12005);
evalcond[0]=((-1.0)*r02*x12004);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12009)));
evalcond[2]=((((-1.0)*x12007*x12008))+((x12004*x12006)));
evalcond[3]=(((gconst10*r11*x12004))+(((-1.0)*gconst11*r10*x12008)));
evalcond[4]=((((-1.0)*x12006*x12009))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12005*x12007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12011=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12011.valid){
continue;
}
IkReal x12010=x12011.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12010))+((cj1*cj2*x12010)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12012=IKsin(j4);
IkReal x12013=IKcos(j4);
IkReal x12014=((1.0)*sj0);
IkReal x12015=(gconst10*x12012);
IkReal x12016=((1.0)*x12013);
IkReal x12017=((1.0)*gconst11*x12012);
evalcond[0]=((-1.0)*r02*x12012);
evalcond[1]=((((-1.0)*r02*x12016))+(((-1.0)*x12014)));
evalcond[2]=(((r21*x12015))+(((-1.0)*r20*x12017)));
evalcond[3]=(((r11*x12015))+(((-1.0)*r10*x12017)));
evalcond[4]=(((gconst11*r10*x12013))+(((-1.0)*cj2*sj1*x12014))+(((-1.0)*cj1*sj2*x12014))+(((-1.0)*gconst10*r11*x12016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12018=IKPowWithIntegerCheck(r02,-1);
if(!x12018.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12018.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12019=IKsin(j4);
IkReal x12020=IKcos(j4);
IkReal x12021=(gconst10*r21);
IkReal x12022=((1.0)*sj0);
IkReal x12023=(gconst10*r11);
IkReal x12024=(gconst11*x12020);
IkReal x12025=((1.0)*x12020);
IkReal x12026=((1.0)*gconst11*x12019);
evalcond[0]=((-1.0)*r02*x12019);
evalcond[1]=((((-1.0)*r20*x12026))+((x12019*x12021)));
evalcond[2]=(((x12019*x12023))+(((-1.0)*r10*x12026)));
evalcond[3]=(((r20*x12024))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12021*x12025)));
evalcond[4]=((((-1.0)*cj1*sj2*x12022))+(((-1.0)*cj2*sj1*x12022))+(((-1.0)*x12023*x12025))+((r10*x12024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12027=((1.0)*gconst11);
CheckValue<IkReal> x12028=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12028.valid){
continue;
}
CheckValue<IkReal> x12029 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12027))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12028.value)))+(x12029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12030=IKsin(j4);
IkReal x12031=IKcos(j4);
IkReal x12032=((1.0)*cj2);
IkReal x12033=((1.0)*sj0);
IkReal x12034=(cj1*sj2);
IkReal x12035=(gconst10*x12030);
IkReal x12036=((1.0)*x12031);
IkReal x12037=(gconst11*x12031);
IkReal x12038=((1.0)*x12030);
IkReal x12039=(gconst11*x12038);
evalcond[0]=((((-1.0)*r20*x12039))+((r21*x12035)));
evalcond[1]=(cj0+(((-1.0)*r12*x12036))+((r11*x12035))+(((-1.0)*r10*x12039)));
evalcond[2]=((((-1.0)*cj1*x12032))+((r20*x12037))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12036)));
evalcond[3]=((((-1.0)*x12033))+((r01*x12035))+(((-1.0)*r02*x12036))+(((-1.0)*r00*x12039)));
evalcond[4]=((((-1.0)*gconst10*r01*x12036))+((r00*x12037))+(((-1.0)*r02*x12038))+(((-1.0)*cj0*sj1*x12032))+(((-1.0)*cj0*x12034)));
evalcond[5]=((((-1.0)*x12033*x12034))+(((-1.0)*gconst10*r11*x12036))+(((-1.0)*r12*x12038))+((r10*x12037))+(((-1.0)*sj0*sj1*x12032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12040=(gconst10*r21);
IkReal x12041=(gconst11*r20);
IkReal x12042=(sj1*sj2);
IkReal x12043=(cj1*cj2);
CheckValue<IkReal> x12044 = IKatan2WithCheck(IkReal((((r22*x12042))+(((-1.0)*r22*x12043)))),IkReal((((x12040*x12042))+(((-1.0)*x12041*x12042))+((x12041*x12043))+(((-1.0)*x12040*x12043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12044.valid){
continue;
}
CheckValue<IkReal> x12045=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12041*x12041)+(((-2.0)*x12040*x12041))+(x12040*x12040))),-1);
if(!x12045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12044.value)+(((1.5707963267949)*(x12045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12046=IKsin(j4);
IkReal x12047=IKcos(j4);
IkReal x12048=((1.0)*cj2);
IkReal x12049=((1.0)*sj0);
IkReal x12050=(cj1*sj2);
IkReal x12051=((1.0)*x12047);
IkReal x12052=(gconst10*x12046);
IkReal x12053=((1.0)*x12046);
IkReal x12054=(gconst11*x12047);
IkReal x12055=(gconst11*x12053);
evalcond[0]=((((-1.0)*r20*x12055))+(((-1.0)*r22*x12051))+((r21*x12052)));
evalcond[1]=((((-1.0)*r10*x12055))+cj0+(((-1.0)*r12*x12051))+((r11*x12052)));
evalcond[2]=(((r01*x12052))+(((-1.0)*x12049))+(((-1.0)*r02*x12051))+(((-1.0)*r00*x12055)));
evalcond[3]=(((r20*x12054))+(((-1.0)*cj1*x12048))+((sj1*sj2))+(((-1.0)*r22*x12053))+(((-1.0)*gconst10*r21*x12051)));
evalcond[4]=(((r00*x12054))+(((-1.0)*r02*x12053))+(((-1.0)*cj0*sj1*x12048))+(((-1.0)*gconst10*r01*x12051))+(((-1.0)*cj0*x12050)));
evalcond[5]=(((r10*x12054))+(((-1.0)*x12049*x12050))+(((-1.0)*sj0*sj1*x12048))+(((-1.0)*gconst10*r11*x12051))+(((-1.0)*r12*x12053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12056=((1.0)*sj0);
IkReal x12057=((1.0)*gconst10);
CheckValue<IkReal> x12058 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12056)))),IkReal(((((-1.0)*gconst10*r11*x12056))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12057))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12058.valid){
continue;
}
CheckValue<IkReal> x12059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12057))+(((-1.0)*gconst11*r21)))),-1);
if(!x12059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12058.value)+(((1.5707963267949)*(x12059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12060=IKsin(j4);
IkReal x12061=IKcos(j4);
IkReal x12062=((1.0)*cj2);
IkReal x12063=((1.0)*sj0);
IkReal x12064=(cj1*sj2);
IkReal x12065=((1.0)*x12061);
IkReal x12066=(gconst10*x12060);
IkReal x12067=((1.0)*x12060);
IkReal x12068=(gconst11*x12061);
IkReal x12069=(gconst11*x12067);
evalcond[0]=(((r21*x12066))+(((-1.0)*r20*x12069))+(((-1.0)*r22*x12065)));
evalcond[1]=(cj0+(((-1.0)*r10*x12069))+(((-1.0)*r12*x12065))+((r11*x12066)));
evalcond[2]=(((r01*x12066))+(((-1.0)*r02*x12065))+(((-1.0)*x12063))+(((-1.0)*r00*x12069)));
evalcond[3]=((((-1.0)*gconst10*r21*x12065))+((sj1*sj2))+((r20*x12068))+(((-1.0)*r22*x12067))+(((-1.0)*cj1*x12062)));
evalcond[4]=(((r00*x12068))+(((-1.0)*cj0*x12064))+(((-1.0)*cj0*sj1*x12062))+(((-1.0)*r02*x12067))+(((-1.0)*gconst10*r01*x12065)));
evalcond[5]=((((-1.0)*sj0*sj1*x12062))+((r10*x12068))+(((-1.0)*gconst10*r11*x12065))+(((-1.0)*r12*x12067))+(((-1.0)*x12063*x12064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12070=((1.0)*gconst11);
CheckValue<IkReal> x12071=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12070)))),-1);
if(!x12071.valid){
continue;
}
CheckValue<IkReal> x12072 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12071.value)))+(x12072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12073=IKsin(j4);
IkReal x12074=IKcos(j4);
IkReal x12075=((1.0)*cj2);
IkReal x12076=((1.0)*sj0);
IkReal x12077=(cj1*sj2);
IkReal x12078=((1.0)*x12074);
IkReal x12079=(gconst10*x12073);
IkReal x12080=((1.0)*x12073);
IkReal x12081=(gconst11*x12074);
IkReal x12082=(gconst11*x12080);
evalcond[0]=((((-1.0)*r20*x12082))+(((-1.0)*r22*x12078))+((r21*x12079)));
evalcond[1]=(cj0+((r11*x12079))+(((-1.0)*r12*x12078))+(((-1.0)*r10*x12082)));
evalcond[2]=((((-1.0)*r02*x12078))+(((-1.0)*r00*x12082))+(((-1.0)*x12076))+((r01*x12079)));
evalcond[3]=(((r20*x12081))+(((-1.0)*gconst10*r21*x12078))+((sj1*sj2))+(((-1.0)*r22*x12080))+(((-1.0)*cj1*x12075)));
evalcond[4]=((((-1.0)*gconst10*r01*x12078))+((r00*x12081))+(((-1.0)*cj0*sj1*x12075))+(((-1.0)*r02*x12080))+(((-1.0)*cj0*x12077)));
evalcond[5]=((((-1.0)*r12*x12080))+(((-1.0)*sj0*sj1*x12075))+(((-1.0)*gconst10*r11*x12078))+(((-1.0)*x12076*x12077))+((r10*x12081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12083=((-1.0)*r11);
CheckValue<IkReal> x12086 = IKatan2WithCheck(IkReal(x12083),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12086.valid){
continue;
}
IkReal x12084=((1.0)*(x12086.value));
IkReal x12085=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12084)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12084)));
IkReal gconst10=(x12083*x12085);
IkReal gconst11=((1.0)*r10*x12085);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12087=((-1.0)*r11);
CheckValue<IkReal> x12090 = IKatan2WithCheck(IkReal(x12087),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12090.valid){
continue;
}
IkReal x12088=((1.0)*(x12090.value));
IkReal x12089=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12088)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12088)));
IkReal gconst10=(x12087*x12089);
IkReal gconst11=((1.0)*r10*x12089);
IkReal x12091=r12*r12;
IkReal x12092=((1.0)*sj0);
IkReal x12093=(cj0*r02);
IkReal x12094=x11830;
j4eval[0]=((IKabs(((((-1.0)*x12092*x12094))+((r12*x12093*x12094))+((sj0*x12091*x12094)))))+(IKabs(((((-1.0)*x12093))+(((-1.0)*r12*x12092))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12095=((-1.0)*r11);
CheckValue<IkReal> x12098 = IKatan2WithCheck(IkReal(x12095),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12098.valid){
continue;
}
IkReal x12096=((1.0)*(x12098.value));
IkReal x12097=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12096)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12096)));
IkReal gconst10=(x12095*x12097);
IkReal gconst11=((1.0)*r10*x12097);
IkReal x12099=r12*r12;
IkReal x12100=((1.0)+(((-1.0)*x12099)));
IkReal x12101=(r22*sj1*sj2);
IkReal x12102=(cj1*cj2*r22);
CheckValue<IkReal> x12109=IKPowWithIntegerCheck(x12100,-1);
if(!x12109.valid){
continue;
}
IkReal x12103=x12109.value;
CheckValue<IkReal> x12110=IKPowWithIntegerCheck(((-1.0)+x12099),-1);
if(!x12110.valid){
continue;
}
IkReal x12104=x12110.value;
IkReal x12105=((1.0)*x12103);
if((x12100) < -0.00001)
continue;
IkReal x12106=IKsqrt(x12100);
IkReal x12107=(r12*x12104*x12106);
IkReal x12108=((((-1.0)*x12105*(r10*r10)*(r20*r20)))+(((-1.0)*x12105*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12103)));
j4eval[0]=x12108;
j4eval[1]=((IKabs((x12101+(((-1.0)*x12102)))))+(IKabs((((x12102*x12107))+(((-1.0)*x12101*x12107))))));
j4eval[2]=IKsign(x12108);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12111=((-1.0)*r11);
CheckValue<IkReal> x12114 = IKatan2WithCheck(IkReal(x12111),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12114.valid){
continue;
}
IkReal x12112=((1.0)*(x12114.value));
IkReal x12113=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12112)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12112)));
IkReal gconst10=(x12111*x12113);
IkReal gconst11=((1.0)*r10*x12113);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12115=((-1.0)*r11);
CheckValue<IkReal> x12118 = IKatan2WithCheck(IkReal(x12115),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12118.valid){
continue;
}
IkReal x12116=((1.0)*(x12118.value));
IkReal x12117=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12116)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12116)));
IkReal gconst10=(x12115*x12117);
IkReal gconst11=((1.0)*r10*x12117);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12119=((-1.0)*r11);
CheckValue<IkReal> x12122 = IKatan2WithCheck(IkReal(x12119),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12122.valid){
continue;
}
IkReal x12120=((1.0)*(x12122.value));
IkReal x12121=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12120)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12120)));
IkReal gconst10=(x12119*x12121);
IkReal gconst11=((1.0)*r10*x12121);
IkReal x12123=(cj1*r02*sj2);
IkReal x12124=(cj2*r02*sj1);
IkReal x12125=x11830;
IkReal x12126=(r12*x12125);
j4eval[0]=((IKabs((x12123+x12124)))+(IKabs((((x12124*x12126))+((x12123*x12126))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12127=(cj1*sj2);
IkReal x12128=(cj2*sj1);
IkReal x12129=(gconst11*r00);
IkReal x12130=((1.0)*gconst10*r01);
CheckValue<IkReal> x12131 = IKatan2WithCheck(IkReal(((((-1.0)*x12127*x12130))+(((-1.0)*x12128*x12130))+((x12127*x12129))+((x12128*x12129)))),IkReal((((r02*x12128))+((r02*x12127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12131.valid){
continue;
}
CheckValue<IkReal> x12132=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12131.value)+(((1.5707963267949)*(x12132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12133=IKcos(j4);
IkReal x12134=IKsin(j4);
IkReal x12135=((1.0)*cj2);
IkReal x12136=((1.0)*x12133);
IkReal x12137=(gconst10*x12133);
IkReal x12138=(gconst10*x12134);
IkReal x12139=((1.0)*gconst11*x12134);
evalcond[0]=((((-1.0)*gconst11*r00*x12136))+((r01*x12137))+((r02*x12134)));
evalcond[1]=((((-1.0)*r20*x12139))+((r21*x12138))+(((-1.0)*r22*x12136)));
evalcond[2]=((((-1.0)*r12*x12136))+(((-1.0)*r10*x12139))+((r11*x12138)));
evalcond[3]=((-1.0)+((r01*x12138))+(((-1.0)*r00*x12139))+(((-1.0)*r02*x12136)));
evalcond[4]=((((-1.0)*cj1*x12135))+((sj1*sj2))+((r21*x12137))+((r22*x12134))+(((-1.0)*gconst11*r20*x12136)));
evalcond[5]=(((r12*x12134))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12136))+((r11*x12137))+(((-1.0)*sj1*x12135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12140=(gconst10*r01);
IkReal x12141=(gconst11*r00);
CheckValue<IkReal> x12142 = IKatan2WithCheck(IkReal(((((-1.0)*x12141))+x12140)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12142.valid){
continue;
}
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(IKsign(((x12140*x12140)+(((-2.0)*x12140*x12141))+(x12141*x12141)+(r02*r02))),-1);
if(!x12143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12142.value)+(((1.5707963267949)*(x12143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12144=IKcos(j4);
IkReal x12145=IKsin(j4);
IkReal x12146=((1.0)*cj2);
IkReal x12147=((1.0)*x12144);
IkReal x12148=(gconst10*x12144);
IkReal x12149=(gconst10*x12145);
IkReal x12150=((1.0)*gconst11*x12145);
evalcond[0]=(((r02*x12145))+((r01*x12148))+(((-1.0)*gconst11*r00*x12147)));
evalcond[1]=((((-1.0)*r22*x12147))+((r21*x12149))+(((-1.0)*r20*x12150)));
evalcond[2]=((((-1.0)*r12*x12147))+((r11*x12149))+(((-1.0)*r10*x12150)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12147))+(((-1.0)*r00*x12150))+((r01*x12149)));
evalcond[4]=(((r22*x12145))+(((-1.0)*gconst11*r20*x12147))+((sj1*sj2))+(((-1.0)*cj1*x12146))+((r21*x12148)));
evalcond[5]=((((-1.0)*gconst11*r10*x12147))+(((-1.0)*cj1*sj2))+((r12*x12145))+((r11*x12148))+(((-1.0)*sj1*x12146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12151 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12151.valid){
continue;
}
CheckValue<IkReal> x12152=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12151.value)+(((1.5707963267949)*(x12152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12153=IKcos(j4);
IkReal x12154=IKsin(j4);
IkReal x12155=((1.0)*cj2);
IkReal x12156=((1.0)*x12153);
IkReal x12157=(gconst10*x12153);
IkReal x12158=(gconst10*x12154);
IkReal x12159=((1.0)*gconst11*x12154);
evalcond[0]=(((r02*x12154))+((r01*x12157))+(((-1.0)*gconst11*r00*x12156)));
evalcond[1]=((((-1.0)*r22*x12156))+((r21*x12158))+(((-1.0)*r20*x12159)));
evalcond[2]=((((-1.0)*r12*x12156))+((r11*x12158))+(((-1.0)*r10*x12159)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12156))+(((-1.0)*r00*x12159))+((r01*x12158)));
evalcond[4]=((((-1.0)*gconst11*r20*x12156))+((r22*x12154))+((sj1*sj2))+((r21*x12157))+(((-1.0)*cj1*x12155)));
evalcond[5]=((((-1.0)*gconst11*r10*x12156))+((r12*x12154))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12155))+((r11*x12157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12160=((-1.0)*r11);
CheckValue<IkReal> x12163 = IKatan2WithCheck(IkReal(x12160),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12163.valid){
continue;
}
IkReal x12161=((1.0)*(x12163.value));
IkReal x12162=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12161)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12161)));
IkReal gconst10=(x12160*x12162);
IkReal gconst11=((1.0)*r10*x12162);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12164=((-1.0)*r11);
CheckValue<IkReal> x12167 = IKatan2WithCheck(IkReal(x12164),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12167.valid){
continue;
}
IkReal x12165=((1.0)*(x12167.value));
IkReal x12166=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12165)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12165)));
IkReal gconst10=(x12164*x12166);
IkReal gconst11=((1.0)*r10*x12166);
IkReal x12168=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12172=IKPowWithIntegerCheck(x12168,-1);
if(!x12172.valid){
continue;
}
IkReal x12169=x12172.value;
IkReal x12170=((1.0)*x12169);
IkReal x12171=((((-1.0)*x12170*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12169))+(((-1.0)*(r02*r02)))+(((-1.0)*x12170*(r00*r00)*(r10*r10))));
j4eval[0]=x12171;
j4eval[1]=r02;
j4eval[2]=x12168;
j4eval[3]=IKsign(x12171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12173=((-1.0)*r11);
CheckValue<IkReal> x12176 = IKatan2WithCheck(IkReal(x12173),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12176.valid){
continue;
}
IkReal x12174=((1.0)*(x12176.value));
IkReal x12175=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12174)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12174)));
IkReal gconst10=(x12173*x12175);
IkReal gconst11=((1.0)*r10*x12175);
IkReal x12177=r12*r12;
IkReal x12178=((1.0)*r02);
IkReal x12179=(cj1*sj2);
IkReal x12180=(cj2*sj1);
CheckValue<IkReal> x12184=IKPowWithIntegerCheck(((-1.0)+x12177),-1);
if(!x12184.valid){
continue;
}
IkReal x12181=x12184.value;
if((((1.0)+(((-1.0)*x12177)))) < -0.00001)
continue;
IkReal x12182=IKsqrt(((1.0)+(((-1.0)*x12177))));
IkReal x12183=(r12*x12181*x12182);
j4eval[0]=((IKabs(((((-1.0)*x12178*x12179))+(((-1.0)*x12178*x12180)))))+(IKabs(((((-1.0)*x12178*x12180*x12183))+(((-1.0)*x12178*x12179*x12183))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12185=(cj1*sj2);
IkReal x12186=(gconst10*r01);
IkReal x12187=(cj2*sj1);
IkReal x12188=((1.0)*r02);
IkReal x12189=((1.0)*gconst11*r00);
CheckValue<IkReal> x12190=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12190.valid){
continue;
}
CheckValue<IkReal> x12191 = IKatan2WithCheck(IkReal((((x12186*x12187))+(((-1.0)*x12185*x12189))+(((-1.0)*x12187*x12189))+((x12185*x12186)))),IkReal(((((-1.0)*x12185*x12188))+(((-1.0)*x12187*x12188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12190.value)))+(x12191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12192=IKcos(j4);
IkReal x12193=IKsin(j4);
IkReal x12194=((1.0)*x12192);
IkReal x12195=(gconst10*x12192);
IkReal x12196=(gconst10*x12193);
IkReal x12197=((1.0)*gconst11*x12193);
evalcond[0]=((((-1.0)*gconst11*r00*x12194))+((r02*x12193))+((r01*x12195)));
evalcond[1]=((((-1.0)*r20*x12197))+((r21*x12196))+(((-1.0)*r22*x12194)));
evalcond[2]=(((r11*x12196))+(((-1.0)*r10*x12197))+(((-1.0)*r12*x12194)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12194))+((r01*x12196))+(((-1.0)*r00*x12197)));
evalcond[4]=(((cj2*sj1))+((r12*x12193))+((cj1*sj2))+((r11*x12195))+(((-1.0)*gconst11*r10*x12194)));
evalcond[5]=(((r21*x12195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12193))+(((-1.0)*gconst11*r20*x12194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12198=(gconst10*r01);
IkReal x12199=(gconst11*r00);
CheckValue<IkReal> x12200 = IKatan2WithCheck(IkReal((x12198+(((-1.0)*x12199)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12200.valid){
continue;
}
CheckValue<IkReal> x12201=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x12199*x12199)))+(((-1.0)*(x12198*x12198)))+(((2.0)*x12198*x12199)))),-1);
if(!x12201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12200.value)+(((1.5707963267949)*(x12201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12202=IKcos(j4);
IkReal x12203=IKsin(j4);
IkReal x12204=((1.0)*x12202);
IkReal x12205=(gconst10*x12202);
IkReal x12206=(gconst10*x12203);
IkReal x12207=((1.0)*gconst11*x12203);
evalcond[0]=(((r02*x12203))+(((-1.0)*gconst11*r00*x12204))+((r01*x12205)));
evalcond[1]=((((-1.0)*r22*x12204))+((r21*x12206))+(((-1.0)*r20*x12207)));
evalcond[2]=((((-1.0)*r12*x12204))+(((-1.0)*r10*x12207))+((r11*x12206)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12204))+(((-1.0)*r00*x12207))+((r01*x12206)));
evalcond[4]=(((cj2*sj1))+((r12*x12203))+(((-1.0)*gconst11*r10*x12204))+((cj1*sj2))+((r11*x12205)));
evalcond[5]=(((r22*x12203))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12204))+((r21*x12205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12208=((1.0)*gconst11);
CheckValue<IkReal> x12209 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12209.valid){
continue;
}
CheckValue<IkReal> x12210=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12208)))),-1);
if(!x12210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12209.value)+(((1.5707963267949)*(x12210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12211=IKcos(j4);
IkReal x12212=IKsin(j4);
IkReal x12213=((1.0)*x12211);
IkReal x12214=(gconst10*x12211);
IkReal x12215=(gconst10*x12212);
IkReal x12216=((1.0)*gconst11*x12212);
evalcond[0]=((((-1.0)*gconst11*r00*x12213))+((r02*x12212))+((r01*x12214)));
evalcond[1]=((((-1.0)*r22*x12213))+((r21*x12215))+(((-1.0)*r20*x12216)));
evalcond[2]=((((-1.0)*r12*x12213))+(((-1.0)*r10*x12216))+((r11*x12215)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12213))+(((-1.0)*r00*x12216))+((r01*x12215)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12213))+((r12*x12212))+((cj1*sj2))+((r11*x12214)));
evalcond[5]=(((r22*x12212))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12213))+((r21*x12214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12217=((-1.0)*r11);
IkReal x12218=((-1.0)*r10);
CheckValue<IkReal> x12220 = IKatan2WithCheck(IkReal(x12217),IkReal(x12218),IKFAST_ATAN2_MAGTHRESH);
if(!x12220.valid){
continue;
}
IkReal x12219=((1.0)*(x12220.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12219)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12218);
rxp1_1=(px*r21);
rxp1_2=(px*x12217);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12219)));
IkReal gconst10=x12217;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12221=((-1.0)*r11);
IkReal x12222=((-1.0)*r10);
CheckValue<IkReal> x12224 = IKatan2WithCheck(IkReal(x12221),IkReal(x12222),IKFAST_ATAN2_MAGTHRESH);
if(!x12224.valid){
continue;
}
IkReal x12223=((1.0)*(x12224.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12223)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12222);
rxp1_1=(px*r21);
rxp1_2=(px*x12221);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12223)));
IkReal gconst10=x12221;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12225=((-1.0)*r11);
IkReal x12226=((-1.0)*r10);
CheckValue<IkReal> x12228 = IKatan2WithCheck(IkReal(x12225),IkReal(x12226),IKFAST_ATAN2_MAGTHRESH);
if(!x12228.valid){
continue;
}
IkReal x12227=((1.0)*(x12228.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12227)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12226);
rxp1_1=(px*r21);
rxp1_2=(px*x12225);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12227)));
IkReal gconst10=x12225;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12231=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12231.valid){
continue;
}
IkReal x12229=x12231.value;
IkReal x12230=(sj0*x12229);
cj4array[0]=(((cj2*sj1*x12230))+((cj1*sj2*x12230)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12232=IKsin(j4);
IkReal x12233=IKcos(j4);
IkReal x12234=(gconst10*r21);
IkReal x12235=((1.0)*x12233);
IkReal x12236=((1.0)*gconst11*x12232);
evalcond[0]=(r02*x12232);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12235)));
evalcond[2]=((((-1.0)*r20*x12236))+((x12232*x12234)));
evalcond[3]=(((gconst10*r11*x12232))+(((-1.0)*r10*x12236)));
evalcond[4]=((((-1.0)*gconst11*r20*x12235))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12233*x12234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12238=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12238.valid){
continue;
}
IkReal x12237=x12238.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12237))+((cj1*cj2*x12237)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12239=IKsin(j4);
IkReal x12240=IKcos(j4);
IkReal x12241=((1.0)*sj0);
IkReal x12242=(gconst10*x12239);
IkReal x12243=((1.0)*x12240);
IkReal x12244=((1.0)*gconst11*x12239);
evalcond[0]=(r02*x12239);
evalcond[1]=((((-1.0)*x12241))+(((-1.0)*r02*x12243)));
evalcond[2]=((((-1.0)*r20*x12244))+((r21*x12242)));
evalcond[3]=((((-1.0)*r10*x12244))+((r11*x12242)));
evalcond[4]=(((gconst10*r11*x12240))+(((-1.0)*cj2*sj1*x12241))+(((-1.0)*gconst11*r10*x12243))+(((-1.0)*cj1*sj2*x12241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12245=IKPowWithIntegerCheck(r02,-1);
if(!x12245.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12245.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12246=IKsin(j4);
IkReal x12247=IKcos(j4);
IkReal x12248=(gconst10*r21);
IkReal x12249=((1.0)*cj1);
IkReal x12250=(gconst10*r11);
IkReal x12251=((1.0)*gconst11*x12246);
IkReal x12252=((1.0)*gconst11*x12247);
evalcond[0]=(r02*x12246);
evalcond[1]=(((x12246*x12248))+(((-1.0)*r20*x12251)));
evalcond[2]=(((x12246*x12250))+(((-1.0)*r10*x12251)));
evalcond[3]=(((x12247*x12248))+((sj1*sj2))+(((-1.0)*r20*x12252))+(((-1.0)*cj2*x12249)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12247*x12250))+(((-1.0)*r10*x12252))+(((-1.0)*sj0*sj2*x12249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12253=((1.0)*gconst11);
CheckValue<IkReal> x12254 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12253))+(((-1.0)*cj0*r00*x12253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12254.valid){
continue;
}
CheckValue<IkReal> x12255=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12254.value)+(((1.5707963267949)*(x12255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12256=IKsin(j4);
IkReal x12257=IKcos(j4);
IkReal x12258=((1.0)*gconst11);
IkReal x12259=((1.0)*cj2);
IkReal x12260=((1.0)*sj0);
IkReal x12261=(cj1*sj2);
IkReal x12262=(gconst10*x12257);
IkReal x12263=(gconst10*x12256);
IkReal x12264=((1.0)*x12257);
evalcond[0]=((((-1.0)*r20*x12256*x12258))+((r21*x12263)));
evalcond[1]=((((-1.0)*r12*x12264))+cj0+((r11*x12263))+(((-1.0)*r10*x12256*x12258)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r20*x12257*x12258))+((r21*x12262))+(((-1.0)*cj1*x12259)));
evalcond[3]=(((r01*x12263))+(((-1.0)*r00*x12256*x12258))+(((-1.0)*r02*x12264))+(((-1.0)*x12260)));
evalcond[4]=((((-1.0)*cj0*sj1*x12259))+((r01*x12262))+(((-1.0)*r00*x12257*x12258))+(((-1.0)*cj0*x12261))+((r02*x12256)));
evalcond[5]=((((-1.0)*r10*x12257*x12258))+((r12*x12256))+((r11*x12262))+(((-1.0)*x12260*x12261))+(((-1.0)*sj0*sj1*x12259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12265=(gconst10*r21);
IkReal x12266=(gconst11*r20);
IkReal x12267=(sj1*sj2);
IkReal x12268=(cj1*cj2);
CheckValue<IkReal> x12269 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12268))+((r22*x12267)))),IkReal(((((-1.0)*x12265*x12268))+(((-1.0)*x12266*x12267))+((x12265*x12267))+((x12266*x12268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12269.valid){
continue;
}
CheckValue<IkReal> x12270=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12265*x12265)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12266*x12266)))+(((2.0)*x12265*x12266)))),-1);
if(!x12270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12269.value)+(((1.5707963267949)*(x12270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12271=IKsin(j4);
IkReal x12272=IKcos(j4);
IkReal x12273=((1.0)*cj2);
IkReal x12274=((1.0)*sj0);
IkReal x12275=(cj1*sj2);
IkReal x12276=((1.0)*x12272);
IkReal x12277=(gconst10*x12272);
IkReal x12278=(gconst10*x12271);
IkReal x12279=((1.0)*gconst11*x12271);
evalcond[0]=(((r21*x12278))+(((-1.0)*r22*x12276))+(((-1.0)*r20*x12279)));
evalcond[1]=(cj0+(((-1.0)*r10*x12279))+(((-1.0)*r12*x12276))+((r11*x12278)));
evalcond[2]=((((-1.0)*r02*x12276))+(((-1.0)*x12274))+(((-1.0)*r00*x12279))+((r01*x12278)));
evalcond[3]=(((r21*x12277))+(((-1.0)*cj1*x12273))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12276))+((r22*x12271)));
evalcond[4]=((((-1.0)*cj0*x12275))+((r02*x12271))+(((-1.0)*gconst11*r00*x12276))+(((-1.0)*cj0*sj1*x12273))+((r01*x12277)));
evalcond[5]=((((-1.0)*sj0*sj1*x12273))+((r12*x12271))+((r11*x12277))+(((-1.0)*x12274*x12275))+(((-1.0)*gconst11*r10*x12276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12280=((1.0)*sj0);
IkReal x12281=((1.0)*gconst10);
CheckValue<IkReal> x12282=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12281)))),-1);
if(!x12282.valid){
continue;
}
CheckValue<IkReal> x12283 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12280))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12281))+(((-1.0)*gconst10*r11*x12280))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12282.value)))+(x12283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12284=IKsin(j4);
IkReal x12285=IKcos(j4);
IkReal x12286=((1.0)*cj2);
IkReal x12287=((1.0)*sj0);
IkReal x12288=(cj1*sj2);
IkReal x12289=((1.0)*x12285);
IkReal x12290=(gconst10*x12285);
IkReal x12291=(gconst10*x12284);
IkReal x12292=((1.0)*gconst11*x12284);
evalcond[0]=(((r21*x12291))+(((-1.0)*r22*x12289))+(((-1.0)*r20*x12292)));
evalcond[1]=((((-1.0)*r10*x12292))+cj0+(((-1.0)*r12*x12289))+((r11*x12291)));
evalcond[2]=(((r01*x12291))+(((-1.0)*r00*x12292))+(((-1.0)*r02*x12289))+(((-1.0)*x12287)));
evalcond[3]=(((r21*x12290))+((r22*x12284))+(((-1.0)*gconst11*r20*x12289))+(((-1.0)*cj1*x12286))+((sj1*sj2)));
evalcond[4]=(((r01*x12290))+((r02*x12284))+(((-1.0)*gconst11*r00*x12289))+(((-1.0)*cj0*sj1*x12286))+(((-1.0)*cj0*x12288)));
evalcond[5]=((((-1.0)*sj0*sj1*x12286))+(((-1.0)*x12287*x12288))+(((-1.0)*gconst11*r10*x12289))+((r11*x12290))+((r12*x12284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12293=((1.0)*gconst11);
CheckValue<IkReal> x12294=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12293)))),-1);
if(!x12294.valid){
continue;
}
CheckValue<IkReal> x12295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12293))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12294.value)))+(x12295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12296=IKsin(j4);
IkReal x12297=IKcos(j4);
IkReal x12298=((1.0)*cj2);
IkReal x12299=((1.0)*sj0);
IkReal x12300=(cj1*sj2);
IkReal x12301=((1.0)*x12297);
IkReal x12302=(gconst10*x12297);
IkReal x12303=(gconst10*x12296);
IkReal x12304=((1.0)*gconst11*x12296);
evalcond[0]=((((-1.0)*r20*x12304))+((r21*x12303))+(((-1.0)*r22*x12301)));
evalcond[1]=(cj0+((r11*x12303))+(((-1.0)*r10*x12304))+(((-1.0)*r12*x12301)));
evalcond[2]=((((-1.0)*x12299))+(((-1.0)*r02*x12301))+(((-1.0)*r00*x12304))+((r01*x12303)));
evalcond[3]=(((r21*x12302))+(((-1.0)*gconst11*r20*x12301))+((sj1*sj2))+((r22*x12296))+(((-1.0)*cj1*x12298)));
evalcond[4]=((((-1.0)*cj0*x12300))+(((-1.0)*gconst11*r00*x12301))+(((-1.0)*cj0*sj1*x12298))+((r02*x12296))+((r01*x12302)));
evalcond[5]=((((-1.0)*gconst11*r10*x12301))+((r11*x12302))+((r12*x12296))+(((-1.0)*sj0*sj1*x12298))+(((-1.0)*x12299*x12300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12305=((-1.0)*r11);
CheckValue<IkReal> x12308 = IKatan2WithCheck(IkReal(x12305),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12308.valid){
continue;
}
IkReal x12306=((1.0)*(x12308.value));
IkReal x12307=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12306)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12306)));
IkReal gconst10=(x12305*x12307);
IkReal gconst11=((1.0)*r10*x12307);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12309=gconst10*gconst10;
IkReal x12310=gconst11*gconst11;
IkReal x12311=(gconst10*r21);
IkReal x12312=(cj3*r00);
IkReal x12313=(r00*sj3);
IkReal x12314=((1.0)*gconst11);
IkReal x12315=(gconst10*r20);
IkReal x12316=(r01*sj3);
IkReal x12317=(cj3*gconst11*r01);
IkReal x12318=(r21*x12309);
IkReal x12319=(r20*x12310);
CheckValue<IkReal> x12320=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12311*x12313*x12314))+(((-1.0)*x12314*x12315*x12316))+((x12313*x12319))+((x12316*x12318))+((r02*r22*sj3)))),-1);
if(!x12320.valid){
continue;
}
CheckValue<IkReal> x12321 = IKatan2WithCheck(IkReal((((gconst10*r22*x12312))+((r22*x12317)))),IkReal(((((-1.0)*x12312*x12314*x12315))+((x12311*x12317))+((x12312*x12318))+(((-1.0)*cj3*r01*x12319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12320.value)))+(x12321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12322=IKsin(j4);
IkReal x12323=IKcos(j4);
IkReal x12324=(sj1*sj2);
IkReal x12325=(gconst10*sj3);
IkReal x12326=(cj3*gconst10);
IkReal x12327=(gconst11*r20);
IkReal x12328=(gconst11*r21);
IkReal x12329=(gconst11*r00);
IkReal x12330=(cj3*gconst11);
IkReal x12331=(gconst11*r10);
IkReal x12332=((1.0)*cj1);
IkReal x12333=(cj2*sj1);
IkReal x12334=(gconst11*sj3);
IkReal x12335=(cj2*x12332);
IkReal x12336=((1.0)*x12323);
IkReal x12337=((1.0)*x12322);
IkReal x12338=(gconst10*x12322);
IkReal x12339=(cj3*x12322);
IkReal x12340=(sj3*x12323);
evalcond[0]=((((-1.0)*r22*x12336))+((r21*x12338))+(((-1.0)*x12327*x12337)));
evalcond[1]=((((-1.0)*x12331*x12337))+((r11*x12338))+(((-1.0)*r12*x12336)));
evalcond[2]=((-1.0)+((r01*x12338))+(((-1.0)*x12329*x12337))+(((-1.0)*r02*x12336)));
evalcond[3]=((((-1.0)*cj3*x12329*x12336))+((r01*x12323*x12326))+((r00*x12325))+((r01*x12334))+((r02*x12339)));
evalcond[4]=((((-1.0)*r01*x12325*x12336))+((r00*x12326))+((r01*x12330))+((x12329*x12340))+(((-1.0)*r02*sj3*x12337)));
evalcond[5]=((((-1.0)*cj3*x12327*x12336))+((r21*x12323*x12326))+((cj1*sj2))+x12333+((r20*x12325))+((sj3*x12328))+((r22*x12339)));
evalcond[6]=(x12324+(((-1.0)*x12335))+((r12*x12339))+((r10*x12325))+((r11*x12323*x12326))+((r11*x12334))+(((-1.0)*r10*x12330*x12336)));
evalcond[7]=(x12324+((r20*x12326))+(((-1.0)*x12335))+(((-1.0)*r21*x12325*x12336))+((cj3*x12328))+(((-1.0)*r22*sj3*x12337))+((x12327*x12340)));
evalcond[8]=((((-1.0)*r12*sj3*x12337))+((r10*x12326))+(((-1.0)*sj2*x12332))+(((-1.0)*r11*x12325*x12336))+((r11*x12330))+((x12331*x12340))+(((-1.0)*x12333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12341 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12341.valid){
continue;
}
CheckValue<IkReal> x12342=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12341.value)+(((1.5707963267949)*(x12342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12343=IKsin(j4);
IkReal x12344=IKcos(j4);
IkReal x12345=(sj1*sj2);
IkReal x12346=(gconst10*sj3);
IkReal x12347=(cj3*gconst10);
IkReal x12348=(gconst11*r20);
IkReal x12349=(gconst11*r21);
IkReal x12350=(gconst11*r00);
IkReal x12351=(cj3*gconst11);
IkReal x12352=(gconst11*r10);
IkReal x12353=((1.0)*cj1);
IkReal x12354=(cj2*sj1);
IkReal x12355=(gconst11*sj3);
IkReal x12356=(cj2*x12353);
IkReal x12357=((1.0)*x12344);
IkReal x12358=((1.0)*x12343);
IkReal x12359=(gconst10*x12343);
IkReal x12360=(cj3*x12343);
IkReal x12361=(sj3*x12344);
evalcond[0]=((((-1.0)*x12348*x12358))+((r21*x12359))+(((-1.0)*r22*x12357)));
evalcond[1]=((((-1.0)*x12352*x12358))+((r11*x12359))+(((-1.0)*r12*x12357)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12357))+((r01*x12359))+(((-1.0)*x12350*x12358)));
evalcond[3]=(((r00*x12346))+((r01*x12355))+(((-1.0)*cj3*x12350*x12357))+((r01*x12344*x12347))+((r02*x12360)));
evalcond[4]=((((-1.0)*r01*x12346*x12357))+((r00*x12347))+((r01*x12351))+((x12350*x12361))+(((-1.0)*r02*sj3*x12358)));
evalcond[5]=(((r20*x12346))+((cj1*sj2))+x12354+((sj3*x12349))+(((-1.0)*cj3*x12348*x12357))+((r22*x12360))+((r21*x12344*x12347)));
evalcond[6]=((((-1.0)*x12356))+x12345+(((-1.0)*r10*x12351*x12357))+((r11*x12355))+((r11*x12344*x12347))+((r10*x12346))+((r12*x12360)));
evalcond[7]=(((x12348*x12361))+((r20*x12347))+(((-1.0)*x12356))+x12345+(((-1.0)*r21*x12346*x12357))+((cj3*x12349))+(((-1.0)*r22*sj3*x12358)));
evalcond[8]=((((-1.0)*x12354))+(((-1.0)*sj2*x12353))+(((-1.0)*r11*x12346*x12357))+((r11*x12351))+((x12352*x12361))+((r10*x12347))+(((-1.0)*r12*sj3*x12358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12362=((-1.0)*r11);
CheckValue<IkReal> x12365 = IKatan2WithCheck(IkReal(x12362),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12365.valid){
continue;
}
IkReal x12363=((1.0)*(x12365.value));
IkReal x12364=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12363)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12363)));
IkReal gconst10=(x12362*x12364);
IkReal gconst11=((1.0)*r10*x12364);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12366=gconst10*gconst10;
IkReal x12367=gconst11*gconst11;
IkReal x12368=(gconst10*r21);
IkReal x12369=(cj3*r00);
IkReal x12370=(r00*sj3);
IkReal x12371=((1.0)*gconst11);
IkReal x12372=(gconst10*r20);
IkReal x12373=(r01*sj3);
IkReal x12374=(cj3*gconst11*r01);
IkReal x12375=(r21*x12366);
IkReal x12376=(r20*x12367);
CheckValue<IkReal> x12377=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12371*x12372*x12373))+((x12370*x12376))+((x12373*x12375))+((r02*r22*sj3))+(((-1.0)*x12368*x12370*x12371)))),-1);
if(!x12377.valid){
continue;
}
CheckValue<IkReal> x12378 = IKatan2WithCheck(IkReal((((gconst10*r22*x12369))+((r22*x12374)))),IkReal(((((-1.0)*cj3*r01*x12376))+((x12368*x12374))+(((-1.0)*x12369*x12371*x12372))+((x12369*x12375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12377.value)))+(x12378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12379=IKsin(j4);
IkReal x12380=IKcos(j4);
IkReal x12381=(cj2*sj1);
IkReal x12382=(cj1*sj2);
IkReal x12383=(gconst10*sj3);
IkReal x12384=(cj3*gconst10);
IkReal x12385=(gconst11*r20);
IkReal x12386=(gconst11*r21);
IkReal x12387=(gconst11*r00);
IkReal x12388=(sj1*sj2);
IkReal x12389=(cj3*gconst11);
IkReal x12390=(gconst11*r10);
IkReal x12391=(cj1*cj2);
IkReal x12392=(gconst11*sj3);
IkReal x12393=((1.0)*x12380);
IkReal x12394=((1.0)*x12379);
IkReal x12395=(gconst10*x12379);
IkReal x12396=(cj3*x12379);
IkReal x12397=(sj3*x12380);
IkReal x12398=(x12382+x12381);
evalcond[0]=((((-1.0)*x12385*x12394))+(((-1.0)*r22*x12393))+((r21*x12395)));
evalcond[1]=((((-1.0)*r12*x12393))+((r11*x12395))+(((-1.0)*x12390*x12394)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12393))+((r01*x12395))+(((-1.0)*x12387*x12394)));
evalcond[3]=((((-1.0)*cj3*x12387*x12393))+((r02*x12396))+((r00*x12383))+((r01*x12392))+((r01*x12380*x12384)));
evalcond[4]=((((-1.0)*r01*x12383*x12393))+((r00*x12384))+((r01*x12389))+((x12387*x12397))+(((-1.0)*r02*sj3*x12394)));
evalcond[5]=(((r22*x12396))+(((-1.0)*cj3*x12385*x12393))+x12398+((r20*x12383))+((sj3*x12386))+((r21*x12380*x12384)));
evalcond[6]=((((-1.0)*r10*x12389*x12393))+((r11*x12392))+((r10*x12383))+x12391+((r11*x12380*x12384))+(((-1.0)*x12388))+((r12*x12396)));
evalcond[7]=(((r11*x12389))+((r10*x12384))+((x12390*x12397))+x12398+(((-1.0)*r12*sj3*x12394))+(((-1.0)*r11*x12383*x12393)));
evalcond[8]=(((cj3*x12386))+(((-1.0)*r21*x12383*x12393))+(((-1.0)*r22*sj3*x12394))+x12388+((x12385*x12397))+((r20*x12384))+(((-1.0)*x12391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12399=((1.0)*gconst11);
CheckValue<IkReal> x12400 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12400.valid){
continue;
}
CheckValue<IkReal> x12401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12399))+(((-1.0)*gconst10*r20)))),-1);
if(!x12401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12400.value)+(((1.5707963267949)*(x12401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12402=IKsin(j4);
IkReal x12403=IKcos(j4);
IkReal x12404=(cj2*sj1);
IkReal x12405=(cj1*sj2);
IkReal x12406=(gconst10*sj3);
IkReal x12407=(cj3*gconst10);
IkReal x12408=(gconst11*r20);
IkReal x12409=(gconst11*r21);
IkReal x12410=(gconst11*r00);
IkReal x12411=(sj1*sj2);
IkReal x12412=(cj3*gconst11);
IkReal x12413=(gconst11*r10);
IkReal x12414=(cj1*cj2);
IkReal x12415=(gconst11*sj3);
IkReal x12416=((1.0)*x12403);
IkReal x12417=((1.0)*x12402);
IkReal x12418=(gconst10*x12402);
IkReal x12419=(cj3*x12402);
IkReal x12420=(sj3*x12403);
IkReal x12421=(x12404+x12405);
evalcond[0]=((((-1.0)*r22*x12416))+((r21*x12418))+(((-1.0)*x12408*x12417)));
evalcond[1]=(((r11*x12418))+(((-1.0)*x12413*x12417))+(((-1.0)*r12*x12416)));
evalcond[2]=((1.0)+(((-1.0)*x12410*x12417))+((r01*x12418))+(((-1.0)*r02*x12416)));
evalcond[3]=((((-1.0)*cj3*x12410*x12416))+((r01*x12415))+((r02*x12419))+((r00*x12406))+((r01*x12403*x12407)));
evalcond[4]=((((-1.0)*r02*sj3*x12417))+((r01*x12412))+((x12410*x12420))+(((-1.0)*r01*x12406*x12416))+((r00*x12407)));
evalcond[5]=(((r21*x12403*x12407))+((sj3*x12409))+((r22*x12419))+(((-1.0)*cj3*x12408*x12416))+((r20*x12406))+x12421);
evalcond[6]=(((r11*x12415))+((r12*x12419))+(((-1.0)*x12411))+(((-1.0)*r10*x12412*x12416))+((r10*x12406))+x12414+((r11*x12403*x12407)));
evalcond[7]=(((r11*x12412))+((r10*x12407))+(((-1.0)*r12*sj3*x12417))+x12421+((x12413*x12420))+(((-1.0)*r11*x12406*x12416)));
evalcond[8]=((((-1.0)*r21*x12406*x12416))+(((-1.0)*x12414))+((cj3*x12409))+(((-1.0)*r22*sj3*x12417))+((r20*x12407))+((x12408*x12420))+x12411);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12422=((-1.0)*r11);
IkReal x12423=((-1.0)*r10);
CheckValue<IkReal> x12425 = IKatan2WithCheck(IkReal(x12422),IkReal(x12423),IKFAST_ATAN2_MAGTHRESH);
if(!x12425.valid){
continue;
}
IkReal x12424=((1.0)*(x12425.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12424)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12423);
rxp1_1=(px*r21);
rxp1_2=(px*x12422);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12424)));
IkReal gconst10=x12422;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12426=((-1.0)*r11);
IkReal x12427=((-1.0)*r10);
CheckValue<IkReal> x12429 = IKatan2WithCheck(IkReal(x12426),IkReal(x12427),IKFAST_ATAN2_MAGTHRESH);
if(!x12429.valid){
continue;
}
IkReal x12428=((1.0)*(x12429.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12428)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12427);
rxp1_1=(px*r21);
rxp1_2=(px*x12426);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12428)));
IkReal gconst10=x12426;
IkReal gconst11=((1.0)*r10);
IkReal x12430=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12430))+(((-1.0)*r10*r20*x12430)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12431=((-1.0)*r11);
IkReal x12432=((-1.0)*r10);
CheckValue<IkReal> x12434 = IKatan2WithCheck(IkReal(x12431),IkReal(x12432),IKFAST_ATAN2_MAGTHRESH);
if(!x12434.valid){
continue;
}
IkReal x12433=((1.0)*(x12434.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12433)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12432);
rxp1_1=(px*r21);
rxp1_2=(px*x12431);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12433)));
IkReal gconst10=x12431;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12436=IKPowWithIntegerCheck(r02,-1);
if(!x12436.valid){
continue;
}
IkReal x12435=x12436.value;
CheckValue<IkReal> x12437=IKPowWithIntegerCheck(cj3,-1);
if(!x12437.valid){
continue;
}
if( IKabs((x12435*(x12437.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12435)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12435*(x12437.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12435))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12435*(x12437.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12435));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12438=IKsin(j4);
IkReal x12439=IKcos(j4);
IkReal x12440=(cj3*r10);
IkReal x12441=((1.0)*gconst11);
IkReal x12442=(sj1*sj2);
IkReal x12443=(gconst11*sj3);
IkReal x12444=(cj3*r11);
IkReal x12445=(cj2*sj1);
IkReal x12446=(gconst10*r20);
IkReal x12447=(gconst10*sj3);
IkReal x12448=((1.0)*cj0);
IkReal x12449=((1.0)*sj0);
IkReal x12450=(cj1*sj2);
IkReal x12451=(cj3*r21);
IkReal x12452=((1.0)*cj1*cj2);
IkReal x12453=(r20*x12439);
IkReal x12454=(gconst10*x12438);
IkReal x12455=(gconst10*x12439);
IkReal x12456=(r02*x12438);
IkReal x12457=((1.0)*x12439);
evalcond[0]=((((-1.0)*x12449))+(((-1.0)*r02*x12457)));
evalcond[1]=((((-1.0)*r20*x12438*x12441))+((r21*x12454)));
evalcond[2]=(cj0+(((-1.0)*r10*x12438*x12441))+((r11*x12454)));
evalcond[3]=(((cj0*x12442))+((cj3*x12456))+(((-1.0)*cj1*cj2*x12448)));
evalcond[4]=((((-1.0)*sj3*x12456))+(((-1.0)*x12445*x12448))+(((-1.0)*x12448*x12450)));
evalcond[5]=(((r21*x12443))+((x12451*x12455))+(((-1.0)*cj3*x12441*x12453))+((sj3*x12446))+x12445+x12450);
evalcond[6]=(((cj3*x12446))+((x12443*x12453))+(((-1.0)*x12452))+x12442+(((-1.0)*r21*x12447*x12457))+((gconst11*x12451)));
evalcond[7]=(((x12444*x12455))+((sj0*x12442))+((r11*x12443))+(((-1.0)*x12439*x12440*x12441))+(((-1.0)*cj1*cj2*x12449))+((r10*x12447)));
evalcond[8]=(((r10*x12439*x12443))+((gconst10*x12440))+(((-1.0)*x12445*x12449))+(((-1.0)*x12449*x12450))+((gconst11*x12444))+(((-1.0)*r11*x12447*x12457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12458=((1.0)*r20);
IkReal x12459=((1.0)*gconst11);
CheckValue<IkReal> x12460=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12459))),-1);
if(!x12460.valid){
continue;
}
CheckValue<IkReal> x12461=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12458))+((cj3*gconst10*r21))),-1);
if(!x12461.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12460.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12461.value)*(((((-1.0)*gconst10*sj3*x12458))+(((-1.0)*r21*sj3*x12459))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12460.value)))+IKsqr(((x12461.value)*(((((-1.0)*gconst10*sj3*x12458))+(((-1.0)*r21*sj3*x12459))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12460.value)), ((x12461.value)*(((((-1.0)*gconst10*sj3*x12458))+(((-1.0)*r21*sj3*x12459))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12462=IKsin(j4);
IkReal x12463=IKcos(j4);
IkReal x12464=(cj3*r10);
IkReal x12465=((1.0)*gconst11);
IkReal x12466=(sj1*sj2);
IkReal x12467=(gconst11*sj3);
IkReal x12468=(cj3*r11);
IkReal x12469=(cj2*sj1);
IkReal x12470=(gconst10*r20);
IkReal x12471=(gconst10*sj3);
IkReal x12472=((1.0)*cj0);
IkReal x12473=((1.0)*sj0);
IkReal x12474=(cj1*sj2);
IkReal x12475=(cj3*r21);
IkReal x12476=((1.0)*cj1*cj2);
IkReal x12477=(r20*x12463);
IkReal x12478=(gconst10*x12462);
IkReal x12479=(gconst10*x12463);
IkReal x12480=(r02*x12462);
IkReal x12481=((1.0)*x12463);
evalcond[0]=((((-1.0)*r02*x12481))+(((-1.0)*x12473)));
evalcond[1]=((((-1.0)*r20*x12462*x12465))+((r21*x12478)));
evalcond[2]=(cj0+(((-1.0)*r10*x12462*x12465))+((r11*x12478)));
evalcond[3]=(((cj0*x12466))+((cj3*x12480))+(((-1.0)*cj1*cj2*x12472)));
evalcond[4]=((((-1.0)*x12472*x12474))+(((-1.0)*sj3*x12480))+(((-1.0)*x12469*x12472)));
evalcond[5]=(((x12475*x12479))+((sj3*x12470))+x12474+x12469+((r21*x12467))+(((-1.0)*cj3*x12465*x12477)));
evalcond[6]=((((-1.0)*r21*x12471*x12481))+((cj3*x12470))+(((-1.0)*x12476))+x12466+((gconst11*x12475))+((x12467*x12477)));
evalcond[7]=(((r11*x12467))+((sj0*x12466))+((x12468*x12479))+(((-1.0)*x12463*x12464*x12465))+((r10*x12471))+(((-1.0)*cj1*cj2*x12473)));
evalcond[8]=(((gconst11*x12468))+((r10*x12463*x12467))+(((-1.0)*r11*x12471*x12481))+(((-1.0)*x12473*x12474))+((gconst10*x12464))+(((-1.0)*x12469*x12473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12482=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12482.valid){
continue;
}
CheckValue<IkReal> x12483=IKPowWithIntegerCheck(r02,-1);
if(!x12483.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12482.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12483.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12482.value)))+IKsqr(((-1.0)*sj0*(x12483.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12482.value)), ((-1.0)*sj0*(x12483.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12484=IKsin(j4);
IkReal x12485=IKcos(j4);
IkReal x12486=(cj3*r10);
IkReal x12487=((1.0)*gconst11);
IkReal x12488=(sj1*sj2);
IkReal x12489=(gconst11*sj3);
IkReal x12490=(cj3*r11);
IkReal x12491=(cj2*sj1);
IkReal x12492=(gconst10*r20);
IkReal x12493=(gconst10*sj3);
IkReal x12494=((1.0)*cj0);
IkReal x12495=((1.0)*sj0);
IkReal x12496=(cj1*sj2);
IkReal x12497=(cj3*r21);
IkReal x12498=((1.0)*cj1*cj2);
IkReal x12499=(r20*x12485);
IkReal x12500=(gconst10*x12484);
IkReal x12501=(gconst10*x12485);
IkReal x12502=(r02*x12484);
IkReal x12503=((1.0)*x12485);
evalcond[0]=((((-1.0)*r02*x12503))+(((-1.0)*x12495)));
evalcond[1]=((((-1.0)*r20*x12484*x12487))+((r21*x12500)));
evalcond[2]=(((r11*x12500))+cj0+(((-1.0)*r10*x12484*x12487)));
evalcond[3]=(((cj3*x12502))+((cj0*x12488))+(((-1.0)*cj1*cj2*x12494)));
evalcond[4]=((((-1.0)*sj3*x12502))+(((-1.0)*x12491*x12494))+(((-1.0)*x12494*x12496)));
evalcond[5]=((((-1.0)*cj3*x12487*x12499))+x12491+x12496+((x12497*x12501))+((r21*x12489))+((sj3*x12492)));
evalcond[6]=(((cj3*x12492))+((gconst11*x12497))+(((-1.0)*x12498))+((x12489*x12499))+(((-1.0)*r21*x12493*x12503))+x12488);
evalcond[7]=(((r10*x12493))+((r11*x12489))+(((-1.0)*x12485*x12486*x12487))+((sj0*x12488))+((x12490*x12501))+(((-1.0)*cj1*cj2*x12495)));
evalcond[8]=(((gconst10*x12486))+(((-1.0)*r11*x12493*x12503))+((gconst11*x12490))+(((-1.0)*x12491*x12495))+((r10*x12485*x12489))+(((-1.0)*x12495*x12496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12504=((-1.0)*r11);
CheckValue<IkReal> x12507 = IKatan2WithCheck(IkReal(x12504),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12507.valid){
continue;
}
IkReal x12505=((1.0)*(x12507.value));
IkReal x12506=x11830;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12505)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12505)));
IkReal gconst10=(x12504*x12506);
IkReal gconst11=((1.0)*r10*x12506);
IkReal x12508=r12*r12;
IkReal x12509=((1.0)*sj0);
IkReal x12510=(cj0*r02);
IkReal x12511=x11830;
j4eval[0]=((IKabs((((sj0*x12508*x12511))+(((-1.0)*x12509*x12511))+((r12*x12510*x12511)))))+(IKabs(((((-1.0)*r12*x12509))+(((-1.0)*x12510))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12512=((1.0)*r12);
IkReal x12513=(sj1*sj2);
IkReal x12514=((1.0)*r21);
IkReal x12515=(cj3*gconst11);
IkReal x12516=(r11*sj3);
IkReal x12517=(gconst11*r20);
IkReal x12518=((1.0)*sj3);
IkReal x12519=(cj1*cj2);
IkReal x12520=(gconst10*r21*sj3);
IkReal x12521=(cj3*gconst10*r20);
CheckValue<IkReal> x12522=IKPowWithIntegerCheck((((gconst11*r10*x12520))+((gconst10*x12516*x12517))+(((-1.0)*x12514*x12516*(gconst10*gconst10)))+(((-1.0)*gconst11*r10*x12517*x12518))),-1);
if(!x12522.valid){
continue;
}
CheckValue<IkReal> x12523=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12514))+((sj3*x12517))),-1);
if(!x12523.valid){
continue;
}
if( IKabs(((x12522.value)*((((cj0*x12520))+((r12*x12519))+(((-1.0)*r21*x12512*x12515))+(((-1.0)*x12512*x12513))+(((-1.0)*cj0*x12517*x12518))+(((-1.0)*x12512*x12521)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12523.value)*(((((-1.0)*x12514*x12515))+(((-1.0)*x12513))+x12519+(((-1.0)*x12521)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12522.value)*((((cj0*x12520))+((r12*x12519))+(((-1.0)*r21*x12512*x12515))+(((-1.0)*x12512*x12513))+(((-1.0)*cj0*x12517*x12518))+(((-1.0)*x12512*x12521))))))+IKsqr(((x12523.value)*(((((-1.0)*x12514*x12515))+(((-1.0)*x12513))+x12519+(((-1.0)*x12521))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12522.value)*((((cj0*x12520))+((r12*x12519))+(((-1.0)*r21*x12512*x12515))+(((-1.0)*x12512*x12513))+(((-1.0)*cj0*x12517*x12518))+(((-1.0)*x12512*x12521))))), ((x12523.value)*(((((-1.0)*x12514*x12515))+(((-1.0)*x12513))+x12519+(((-1.0)*x12521))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12524=IKsin(j4);
IkReal x12525=IKcos(j4);
IkReal x12526=(cj3*r10);
IkReal x12527=(gconst11*r20);
IkReal x12528=(gconst11*sj3);
IkReal x12529=(sj1*sj2);
IkReal x12530=(cj3*r11);
IkReal x12531=(r10*sj3);
IkReal x12532=(gconst10*r01);
IkReal x12533=(gconst10*sj3);
IkReal x12534=(cj2*sj1);
IkReal x12535=((1.0)*sj0);
IkReal x12536=(cj1*sj2);
IkReal x12537=(gconst10*r21);
IkReal x12538=(cj3*gconst10);
IkReal x12539=(cj3*gconst11);
IkReal x12540=((1.0)*cj0);
IkReal x12541=((1.0)*x12524);
IkReal x12542=((1.0)*cj1*cj2);
IkReal x12543=(gconst11*x12525);
IkReal x12544=(sj3*x12525);
IkReal x12545=(gconst10*x12524);
IkReal x12546=((1.0)*x12525);
IkReal x12547=(cj3*x12525);
IkReal x12548=(cj3*x12524);
evalcond[0]=((((-1.0)*x12527*x12541))+((x12524*x12537)));
evalcond[1]=(cj0+((r11*x12545))+(((-1.0)*gconst11*r10*x12541))+(((-1.0)*r12*x12546)));
evalcond[2]=(((x12524*x12532))+(((-1.0)*x12535))+(((-1.0)*gconst11*r00*x12541))+(((-1.0)*r02*x12546)));
evalcond[3]=(((x12537*x12547))+((r20*x12533))+((r21*x12528))+(((-1.0)*cj3*x12527*x12546))+x12534+x12536);
evalcond[4]=(((r20*x12538))+((x12527*x12544))+((r21*x12539))+x12529+(((-1.0)*r21*x12533*x12546))+(((-1.0)*x12542)));
evalcond[5]=(((r00*x12533))+((cj0*x12529))+(((-1.0)*cj1*cj2*x12540))+((x12532*x12547))+(((-1.0)*r00*x12539*x12546))+((r02*x12548))+((r01*x12528)));
evalcond[6]=((((-1.0)*x12526*x12543))+((sj0*x12529))+((gconst10*x12525*x12530))+((r12*x12548))+(((-1.0)*cj1*cj2*x12535))+((r11*x12528))+((gconst10*x12531)));
evalcond[7]=(((r00*x12538))+(((-1.0)*x12532*x12544))+(((-1.0)*x12536*x12540))+(((-1.0)*r02*sj3*x12541))+((r00*x12525*x12528))+(((-1.0)*x12534*x12540))+((r01*x12539)));
evalcond[8]=((((-1.0)*x12534*x12535))+(((-1.0)*x12535*x12536))+(((-1.0)*r12*sj3*x12541))+((gconst10*x12526))+((r10*x12525*x12528))+(((-1.0)*r11*x12533*x12546))+((gconst11*x12530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12549=((1.0)*sj0);
IkReal x12550=((1.0)*gconst10);
CheckValue<IkReal> x12551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12550))+(((-1.0)*gconst11*r21)))),-1);
if(!x12551.valid){
continue;
}
CheckValue<IkReal> x12552 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12549)))),IkReal(((((-1.0)*gconst10*r11*x12549))+(((-1.0)*cj0*r01*x12550))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12551.value)))+(x12552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12553=IKsin(j4);
IkReal x12554=IKcos(j4);
IkReal x12555=(cj3*r10);
IkReal x12556=(gconst11*r20);
IkReal x12557=(gconst11*sj3);
IkReal x12558=(sj1*sj2);
IkReal x12559=(cj3*r11);
IkReal x12560=(r10*sj3);
IkReal x12561=(gconst10*r01);
IkReal x12562=(gconst10*sj3);
IkReal x12563=(cj2*sj1);
IkReal x12564=((1.0)*sj0);
IkReal x12565=(cj1*sj2);
IkReal x12566=(gconst10*r21);
IkReal x12567=(cj3*gconst10);
IkReal x12568=(cj3*gconst11);
IkReal x12569=((1.0)*cj0);
IkReal x12570=((1.0)*x12553);
IkReal x12571=((1.0)*cj1*cj2);
IkReal x12572=(gconst11*x12554);
IkReal x12573=(sj3*x12554);
IkReal x12574=(gconst10*x12553);
IkReal x12575=((1.0)*x12554);
IkReal x12576=(cj3*x12554);
IkReal x12577=(cj3*x12553);
evalcond[0]=(((x12553*x12566))+(((-1.0)*x12556*x12570)));
evalcond[1]=((((-1.0)*gconst11*r10*x12570))+cj0+(((-1.0)*r12*x12575))+((r11*x12574)));
evalcond[2]=(((x12553*x12561))+(((-1.0)*r02*x12575))+(((-1.0)*gconst11*r00*x12570))+(((-1.0)*x12564)));
evalcond[3]=(((x12566*x12576))+((r20*x12562))+(((-1.0)*cj3*x12556*x12575))+((r21*x12557))+x12563+x12565);
evalcond[4]=(((r20*x12567))+(((-1.0)*x12571))+((x12556*x12573))+((r21*x12568))+x12558+(((-1.0)*r21*x12562*x12575)));
evalcond[5]=(((r01*x12557))+((r02*x12577))+(((-1.0)*r00*x12568*x12575))+((r00*x12562))+((cj0*x12558))+(((-1.0)*cj1*cj2*x12569))+((x12561*x12576)));
evalcond[6]=((((-1.0)*x12555*x12572))+((sj0*x12558))+((r11*x12557))+((gconst10*x12554*x12559))+((r12*x12577))+(((-1.0)*cj1*cj2*x12564))+((gconst10*x12560)));
evalcond[7]=((((-1.0)*x12565*x12569))+(((-1.0)*x12561*x12573))+((r00*x12554*x12557))+(((-1.0)*x12563*x12569))+((r01*x12568))+((r00*x12567))+(((-1.0)*r02*sj3*x12570)));
evalcond[8]=((((-1.0)*x12564*x12565))+((gconst10*x12555))+(((-1.0)*x12563*x12564))+((gconst11*x12559))+((r10*x12554*x12557))+(((-1.0)*r12*sj3*x12570))+(((-1.0)*r11*x12562*x12575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12578=gconst10*gconst10;
IkReal x12579=r21*r21;
IkReal x12580=gconst11*gconst11;
IkReal x12581=r20*r20;
IkReal x12582=((1.0)*cj3);
IkReal x12583=(r20*sj3);
IkReal x12584=(gconst10*gconst11);
IkReal x12585=(cj2*sj1);
IkReal x12586=(gconst10*r21);
IkReal x12587=(cj1*sj2);
IkReal x12588=((1.0)*gconst11*r20);
CheckValue<IkReal> x12589=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12580*x12581*x12582))+(((-1.0)*x12578*x12579*x12582))+(((2.0)*cj3*r20*r21*x12584))+(((-1.0)*x12582*(r22*r22))))),-1);
if(!x12589.valid){
continue;
}
CheckValue<IkReal> x12590 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12585))+((r22*x12587))+((gconst10*r22*x12583)))),IkReal((((x12585*x12586))+(((-1.0)*r21*x12580*x12583))+((sj3*x12579*x12584))+(((-1.0)*x12585*x12588))+((r21*x12578*x12583))+(((-1.0)*x12587*x12588))+((x12586*x12587))+(((-1.0)*sj3*x12581*x12584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12589.value)))+(x12590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12591=IKsin(j4);
IkReal x12592=IKcos(j4);
IkReal x12593=(cj3*r10);
IkReal x12594=(gconst11*r20);
IkReal x12595=(gconst11*sj3);
IkReal x12596=(sj1*sj2);
IkReal x12597=(gconst11*r00);
IkReal x12598=(cj3*r11);
IkReal x12599=(gconst10*sj3);
IkReal x12600=(cj2*sj1);
IkReal x12601=(cj3*r01);
IkReal x12602=((1.0)*sj0);
IkReal x12603=(cj1*sj2);
IkReal x12604=(cj3*r21);
IkReal x12605=(cj3*gconst10);
IkReal x12606=((1.0)*cj0);
IkReal x12607=((1.0)*x12592);
IkReal x12608=((1.0)*x12591);
IkReal x12609=((1.0)*cj1*cj2);
IkReal x12610=(cj3*x12591);
IkReal x12611=(gconst10*x12591);
IkReal x12612=(gconst10*x12592);
evalcond[0]=((((-1.0)*r22*x12607))+((r21*x12611))+(((-1.0)*x12594*x12608)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12608))+(((-1.0)*r12*x12607))+((r11*x12611)));
evalcond[2]=((((-1.0)*x12602))+(((-1.0)*x12597*x12608))+(((-1.0)*r02*x12607))+((r01*x12611)));
evalcond[3]=((((-1.0)*cj3*x12594*x12607))+((r21*x12595))+x12603+x12600+((x12604*x12612))+((r20*x12599))+((r22*x12610)));
evalcond[4]=(((r20*x12605))+(((-1.0)*r21*x12599*x12607))+(((-1.0)*r22*sj3*x12608))+(((-1.0)*x12609))+((gconst11*x12604))+x12596+((sj3*x12592*x12594)));
evalcond[5]=(((r02*x12610))+((r01*x12595))+((x12601*x12612))+((cj0*x12596))+((r00*x12599))+(((-1.0)*cj3*x12597*x12607))+(((-1.0)*cj1*cj2*x12606)));
evalcond[6]=(((x12598*x12612))+(((-1.0)*gconst11*x12593*x12607))+((r12*x12610))+(((-1.0)*cj1*cj2*x12602))+((sj0*x12596))+((r11*x12595))+((r10*x12599)));
evalcond[7]=(((r00*x12605))+((r00*x12592*x12595))+(((-1.0)*r02*sj3*x12608))+(((-1.0)*x12600*x12606))+((gconst11*x12601))+(((-1.0)*r01*x12599*x12607))+(((-1.0)*x12603*x12606)));
evalcond[8]=(((gconst11*x12598))+(((-1.0)*r11*x12599*x12607))+(((-1.0)*x12600*x12602))+((gconst10*x12593))+((r10*x12592*x12595))+(((-1.0)*r12*sj3*x12608))+(((-1.0)*x12602*x12603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12613=((1.0)*sj0);
IkReal x12614=((1.0)*gconst10);
CheckValue<IkReal> x12615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12614))+(((-1.0)*gconst11*r21)))),-1);
if(!x12615.valid){
continue;
}
CheckValue<IkReal> x12616 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12613))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12614))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12615.value)))+(x12616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12617=IKsin(j4);
IkReal x12618=IKcos(j4);
IkReal x12619=(cj3*r10);
IkReal x12620=(gconst11*r20);
IkReal x12621=(gconst11*sj3);
IkReal x12622=(sj1*sj2);
IkReal x12623=(gconst11*r00);
IkReal x12624=(cj3*r11);
IkReal x12625=(gconst10*sj3);
IkReal x12626=(cj2*sj1);
IkReal x12627=(cj3*r01);
IkReal x12628=((1.0)*sj0);
IkReal x12629=(cj1*sj2);
IkReal x12630=(cj3*r21);
IkReal x12631=(cj3*gconst10);
IkReal x12632=((1.0)*cj0);
IkReal x12633=((1.0)*x12618);
IkReal x12634=((1.0)*x12617);
IkReal x12635=((1.0)*cj1*cj2);
IkReal x12636=(cj3*x12617);
IkReal x12637=(gconst10*x12617);
IkReal x12638=(gconst10*x12618);
evalcond[0]=((((-1.0)*r22*x12633))+(((-1.0)*x12620*x12634))+((r21*x12637)));
evalcond[1]=(((r11*x12637))+cj0+(((-1.0)*gconst11*r10*x12634))+(((-1.0)*r12*x12633)));
evalcond[2]=((((-1.0)*x12628))+((r01*x12637))+(((-1.0)*x12623*x12634))+(((-1.0)*r02*x12633)));
evalcond[3]=((((-1.0)*cj3*x12620*x12633))+((x12630*x12638))+((r21*x12621))+x12626+x12629+((r22*x12636))+((r20*x12625)));
evalcond[4]=((((-1.0)*r21*x12625*x12633))+((sj3*x12618*x12620))+((r20*x12631))+(((-1.0)*x12635))+x12622+(((-1.0)*r22*sj3*x12634))+((gconst11*x12630)));
evalcond[5]=(((x12627*x12638))+(((-1.0)*cj1*cj2*x12632))+((r01*x12621))+((r02*x12636))+((r00*x12625))+((cj0*x12622))+(((-1.0)*cj3*x12623*x12633)));
evalcond[6]=(((r12*x12636))+((sj0*x12622))+(((-1.0)*gconst11*x12619*x12633))+(((-1.0)*cj1*cj2*x12628))+((r10*x12625))+((r11*x12621))+((x12624*x12638)));
evalcond[7]=((((-1.0)*r02*sj3*x12634))+((gconst11*x12627))+(((-1.0)*x12626*x12632))+((r00*x12631))+(((-1.0)*r01*x12625*x12633))+(((-1.0)*x12629*x12632))+((r00*x12618*x12621)));
evalcond[8]=(((gconst11*x12624))+(((-1.0)*r11*x12625*x12633))+(((-1.0)*x12628*x12629))+((gconst10*x12619))+((r10*x12618*x12621))+(((-1.0)*r12*sj3*x12634))+(((-1.0)*x12626*x12628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12639=((1.0)*gconst11);
CheckValue<IkReal> x12640=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12639)))),-1);
if(!x12640.valid){
continue;
}
CheckValue<IkReal> x12641 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12639))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12640.value)))+(x12641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12642=IKsin(j4);
IkReal x12643=IKcos(j4);
IkReal x12644=(cj3*r10);
IkReal x12645=(gconst11*r20);
IkReal x12646=(gconst11*sj3);
IkReal x12647=(sj1*sj2);
IkReal x12648=(gconst11*r00);
IkReal x12649=(cj3*r11);
IkReal x12650=(gconst10*sj3);
IkReal x12651=(cj2*sj1);
IkReal x12652=(cj3*r01);
IkReal x12653=((1.0)*sj0);
IkReal x12654=(cj1*sj2);
IkReal x12655=(cj3*r21);
IkReal x12656=(cj3*gconst10);
IkReal x12657=((1.0)*cj0);
IkReal x12658=((1.0)*x12643);
IkReal x12659=((1.0)*x12642);
IkReal x12660=((1.0)*cj1*cj2);
IkReal x12661=(cj3*x12642);
IkReal x12662=(gconst10*x12642);
IkReal x12663=(gconst10*x12643);
evalcond[0]=(((r21*x12662))+(((-1.0)*x12645*x12659))+(((-1.0)*r22*x12658)));
evalcond[1]=(cj0+(((-1.0)*r12*x12658))+((r11*x12662))+(((-1.0)*gconst11*r10*x12659)));
evalcond[2]=((((-1.0)*x12653))+(((-1.0)*r02*x12658))+((r01*x12662))+(((-1.0)*x12648*x12659)));
evalcond[3]=(((x12655*x12663))+((r22*x12661))+(((-1.0)*cj3*x12645*x12658))+x12651+x12654+((r21*x12646))+((r20*x12650)));
evalcond[4]=((((-1.0)*x12660))+((gconst11*x12655))+(((-1.0)*r22*sj3*x12659))+x12647+((sj3*x12643*x12645))+((r20*x12656))+(((-1.0)*r21*x12650*x12658)));
evalcond[5]=(((r02*x12661))+(((-1.0)*cj3*x12648*x12658))+((r01*x12646))+((cj0*x12647))+((x12652*x12663))+(((-1.0)*cj1*cj2*x12657))+((r00*x12650)));
evalcond[6]=(((r10*x12650))+((r12*x12661))+((x12649*x12663))+(((-1.0)*gconst11*x12644*x12658))+((sj0*x12647))+(((-1.0)*cj1*cj2*x12653))+((r11*x12646)));
evalcond[7]=((((-1.0)*r02*sj3*x12659))+((r00*x12643*x12646))+((gconst11*x12652))+(((-1.0)*r01*x12650*x12658))+(((-1.0)*x12651*x12657))+((r00*x12656))+(((-1.0)*x12654*x12657)));
evalcond[8]=((((-1.0)*r11*x12650*x12658))+(((-1.0)*x12653*x12654))+(((-1.0)*x12651*x12653))+((gconst10*x12644))+(((-1.0)*r12*sj3*x12659))+((gconst11*x12649))+((r10*x12643*x12646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12664=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12664;
j4eval[1]=IKsign(x12664);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12665=((1.0)*cj5);
IkReal x12666=((((-1.0)*r01*x12665))+(((-1.0)*r00*sj5)));
j4eval[0]=x12666;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12665)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12667=cj5*cj5;
IkReal x12668=(cj3*r21);
IkReal x12669=(cj5*sj5);
IkReal x12670=((1.0)*cj3);
IkReal x12671=(((cj3*r11*r20*x12669))+(((-1.0)*r12*r22*x12670))+(((-1.0)*r11*x12668))+((r10*x12668*x12669))+(((-1.0)*r10*r20*x12667*x12670))+((r11*x12667*x12668)));
j4eval[0]=x12671;
j4eval[1]=IKsign(x12671);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12672=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12672;
j4eval[1]=IKsign(x12672);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12673=((1.0)*cj5);
IkReal x12674=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12673)));
j4eval[0]=x12674;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12673))))));
j4eval[2]=IKsign(x12674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12675=cj5*cj5;
IkReal x12676=r11*r11;
IkReal x12677=(r11*sj5);
IkReal x12678=(cj5*r10);
IkReal x12679=((r12*r12)+(((-2.0)*x12677*x12678))+((x12675*(r10*r10)))+x12676+(((-1.0)*x12675*x12676)));
j4eval[0]=x12679;
j4eval[1]=IKsign(x12679);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12677))+x12678))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12680=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12680);
rxp1_1=(px*r21);
rxp1_2=(r11*x12680);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12681=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12681);
rxp1_1=(px*r21);
rxp1_2=(r11*x12681);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12682=((1.0)*sj1);
CheckValue<IkReal> x12683=IKPowWithIntegerCheck(r02,-1);
if(!x12683.valid){
continue;
}
CheckValue<IkReal> x12684=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12684.valid){
continue;
}
if( IKabs(((x12683.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12682)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12684.value)*((((cj1*cj2))+(((-1.0)*sj2*x12682)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12683.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12682))))))+IKsqr(((x12684.value)*((((cj1*cj2))+(((-1.0)*sj2*x12682))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12683.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12682))))), ((x12684.value)*((((cj1*cj2))+(((-1.0)*sj2*x12682))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12685=IKsin(j4);
IkReal x12686=IKcos(j4);
IkReal x12687=(cj5*r20);
IkReal x12688=((1.0)*cj2);
IkReal x12689=(cj5*r10);
IkReal x12690=((1.0)*x12685);
IkReal x12691=(sj5*x12685);
IkReal x12692=((1.0)*sj5*x12686);
evalcond[0]=((-1.0)*r02*x12686);
evalcond[1]=(((r21*x12691))+(((-1.0)*x12687*x12690)));
evalcond[2]=((((-1.0)*r11*x12692))+((x12686*x12689)));
evalcond[3]=((1.0)+(((-1.0)*x12689*x12690))+((r11*x12691)));
evalcond[4]=((((-1.0)*sj1*x12688))+(((-1.0)*r02*x12690))+(((-1.0)*cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*x12688))+((x12686*x12687))+((sj1*sj2))+(((-1.0)*r21*x12692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12693=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12693.valid){
continue;
}
CheckValue<IkReal> x12694=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12694.valid){
continue;
}
if( IKabs(((-1.0)*(x12693.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12694.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12693.value)))+IKsqr(((x12694.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12693.value)), ((x12694.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12695=IKsin(j4);
IkReal x12696=IKcos(j4);
IkReal x12697=(cj5*r20);
IkReal x12698=((1.0)*cj2);
IkReal x12699=(cj5*r10);
IkReal x12700=((1.0)*x12695);
IkReal x12701=(sj5*x12695);
IkReal x12702=((1.0)*sj5*x12696);
evalcond[0]=((-1.0)*r02*x12696);
evalcond[1]=(((r21*x12701))+(((-1.0)*x12697*x12700)));
evalcond[2]=(((x12696*x12699))+(((-1.0)*r11*x12702)));
evalcond[3]=((1.0)+((r11*x12701))+(((-1.0)*x12699*x12700)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12698))+(((-1.0)*r02*x12700)));
evalcond[5]=((((-1.0)*cj1*x12698))+((x12696*x12697))+((sj1*sj2))+(((-1.0)*r21*x12702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12703=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12703);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12703);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12704=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12704);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12704);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12705=IKPowWithIntegerCheck(r22,-1);
if(!x12705.valid){
continue;
}
CheckValue<IkReal> x12706=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12706.valid){
continue;
}
if( IKabs(((x12705.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12706.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12705.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12706.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12705.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12706.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12707=IKsin(j4);
IkReal x12708=IKcos(j4);
IkReal x12709=((1.0)*cj2);
IkReal x12710=(cj5*x12708);
IkReal x12711=(sj5*x12707);
IkReal x12712=((1.0)*sj5*x12708);
IkReal x12713=((1.0)*cj5*x12707);
evalcond[0]=((-1.0)*r22*x12708);
evalcond[1]=((((-1.0)*r00*x12713))+((r01*x12711)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12709))+(((-1.0)*r22*x12707)));
evalcond[3]=(((r10*x12710))+(((-1.0)*r11*x12712)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12713))+((r11*x12711)));
evalcond[5]=((((-1.0)*sj1*x12709))+(((-1.0)*cj1*sj2))+((r00*x12710))+(((-1.0)*r01*x12712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12714=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12714.valid){
continue;
}
CheckValue<IkReal> x12715=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12715.valid){
continue;
}
if( IKabs(((-1.0)*(x12714.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12715.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12714.value)))+IKsqr(((x12715.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12714.value)), ((x12715.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12716=IKsin(j4);
IkReal x12717=IKcos(j4);
IkReal x12718=((1.0)*cj2);
IkReal x12719=(cj5*x12717);
IkReal x12720=(sj5*x12716);
IkReal x12721=((1.0)*sj5*x12717);
IkReal x12722=((1.0)*cj5*x12716);
evalcond[0]=((-1.0)*r22*x12717);
evalcond[1]=((((-1.0)*r00*x12722))+((r01*x12720)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12716))+(((-1.0)*cj1*x12718)));
evalcond[3]=(((r10*x12719))+(((-1.0)*r11*x12721)));
evalcond[4]=((1.0)+((r11*x12720))+(((-1.0)*r10*x12722)));
evalcond[5]=((((-1.0)*r01*x12721))+(((-1.0)*sj1*x12718))+(((-1.0)*cj1*sj2))+((r00*x12719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12723=cj5*cj5;
IkReal x12724=r11*r11;
IkReal x12725=(cj5*r10);
IkReal x12726=(r11*sj5);
CheckValue<IkReal> x12727 = IKatan2WithCheck(IkReal(((((-1.0)*x12726))+x12725)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12727.valid){
continue;
}
CheckValue<IkReal> x12728=IKPowWithIntegerCheck(IKsign((((x12723*(r10*r10)))+(r12*r12)+(((-1.0)*x12723*x12724))+(((-2.0)*x12725*x12726))+x12724)),-1);
if(!x12728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12727.value)+(((1.5707963267949)*(x12728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12729=IKsin(j4);
IkReal x12730=IKcos(j4);
IkReal x12731=(cj5*r10);
IkReal x12732=(r01*sj5);
IkReal x12733=((1.0)*cj2);
IkReal x12734=(cj5*r00);
IkReal x12735=(cj5*r20);
IkReal x12736=((1.0)*x12730);
IkReal x12737=((1.0)*x12729);
IkReal x12738=(sj5*x12729);
evalcond[0]=(((r21*x12738))+(((-1.0)*x12735*x12737))+(((-1.0)*r22*x12736)));
evalcond[1]=((((-1.0)*r02*x12736))+((x12729*x12732))+(((-1.0)*x12734*x12737)));
evalcond[2]=(((x12730*x12731))+(((-1.0)*r11*sj5*x12736))+(((-1.0)*r12*x12737)));
evalcond[3]=((1.0)+((r11*x12738))+(((-1.0)*r12*x12736))+(((-1.0)*x12731*x12737)));
evalcond[4]=(((x12730*x12735))+(((-1.0)*r22*x12737))+((sj1*sj2))+(((-1.0)*r21*sj5*x12736))+(((-1.0)*cj1*x12733)));
evalcond[5]=((((-1.0)*sj1*x12733))+(((-1.0)*r02*x12737))+((x12730*x12734))+(((-1.0)*cj1*sj2))+(((-1.0)*x12732*x12736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12739=((1.0)*cj5);
CheckValue<IkReal> x12740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12739))+(((-1.0)*r00*sj5)))),-1);
if(!x12740.valid){
continue;
}
CheckValue<IkReal> x12741 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12740.value)))+(x12741.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12742=IKsin(j4);
IkReal x12743=IKcos(j4);
IkReal x12744=(cj5*r10);
IkReal x12745=(r01*sj5);
IkReal x12746=((1.0)*cj2);
IkReal x12747=(cj5*r00);
IkReal x12748=(cj5*r20);
IkReal x12749=((1.0)*x12743);
IkReal x12750=((1.0)*x12742);
IkReal x12751=(sj5*x12742);
evalcond[0]=((((-1.0)*r22*x12749))+(((-1.0)*x12748*x12750))+((r21*x12751)));
evalcond[1]=((((-1.0)*r02*x12749))+((x12742*x12745))+(((-1.0)*x12747*x12750)));
evalcond[2]=(((x12743*x12744))+(((-1.0)*r12*x12750))+(((-1.0)*r11*sj5*x12749)));
evalcond[3]=((1.0)+((r11*x12751))+(((-1.0)*r12*x12749))+(((-1.0)*x12744*x12750)));
evalcond[4]=(((x12743*x12748))+(((-1.0)*r22*x12750))+(((-1.0)*r21*sj5*x12749))+((sj1*sj2))+(((-1.0)*cj1*x12746)));
evalcond[5]=((((-1.0)*r02*x12750))+((x12743*x12747))+(((-1.0)*cj1*sj2))+(((-1.0)*x12745*x12749))+(((-1.0)*sj1*x12746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12752=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12752.valid){
continue;
}
CheckValue<IkReal> x12753 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12752.value)))+(x12753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12754=IKsin(j4);
IkReal x12755=IKcos(j4);
IkReal x12756=(cj5*r10);
IkReal x12757=(r01*sj5);
IkReal x12758=((1.0)*cj2);
IkReal x12759=(cj5*r00);
IkReal x12760=(cj5*r20);
IkReal x12761=((1.0)*x12755);
IkReal x12762=((1.0)*x12754);
IkReal x12763=(sj5*x12754);
evalcond[0]=(((r21*x12763))+(((-1.0)*r22*x12761))+(((-1.0)*x12760*x12762)));
evalcond[1]=(((x12754*x12757))+(((-1.0)*x12759*x12762))+(((-1.0)*r02*x12761)));
evalcond[2]=(((x12755*x12756))+(((-1.0)*r12*x12762))+(((-1.0)*r11*sj5*x12761)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12761))+(((-1.0)*x12756*x12762))+((r11*x12763)));
evalcond[4]=((((-1.0)*r21*sj5*x12761))+(((-1.0)*r22*x12762))+((x12755*x12760))+((sj1*sj2))+(((-1.0)*cj1*x12758)));
evalcond[5]=(((x12755*x12759))+(((-1.0)*sj1*x12758))+(((-1.0)*x12757*x12761))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12764=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12764;
j4eval[1]=IKsign(x12764);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12765=((1.0)*cj5);
IkReal x12766=((((-1.0)*r01*x12765))+(((-1.0)*r00*sj5)));
j4eval[0]=x12766;
j4eval[1]=((IKabs(((((-1.0)*r20*x12765))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12767=(sj1*sj2);
IkReal x12768=(cj5*r10);
IkReal x12769=(r11*sj5);
IkReal x12770=(cj1*cj2);
IkReal x12771=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12771;
j4eval[1]=((IKabs(((((-1.0)*r12*x12767))+((r12*x12770)))))+(IKabs(((((-1.0)*x12767*x12768))+(((-1.0)*x12769*x12770))+((x12767*x12769))+((x12768*x12770))))));
j4eval[2]=IKsign(x12771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12772=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12772);
rxp1_1=(px*r21);
rxp1_2=(r11*x12772);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12773=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12773);
rxp1_1=(px*r21);
rxp1_2=(r11*x12773);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12774=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12774)));
j4eval[1]=((((-1.0)*r20*x12774))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12775=((1.0)*cj5);
CheckValue<IkReal> x12776=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12775))),-1);
if(!x12776.valid){
continue;
}
CheckValue<IkReal> x12777=IKPowWithIntegerCheck(((((-1.0)*r20*x12775))+((r21*sj5))),-1);
if(!x12777.valid){
continue;
}
if( IKabs(((-1.0)*(x12776.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12777.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12776.value)))+IKsqr(((x12777.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12776.value)), ((x12777.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12778=IKsin(j4);
IkReal x12779=IKcos(j4);
IkReal x12780=((1.0)*cj2);
IkReal x12781=(r21*sj5);
IkReal x12782=(r11*sj5);
IkReal x12783=((1.0)*cj5*x12778);
IkReal x12784=((1.0)*cj5*x12779);
evalcond[0]=((-1.0)*r02*x12779);
evalcond[1]=(((x12778*x12781))+(((-1.0)*r20*x12783)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12780))+((r02*x12778)));
evalcond[3]=((((-1.0)*r10*x12784))+((x12779*x12782)));
evalcond[4]=((1.0)+((x12778*x12782))+(((-1.0)*r10*x12783)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12784))+(((-1.0)*cj1*x12780))+((x12779*x12781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12785=IKPowWithIntegerCheck(r02,-1);
if(!x12785.valid){
continue;
}
CheckValue<IkReal> x12786=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12786.valid){
continue;
}
if( IKabs(((x12785.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12786.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12785.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12786.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12785.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12786.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12787=IKsin(j4);
IkReal x12788=IKcos(j4);
IkReal x12789=((1.0)*cj2);
IkReal x12790=(r21*sj5);
IkReal x12791=(r11*sj5);
IkReal x12792=((1.0)*cj5*x12787);
IkReal x12793=((1.0)*cj5*x12788);
evalcond[0]=((-1.0)*r02*x12788);
evalcond[1]=((((-1.0)*r20*x12792))+((x12787*x12790)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12789))+((r02*x12787)));
evalcond[3]=((((-1.0)*r10*x12793))+((x12788*x12791)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12792))+((x12787*x12791)));
evalcond[5]=((((-1.0)*r20*x12793))+((sj1*sj2))+(((-1.0)*cj1*x12789))+((x12788*x12790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12794=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12794;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12795=((1.0)*cj5);
IkReal x12796=((((-1.0)*r21*x12795))+(((-1.0)*r20*sj5)));
j4eval[0]=x12796;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12795))+((r11*sj5))))));
j4eval[2]=IKsign(x12796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12797=cj5*cj5;
IkReal x12798=(r11*r21);
IkReal x12799=((1.0)*r20);
IkReal x12800=(cj5*sj5);
IkReal x12801=(((x12797*x12798))+(((-1.0)*r10*x12797*x12799))+((r11*r20*x12800))+(((-1.0)*r12*r22))+(((-1.0)*x12798))+((r10*r21*x12800)));
j4eval[0]=x12801;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12799))))));
j4eval[2]=IKsign(x12801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12802=cj5*cj5;
IkReal x12803=(r21*sj5);
IkReal x12804=(r11*r21);
IkReal x12805=((1.0)*r20);
CheckValue<IkReal> x12806 = IKatan2WithCheck(IkReal((x12803+(((-1.0)*cj5*x12805)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12806.valid){
continue;
}
CheckValue<IkReal> x12807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12802*x12804))+(((-1.0)*x12804))+(((-1.0)*r10*x12802*x12805))+((cj5*r10*x12803))+((cj5*r11*r20*sj5)))),-1);
if(!x12807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12806.value)+(((1.5707963267949)*(x12807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12808=IKcos(j4);
IkReal x12809=IKsin(j4);
IkReal x12810=(cj5*r00);
IkReal x12811=(cj5*r20);
IkReal x12812=(cj5*r10);
IkReal x12813=((1.0)*x12808);
IkReal x12814=((1.0)*x12809);
IkReal x12815=(sj5*x12808);
IkReal x12816=(sj5*x12809);
evalcond[0]=((((-1.0)*x12811*x12813))+((r21*x12815))+((r22*x12809)));
evalcond[1]=((((-1.0)*x12812*x12813))+((r12*x12809))+((r11*x12815)));
evalcond[2]=((((-1.0)*x12811*x12814))+((r21*x12816))+(((-1.0)*r22*x12813)));
evalcond[3]=((((-1.0)*r02*x12813))+(((-1.0)*x12810*x12814))+((r01*x12816)));
evalcond[4]=((-1.0)+((r02*x12809))+(((-1.0)*x12810*x12813))+((r01*x12815)));
evalcond[5]=((1.0)+(((-1.0)*x12812*x12814))+(((-1.0)*r12*x12813))+((r11*x12816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12817=((1.0)*cj5);
CheckValue<IkReal> x12818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12817))+(((-1.0)*r20*sj5)))),-1);
if(!x12818.valid){
continue;
}
CheckValue<IkReal> x12819 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12817))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12818.value)))+(x12819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12820=IKcos(j4);
IkReal x12821=IKsin(j4);
IkReal x12822=(cj5*r00);
IkReal x12823=(cj5*r20);
IkReal x12824=(cj5*r10);
IkReal x12825=((1.0)*x12820);
IkReal x12826=((1.0)*x12821);
IkReal x12827=(sj5*x12820);
IkReal x12828=(sj5*x12821);
evalcond[0]=(((r22*x12821))+((r21*x12827))+(((-1.0)*x12823*x12825)));
evalcond[1]=((((-1.0)*x12824*x12825))+((r12*x12821))+((r11*x12827)));
evalcond[2]=((((-1.0)*r22*x12825))+((r21*x12828))+(((-1.0)*x12823*x12826)));
evalcond[3]=((((-1.0)*r02*x12825))+((r01*x12828))+(((-1.0)*x12822*x12826)));
evalcond[4]=((-1.0)+((r01*x12827))+(((-1.0)*x12822*x12825))+((r02*x12821)));
evalcond[5]=((1.0)+(((-1.0)*x12824*x12826))+(((-1.0)*r12*x12825))+((r11*x12828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12829 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12829.valid){
continue;
}
CheckValue<IkReal> x12830=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12829.value)+(((1.5707963267949)*(x12830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12831=IKcos(j4);
IkReal x12832=IKsin(j4);
IkReal x12833=(cj5*r00);
IkReal x12834=(cj5*r20);
IkReal x12835=(cj5*r10);
IkReal x12836=((1.0)*x12831);
IkReal x12837=((1.0)*x12832);
IkReal x12838=(sj5*x12831);
IkReal x12839=(sj5*x12832);
evalcond[0]=(((r21*x12838))+((r22*x12832))+(((-1.0)*x12834*x12836)));
evalcond[1]=(((r12*x12832))+((r11*x12838))+(((-1.0)*x12835*x12836)));
evalcond[2]=(((r21*x12839))+(((-1.0)*r22*x12836))+(((-1.0)*x12834*x12837)));
evalcond[3]=((((-1.0)*x12833*x12837))+(((-1.0)*r02*x12836))+((r01*x12839)));
evalcond[4]=((-1.0)+(((-1.0)*x12833*x12836))+((r02*x12832))+((r01*x12838)));
evalcond[5]=((1.0)+((r11*x12839))+(((-1.0)*x12835*x12837))+(((-1.0)*r12*x12836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12840=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12840;
j4eval[1]=IKsign(x12840);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12841=((1.0)*cj5);
IkReal x12842=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12841)));
j4eval[0]=x12842;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12841))))));
j4eval[2]=IKsign(x12842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12843=cj5*cj5;
IkReal x12844=(r11*r21);
IkReal x12845=((1.0)*r20);
IkReal x12846=(cj5*sj5);
IkReal x12847=(((x12843*x12844))+((r11*r20*x12846))+(((-1.0)*r12*r22))+(((-1.0)*x12844))+((r10*r21*x12846))+(((-1.0)*r10*x12843*x12845)));
j4eval[0]=x12847;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12845)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12848=cj5*cj5;
IkReal x12849=(r21*sj5);
IkReal x12850=(r11*r21);
IkReal x12851=((1.0)*r20);
CheckValue<IkReal> x12852 = IKatan2WithCheck(IkReal((x12849+(((-1.0)*cj5*x12851)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12852.valid){
continue;
}
CheckValue<IkReal> x12853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12848*x12851))+(((-1.0)*x12850))+((x12848*x12850))+((cj5*r10*x12849))+((cj5*r11*r20*sj5)))),-1);
if(!x12853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12852.value)+(((1.5707963267949)*(x12853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12854=IKcos(j4);
IkReal x12855=IKsin(j4);
IkReal x12856=(cj5*r00);
IkReal x12857=(cj5*r20);
IkReal x12858=(cj5*r10);
IkReal x12859=((1.0)*x12854);
IkReal x12860=((1.0)*x12855);
IkReal x12861=(sj5*x12854);
IkReal x12862=(sj5*x12855);
evalcond[0]=(((r21*x12861))+((r22*x12855))+(((-1.0)*x12857*x12859)));
evalcond[1]=(((r11*x12861))+(((-1.0)*x12858*x12859))+((r12*x12855)));
evalcond[2]=((((-1.0)*r22*x12859))+((r21*x12862))+(((-1.0)*x12857*x12860)));
evalcond[3]=((((-1.0)*r02*x12859))+((r01*x12862))+(((-1.0)*x12856*x12860)));
evalcond[4]=((1.0)+(((-1.0)*x12856*x12859))+((r02*x12855))+((r01*x12861)));
evalcond[5]=((1.0)+((r11*x12862))+(((-1.0)*r12*x12859))+(((-1.0)*x12858*x12860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12863=((1.0)*cj5);
CheckValue<IkReal> x12864 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12863)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12864.valid){
continue;
}
CheckValue<IkReal> x12865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12863)))),-1);
if(!x12865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12864.value)+(((1.5707963267949)*(x12865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12866=IKcos(j4);
IkReal x12867=IKsin(j4);
IkReal x12868=(cj5*r00);
IkReal x12869=(cj5*r20);
IkReal x12870=(cj5*r10);
IkReal x12871=((1.0)*x12866);
IkReal x12872=((1.0)*x12867);
IkReal x12873=(sj5*x12866);
IkReal x12874=(sj5*x12867);
evalcond[0]=((((-1.0)*x12869*x12871))+((r21*x12873))+((r22*x12867)));
evalcond[1]=(((r12*x12867))+((r11*x12873))+(((-1.0)*x12870*x12871)));
evalcond[2]=((((-1.0)*r22*x12871))+(((-1.0)*x12869*x12872))+((r21*x12874)));
evalcond[3]=(((r01*x12874))+(((-1.0)*x12868*x12872))+(((-1.0)*r02*x12871)));
evalcond[4]=((1.0)+((r01*x12873))+(((-1.0)*x12868*x12871))+((r02*x12867)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12871))+((r11*x12874))+(((-1.0)*x12870*x12872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12875=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12875.valid){
continue;
}
CheckValue<IkReal> x12876 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12875.value)))+(x12876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12877=IKcos(j4);
IkReal x12878=IKsin(j4);
IkReal x12879=(cj5*r00);
IkReal x12880=(cj5*r20);
IkReal x12881=(cj5*r10);
IkReal x12882=((1.0)*x12877);
IkReal x12883=((1.0)*x12878);
IkReal x12884=(sj5*x12877);
IkReal x12885=(sj5*x12878);
evalcond[0]=(((r22*x12878))+(((-1.0)*x12880*x12882))+((r21*x12884)));
evalcond[1]=((((-1.0)*x12881*x12882))+((r12*x12878))+((r11*x12884)));
evalcond[2]=((((-1.0)*r22*x12882))+(((-1.0)*x12880*x12883))+((r21*x12885)));
evalcond[3]=((((-1.0)*r02*x12882))+(((-1.0)*x12879*x12883))+((r01*x12885)));
evalcond[4]=((1.0)+(((-1.0)*x12879*x12882))+((r01*x12884))+((r02*x12878)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12882))+(((-1.0)*x12881*x12883))+((r11*x12885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12886=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12886;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12887=((1.0)*cj5);
IkReal x12888=((((-1.0)*r21*x12887))+(((-1.0)*r20*sj5)));
j4eval[0]=x12888;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x12887)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12888);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12889=cj5*cj5;
IkReal x12890=(r11*r21);
IkReal x12891=((1.0)*r20);
IkReal x12892=(cj5*sj5);
IkReal x12893=((((-1.0)*x12890))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12889*x12891))+((r11*r20*x12892))+((r10*r21*x12892))+((x12889*x12890)));
j4eval[0]=x12893;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12891)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12894=cj5*cj5;
IkReal x12895=(r21*sj5);
IkReal x12896=(r11*r21);
IkReal x12897=((1.0)*r20);
CheckValue<IkReal> x12898 = IKatan2WithCheck(IkReal((x12895+(((-1.0)*cj5*x12897)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12898.valid){
continue;
}
CheckValue<IkReal> x12899=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12896))+(((-1.0)*r10*x12894*x12897))+((cj5*r10*x12895))+(((-1.0)*r12*r22))+((x12894*x12896))+((cj5*r11*r20*sj5)))),-1);
if(!x12899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12898.value)+(((1.5707963267949)*(x12899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12900=IKcos(j4);
IkReal x12901=IKsin(j4);
IkReal x12902=(cj5*r00);
IkReal x12903=(cj5*r20);
IkReal x12904=(cj5*r10);
IkReal x12905=((1.0)*x12900);
IkReal x12906=((1.0)*x12901);
IkReal x12907=(sj5*x12900);
IkReal x12908=(sj5*x12901);
evalcond[0]=((((-1.0)*x12903*x12905))+((r21*x12907))+((r22*x12901)));
evalcond[1]=(((r12*x12901))+((r11*x12907))+(((-1.0)*x12904*x12905)));
evalcond[2]=((((-1.0)*x12903*x12906))+((r21*x12908))+(((-1.0)*r22*x12905)));
evalcond[3]=(((r01*x12908))+(((-1.0)*x12902*x12906))+(((-1.0)*r02*x12905)));
evalcond[4]=((-1.0)+((r01*x12907))+(((-1.0)*x12902*x12905))+((r02*x12901)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12905))+((r11*x12908))+(((-1.0)*x12904*x12906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12909=((1.0)*cj5);
CheckValue<IkReal> x12910 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12909))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12910.valid){
continue;
}
CheckValue<IkReal> x12911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12909))+(((-1.0)*r20*sj5)))),-1);
if(!x12911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12910.value)+(((1.5707963267949)*(x12911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12912=IKcos(j4);
IkReal x12913=IKsin(j4);
IkReal x12914=(cj5*r00);
IkReal x12915=(cj5*r20);
IkReal x12916=(cj5*r10);
IkReal x12917=((1.0)*x12912);
IkReal x12918=((1.0)*x12913);
IkReal x12919=(sj5*x12912);
IkReal x12920=(sj5*x12913);
evalcond[0]=((((-1.0)*x12915*x12917))+((r21*x12919))+((r22*x12913)));
evalcond[1]=((((-1.0)*x12916*x12917))+((r12*x12913))+((r11*x12919)));
evalcond[2]=((((-1.0)*x12915*x12918))+(((-1.0)*r22*x12917))+((r21*x12920)));
evalcond[3]=((((-1.0)*r02*x12917))+(((-1.0)*x12914*x12918))+((r01*x12920)));
evalcond[4]=((-1.0)+((r02*x12913))+(((-1.0)*x12914*x12917))+((r01*x12919)));
evalcond[5]=((1.0)+((r11*x12920))+(((-1.0)*x12916*x12918))+(((-1.0)*r12*x12917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12921 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12921.valid){
continue;
}
CheckValue<IkReal> x12922=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12921.value)+(((1.5707963267949)*(x12922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12923=IKcos(j4);
IkReal x12924=IKsin(j4);
IkReal x12925=(cj5*r00);
IkReal x12926=(cj5*r20);
IkReal x12927=(cj5*r10);
IkReal x12928=((1.0)*x12923);
IkReal x12929=((1.0)*x12924);
IkReal x12930=(sj5*x12923);
IkReal x12931=(sj5*x12924);
evalcond[0]=((((-1.0)*x12926*x12928))+((r22*x12924))+((r21*x12930)));
evalcond[1]=(((r11*x12930))+(((-1.0)*x12927*x12928))+((r12*x12924)));
evalcond[2]=((((-1.0)*x12926*x12929))+((r21*x12931))+(((-1.0)*r22*x12928)));
evalcond[3]=((((-1.0)*r02*x12928))+(((-1.0)*x12925*x12929))+((r01*x12931)));
evalcond[4]=((-1.0)+(((-1.0)*x12925*x12928))+((r02*x12924))+((r01*x12930)));
evalcond[5]=((1.0)+((r11*x12931))+(((-1.0)*x12927*x12929))+(((-1.0)*r12*x12928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12932=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12932;
j4eval[1]=IKsign(x12932);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12933=((1.0)*cj5);
IkReal x12934=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12933)));
j4eval[0]=x12934;
j4eval[1]=((IKabs(((((-1.0)*r20*x12933))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12934);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12935=cj5*cj5;
IkReal x12936=(r11*r21);
IkReal x12937=((1.0)*r20);
IkReal x12938=(cj5*sj5);
IkReal x12939=(((r11*r20*x12938))+(((-1.0)*r12*r22))+(((-1.0)*x12936))+(((-1.0)*r10*x12935*x12937))+((r10*r21*x12938))+((x12935*x12936)));
j4eval[0]=x12939;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12937))))));
j4eval[2]=IKsign(x12939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12940=cj5*cj5;
IkReal x12941=(r21*sj5);
IkReal x12942=(r11*r21);
IkReal x12943=((1.0)*r20);
CheckValue<IkReal> x12944 = IKatan2WithCheck(IkReal((x12941+(((-1.0)*cj5*x12943)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12944.valid){
continue;
}
CheckValue<IkReal> x12945=IKPowWithIntegerCheck(IKsign((((x12940*x12942))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12940*x12943))+(((-1.0)*x12942))+((cj5*r10*x12941))+((cj5*r11*r20*sj5)))),-1);
if(!x12945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12944.value)+(((1.5707963267949)*(x12945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12946=IKcos(j4);
IkReal x12947=IKsin(j4);
IkReal x12948=(cj5*r00);
IkReal x12949=(cj5*r20);
IkReal x12950=(cj5*r10);
IkReal x12951=((1.0)*x12946);
IkReal x12952=((1.0)*x12947);
IkReal x12953=(sj5*x12946);
IkReal x12954=(sj5*x12947);
evalcond[0]=(((r22*x12947))+((r21*x12953))+(((-1.0)*x12949*x12951)));
evalcond[1]=(((r12*x12947))+(((-1.0)*x12950*x12951))+((r11*x12953)));
evalcond[2]=(((r21*x12954))+(((-1.0)*r22*x12951))+(((-1.0)*x12949*x12952)));
evalcond[3]=((((-1.0)*x12948*x12952))+((r01*x12954))+(((-1.0)*r02*x12951)));
evalcond[4]=((1.0)+(((-1.0)*x12948*x12951))+((r01*x12953))+((r02*x12947)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12951))+(((-1.0)*x12950*x12952))+((r11*x12954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12955=((1.0)*cj5);
CheckValue<IkReal> x12956=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12955)))),-1);
if(!x12956.valid){
continue;
}
CheckValue<IkReal> x12957 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12955)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12956.value)))+(x12957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12958=IKcos(j4);
IkReal x12959=IKsin(j4);
IkReal x12960=(cj5*r00);
IkReal x12961=(cj5*r20);
IkReal x12962=(cj5*r10);
IkReal x12963=((1.0)*x12958);
IkReal x12964=((1.0)*x12959);
IkReal x12965=(sj5*x12958);
IkReal x12966=(sj5*x12959);
evalcond[0]=(((r22*x12959))+(((-1.0)*x12961*x12963))+((r21*x12965)));
evalcond[1]=((((-1.0)*x12962*x12963))+((r12*x12959))+((r11*x12965)));
evalcond[2]=((((-1.0)*x12961*x12964))+(((-1.0)*r22*x12963))+((r21*x12966)));
evalcond[3]=(((r01*x12966))+(((-1.0)*x12960*x12964))+(((-1.0)*r02*x12963)));
evalcond[4]=((1.0)+((r01*x12965))+(((-1.0)*x12960*x12963))+((r02*x12959)));
evalcond[5]=((1.0)+(((-1.0)*x12962*x12964))+(((-1.0)*r12*x12963))+((r11*x12966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12967=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12967.valid){
continue;
}
CheckValue<IkReal> x12968 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12967.value)))+(x12968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12969=IKcos(j4);
IkReal x12970=IKsin(j4);
IkReal x12971=(cj5*r00);
IkReal x12972=(cj5*r20);
IkReal x12973=(cj5*r10);
IkReal x12974=((1.0)*x12969);
IkReal x12975=((1.0)*x12970);
IkReal x12976=(sj5*x12969);
IkReal x12977=(sj5*x12970);
evalcond[0]=((((-1.0)*x12972*x12974))+((r22*x12970))+((r21*x12976)));
evalcond[1]=((((-1.0)*x12973*x12974))+((r11*x12976))+((r12*x12970)));
evalcond[2]=((((-1.0)*r22*x12974))+(((-1.0)*x12972*x12975))+((r21*x12977)));
evalcond[3]=(((r01*x12977))+(((-1.0)*r02*x12974))+(((-1.0)*x12971*x12975)));
evalcond[4]=((1.0)+((r01*x12976))+((r02*x12970))+(((-1.0)*x12971*x12974)));
evalcond[5]=((1.0)+(((-1.0)*x12973*x12975))+(((-1.0)*r12*x12974))+((r11*x12977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12978=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12978;
j4eval[1]=IKsign(x12978);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12979=((1.0)*cj5);
IkReal x12980=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12979)));
j4eval[0]=x12980;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12979)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12981=cj5*cj5;
IkReal x12982=(r11*r21);
IkReal x12983=((1.0)*r20);
IkReal x12984=(cj5*sj5);
IkReal x12985=(((r10*r21*x12984))+(((-1.0)*r12*r22))+((r11*r20*x12984))+(((-1.0)*x12982))+((x12981*x12982))+(((-1.0)*r10*x12981*x12983)));
j4eval[0]=x12985;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12983)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12986=cj5*cj5;
IkReal x12987=(r21*sj5);
IkReal x12988=(r11*r21);
IkReal x12989=((1.0)*r20);
CheckValue<IkReal> x12990 = IKatan2WithCheck(IkReal((x12987+(((-1.0)*cj5*x12989)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12990.valid){
continue;
}
CheckValue<IkReal> x12991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x12987))+((x12986*x12988))+(((-1.0)*x12988))+(((-1.0)*r10*x12986*x12989))+((cj5*r11*r20*sj5)))),-1);
if(!x12991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12990.value)+(((1.5707963267949)*(x12991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12992=IKcos(j4);
IkReal x12993=IKsin(j4);
IkReal x12994=(cj5*r00);
IkReal x12995=(cj5*r20);
IkReal x12996=(cj5*r10);
IkReal x12997=((1.0)*x12992);
IkReal x12998=((1.0)*x12993);
IkReal x12999=(sj5*x12992);
IkReal x13000=(sj5*x12993);
evalcond[0]=(((r22*x12993))+((r21*x12999))+(((-1.0)*x12995*x12997)));
evalcond[1]=(((r11*x12999))+((r12*x12993))+(((-1.0)*x12996*x12997)));
evalcond[2]=((((-1.0)*r22*x12997))+(((-1.0)*x12995*x12998))+((r21*x13000)));
evalcond[3]=((((-1.0)*x12994*x12998))+(((-1.0)*r02*x12997))+((r01*x13000)));
evalcond[4]=((1.0)+(((-1.0)*x12994*x12997))+((r01*x12999))+((r02*x12993)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12997))+(((-1.0)*x12996*x12998))+((r11*x13000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13001=((1.0)*cj5);
CheckValue<IkReal> x13002 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13001)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13002.valid){
continue;
}
CheckValue<IkReal> x13003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13001))+(((-1.0)*r10*sj5)))),-1);
if(!x13003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13002.value)+(((1.5707963267949)*(x13003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13004=IKcos(j4);
IkReal x13005=IKsin(j4);
IkReal x13006=(cj5*r00);
IkReal x13007=(cj5*r20);
IkReal x13008=(cj5*r10);
IkReal x13009=((1.0)*x13004);
IkReal x13010=((1.0)*x13005);
IkReal x13011=(sj5*x13004);
IkReal x13012=(sj5*x13005);
evalcond[0]=(((r21*x13011))+((r22*x13005))+(((-1.0)*x13007*x13009)));
evalcond[1]=((((-1.0)*x13008*x13009))+((r12*x13005))+((r11*x13011)));
evalcond[2]=(((r21*x13012))+(((-1.0)*r22*x13009))+(((-1.0)*x13007*x13010)));
evalcond[3]=(((r01*x13012))+(((-1.0)*r02*x13009))+(((-1.0)*x13006*x13010)));
evalcond[4]=((1.0)+((r01*x13011))+((r02*x13005))+(((-1.0)*x13006*x13009)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13009))+(((-1.0)*x13008*x13010))+((r11*x13012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13013=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13013.valid){
continue;
}
CheckValue<IkReal> x13014 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13013.value)))+(x13014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13015=IKcos(j4);
IkReal x13016=IKsin(j4);
IkReal x13017=(cj5*r00);
IkReal x13018=(cj5*r20);
IkReal x13019=(cj5*r10);
IkReal x13020=((1.0)*x13015);
IkReal x13021=((1.0)*x13016);
IkReal x13022=(sj5*x13015);
IkReal x13023=(sj5*x13016);
evalcond[0]=((((-1.0)*x13018*x13020))+((r21*x13022))+((r22*x13016)));
evalcond[1]=((((-1.0)*x13019*x13020))+((r11*x13022))+((r12*x13016)));
evalcond[2]=((((-1.0)*x13018*x13021))+(((-1.0)*r22*x13020))+((r21*x13023)));
evalcond[3]=(((r01*x13023))+(((-1.0)*r02*x13020))+(((-1.0)*x13017*x13021)));
evalcond[4]=((1.0)+((r01*x13022))+((r02*x13016))+(((-1.0)*x13017*x13020)));
evalcond[5]=((1.0)+(((-1.0)*x13019*x13021))+((r11*x13023))+(((-1.0)*r12*x13020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13024=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13024;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13025=((1.0)*cj5);
IkReal x13026=((((-1.0)*r21*x13025))+(((-1.0)*r20*sj5)));
j4eval[0]=x13026;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13025))+((r11*sj5))))));
j4eval[2]=IKsign(x13026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13027=cj5*cj5;
IkReal x13028=(r11*r21);
IkReal x13029=((1.0)*r20);
IkReal x13030=(cj5*sj5);
IkReal x13031=((((-1.0)*r10*x13027*x13029))+(((-1.0)*r12*r22))+((x13027*x13028))+((r10*r21*x13030))+(((-1.0)*x13028))+((r11*r20*x13030)));
j4eval[0]=x13031;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13029)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13032=cj5*cj5;
IkReal x13033=(r21*sj5);
IkReal x13034=(r11*r21);
IkReal x13035=((1.0)*r20);
CheckValue<IkReal> x13036 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13035))+x13033)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13036.valid){
continue;
}
CheckValue<IkReal> x13037=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13034))+(((-1.0)*r12*r22))+((x13032*x13034))+(((-1.0)*r10*x13032*x13035))+((cj5*r10*x13033))+((cj5*r11*r20*sj5)))),-1);
if(!x13037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13036.value)+(((1.5707963267949)*(x13037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13038=IKcos(j4);
IkReal x13039=IKsin(j4);
IkReal x13040=(cj5*r00);
IkReal x13041=(cj5*r20);
IkReal x13042=(cj5*r10);
IkReal x13043=((1.0)*x13038);
IkReal x13044=((1.0)*x13039);
IkReal x13045=(sj5*x13038);
IkReal x13046=(sj5*x13039);
evalcond[0]=(((r22*x13039))+((r21*x13045))+(((-1.0)*x13041*x13043)));
evalcond[1]=(((r11*x13045))+((r12*x13039))+(((-1.0)*x13042*x13043)));
evalcond[2]=(((r21*x13046))+(((-1.0)*r22*x13043))+(((-1.0)*x13041*x13044)));
evalcond[3]=((((-1.0)*x13040*x13044))+(((-1.0)*r02*x13043))+((r01*x13046)));
evalcond[4]=((-1.0)+(((-1.0)*x13040*x13043))+((r01*x13045))+((r02*x13039)));
evalcond[5]=((1.0)+((r11*x13046))+(((-1.0)*x13042*x13044))+(((-1.0)*r12*x13043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13047=((1.0)*cj5);
CheckValue<IkReal> x13048 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13047))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13048.valid){
continue;
}
CheckValue<IkReal> x13049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13047))+(((-1.0)*r20*sj5)))),-1);
if(!x13049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13048.value)+(((1.5707963267949)*(x13049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13050=IKcos(j4);
IkReal x13051=IKsin(j4);
IkReal x13052=(cj5*r00);
IkReal x13053=(cj5*r20);
IkReal x13054=(cj5*r10);
IkReal x13055=((1.0)*x13050);
IkReal x13056=((1.0)*x13051);
IkReal x13057=(sj5*x13050);
IkReal x13058=(sj5*x13051);
evalcond[0]=(((r21*x13057))+((r22*x13051))+(((-1.0)*x13053*x13055)));
evalcond[1]=(((r12*x13051))+(((-1.0)*x13054*x13055))+((r11*x13057)));
evalcond[2]=(((r21*x13058))+(((-1.0)*r22*x13055))+(((-1.0)*x13053*x13056)));
evalcond[3]=((((-1.0)*r02*x13055))+((r01*x13058))+(((-1.0)*x13052*x13056)));
evalcond[4]=((-1.0)+((r02*x13051))+((r01*x13057))+(((-1.0)*x13052*x13055)));
evalcond[5]=((1.0)+(((-1.0)*x13054*x13056))+(((-1.0)*r12*x13055))+((r11*x13058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13059 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13059.valid){
continue;
}
CheckValue<IkReal> x13060=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13059.value)+(((1.5707963267949)*(x13060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13061=IKcos(j4);
IkReal x13062=IKsin(j4);
IkReal x13063=(cj5*r00);
IkReal x13064=(cj5*r20);
IkReal x13065=(cj5*r10);
IkReal x13066=((1.0)*x13061);
IkReal x13067=((1.0)*x13062);
IkReal x13068=(sj5*x13061);
IkReal x13069=(sj5*x13062);
evalcond[0]=(((r22*x13062))+((r21*x13068))+(((-1.0)*x13064*x13066)));
evalcond[1]=(((r12*x13062))+(((-1.0)*x13065*x13066))+((r11*x13068)));
evalcond[2]=(((r21*x13069))+(((-1.0)*r22*x13066))+(((-1.0)*x13064*x13067)));
evalcond[3]=((((-1.0)*x13063*x13067))+(((-1.0)*r02*x13066))+((r01*x13069)));
evalcond[4]=((-1.0)+((r02*x13062))+(((-1.0)*x13063*x13066))+((r01*x13068)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13066))+(((-1.0)*x13065*x13067))+((r11*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13070=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13070;
j4eval[1]=IKsign(x13070);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13071=((1.0)*cj5);
IkReal x13072=((((-1.0)*r11*x13071))+(((-1.0)*r10*sj5)));
j4eval[0]=x13072;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13071)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13073=cj5*cj5;
IkReal x13074=(r11*r21);
IkReal x13075=((1.0)*r20);
IkReal x13076=(cj5*sj5);
IkReal x13077=((((-1.0)*r12*r22))+((x13073*x13074))+((r11*r20*x13076))+(((-1.0)*x13074))+((r10*r21*x13076))+(((-1.0)*r10*x13073*x13075)));
j4eval[0]=x13077;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13075)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13078=cj5*cj5;
IkReal x13079=(r21*sj5);
IkReal x13080=(r11*r21);
IkReal x13081=((1.0)*r20);
CheckValue<IkReal> x13082 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13081))+x13079)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13082.valid){
continue;
}
CheckValue<IkReal> x13083=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13078*x13080))+(((-1.0)*r10*x13078*x13081))+(((-1.0)*x13080))+((cj5*r11*r20*sj5))+((cj5*r10*x13079)))),-1);
if(!x13083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13082.value)+(((1.5707963267949)*(x13083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13084=IKcos(j4);
IkReal x13085=IKsin(j4);
IkReal x13086=(cj5*r00);
IkReal x13087=(cj5*r20);
IkReal x13088=(cj5*r10);
IkReal x13089=((1.0)*x13084);
IkReal x13090=((1.0)*x13085);
IkReal x13091=(sj5*x13084);
IkReal x13092=(sj5*x13085);
evalcond[0]=((((-1.0)*x13087*x13089))+((r22*x13085))+((r21*x13091)));
evalcond[1]=(((r11*x13091))+((r12*x13085))+(((-1.0)*x13088*x13089)));
evalcond[2]=((((-1.0)*x13087*x13090))+(((-1.0)*r22*x13089))+((r21*x13092)));
evalcond[3]=((((-1.0)*r02*x13089))+(((-1.0)*x13086*x13090))+((r01*x13092)));
evalcond[4]=((1.0)+((r02*x13085))+(((-1.0)*x13086*x13089))+((r01*x13091)));
evalcond[5]=((1.0)+((r11*x13092))+(((-1.0)*x13088*x13090))+(((-1.0)*r12*x13089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13093=((1.0)*cj5);
CheckValue<IkReal> x13094=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13093)))),-1);
if(!x13094.valid){
continue;
}
CheckValue<IkReal> x13095 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13093))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13094.value)))+(x13095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13096=IKcos(j4);
IkReal x13097=IKsin(j4);
IkReal x13098=(cj5*r00);
IkReal x13099=(cj5*r20);
IkReal x13100=(cj5*r10);
IkReal x13101=((1.0)*x13096);
IkReal x13102=((1.0)*x13097);
IkReal x13103=(sj5*x13096);
IkReal x13104=(sj5*x13097);
evalcond[0]=((((-1.0)*x13099*x13101))+((r22*x13097))+((r21*x13103)));
evalcond[1]=((((-1.0)*x13100*x13101))+((r12*x13097))+((r11*x13103)));
evalcond[2]=((((-1.0)*x13099*x13102))+((r21*x13104))+(((-1.0)*r22*x13101)));
evalcond[3]=(((r01*x13104))+(((-1.0)*x13098*x13102))+(((-1.0)*r02*x13101)));
evalcond[4]=((1.0)+((r02*x13097))+((r01*x13103))+(((-1.0)*x13098*x13101)));
evalcond[5]=((1.0)+(((-1.0)*x13100*x13102))+(((-1.0)*r12*x13101))+((r11*x13104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13105=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13105.valid){
continue;
}
CheckValue<IkReal> x13106 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13105.value)))+(x13106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13107=IKcos(j4);
IkReal x13108=IKsin(j4);
IkReal x13109=(cj5*r00);
IkReal x13110=(cj5*r20);
IkReal x13111=(cj5*r10);
IkReal x13112=((1.0)*x13107);
IkReal x13113=((1.0)*x13108);
IkReal x13114=(sj5*x13107);
IkReal x13115=(sj5*x13108);
evalcond[0]=(((r21*x13114))+((r22*x13108))+(((-1.0)*x13110*x13112)));
evalcond[1]=(((r12*x13108))+(((-1.0)*x13111*x13112))+((r11*x13114)));
evalcond[2]=(((r21*x13115))+(((-1.0)*x13110*x13113))+(((-1.0)*r22*x13112)));
evalcond[3]=((((-1.0)*x13109*x13113))+(((-1.0)*r02*x13112))+((r01*x13115)));
evalcond[4]=((1.0)+(((-1.0)*x13109*x13112))+((r02*x13108))+((r01*x13114)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13112))+(((-1.0)*x13111*x13113))+((r11*x13115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13116=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13116;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13117=((1.0)*cj5);
IkReal x13118=((((-1.0)*r21*x13117))+(((-1.0)*r20*sj5)));
j4eval[0]=x13118;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13117))+((r11*sj5))))));
j4eval[2]=IKsign(x13118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13119=cj5*cj5;
IkReal x13120=(r11*r21);
IkReal x13121=((1.0)*r20);
IkReal x13122=(cj5*sj5);
IkReal x13123=((((-1.0)*r10*x13119*x13121))+((x13119*x13120))+(((-1.0)*r12*r22))+((r10*r21*x13122))+((r11*r20*x13122))+(((-1.0)*x13120)));
j4eval[0]=x13123;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13121))))));
j4eval[2]=IKsign(x13123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13124=cj5*cj5;
IkReal x13125=(r21*sj5);
IkReal x13126=(r11*r21);
IkReal x13127=((1.0)*r20);
CheckValue<IkReal> x13128=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13125))+(((-1.0)*r12*r22))+((x13124*x13126))+(((-1.0)*r10*x13124*x13127))+((cj5*r11*r20*sj5))+(((-1.0)*x13126)))),-1);
if(!x13128.valid){
continue;
}
CheckValue<IkReal> x13129 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13127))+x13125)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13128.value)))+(x13129.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13130=IKcos(j4);
IkReal x13131=IKsin(j4);
IkReal x13132=(cj5*r00);
IkReal x13133=(cj5*r20);
IkReal x13134=(cj5*r10);
IkReal x13135=((1.0)*x13130);
IkReal x13136=((1.0)*x13131);
IkReal x13137=(sj5*x13130);
IkReal x13138=(sj5*x13131);
evalcond[0]=((((-1.0)*x13133*x13135))+((r21*x13137))+((r22*x13131)));
evalcond[1]=((((-1.0)*x13134*x13135))+((r12*x13131))+((r11*x13137)));
evalcond[2]=((((-1.0)*x13133*x13136))+((r21*x13138))+(((-1.0)*r22*x13135)));
evalcond[3]=(((r01*x13138))+(((-1.0)*x13132*x13136))+(((-1.0)*r02*x13135)));
evalcond[4]=((-1.0)+((r01*x13137))+(((-1.0)*x13132*x13135))+((r02*x13131)));
evalcond[5]=((1.0)+(((-1.0)*x13134*x13136))+((r11*x13138))+(((-1.0)*r12*x13135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13139=((1.0)*cj5);
CheckValue<IkReal> x13140 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13139))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13140.valid){
continue;
}
CheckValue<IkReal> x13141=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13139))+(((-1.0)*r20*sj5)))),-1);
if(!x13141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13140.value)+(((1.5707963267949)*(x13141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13142=IKcos(j4);
IkReal x13143=IKsin(j4);
IkReal x13144=(cj5*r00);
IkReal x13145=(cj5*r20);
IkReal x13146=(cj5*r10);
IkReal x13147=((1.0)*x13142);
IkReal x13148=((1.0)*x13143);
IkReal x13149=(sj5*x13142);
IkReal x13150=(sj5*x13143);
evalcond[0]=(((r22*x13143))+(((-1.0)*x13145*x13147))+((r21*x13149)));
evalcond[1]=((((-1.0)*x13146*x13147))+((r12*x13143))+((r11*x13149)));
evalcond[2]=(((r21*x13150))+(((-1.0)*r22*x13147))+(((-1.0)*x13145*x13148)));
evalcond[3]=((((-1.0)*x13144*x13148))+(((-1.0)*r02*x13147))+((r01*x13150)));
evalcond[4]=((-1.0)+(((-1.0)*x13144*x13147))+((r02*x13143))+((r01*x13149)));
evalcond[5]=((1.0)+(((-1.0)*x13146*x13148))+(((-1.0)*r12*x13147))+((r11*x13150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13151 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13151.valid){
continue;
}
CheckValue<IkReal> x13152=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13151.value)+(((1.5707963267949)*(x13152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13153=IKcos(j4);
IkReal x13154=IKsin(j4);
IkReal x13155=(cj5*r00);
IkReal x13156=(cj5*r20);
IkReal x13157=(cj5*r10);
IkReal x13158=((1.0)*x13153);
IkReal x13159=((1.0)*x13154);
IkReal x13160=(sj5*x13153);
IkReal x13161=(sj5*x13154);
evalcond[0]=((((-1.0)*x13156*x13158))+((r22*x13154))+((r21*x13160)));
evalcond[1]=((((-1.0)*x13157*x13158))+((r11*x13160))+((r12*x13154)));
evalcond[2]=((((-1.0)*x13156*x13159))+(((-1.0)*r22*x13158))+((r21*x13161)));
evalcond[3]=(((r01*x13161))+(((-1.0)*r02*x13158))+(((-1.0)*x13155*x13159)));
evalcond[4]=((-1.0)+((r02*x13154))+((r01*x13160))+(((-1.0)*x13155*x13158)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13158))+(((-1.0)*x13157*x13159))+((r11*x13161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13162=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13162);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13162);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13163=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13164=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13164)));
j4eval[1]=((((-1.0)*r00*x13164))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13165=((1.0)*cj5);
CheckValue<IkReal> x13166=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13165))),-1);
if(!x13166.valid){
continue;
}
CheckValue<IkReal> x13167=IKPowWithIntegerCheck(((((-1.0)*r00*x13165))+((r01*sj5))),-1);
if(!x13167.valid){
continue;
}
if( IKabs(((-1.0)*(x13166.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13167.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13166.value)))+IKsqr(((x13167.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13166.value)), ((x13167.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13168=IKsin(j4);
IkReal x13169=IKcos(j4);
IkReal x13170=((1.0)*cj5);
IkReal x13171=((1.0)*cj2);
IkReal x13172=(sj5*x13169);
IkReal x13173=(sj5*x13168);
evalcond[0]=((-1.0)*r22*x13169);
evalcond[1]=((((-1.0)*cj1*x13171))+((r22*x13168))+((sj1*sj2)));
evalcond[2]=(((r01*x13173))+(((-1.0)*r00*x13168*x13170)));
evalcond[3]=((((-1.0)*r10*x13169*x13170))+((r11*x13172)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13168*x13170))+((r11*x13173)));
evalcond[5]=(((r01*x13172))+(((-1.0)*sj1*x13171))+(((-1.0)*r00*x13169*x13170))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13174=IKPowWithIntegerCheck(r22,-1);
if(!x13174.valid){
continue;
}
CheckValue<IkReal> x13175=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13175.valid){
continue;
}
if( IKabs(((x13174.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13175.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13174.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13175.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13174.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13175.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13176=IKsin(j4);
IkReal x13177=IKcos(j4);
IkReal x13178=((1.0)*cj5);
IkReal x13179=((1.0)*cj2);
IkReal x13180=(sj5*x13177);
IkReal x13181=(sj5*x13176);
evalcond[0]=((-1.0)*r22*x13177);
evalcond[1]=((((-1.0)*cj1*x13179))+((sj1*sj2))+((r22*x13176)));
evalcond[2]=((((-1.0)*r00*x13176*x13178))+((r01*x13181)));
evalcond[3]=(((r11*x13180))+(((-1.0)*r10*x13177*x13178)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13176*x13178))+((r11*x13181)));
evalcond[5]=((((-1.0)*r00*x13177*x13178))+(((-1.0)*sj1*x13179))+(((-1.0)*cj1*sj2))+((r01*x13180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13182=(sj1*sj2);
IkReal x13183=(cj5*r10);
IkReal x13184=(r11*sj5);
IkReal x13185=(cj1*cj2);
CheckValue<IkReal> x13186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13186.valid){
continue;
}
CheckValue<IkReal> x13187 = IKatan2WithCheck(IkReal((((x13183*x13185))+((x13182*x13184))+(((-1.0)*x13182*x13183))+(((-1.0)*x13184*x13185)))),IkReal((((r12*x13185))+(((-1.0)*r12*x13182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13186.value)))+(x13187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13188=IKcos(j4);
IkReal x13189=IKsin(j4);
IkReal x13190=(cj5*r00);
IkReal x13191=(cj5*r10);
IkReal x13192=(r21*sj5);
IkReal x13193=((1.0)*cj2);
IkReal x13194=(cj5*r20);
IkReal x13195=((1.0)*x13188);
IkReal x13196=((1.0)*x13189);
IkReal x13197=(sj5*x13189);
IkReal x13198=(sj5*x13188);
evalcond[0]=(((r12*x13189))+((r11*x13198))+(((-1.0)*x13191*x13195)));
evalcond[1]=((((-1.0)*x13194*x13196))+(((-1.0)*r22*x13195))+((x13189*x13192)));
evalcond[2]=((((-1.0)*r02*x13195))+((r01*x13197))+(((-1.0)*x13190*x13196)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13195))+((r11*x13197))+(((-1.0)*x13191*x13196)));
evalcond[4]=(((r22*x13189))+(((-1.0)*x13194*x13195))+(((-1.0)*cj1*x13193))+((x13188*x13192))+((sj1*sj2)));
evalcond[5]=(((r02*x13189))+(((-1.0)*cj1*sj2))+((r01*x13198))+(((-1.0)*x13190*x13195))+(((-1.0)*sj1*x13193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13199=((1.0)*cj5);
CheckValue<IkReal> x13200 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13200.valid){
continue;
}
CheckValue<IkReal> x13201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13199)))),-1);
if(!x13201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13200.value)+(((1.5707963267949)*(x13201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13202=IKcos(j4);
IkReal x13203=IKsin(j4);
IkReal x13204=(cj5*r00);
IkReal x13205=(cj5*r10);
IkReal x13206=(r21*sj5);
IkReal x13207=((1.0)*cj2);
IkReal x13208=(cj5*r20);
IkReal x13209=((1.0)*x13202);
IkReal x13210=((1.0)*x13203);
IkReal x13211=(sj5*x13203);
IkReal x13212=(sj5*x13202);
evalcond[0]=(((r11*x13212))+((r12*x13203))+(((-1.0)*x13205*x13209)));
evalcond[1]=(((x13203*x13206))+(((-1.0)*x13208*x13210))+(((-1.0)*r22*x13209)));
evalcond[2]=(((r01*x13211))+(((-1.0)*r02*x13209))+(((-1.0)*x13204*x13210)));
evalcond[3]=((1.0)+((r11*x13211))+(((-1.0)*r12*x13209))+(((-1.0)*x13205*x13210)));
evalcond[4]=(((x13202*x13206))+(((-1.0)*cj1*x13207))+(((-1.0)*x13208*x13209))+((sj1*sj2))+((r22*x13203)));
evalcond[5]=(((r01*x13212))+((r02*x13203))+(((-1.0)*cj1*sj2))+(((-1.0)*x13204*x13209))+(((-1.0)*sj1*x13207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13213=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13213.valid){
continue;
}
CheckValue<IkReal> x13214 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13213.value)))+(x13214.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13215=IKcos(j4);
IkReal x13216=IKsin(j4);
IkReal x13217=(cj5*r00);
IkReal x13218=(cj5*r10);
IkReal x13219=(r21*sj5);
IkReal x13220=((1.0)*cj2);
IkReal x13221=(cj5*r20);
IkReal x13222=((1.0)*x13215);
IkReal x13223=((1.0)*x13216);
IkReal x13224=(sj5*x13216);
IkReal x13225=(sj5*x13215);
evalcond[0]=(((r12*x13216))+((r11*x13225))+(((-1.0)*x13218*x13222)));
evalcond[1]=(((x13216*x13219))+(((-1.0)*r22*x13222))+(((-1.0)*x13221*x13223)));
evalcond[2]=((((-1.0)*r02*x13222))+(((-1.0)*x13217*x13223))+((r01*x13224)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13222))+((r11*x13224))+(((-1.0)*x13218*x13223)));
evalcond[4]=((((-1.0)*cj1*x13220))+(((-1.0)*x13221*x13222))+((sj1*sj2))+((x13215*x13219))+((r22*x13216)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13220))+(((-1.0)*x13217*x13222))+((r01*x13225))+((r02*x13216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13226=((-1.0)*r00);
IkReal x13228 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13228)==0){
continue;
}
IkReal x13227=pow(x13228,-0.5);
CheckValue<IkReal> x13229 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13226),IKFAST_ATAN2_MAGTHRESH);
if(!x13229.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13229.value));
IkReal gconst19=(r01*x13227);
IkReal gconst20=(x13226*x13227);
CheckValue<IkReal> x13230 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13230.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13230.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13231=((-1.0)*r00);
IkReal x13232=x13227;
CheckValue<IkReal> x13234 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13231),IKFAST_ATAN2_MAGTHRESH);
if(!x13234.valid){
continue;
}
IkReal x13233=((-1.0)*(x13234.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13233;
IkReal gconst18=x13233;
IkReal gconst19=(r01*x13232);
IkReal gconst20=(x13231*x13232);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13235=((-1.0)*r00);
IkReal x13236=x13227;
CheckValue<IkReal> x13238 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13235),IKFAST_ATAN2_MAGTHRESH);
if(!x13238.valid){
continue;
}
IkReal x13237=((-1.0)*(x13238.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13237;
IkReal gconst18=x13237;
IkReal gconst19=(r01*x13236);
IkReal gconst20=(x13235*x13236);
CheckValue<IkReal> x13246=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13246.valid){
continue;
}
IkReal x13239=x13246.value;
IkReal x13240=(sj3*x13239);
IkReal x13241=(r11*x13240);
IkReal x13242=(r21*x13240);
IkReal x13243=(r20*x13240);
IkReal x13244=(r10*x13240);
IkReal x13245=(r00*r01*x13240);
j4eval[0]=IKsign((((r21*x13241*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r10*x13242))+((r10*x13243*(r00*r00)))+((r00*r01*r20*x13241))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13247=gconst19*gconst19;
IkReal x13248=gconst20*gconst20;
IkReal x13249=(gconst20*sj3);
IkReal x13250=((1.0)*cj3);
IkReal x13251=(r10*sj3);
IkReal x13252=(gconst19*r21);
IkReal x13253=(r11*r20);
IkReal x13254=(cj3*gconst20);
IkReal x13255=((1.0)*r10*r20);
IkReal x13256=(r21*x13247);
CheckValue<IkReal> x13257 = IKatan2WithCheck(IkReal((((gconst19*r22*x13251))+((r11*r22*x13249)))),IkReal(((((-1.0)*sj3*x13248*x13253))+((r11*x13249*x13252))+(((-1.0)*gconst19*x13249*x13255))+((x13251*x13256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13257.valid){
continue;
}
CheckValue<IkReal> x13258=IKPowWithIntegerCheck(IKsign((((r10*x13252*x13254))+((gconst19*x13253*x13254))+(((-1.0)*r12*r22*x13250))+(((-1.0)*r10*r20*x13248*x13250))+(((-1.0)*r11*x13250*x13256)))),-1);
if(!x13258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13257.value)+(((1.5707963267949)*(x13258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13259=IKsin(j4);
IkReal x13260=IKcos(j4);
IkReal x13261=(sj1*sj2);
IkReal x13262=(gconst20*sj3);
IkReal x13263=(gconst19*r21);
IkReal x13264=(gconst20*r10);
IkReal x13265=(cj3*gconst19);
IkReal x13266=(gconst19*sj3);
IkReal x13267=((1.0)*cj1);
IkReal x13268=(cj3*gconst20);
IkReal x13269=(cj2*sj1);
IkReal x13270=(cj2*x13267);
IkReal x13271=((1.0)*x13260);
IkReal x13272=((1.0)*x13259);
IkReal x13273=(cj3*x13259);
IkReal x13274=(gconst19*x13259);
evalcond[0]=(((x13259*x13263))+(((-1.0)*r22*x13271))+(((-1.0)*gconst20*r20*x13272)));
evalcond[1]=((((-1.0)*gconst20*r00*x13272))+((r01*x13274))+(((-1.0)*r02*x13271)));
evalcond[2]=((1.0)+((r11*x13274))+(((-1.0)*x13264*x13272))+(((-1.0)*r12*x13271)));
evalcond[3]=((((-1.0)*cj3*x13264*x13271))+((r11*x13262))+((r12*x13273))+((r10*x13266))+((r11*x13260*x13265)));
evalcond[4]=(((r11*x13268))+((r10*x13265))+(((-1.0)*r11*x13266*x13271))+((r10*x13260*x13262))+(((-1.0)*r12*sj3*x13272)));
evalcond[5]=(((r21*x13262))+(((-1.0)*r20*x13268*x13271))+((cj1*sj2))+((r20*x13266))+((cj3*x13260*x13263))+((r22*x13273))+x13269);
evalcond[6]=((((-1.0)*x13270))+((r00*x13266))+((r01*x13262))+((r02*x13273))+(((-1.0)*r00*x13268*x13271))+x13261+((r01*x13260*x13265)));
evalcond[7]=((((-1.0)*x13270))+((r21*x13268))+((r20*x13265))+(((-1.0)*r22*sj3*x13272))+x13261+((r20*x13260*x13262))+(((-1.0)*sj3*x13263*x13271)));
evalcond[8]=((((-1.0)*r01*x13266*x13271))+(((-1.0)*x13269))+(((-1.0)*sj2*x13267))+((r00*x13265))+((r00*x13260*x13262))+((r01*x13268))+(((-1.0)*r02*sj3*x13272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13275=gconst19*gconst19;
IkReal x13276=gconst20*gconst20;
IkReal x13277=(r21*sj3);
IkReal x13278=(cj3*r11);
IkReal x13279=(gconst19*gconst20);
IkReal x13280=((1.0)*r10);
IkReal x13281=(cj3*r10);
IkReal x13282=(r20*x13276);
CheckValue<IkReal> x13283=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*sj3*x13279))+(((-1.0)*x13277*x13279*x13280))+((r10*sj3*x13282))+((r11*x13275*x13277))+((r12*r22*sj3)))),-1);
if(!x13283.valid){
continue;
}
CheckValue<IkReal> x13284 = IKatan2WithCheck(IkReal((((gconst19*r22*x13281))+((gconst20*r22*x13278)))),IkReal(((((-1.0)*cj3*r20*x13279*x13280))+(((-1.0)*x13278*x13282))+((r21*x13278*x13279))+((r21*x13275*x13281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13283.value)))+(x13284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13285=IKsin(j4);
IkReal x13286=IKcos(j4);
IkReal x13287=(sj1*sj2);
IkReal x13288=(gconst20*sj3);
IkReal x13289=(gconst19*r21);
IkReal x13290=(gconst20*r10);
IkReal x13291=(cj3*gconst19);
IkReal x13292=(gconst19*sj3);
IkReal x13293=((1.0)*cj1);
IkReal x13294=(cj3*gconst20);
IkReal x13295=(cj2*sj1);
IkReal x13296=(cj2*x13293);
IkReal x13297=((1.0)*x13286);
IkReal x13298=((1.0)*x13285);
IkReal x13299=(cj3*x13285);
IkReal x13300=(gconst19*x13285);
evalcond[0]=(((x13285*x13289))+(((-1.0)*gconst20*r20*x13298))+(((-1.0)*r22*x13297)));
evalcond[1]=((((-1.0)*gconst20*r00*x13298))+((r01*x13300))+(((-1.0)*r02*x13297)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13297))+((r11*x13300))+(((-1.0)*x13290*x13298)));
evalcond[3]=(((r12*x13299))+((r11*x13288))+((r10*x13292))+(((-1.0)*cj3*x13290*x13297))+((r11*x13286*x13291)));
evalcond[4]=(((r11*x13294))+((r10*x13291))+(((-1.0)*r11*x13292*x13297))+((r10*x13286*x13288))+(((-1.0)*r12*sj3*x13298)));
evalcond[5]=(((cj3*x13286*x13289))+((r20*x13292))+((cj1*sj2))+(((-1.0)*r20*x13294*x13297))+((r22*x13299))+((r21*x13288))+x13295);
evalcond[6]=(((r02*x13299))+x13287+((r01*x13288))+(((-1.0)*r00*x13294*x13297))+(((-1.0)*x13296))+((r00*x13292))+((r01*x13286*x13291)));
evalcond[7]=(((r20*x13291))+(((-1.0)*sj3*x13289*x13297))+(((-1.0)*r22*sj3*x13298))+x13287+((r20*x13286*x13288))+(((-1.0)*x13296))+((r21*x13294)));
evalcond[8]=((((-1.0)*r01*x13292*x13297))+(((-1.0)*x13295))+(((-1.0)*sj2*x13293))+((r00*x13286*x13288))+(((-1.0)*r02*sj3*x13298))+((r00*x13291))+((r01*x13294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13301 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13301.valid){
continue;
}
CheckValue<IkReal> x13302=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13301.value)+(((1.5707963267949)*(x13302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13303=IKsin(j4);
IkReal x13304=IKcos(j4);
IkReal x13305=(sj1*sj2);
IkReal x13306=(gconst20*sj3);
IkReal x13307=(gconst19*r21);
IkReal x13308=(gconst20*r10);
IkReal x13309=(cj3*gconst19);
IkReal x13310=(gconst19*sj3);
IkReal x13311=((1.0)*cj1);
IkReal x13312=(cj3*gconst20);
IkReal x13313=(cj2*sj1);
IkReal x13314=(cj2*x13311);
IkReal x13315=((1.0)*x13304);
IkReal x13316=((1.0)*x13303);
IkReal x13317=(cj3*x13303);
IkReal x13318=(gconst19*x13303);
evalcond[0]=((((-1.0)*gconst20*r20*x13316))+((x13303*x13307))+(((-1.0)*r22*x13315)));
evalcond[1]=((((-1.0)*gconst20*r00*x13316))+((r01*x13318))+(((-1.0)*r02*x13315)));
evalcond[2]=((1.0)+((r11*x13318))+(((-1.0)*x13308*x13316))+(((-1.0)*r12*x13315)));
evalcond[3]=(((r10*x13310))+((r11*x13304*x13309))+(((-1.0)*cj3*x13308*x13315))+((r11*x13306))+((r12*x13317)));
evalcond[4]=(((r11*x13312))+((r10*x13309))+(((-1.0)*r11*x13310*x13315))+((r10*x13304*x13306))+(((-1.0)*r12*sj3*x13316)));
evalcond[5]=((((-1.0)*r20*x13312*x13315))+((r21*x13306))+((r20*x13310))+((cj1*sj2))+((cj3*x13304*x13307))+((r22*x13317))+x13313);
evalcond[6]=(((r01*x13304*x13309))+((r00*x13310))+(((-1.0)*r00*x13312*x13315))+((r01*x13306))+(((-1.0)*x13314))+x13305+((r02*x13317)));
evalcond[7]=((((-1.0)*r22*sj3*x13316))+((r20*x13309))+((r20*x13304*x13306))+(((-1.0)*sj3*x13307*x13315))+(((-1.0)*x13314))+((r21*x13312))+x13305);
evalcond[8]=(((r00*x13304*x13306))+(((-1.0)*sj2*x13311))+(((-1.0)*r02*sj3*x13316))+((r01*x13312))+((r00*x13309))+(((-1.0)*r01*x13310*x13315))+(((-1.0)*x13313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13319=((-1.0)*r01);
IkReal x13321 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13321)==0){
continue;
}
IkReal x13320=pow(x13321,-0.5);
CheckValue<IkReal> x13322 = IKatan2WithCheck(IkReal(x13319),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13322.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13322.value))));
IkReal gconst22=(x13319*x13320);
IkReal gconst23=((1.0)*r00*x13320);
CheckValue<IkReal> x13323 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13323.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13323.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13324=((-1.0)*r01);
CheckValue<IkReal> x13327 = IKatan2WithCheck(IkReal(x13324),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13327.valid){
continue;
}
IkReal x13325=((1.0)*(x13327.value));
IkReal x13326=x13320;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13325)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13325)));
IkReal gconst22=(x13324*x13326);
IkReal gconst23=((1.0)*r00*x13326);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13328=((-1.0)*r01);
CheckValue<IkReal> x13331 = IKatan2WithCheck(IkReal(x13328),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13331.valid){
continue;
}
IkReal x13329=((1.0)*(x13331.value));
IkReal x13330=x13320;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13329)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13329)));
IkReal gconst22=(x13328*x13330);
IkReal gconst23=((1.0)*r00*x13330);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13332=gconst22*gconst22;
IkReal x13333=gconst23*gconst23;
IkReal x13334=(r21*sj3);
IkReal x13335=((1.0)*cj3);
IkReal x13336=(gconst23*r11);
IkReal x13337=(r22*sj3);
IkReal x13338=(gconst22*r10);
IkReal x13339=((1.0)*r20*sj3);
CheckValue<IkReal> x13340 = IKatan2WithCheck(IkReal((((x13337*x13338))+((x13336*x13337)))),IkReal(((((-1.0)*r11*x13333*x13339))+((r10*x13332*x13334))+((gconst22*x13334*x13336))+(((-1.0)*gconst23*x13338*x13339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13340.valid){
continue;
}
CheckValue<IkReal> x13341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13333*x13335))+((cj3*gconst22*r20*x13336))+(((-1.0)*r12*r22*x13335))+(((-1.0)*r11*r21*x13332*x13335))+((cj3*gconst23*r21*x13338)))),-1);
if(!x13341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13340.value)+(((1.5707963267949)*(x13341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13342=IKsin(j4);
IkReal x13343=IKcos(j4);
IkReal x13344=(sj1*sj2);
IkReal x13345=(gconst23*sj3);
IkReal x13346=(gconst22*sj3);
IkReal x13347=(cj2*sj1);
IkReal x13348=((1.0)*cj1);
IkReal x13349=(cj3*gconst23);
IkReal x13350=(cj3*gconst22);
IkReal x13351=(cj2*x13348);
IkReal x13352=((1.0)*x13343);
IkReal x13353=(cj3*x13342);
IkReal x13354=(gconst22*x13342);
IkReal x13355=((1.0)*sj3*x13342);
IkReal x13356=(x13343*x13350);
IkReal x13357=((1.0)*gconst23*x13342);
evalcond[0]=((((-1.0)*r22*x13352))+((r21*x13354))+(((-1.0)*r20*x13357)));
evalcond[1]=((((-1.0)*r02*x13352))+(((-1.0)*r00*x13357))+((r01*x13354)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13352))+((r11*x13354))+(((-1.0)*r10*x13357)));
evalcond[3]=((((-1.0)*r10*x13349*x13352))+((r10*x13346))+((r11*x13345))+((r11*x13356))+((r12*x13353)));
evalcond[4]=((((-1.0)*r12*x13355))+(((-1.0)*r11*x13346*x13352))+((r10*x13350))+((r10*x13343*x13345))+((r11*x13349)));
evalcond[5]=(((r22*x13353))+((cj1*sj2))+((r21*x13345))+((r21*x13356))+(((-1.0)*r20*x13349*x13352))+((r20*x13346))+x13347);
evalcond[6]=((((-1.0)*r00*x13349*x13352))+((r02*x13353))+((r01*x13356))+((r00*x13346))+((r01*x13345))+(((-1.0)*x13351))+x13344);
evalcond[7]=((((-1.0)*r22*x13355))+((r20*x13343*x13345))+((r20*x13350))+((r21*x13349))+(((-1.0)*r21*x13346*x13352))+(((-1.0)*x13351))+x13344);
evalcond[8]=((((-1.0)*r02*x13355))+((r00*x13343*x13345))+(((-1.0)*sj2*x13348))+(((-1.0)*x13347))+((r00*x13350))+(((-1.0)*r01*x13346*x13352))+((r01*x13349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13358=((1.0)*gconst23);
CheckValue<IkReal> x13359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13358)))),-1);
if(!x13359.valid){
continue;
}
CheckValue<IkReal> x13360 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13359.value)))+(x13360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13361=IKsin(j4);
IkReal x13362=IKcos(j4);
IkReal x13363=(sj1*sj2);
IkReal x13364=(gconst23*sj3);
IkReal x13365=(gconst22*sj3);
IkReal x13366=(cj2*sj1);
IkReal x13367=((1.0)*cj1);
IkReal x13368=(cj3*gconst23);
IkReal x13369=(cj3*gconst22);
IkReal x13370=(cj2*x13367);
IkReal x13371=((1.0)*x13362);
IkReal x13372=(cj3*x13361);
IkReal x13373=(gconst22*x13361);
IkReal x13374=((1.0)*sj3*x13361);
IkReal x13375=(x13362*x13369);
IkReal x13376=((1.0)*gconst23*x13361);
evalcond[0]=((((-1.0)*r22*x13371))+(((-1.0)*r20*x13376))+((r21*x13373)));
evalcond[1]=((((-1.0)*r00*x13376))+((r01*x13373))+(((-1.0)*r02*x13371)));
evalcond[2]=((1.0)+((r11*x13373))+(((-1.0)*r10*x13376))+(((-1.0)*r12*x13371)));
evalcond[3]=(((r10*x13365))+((r12*x13372))+((r11*x13375))+((r11*x13364))+(((-1.0)*r10*x13368*x13371)));
evalcond[4]=(((r10*x13369))+((r11*x13368))+(((-1.0)*r11*x13365*x13371))+((r10*x13362*x13364))+(((-1.0)*r12*x13374)));
evalcond[5]=(((r20*x13365))+((cj1*sj2))+(((-1.0)*r20*x13368*x13371))+((r22*x13372))+((r21*x13364))+((r21*x13375))+x13366);
evalcond[6]=(((r02*x13372))+((r01*x13364))+((r01*x13375))+(((-1.0)*r00*x13368*x13371))+((r00*x13365))+(((-1.0)*x13370))+x13363);
evalcond[7]=(((r20*x13369))+(((-1.0)*r22*x13374))+(((-1.0)*x13370))+((r20*x13362*x13364))+((r21*x13368))+x13363+(((-1.0)*r21*x13365*x13371)));
evalcond[8]=((((-1.0)*x13366))+(((-1.0)*sj2*x13367))+((r01*x13368))+(((-1.0)*r01*x13365*x13371))+((r00*x13369))+((r00*x13362*x13364))+(((-1.0)*r02*x13374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13377=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13377.valid){
continue;
}
CheckValue<IkReal> x13378 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13377.value)))+(x13378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13379=IKsin(j4);
IkReal x13380=IKcos(j4);
IkReal x13381=(sj1*sj2);
IkReal x13382=(gconst23*sj3);
IkReal x13383=(gconst22*sj3);
IkReal x13384=(cj2*sj1);
IkReal x13385=((1.0)*cj1);
IkReal x13386=(cj3*gconst23);
IkReal x13387=(cj3*gconst22);
IkReal x13388=(cj2*x13385);
IkReal x13389=((1.0)*x13380);
IkReal x13390=(cj3*x13379);
IkReal x13391=(gconst22*x13379);
IkReal x13392=((1.0)*sj3*x13379);
IkReal x13393=(x13380*x13387);
IkReal x13394=((1.0)*gconst23*x13379);
evalcond[0]=(((r21*x13391))+(((-1.0)*r22*x13389))+(((-1.0)*r20*x13394)));
evalcond[1]=(((r01*x13391))+(((-1.0)*r00*x13394))+(((-1.0)*r02*x13389)));
evalcond[2]=((1.0)+((r11*x13391))+(((-1.0)*r10*x13394))+(((-1.0)*r12*x13389)));
evalcond[3]=(((r11*x13393))+((r11*x13382))+((r10*x13383))+((r12*x13390))+(((-1.0)*r10*x13386*x13389)));
evalcond[4]=(((r11*x13386))+((r10*x13387))+((r10*x13380*x13382))+(((-1.0)*r11*x13383*x13389))+(((-1.0)*r12*x13392)));
evalcond[5]=(((r21*x13393))+((r20*x13383))+((cj1*sj2))+((r22*x13390))+(((-1.0)*r20*x13386*x13389))+x13384+((r21*x13382)));
evalcond[6]=(((r01*x13382))+((r01*x13393))+((r00*x13383))+(((-1.0)*x13388))+((r02*x13390))+x13381+(((-1.0)*r00*x13386*x13389)));
evalcond[7]=((((-1.0)*r22*x13392))+((r20*x13387))+(((-1.0)*r21*x13383*x13389))+(((-1.0)*x13388))+((r20*x13380*x13382))+x13381+((r21*x13386)));
evalcond[8]=(((r00*x13380*x13382))+(((-1.0)*x13384))+((r01*x13386))+((r00*x13387))+(((-1.0)*r01*x13383*x13389))+(((-1.0)*r02*x13392))+(((-1.0)*sj2*x13385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13396 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13396)==0){
continue;
}
IkReal x13395=pow(x13396,-0.5);
CheckValue<IkReal> x13397 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13397.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13397.value));
IkReal gconst25=((-1.0)*r21*x13395);
IkReal gconst26=(r20*x13395);
CheckValue<IkReal> x13398 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13398.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13398.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13401 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13401.valid){
continue;
}
IkReal x13399=((-1.0)*(x13401.value));
IkReal x13400=x13395;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13399;
IkReal gconst24=x13399;
IkReal gconst25=((-1.0)*r21*x13400);
IkReal gconst26=(r20*x13400);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13404 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13404.valid){
continue;
}
IkReal x13402=((-1.0)*(x13404.value));
IkReal x13403=x13395;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13402;
IkReal gconst24=x13402;
IkReal gconst25=((-1.0)*r21*x13403);
IkReal gconst26=(r20*x13403);
CheckValue<IkReal> x13412=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13412.valid){
continue;
}
IkReal x13405=x13412.value;
IkReal x13406=(sj3*x13405);
IkReal x13407=(r11*x13406);
IkReal x13408=(r00*x13406);
IkReal x13409=(r01*x13406);
IkReal x13410=(r10*x13406);
IkReal x13411=(r20*r21*x13406);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x13409))+((r01*x13407*(r21*r21)))+((r00*r20*r21*x13407))+((r10*x13408*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13413=gconst25*gconst25;
IkReal x13414=gconst26*gconst26;
IkReal x13415=(r00*r11);
IkReal x13416=(r01*r10);
IkReal x13417=(r02*sj3);
IkReal x13418=(gconst25*r10);
IkReal x13419=(gconst26*r11);
IkReal x13420=((1.0)*sj3);
IkReal x13421=((1.0)*cj3);
IkReal x13422=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13423 = IKatan2WithCheck(IkReal((((x13417*x13419))+((x13417*x13418)))),IkReal((((gconst25*r01*sj3*x13419))+((sj3*x13413*x13416))+(((-1.0)*gconst26*r00*x13418*x13420))+(((-1.0)*x13414*x13415*x13420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13423.valid){
continue;
}
CheckValue<IkReal> x13424=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x13421))+((x13415*x13422))+(((-1.0)*r01*r11*x13413*x13421))+(((-1.0)*r00*r10*x13414*x13421))+((x13416*x13422)))),-1);
if(!x13424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13423.value)+(((1.5707963267949)*(x13424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13425=IKsin(j4);
IkReal x13426=IKcos(j4);
IkReal x13427=(sj1*sj2);
IkReal x13428=(gconst26*sj3);
IkReal x13429=(gconst25*sj3);
IkReal x13430=(gconst26*r10);
IkReal x13431=(gconst25*r11);
IkReal x13432=(cj3*gconst25);
IkReal x13433=((1.0)*cj2);
IkReal x13434=(cj1*sj2);
IkReal x13435=(gconst26*r00);
IkReal x13436=(gconst26*r20);
IkReal x13437=(cj3*gconst26);
IkReal x13438=(cj1*x13433);
IkReal x13439=((1.0)*x13426);
IkReal x13440=((1.0)*x13425);
IkReal x13441=(cj3*x13425);
IkReal x13442=(gconst25*x13425);
evalcond[0]=((((-1.0)*r22*x13439))+(((-1.0)*x13436*x13440))+((r21*x13442)));
evalcond[1]=((((-1.0)*x13435*x13440))+((r01*x13442))+(((-1.0)*r02*x13439)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13439))+(((-1.0)*x13430*x13440))+((x13425*x13431)));
evalcond[3]=(((cj3*x13426*x13431))+(((-1.0)*cj3*x13430*x13439))+((r11*x13428))+((r12*x13441))+((r10*x13429)));
evalcond[4]=((((-1.0)*r12*sj3*x13440))+((r11*x13437))+((r10*x13426*x13428))+(((-1.0)*r11*x13429*x13439))+((r10*x13432)));
evalcond[5]=(((r22*x13441))+x13434+((cj2*sj1))+((r21*x13426*x13432))+((r21*x13428))+(((-1.0)*cj3*x13436*x13439))+((r20*x13429)));
evalcond[6]=(x13427+((r01*x13426*x13432))+(((-1.0)*cj3*x13435*x13439))+((r02*x13441))+(((-1.0)*x13438))+((r00*x13429))+((r01*x13428)));
evalcond[7]=(x13427+(((-1.0)*r21*x13429*x13439))+(((-1.0)*r22*sj3*x13440))+(((-1.0)*x13438))+((r20*x13426*x13428))+((r21*x13437))+((r20*x13432)));
evalcond[8]=(((r01*x13437))+(((-1.0)*x13434))+(((-1.0)*sj1*x13433))+(((-1.0)*r02*sj3*x13440))+((r00*x13426*x13428))+(((-1.0)*r01*x13429*x13439))+((r00*x13432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13443=gconst26*gconst26;
IkReal x13444=gconst25*gconst25;
IkReal x13445=(r01*r10);
IkReal x13446=(cj3*r11);
IkReal x13447=(gconst25*gconst26);
IkReal x13448=(cj3*r10);
IkReal x13449=(r00*x13443);
IkReal x13450=((1.0)*sj3*x13447);
CheckValue<IkReal> x13451=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r00*r11*x13450))+((r01*r11*sj3*x13444))+(((-1.0)*x13445*x13450))+((r10*sj3*x13449)))),-1);
if(!x13451.valid){
continue;
}
CheckValue<IkReal> x13452 = IKatan2WithCheck(IkReal((((gconst26*r02*x13446))+((gconst25*r02*x13448)))),IkReal((((r01*x13446*x13447))+((cj3*x13444*x13445))+(((-1.0)*r00*x13447*x13448))+(((-1.0)*x13446*x13449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13451.value)))+(x13452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13453=IKsin(j4);
IkReal x13454=IKcos(j4);
IkReal x13455=(sj1*sj2);
IkReal x13456=(gconst26*sj3);
IkReal x13457=(gconst25*sj3);
IkReal x13458=(gconst26*r10);
IkReal x13459=(gconst25*r11);
IkReal x13460=(cj3*gconst25);
IkReal x13461=((1.0)*cj2);
IkReal x13462=(cj1*sj2);
IkReal x13463=(gconst26*r00);
IkReal x13464=(gconst26*r20);
IkReal x13465=(cj3*gconst26);
IkReal x13466=(cj1*x13461);
IkReal x13467=((1.0)*x13454);
IkReal x13468=((1.0)*x13453);
IkReal x13469=(cj3*x13453);
IkReal x13470=(gconst25*x13453);
evalcond[0]=((((-1.0)*r22*x13467))+((r21*x13470))+(((-1.0)*x13464*x13468)));
evalcond[1]=((((-1.0)*x13463*x13468))+((r01*x13470))+(((-1.0)*r02*x13467)));
evalcond[2]=((1.0)+((x13453*x13459))+(((-1.0)*x13458*x13468))+(((-1.0)*r12*x13467)));
evalcond[3]=(((r10*x13457))+((r12*x13469))+((r11*x13456))+((cj3*x13454*x13459))+(((-1.0)*cj3*x13458*x13467)));
evalcond[4]=(((r10*x13454*x13456))+((r10*x13460))+(((-1.0)*r11*x13457*x13467))+((r11*x13465))+(((-1.0)*r12*sj3*x13468)));
evalcond[5]=(x13462+((cj2*sj1))+((r20*x13457))+(((-1.0)*cj3*x13464*x13467))+((r21*x13456))+((r21*x13454*x13460))+((r22*x13469)));
evalcond[6]=(((r01*x13454*x13460))+x13455+(((-1.0)*x13466))+(((-1.0)*cj3*x13463*x13467))+((r02*x13469))+((r01*x13456))+((r00*x13457)));
evalcond[7]=(x13455+((r20*x13460))+((r21*x13465))+(((-1.0)*x13466))+((r20*x13454*x13456))+(((-1.0)*r22*sj3*x13468))+(((-1.0)*r21*x13457*x13467)));
evalcond[8]=((((-1.0)*r02*sj3*x13468))+((r00*x13454*x13456))+(((-1.0)*sj1*x13461))+(((-1.0)*x13462))+(((-1.0)*r01*x13457*x13467))+((r01*x13465))+((r00*x13460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13471=((1.0)*gconst26);
CheckValue<IkReal> x13472 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13472.valid){
continue;
}
CheckValue<IkReal> x13473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13471))+(((-1.0)*gconst25*r00)))),-1);
if(!x13473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13472.value)+(((1.5707963267949)*(x13473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13474=IKsin(j4);
IkReal x13475=IKcos(j4);
IkReal x13476=(sj1*sj2);
IkReal x13477=(gconst26*sj3);
IkReal x13478=(gconst25*sj3);
IkReal x13479=(gconst26*r10);
IkReal x13480=(gconst25*r11);
IkReal x13481=(cj3*gconst25);
IkReal x13482=((1.0)*cj2);
IkReal x13483=(cj1*sj2);
IkReal x13484=(gconst26*r00);
IkReal x13485=(gconst26*r20);
IkReal x13486=(cj3*gconst26);
IkReal x13487=(cj1*x13482);
IkReal x13488=((1.0)*x13475);
IkReal x13489=((1.0)*x13474);
IkReal x13490=(cj3*x13474);
IkReal x13491=(gconst25*x13474);
evalcond[0]=((((-1.0)*x13485*x13489))+(((-1.0)*r22*x13488))+((r21*x13491)));
evalcond[1]=((((-1.0)*r02*x13488))+((r01*x13491))+(((-1.0)*x13484*x13489)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13488))+(((-1.0)*x13479*x13489))+((x13474*x13480)));
evalcond[3]=(((r11*x13477))+((r10*x13478))+((cj3*x13475*x13480))+(((-1.0)*cj3*x13479*x13488))+((r12*x13490)));
evalcond[4]=(((r10*x13475*x13477))+(((-1.0)*r12*sj3*x13489))+(((-1.0)*r11*x13478*x13488))+((r11*x13486))+((r10*x13481)));
evalcond[5]=(x13483+((cj2*sj1))+((r22*x13490))+((r21*x13475*x13481))+((r21*x13477))+(((-1.0)*cj3*x13485*x13488))+((r20*x13478)));
evalcond[6]=(x13476+((r02*x13490))+(((-1.0)*x13487))+((r00*x13478))+((r01*x13477))+((r01*x13475*x13481))+(((-1.0)*cj3*x13484*x13488)));
evalcond[7]=(((r20*x13475*x13477))+x13476+(((-1.0)*x13487))+((r20*x13481))+(((-1.0)*r22*sj3*x13489))+(((-1.0)*r21*x13478*x13488))+((r21*x13486)));
evalcond[8]=((((-1.0)*sj1*x13482))+(((-1.0)*x13483))+((r00*x13475*x13477))+((r00*x13481))+((r01*x13486))+(((-1.0)*r01*x13478*x13488))+(((-1.0)*r02*sj3*x13489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13493 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13493)==0){
continue;
}
IkReal x13492=pow(x13493,-0.5);
CheckValue<IkReal> x13494 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13494.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13494.value))));
IkReal gconst28=((1.0)*r21*x13492);
IkReal gconst29=((-1.0)*r20*x13492);
CheckValue<IkReal> x13495 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13495.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13495.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13498 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13498.valid){
continue;
}
IkReal x13496=((1.0)*(x13498.value));
IkReal x13497=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13496)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13496)));
IkReal gconst28=((1.0)*r21*x13497);
IkReal gconst29=((-1.0)*r20*x13497);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13501 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13501.valid){
continue;
}
IkReal x13499=((1.0)*(x13501.value));
IkReal x13500=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13499)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13499)));
IkReal gconst28=((1.0)*r21*x13500);
IkReal gconst29=((-1.0)*r20*x13500);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13504 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13504.valid){
continue;
}
IkReal x13502=((1.0)*(x13504.value));
IkReal x13503=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13502)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13502)));
IkReal gconst28=((1.0)*r21*x13503);
IkReal gconst29=((-1.0)*r20*x13503);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13507 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13507.valid){
continue;
}
IkReal x13505=((1.0)*(x13507.value));
IkReal x13506=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13505)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13505)));
IkReal gconst28=((1.0)*r21*x13506);
IkReal gconst29=((-1.0)*r20*x13506);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13510 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13510.valid){
continue;
}
IkReal x13508=((1.0)*(x13510.value));
IkReal x13509=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13508)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13508)));
IkReal gconst28=((1.0)*r21*x13509);
IkReal gconst29=((-1.0)*r20*x13509);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13513 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13513.valid){
continue;
}
IkReal x13511=((1.0)*(x13513.value));
IkReal x13512=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13511)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13511)));
IkReal gconst28=((1.0)*r21*x13512);
IkReal gconst29=((-1.0)*r20*x13512);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13514=(gconst29*r10);
IkReal x13515=(gconst28*r11);
CheckValue<IkReal> x13516 = IKatan2WithCheck(IkReal((x13514+(((-1.0)*x13515)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13516.valid){
continue;
}
CheckValue<IkReal> x13517=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13514*x13515))+(x13514*x13514)+(x13515*x13515))),-1);
if(!x13517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13516.value)+(((1.5707963267949)*(x13517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13518=IKsin(j4);
IkReal x13519=IKcos(j4);
IkReal x13520=(gconst28*r11);
IkReal x13521=((1.0)*cj2);
IkReal x13522=((1.0)*x13519);
IkReal x13523=(gconst29*x13519);
IkReal x13524=(gconst28*x13518);
IkReal x13525=((1.0)*x13518);
IkReal x13526=(gconst29*x13525);
evalcond[0]=(((r21*x13524))+(((-1.0)*r22*x13522))+(((-1.0)*r20*x13526)));
evalcond[1]=(((r01*x13524))+(((-1.0)*r00*x13526))+(((-1.0)*r02*x13522)));
evalcond[2]=((((-1.0)*r12*x13525))+(((-1.0)*x13520*x13522))+((r10*x13523)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13522))+((x13518*x13520))+(((-1.0)*r10*x13526)));
evalcond[4]=((((-1.0)*r22*x13525))+((r20*x13523))+((sj1*sj2))+(((-1.0)*cj1*x13521))+(((-1.0)*gconst28*r21*x13522)));
evalcond[5]=((((-1.0)*sj1*x13521))+(((-1.0)*gconst28*r01*x13522))+(((-1.0)*cj1*sj2))+((r00*x13523))+(((-1.0)*r02*x13525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13527=((1.0)*gconst29);
CheckValue<IkReal> x13528=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13527)))),-1);
if(!x13528.valid){
continue;
}
CheckValue<IkReal> x13529 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13527))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13528.value)))+(x13529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13530=IKsin(j4);
IkReal x13531=IKcos(j4);
IkReal x13532=(gconst28*r11);
IkReal x13533=((1.0)*cj2);
IkReal x13534=((1.0)*x13531);
IkReal x13535=(gconst29*x13531);
IkReal x13536=(gconst28*x13530);
IkReal x13537=((1.0)*x13530);
IkReal x13538=(gconst29*x13537);
evalcond[0]=((((-1.0)*r22*x13534))+(((-1.0)*r20*x13538))+((r21*x13536)));
evalcond[1]=((((-1.0)*r02*x13534))+(((-1.0)*r00*x13538))+((r01*x13536)));
evalcond[2]=((((-1.0)*r12*x13537))+(((-1.0)*x13532*x13534))+((r10*x13535)));
evalcond[3]=((1.0)+((x13530*x13532))+(((-1.0)*r12*x13534))+(((-1.0)*r10*x13538)));
evalcond[4]=((((-1.0)*r22*x13537))+((r20*x13535))+(((-1.0)*cj1*x13533))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13534)));
evalcond[5]=((((-1.0)*sj1*x13533))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13534))+(((-1.0)*r02*x13537))+((r00*x13535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13539=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13539.valid){
continue;
}
CheckValue<IkReal> x13540 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13539.value)))+(x13540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13541=IKsin(j4);
IkReal x13542=IKcos(j4);
IkReal x13543=(gconst28*r11);
IkReal x13544=((1.0)*cj2);
IkReal x13545=((1.0)*x13542);
IkReal x13546=(gconst29*x13542);
IkReal x13547=(gconst28*x13541);
IkReal x13548=((1.0)*x13541);
IkReal x13549=(gconst29*x13548);
evalcond[0]=(((r21*x13547))+(((-1.0)*r22*x13545))+(((-1.0)*r20*x13549)));
evalcond[1]=(((r01*x13547))+(((-1.0)*r02*x13545))+(((-1.0)*r00*x13549)));
evalcond[2]=(((r10*x13546))+(((-1.0)*x13543*x13545))+(((-1.0)*r12*x13548)));
evalcond[3]=((1.0)+((x13541*x13543))+(((-1.0)*r10*x13549))+(((-1.0)*r12*x13545)));
evalcond[4]=((((-1.0)*gconst28*r21*x13545))+((sj1*sj2))+((r20*x13546))+(((-1.0)*r22*x13548))+(((-1.0)*cj1*x13544)));
evalcond[5]=((((-1.0)*gconst28*r01*x13545))+((r00*x13546))+(((-1.0)*r02*x13548))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13552 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13552.valid){
continue;
}
IkReal x13550=((1.0)*(x13552.value));
IkReal x13551=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13550)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13550)));
IkReal gconst28=((1.0)*r21*x13551);
IkReal gconst29=((-1.0)*r20*x13551);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13555 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13555.valid){
continue;
}
IkReal x13553=((1.0)*(x13555.value));
IkReal x13554=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13553)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13553)));
IkReal gconst28=((1.0)*r21*x13554);
IkReal gconst29=((-1.0)*r20*x13554);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13558 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13558.valid){
continue;
}
IkReal x13556=((1.0)*(x13558.value));
IkReal x13557=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13556)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13556)));
IkReal gconst28=((1.0)*r21*x13557);
IkReal gconst29=((-1.0)*r20*x13557);
IkReal x13559=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13563=IKPowWithIntegerCheck(x13559,-1);
if(!x13563.valid){
continue;
}
IkReal x13560=x13563.value;
IkReal x13561=((1.0)*x13560);
IkReal x13562=((((-1.0)*x13561*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13560))+(((-1.0)*x13561*(r11*r11)*(r21*r21))));
j4eval[0]=x13562;
j4eval[1]=r12;
j4eval[2]=x13559;
j4eval[3]=IKsign(x13562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13564=(gconst28*r11);
IkReal x13565=(gconst29*r10);
CheckValue<IkReal> x13566 = IKatan2WithCheck(IkReal((x13564+(((-1.0)*x13565)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13566.valid){
continue;
}
CheckValue<IkReal> x13567=IKPowWithIntegerCheck(IKsign(((((2.0)*x13564*x13565))+(((-1.0)*(x13565*x13565)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13564*x13564))))),-1);
if(!x13567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13566.value)+(((1.5707963267949)*(x13567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13568=IKcos(j4);
IkReal x13569=IKsin(j4);
IkReal x13570=(gconst29*r10);
IkReal x13571=(gconst29*r20);
IkReal x13572=(gconst28*r21);
IkReal x13573=((1.0)*cj2);
IkReal x13574=(gconst29*r00);
IkReal x13575=((1.0)*x13568);
IkReal x13576=((1.0)*x13569);
IkReal x13577=(gconst28*x13568);
IkReal x13578=(gconst28*x13569);
evalcond[0]=((((-1.0)*x13570*x13575))+((r11*x13577))+((r12*x13569)));
evalcond[1]=((((-1.0)*r22*x13575))+((x13569*x13572))+(((-1.0)*x13571*x13576)));
evalcond[2]=((((-1.0)*r02*x13575))+(((-1.0)*x13574*x13576))+((r01*x13578)));
evalcond[3]=((1.0)+(((-1.0)*x13570*x13576))+((r11*x13578))+(((-1.0)*r12*x13575)));
evalcond[4]=(((x13568*x13572))+((sj1*sj2))+(((-1.0)*cj1*x13573))+(((-1.0)*x13571*x13575))+((r22*x13569)));
evalcond[5]=((((-1.0)*sj1*x13573))+(((-1.0)*cj1*sj2))+((r02*x13569))+(((-1.0)*x13574*x13575))+((r01*x13577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13579=((1.0)*gconst29);
CheckValue<IkReal> x13580 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13579))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13580.valid){
continue;
}
CheckValue<IkReal> x13581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13579))+(((-1.0)*gconst28*r00)))),-1);
if(!x13581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13580.value)+(((1.5707963267949)*(x13581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13582=IKcos(j4);
IkReal x13583=IKsin(j4);
IkReal x13584=(gconst29*r10);
IkReal x13585=(gconst29*r20);
IkReal x13586=(gconst28*r21);
IkReal x13587=((1.0)*cj2);
IkReal x13588=(gconst29*r00);
IkReal x13589=((1.0)*x13582);
IkReal x13590=((1.0)*x13583);
IkReal x13591=(gconst28*x13582);
IkReal x13592=(gconst28*x13583);
evalcond[0]=(((r11*x13591))+((r12*x13583))+(((-1.0)*x13584*x13589)));
evalcond[1]=(((x13583*x13586))+(((-1.0)*x13585*x13590))+(((-1.0)*r22*x13589)));
evalcond[2]=((((-1.0)*r02*x13589))+((r01*x13592))+(((-1.0)*x13588*x13590)));
evalcond[3]=((1.0)+((r11*x13592))+(((-1.0)*r12*x13589))+(((-1.0)*x13584*x13590)));
evalcond[4]=((((-1.0)*x13585*x13589))+((x13582*x13586))+((sj1*sj2))+(((-1.0)*cj1*x13587))+((r22*x13583)));
evalcond[5]=(((r01*x13591))+(((-1.0)*sj1*x13587))+(((-1.0)*cj1*sj2))+(((-1.0)*x13588*x13589))+((r02*x13583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13593=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13593.valid){
continue;
}
CheckValue<IkReal> x13594 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13593.value)))+(x13594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13595=IKcos(j4);
IkReal x13596=IKsin(j4);
IkReal x13597=(gconst29*r10);
IkReal x13598=(gconst29*r20);
IkReal x13599=(gconst28*r21);
IkReal x13600=((1.0)*cj2);
IkReal x13601=(gconst29*r00);
IkReal x13602=((1.0)*x13595);
IkReal x13603=((1.0)*x13596);
IkReal x13604=(gconst28*x13595);
IkReal x13605=(gconst28*x13596);
evalcond[0]=(((r11*x13604))+(((-1.0)*x13597*x13602))+((r12*x13596)));
evalcond[1]=((((-1.0)*r22*x13602))+(((-1.0)*x13598*x13603))+((x13596*x13599)));
evalcond[2]=((((-1.0)*r02*x13602))+(((-1.0)*x13601*x13603))+((r01*x13605)));
evalcond[3]=((1.0)+((r11*x13605))+(((-1.0)*x13597*x13603))+(((-1.0)*r12*x13602)));
evalcond[4]=(((r22*x13596))+((x13595*x13599))+(((-1.0)*cj1*x13600))+((sj1*sj2))+(((-1.0)*x13598*x13602)));
evalcond[5]=((((-1.0)*sj1*x13600))+(((-1.0)*cj1*sj2))+((r02*x13596))+(((-1.0)*x13601*x13602))+((r01*x13604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13608 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13608.valid){
continue;
}
IkReal x13606=((1.0)*(x13608.value));
IkReal x13607=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13606)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13606)));
IkReal gconst28=((1.0)*r21*x13607);
IkReal gconst29=((-1.0)*r20*x13607);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13611 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13611.valid){
continue;
}
IkReal x13609=((1.0)*(x13611.value));
IkReal x13610=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13609)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13609)));
IkReal gconst28=((1.0)*r21*x13610);
IkReal gconst29=((-1.0)*r20*x13610);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13614 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13614.valid){
continue;
}
IkReal x13612=((1.0)*(x13614.value));
IkReal x13613=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13612)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13612)));
IkReal gconst28=((1.0)*r21*x13613);
IkReal gconst29=((-1.0)*r20*x13613);
IkReal x13615=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13619=IKPowWithIntegerCheck(x13615,-1);
if(!x13619.valid){
continue;
}
IkReal x13616=x13619.value;
IkReal x13617=((1.0)*x13616);
IkReal x13618=((((-2.0)*r10*r11*r20*r21*x13616))+(((-1.0)*x13617*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13617*(r11*r11)*(r21*r21))));
j4eval[0]=x13618;
j4eval[1]=r12;
j4eval[2]=x13615;
j4eval[3]=IKsign(x13618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13620=(gconst28*r11);
IkReal x13621=(gconst29*r10);
CheckValue<IkReal> x13622=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13620*x13620)))+(((-1.0)*(x13621*x13621)))+(((-1.0)*(r12*r12)))+(((2.0)*x13620*x13621)))),-1);
if(!x13622.valid){
continue;
}
CheckValue<IkReal> x13623 = IKatan2WithCheck(IkReal((x13620+(((-1.0)*x13621)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13622.value)))+(x13623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13624=IKcos(j4);
IkReal x13625=IKsin(j4);
IkReal x13626=(gconst29*r10);
IkReal x13627=(gconst29*r20);
IkReal x13628=(gconst28*r21);
IkReal x13629=(gconst29*r00);
IkReal x13630=((1.0)*x13624);
IkReal x13631=((1.0)*x13625);
IkReal x13632=(gconst28*x13624);
IkReal x13633=(gconst28*x13625);
evalcond[0]=(((r11*x13632))+((r12*x13625))+(((-1.0)*x13626*x13630)));
evalcond[1]=((((-1.0)*x13627*x13631))+((x13625*x13628))+(((-1.0)*r22*x13630)));
evalcond[2]=((((-1.0)*r02*x13630))+(((-1.0)*x13629*x13631))+((r01*x13633)));
evalcond[3]=((1.0)+((r11*x13633))+(((-1.0)*r12*x13630))+(((-1.0)*x13626*x13631)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13627*x13630))+((cj1*sj2))+((x13624*x13628))+((r22*x13625)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13629*x13630))+((r02*x13625))+((r01*x13632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13634=((1.0)*gconst29);
CheckValue<IkReal> x13635=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13634))+(((-1.0)*gconst28*r00)))),-1);
if(!x13635.valid){
continue;
}
CheckValue<IkReal> x13636 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13635.value)))+(x13636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13637=IKcos(j4);
IkReal x13638=IKsin(j4);
IkReal x13639=(gconst29*r10);
IkReal x13640=(gconst29*r20);
IkReal x13641=(gconst28*r21);
IkReal x13642=(gconst29*r00);
IkReal x13643=((1.0)*x13637);
IkReal x13644=((1.0)*x13638);
IkReal x13645=(gconst28*x13637);
IkReal x13646=(gconst28*x13638);
evalcond[0]=(((r12*x13638))+((r11*x13645))+(((-1.0)*x13639*x13643)));
evalcond[1]=((((-1.0)*x13640*x13644))+(((-1.0)*r22*x13643))+((x13638*x13641)));
evalcond[2]=(((r01*x13646))+(((-1.0)*r02*x13643))+(((-1.0)*x13642*x13644)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13643))+((r11*x13646))+(((-1.0)*x13639*x13644)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13640*x13643))+((r22*x13638))+((x13637*x13641)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13638))+((r01*x13645))+(((-1.0)*x13642*x13643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13647=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13647.valid){
continue;
}
CheckValue<IkReal> x13648 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13647.value)))+(x13648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13649=IKcos(j4);
IkReal x13650=IKsin(j4);
IkReal x13651=(gconst29*r10);
IkReal x13652=(gconst29*r20);
IkReal x13653=(gconst28*r21);
IkReal x13654=(gconst29*r00);
IkReal x13655=((1.0)*x13649);
IkReal x13656=((1.0)*x13650);
IkReal x13657=(gconst28*x13649);
IkReal x13658=(gconst28*x13650);
evalcond[0]=(((r12*x13650))+(((-1.0)*x13651*x13655))+((r11*x13657)));
evalcond[1]=((((-1.0)*r22*x13655))+((x13650*x13653))+(((-1.0)*x13652*x13656)));
evalcond[2]=(((r01*x13658))+(((-1.0)*r02*x13655))+(((-1.0)*x13654*x13656)));
evalcond[3]=((1.0)+(((-1.0)*x13651*x13656))+(((-1.0)*r12*x13655))+((r11*x13658)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13650))+(((-1.0)*x13652*x13655))+((x13649*x13653)));
evalcond[5]=(((r01*x13657))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13654*x13655))+((r02*x13650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13661 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13661.valid){
continue;
}
IkReal x13659=((1.0)*(x13661.value));
IkReal x13660=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13659)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13659)));
IkReal gconst28=((1.0)*r21*x13660);
IkReal gconst29=((-1.0)*r20*x13660);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13664 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13664.valid){
continue;
}
IkReal x13662=((1.0)*(x13664.value));
IkReal x13663=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13662)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13662)));
IkReal gconst28=((1.0)*r21*x13663);
IkReal gconst29=((-1.0)*r20*x13663);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13667 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13667.valid){
continue;
}
IkReal x13665=((1.0)*(x13667.value));
IkReal x13666=x13492;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13665)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13665)));
IkReal gconst28=((1.0)*r21*x13666);
IkReal gconst29=((-1.0)*r20*x13666);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13668=(gconst29*r10);
IkReal x13669=(gconst28*r11);
CheckValue<IkReal> x13670 = IKatan2WithCheck(IkReal((x13668+(((-1.0)*x13669)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13670.valid){
continue;
}
CheckValue<IkReal> x13671=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13668*x13668)+(x13669*x13669)+(((-2.0)*x13668*x13669)))),-1);
if(!x13671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13670.value)+(((1.5707963267949)*(x13671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13672=IKsin(j4);
IkReal x13673=IKcos(j4);
IkReal x13674=(gconst28*r11);
IkReal x13675=((1.0)*x13673);
IkReal x13676=(gconst29*x13673);
IkReal x13677=(gconst28*x13672);
IkReal x13678=((1.0)*x13672);
IkReal x13679=(gconst29*x13678);
evalcond[0]=((((-1.0)*r20*x13679))+((r21*x13677))+(((-1.0)*r22*x13675)));
evalcond[1]=(((r01*x13677))+(((-1.0)*r00*x13679))+(((-1.0)*r02*x13675)));
evalcond[2]=((((-1.0)*x13674*x13675))+(((-1.0)*r12*x13678))+((r10*x13676)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13675))+((x13672*x13674))+(((-1.0)*r10*x13679)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13675))+((cj1*sj2))+((r20*x13676))+(((-1.0)*r22*x13678)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13676))+(((-1.0)*r02*x13678))+(((-1.0)*gconst28*r01*x13675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13680=((1.0)*gconst29);
CheckValue<IkReal> x13681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13680))+(((-1.0)*gconst28*r00)))),-1);
if(!x13681.valid){
continue;
}
CheckValue<IkReal> x13682 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13680))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13681.value)))+(x13682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13683=IKsin(j4);
IkReal x13684=IKcos(j4);
IkReal x13685=(gconst28*r11);
IkReal x13686=((1.0)*x13684);
IkReal x13687=(gconst29*x13684);
IkReal x13688=(gconst28*x13683);
IkReal x13689=((1.0)*x13683);
IkReal x13690=(gconst29*x13689);
evalcond[0]=((((-1.0)*r20*x13690))+(((-1.0)*r22*x13686))+((r21*x13688)));
evalcond[1]=(((r01*x13688))+(((-1.0)*r00*x13690))+(((-1.0)*r02*x13686)));
evalcond[2]=((((-1.0)*x13685*x13686))+(((-1.0)*r12*x13689))+((r10*x13687)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13686))+((x13683*x13685))+(((-1.0)*r10*x13690)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x13689))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13686))+((r20*x13687)));
evalcond[5]=((((-1.0)*gconst28*r01*x13686))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13687))+(((-1.0)*r02*x13689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13691=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13691.valid){
continue;
}
CheckValue<IkReal> x13692 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13691.value)))+(x13692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13693=IKsin(j4);
IkReal x13694=IKcos(j4);
IkReal x13695=(gconst28*r11);
IkReal x13696=((1.0)*x13694);
IkReal x13697=(gconst29*x13694);
IkReal x13698=(gconst28*x13693);
IkReal x13699=((1.0)*x13693);
IkReal x13700=(gconst29*x13699);
evalcond[0]=((((-1.0)*r20*x13700))+((r21*x13698))+(((-1.0)*r22*x13696)));
evalcond[1]=((((-1.0)*r00*x13700))+((r01*x13698))+(((-1.0)*r02*x13696)));
evalcond[2]=(((r10*x13697))+(((-1.0)*x13695*x13696))+(((-1.0)*r12*x13699)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13700))+((x13693*x13695))+(((-1.0)*r12*x13696)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13696))+((cj1*sj2))+((r20*x13697))+(((-1.0)*r22*x13699)));
evalcond[5]=(((r00*x13697))+(((-1.0)*r02*x13699))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13701=gconst28*gconst28;
IkReal x13702=gconst29*gconst29;
IkReal x13703=(r11*r21);
IkReal x13704=(gconst29*sj3);
IkReal x13705=((1.0)*cj3);
IkReal x13706=(r10*r20);
IkReal x13707=(r10*r21);
IkReal x13708=(r11*r20);
IkReal x13709=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13710 = IKatan2WithCheck(IkReal((((r11*r22*x13704))+((gconst28*r10*r22*sj3)))),IkReal((((sj3*x13701*x13707))+(((-1.0)*gconst28*x13704*x13706))+((gconst28*x13703*x13704))+(((-1.0)*sj3*x13702*x13708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13710.valid){
continue;
}
CheckValue<IkReal> x13711=IKPowWithIntegerCheck(IKsign((((x13707*x13709))+(((-1.0)*x13702*x13705*x13706))+((x13708*x13709))+(((-1.0)*x13701*x13703*x13705))+(((-1.0)*r12*r22*x13705)))),-1);
if(!x13711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13710.value)+(((1.5707963267949)*(x13711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13712=IKsin(j4);
IkReal x13713=IKcos(j4);
IkReal x13714=(sj1*sj2);
IkReal x13715=(gconst29*r20);
IkReal x13716=(gconst28*r20);
IkReal x13717=((1.0)*cj2);
IkReal x13718=(r11*sj3);
IkReal x13719=(cj1*sj2);
IkReal x13720=(gconst29*r01);
IkReal x13721=(gconst29*r10);
IkReal x13722=(cj3*gconst28);
IkReal x13723=(cj3*gconst29);
IkReal x13724=(gconst28*sj3);
IkReal x13725=(gconst29*r00);
IkReal x13726=(cj1*x13717);
IkReal x13727=((1.0)*x13713);
IkReal x13728=((1.0)*x13712);
IkReal x13729=(gconst28*x13712);
IkReal x13730=(cj3*x13712);
IkReal x13731=(sj3*x13713);
evalcond[0]=((((-1.0)*r22*x13727))+((r21*x13729))+(((-1.0)*x13715*x13728)));
evalcond[1]=((((-1.0)*x13725*x13728))+((r01*x13729))+(((-1.0)*r02*x13727)));
evalcond[2]=((1.0)+((r11*x13729))+(((-1.0)*r12*x13727))+(((-1.0)*x13721*x13728)));
evalcond[3]=(((r10*x13724))+((gconst29*x13718))+((r11*x13713*x13722))+((r12*x13730))+(((-1.0)*cj3*x13721*x13727)));
evalcond[4]=((((-1.0)*r12*sj3*x13728))+((r10*x13722))+((x13721*x13731))+((r11*x13723))+(((-1.0)*gconst28*x13718*x13727)));
evalcond[5]=(((cj2*sj1))+((r21*x13713*x13722))+((gconst29*r21*sj3))+((sj3*x13716))+(((-1.0)*cj3*x13715*x13727))+((r22*x13730))+x13719);
evalcond[6]=(((r00*x13724))+x13714+((r01*x13713*x13722))+((r02*x13730))+(((-1.0)*x13726))+((sj3*x13720))+(((-1.0)*r00*x13723*x13727)));
evalcond[7]=(x13714+((r21*x13723))+(((-1.0)*r21*x13724*x13727))+((cj3*x13716))+(((-1.0)*r22*sj3*x13728))+((x13715*x13731))+(((-1.0)*x13726)));
evalcond[8]=((((-1.0)*x13719))+((r00*x13722))+(((-1.0)*sj1*x13717))+(((-1.0)*r01*x13724*x13727))+((x13725*x13731))+(((-1.0)*r02*sj3*x13728))+((cj3*x13720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13732=((1.0)*gconst29);
CheckValue<IkReal> x13733 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13732))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13733.valid){
continue;
}
CheckValue<IkReal> x13734=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13732)))),-1);
if(!x13734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13733.value)+(((1.5707963267949)*(x13734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13735=IKsin(j4);
IkReal x13736=IKcos(j4);
IkReal x13737=(sj1*sj2);
IkReal x13738=(gconst29*r20);
IkReal x13739=(gconst28*r20);
IkReal x13740=((1.0)*cj2);
IkReal x13741=(r11*sj3);
IkReal x13742=(cj1*sj2);
IkReal x13743=(gconst29*r01);
IkReal x13744=(gconst29*r10);
IkReal x13745=(cj3*gconst28);
IkReal x13746=(cj3*gconst29);
IkReal x13747=(gconst28*sj3);
IkReal x13748=(gconst29*r00);
IkReal x13749=(cj1*x13740);
IkReal x13750=((1.0)*x13736);
IkReal x13751=((1.0)*x13735);
IkReal x13752=(gconst28*x13735);
IkReal x13753=(cj3*x13735);
IkReal x13754=(sj3*x13736);
evalcond[0]=(((r21*x13752))+(((-1.0)*r22*x13750))+(((-1.0)*x13738*x13751)));
evalcond[1]=((((-1.0)*x13748*x13751))+((r01*x13752))+(((-1.0)*r02*x13750)));
evalcond[2]=((1.0)+((r11*x13752))+(((-1.0)*x13744*x13751))+(((-1.0)*r12*x13750)));
evalcond[3]=(((gconst29*x13741))+((r12*x13753))+((r10*x13747))+((r11*x13736*x13745))+(((-1.0)*cj3*x13744*x13750)));
evalcond[4]=((((-1.0)*r12*sj3*x13751))+(((-1.0)*gconst28*x13741*x13750))+((r10*x13745))+((x13744*x13754))+((r11*x13746)));
evalcond[5]=(((cj2*sj1))+((r22*x13753))+((gconst29*r21*sj3))+x13742+(((-1.0)*cj3*x13738*x13750))+((sj3*x13739))+((r21*x13736*x13745)));
evalcond[6]=((((-1.0)*r00*x13746*x13750))+x13737+((r02*x13753))+((r01*x13736*x13745))+(((-1.0)*x13749))+((sj3*x13743))+((r00*x13747)));
evalcond[7]=(((x13738*x13754))+(((-1.0)*r21*x13747*x13750))+x13737+(((-1.0)*r22*sj3*x13751))+((r21*x13746))+(((-1.0)*x13749))+((cj3*x13739)));
evalcond[8]=((((-1.0)*x13742))+(((-1.0)*r01*x13747*x13750))+(((-1.0)*sj1*x13740))+(((-1.0)*r02*sj3*x13751))+((cj3*x13743))+((x13748*x13754))+((r00*x13745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13755=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13755.valid){
continue;
}
CheckValue<IkReal> x13756 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13755.value)))+(x13756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13757=IKsin(j4);
IkReal x13758=IKcos(j4);
IkReal x13759=(sj1*sj2);
IkReal x13760=(gconst29*r20);
IkReal x13761=(gconst28*r20);
IkReal x13762=((1.0)*cj2);
IkReal x13763=(r11*sj3);
IkReal x13764=(cj1*sj2);
IkReal x13765=(gconst29*r01);
IkReal x13766=(gconst29*r10);
IkReal x13767=(cj3*gconst28);
IkReal x13768=(cj3*gconst29);
IkReal x13769=(gconst28*sj3);
IkReal x13770=(gconst29*r00);
IkReal x13771=(cj1*x13762);
IkReal x13772=((1.0)*x13758);
IkReal x13773=((1.0)*x13757);
IkReal x13774=(gconst28*x13757);
IkReal x13775=(cj3*x13757);
IkReal x13776=(sj3*x13758);
evalcond[0]=((((-1.0)*r22*x13772))+(((-1.0)*x13760*x13773))+((r21*x13774)));
evalcond[1]=((((-1.0)*x13770*x13773))+((r01*x13774))+(((-1.0)*r02*x13772)));
evalcond[2]=((1.0)+((r11*x13774))+(((-1.0)*x13766*x13773))+(((-1.0)*r12*x13772)));
evalcond[3]=(((gconst29*x13763))+((r11*x13758*x13767))+((r10*x13769))+(((-1.0)*cj3*x13766*x13772))+((r12*x13775)));
evalcond[4]=(((r11*x13768))+((x13766*x13776))+((r10*x13767))+(((-1.0)*gconst28*x13763*x13772))+(((-1.0)*r12*sj3*x13773)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((r21*x13758*x13767))+x13764+((sj3*x13761))+(((-1.0)*cj3*x13760*x13772))+((r22*x13775)));
evalcond[6]=((((-1.0)*r00*x13768*x13772))+(((-1.0)*x13771))+x13759+((r00*x13769))+((sj3*x13765))+((r01*x13758*x13767))+((r02*x13775)));
evalcond[7]=((((-1.0)*x13771))+((x13760*x13776))+x13759+(((-1.0)*r22*sj3*x13773))+((cj3*x13761))+(((-1.0)*r21*x13769*x13772))+((r21*x13768)));
evalcond[8]=((((-1.0)*x13764))+(((-1.0)*sj1*x13762))+((r00*x13767))+((cj3*x13765))+(((-1.0)*r01*x13769*x13772))+(((-1.0)*r02*sj3*x13773))+((x13770*x13776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13777=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13777);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13777);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13778=(r11*sj5);
IkReal x13779=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13779))+x13778);
j4eval[1]=((((-1.0)*cj3*x13779))+((cj3*x13778)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13780=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13780);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13780);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13781=(cj5*r10);
IkReal x13782=(r11*sj5);
j4eval[0]=(x13782+(((-1.0)*x13781)));
j4eval[1]=((((-1.0)*sj3*x13782))+((sj3*x13781)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13783=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13783);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13783);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13784=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13784);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13784);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13785=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13785))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13785)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13786=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13786);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13786);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13787=((1.0)*sj1);
CheckValue<IkReal> x13788=IKPowWithIntegerCheck(r22,-1);
if(!x13788.valid){
continue;
}
CheckValue<IkReal> x13789=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13789.valid){
continue;
}
if( IKabs(((x13788.value)*(((((-1.0)*cj2*x13787))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13789.value)*(((((-1.0)*sj2*x13787))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13788.value)*(((((-1.0)*cj2*x13787))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13789.value)*(((((-1.0)*sj2*x13787))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13788.value)*(((((-1.0)*cj2*x13787))+(((-1.0)*cj1*sj2))))), ((x13789.value)*(((((-1.0)*sj2*x13787))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13790=IKsin(j4);
IkReal x13791=IKcos(j4);
IkReal x13792=((1.0)*cj5);
IkReal x13793=(sj5*x13791);
IkReal x13794=(sj5*x13790);
evalcond[0]=((-1.0)*r22*x13791);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13790)));
evalcond[2]=(((r01*x13794))+(((-1.0)*r00*x13790*x13792)));
evalcond[3]=((((-1.0)*r10*x13791*x13792))+((r11*x13793)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13790*x13792))+((r11*x13794)));
evalcond[5]=(((r01*x13793))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13791*x13792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13795=((1.0)*cj5);
CheckValue<IkReal> x13796=IKPowWithIntegerCheck(((((-1.0)*r10*x13795))+((r11*sj5))),-1);
if(!x13796.valid){
continue;
}
CheckValue<IkReal> x13797=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13795))),-1);
if(!x13797.valid){
continue;
}
if( IKabs(((-1.0)*(x13796.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13797.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13796.value)))+IKsqr(((x13797.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13796.value)), ((x13797.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13798=IKsin(j4);
IkReal x13799=IKcos(j4);
IkReal x13800=((1.0)*cj5);
IkReal x13801=(sj5*x13799);
IkReal x13802=(sj5*x13798);
evalcond[0]=((-1.0)*r22*x13799);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13798)));
evalcond[2]=(((r01*x13802))+(((-1.0)*r00*x13798*x13800)));
evalcond[3]=((((-1.0)*r10*x13799*x13800))+((r11*x13801)));
evalcond[4]=((1.0)+((r11*x13802))+(((-1.0)*r10*x13798*x13800)));
evalcond[5]=(((r01*x13801))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13799*x13800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13803=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13803);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13803);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13804=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13804);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13804);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13805=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13805.valid){
continue;
}
CheckValue<IkReal> x13806=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13806.valid){
continue;
}
if( IKabs(((-1.0)*(x13805.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13806.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13805.value)))+IKsqr(((x13806.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13805.value)), ((x13806.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13807=IKsin(j4);
IkReal x13808=IKcos(j4);
IkReal x13809=(cj5*x13808);
IkReal x13810=(sj5*x13807);
IkReal x13811=((1.0)*cj5*x13807);
IkReal x13812=((1.0)*sj5*x13808);
evalcond[0]=((-1.0)*r22*x13808);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13807)));
evalcond[2]=(((r01*x13810))+(((-1.0)*r00*x13811)));
evalcond[3]=((((-1.0)*r11*x13812))+((r10*x13809)));
evalcond[4]=((1.0)+((r11*x13810))+(((-1.0)*r10*x13811)));
evalcond[5]=(((r00*x13809))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13813=IKPowWithIntegerCheck(r22,-1);
if(!x13813.valid){
continue;
}
CheckValue<IkReal> x13814=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13814.valid){
continue;
}
if( IKabs(((x13813.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13814.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13813.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13814.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13813.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13814.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13815=IKsin(j4);
IkReal x13816=IKcos(j4);
IkReal x13817=(cj5*x13816);
IkReal x13818=(sj5*x13815);
IkReal x13819=((1.0)*cj5*x13815);
IkReal x13820=((1.0)*sj5*x13816);
evalcond[0]=((-1.0)*r22*x13816);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13815)));
evalcond[2]=(((r01*x13818))+(((-1.0)*r00*x13819)));
evalcond[3]=(((r10*x13817))+(((-1.0)*r11*x13820)));
evalcond[4]=((1.0)+((r11*x13818))+(((-1.0)*r10*x13819)));
evalcond[5]=(((r00*x13817))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13821=((1.0)*r10);
CheckValue<IkReal> x13822=IKPowWithIntegerCheck(cj3,-1);
if(!x13822.valid){
continue;
}
CheckValue<IkReal> x13823=IKPowWithIntegerCheck(r22,-1);
if(!x13823.valid){
continue;
}
CheckValue<IkReal> x13824=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13821))+((cj3*r11*sj5))),-1);
if(!x13824.valid){
continue;
}
if( IKabs(((x13822.value)*(x13823.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13824.value)*(((((-1.0)*sj3*sj5*x13821))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13822.value)*(x13823.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13824.value)*(((((-1.0)*sj3*sj5*x13821))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13822.value)*(x13823.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13824.value)*(((((-1.0)*sj3*sj5*x13821))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13825=IKsin(j4);
IkReal x13826=IKcos(j4);
IkReal x13827=(sj1*sj2);
IkReal x13828=(r11*sj5);
IkReal x13829=(r00*sj3);
IkReal x13830=(cj5*r01);
IkReal x13831=((1.0)*cj1);
IkReal x13832=(cj3*sj5);
IkReal x13833=(cj5*r11);
IkReal x13834=(r10*sj3);
IkReal x13835=(cj2*sj1);
IkReal x13836=((1.0)*cj5);
IkReal x13837=((1.0)*sj3);
IkReal x13838=(r01*sj5);
IkReal x13839=(cj2*x13831);
IkReal x13840=(cj3*x13826);
IkReal x13841=(r22*x13825);
IkReal x13842=(cj5*x13826);
IkReal x13843=(x13825*x13836);
evalcond[0]=((-1.0)*r22*x13826);
evalcond[1]=(x13835+((cj1*sj2))+((cj3*x13841)));
evalcond[2]=(((x13825*x13838))+(((-1.0)*r00*x13843)));
evalcond[3]=((1.0)+((x13825*x13828))+(((-1.0)*r10*x13843)));
evalcond[4]=((((-1.0)*x13839))+(((-1.0)*x13837*x13841))+x13827);
evalcond[5]=(((sj5*x13834))+((sj3*x13833))+(((-1.0)*r10*x13836*x13840))+((x13828*x13840)));
evalcond[6]=(((x13834*x13842))+((r10*x13832))+((cj3*x13833))+(((-1.0)*x13826*x13828*x13837)));
evalcond[7]=(((r01*x13826*x13832))+(((-1.0)*x13839))+x13827+(((-1.0)*r00*x13836*x13840))+((sj3*x13830))+((sj5*x13829)));
evalcond[8]=((((-1.0)*sj2*x13831))+((x13829*x13842))+(((-1.0)*x13826*x13837*x13838))+(((-1.0)*x13835))+((r00*x13832))+((cj3*x13830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13844=(cj5*r10);
IkReal x13845=((1.0)*r11);
CheckValue<IkReal> x13846=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13844))),-1);
if(!x13846.valid){
continue;
}
CheckValue<IkReal> x13847=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13845))+((sj3*x13844))),-1);
if(!x13847.valid){
continue;
}
if( IKabs(((-1.0)*(x13846.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13847.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13845)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13846.value)))+IKsqr(((x13847.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13845))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13846.value)), ((x13847.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13845))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13848=IKsin(j4);
IkReal x13849=IKcos(j4);
IkReal x13850=(sj1*sj2);
IkReal x13851=(r11*sj5);
IkReal x13852=(r00*sj3);
IkReal x13853=(cj5*r01);
IkReal x13854=((1.0)*cj1);
IkReal x13855=(cj3*sj5);
IkReal x13856=(cj5*r11);
IkReal x13857=(r10*sj3);
IkReal x13858=(cj2*sj1);
IkReal x13859=((1.0)*cj5);
IkReal x13860=((1.0)*sj3);
IkReal x13861=(r01*sj5);
IkReal x13862=(cj2*x13854);
IkReal x13863=(cj3*x13849);
IkReal x13864=(r22*x13848);
IkReal x13865=(cj5*x13849);
IkReal x13866=(x13848*x13859);
evalcond[0]=((-1.0)*r22*x13849);
evalcond[1]=(x13858+((cj1*sj2))+((cj3*x13864)));
evalcond[2]=((((-1.0)*r00*x13866))+((x13848*x13861)));
evalcond[3]=((1.0)+((x13848*x13851))+(((-1.0)*r10*x13866)));
evalcond[4]=(x13850+(((-1.0)*x13860*x13864))+(((-1.0)*x13862)));
evalcond[5]=(((sj3*x13856))+(((-1.0)*r10*x13859*x13863))+((x13851*x13863))+((sj5*x13857)));
evalcond[6]=((((-1.0)*x13849*x13851*x13860))+((x13857*x13865))+((cj3*x13856))+((r10*x13855)));
evalcond[7]=(x13850+((sj3*x13853))+((sj5*x13852))+((r01*x13849*x13855))+(((-1.0)*r00*x13859*x13863))+(((-1.0)*x13862)));
evalcond[8]=((((-1.0)*x13858))+((r00*x13855))+(((-1.0)*sj2*x13854))+((x13852*x13865))+(((-1.0)*x13849*x13860*x13861))+((cj3*x13853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13867=((1.0)*sj3);
IkReal x13868=(r11*sj5);
IkReal x13869=((1.0)*cj5*r10);
CheckValue<IkReal> x13870=IKPowWithIntegerCheck((x13868+(((-1.0)*x13869))),-1);
if(!x13870.valid){
continue;
}
CheckValue<IkReal> x13871=IKPowWithIntegerCheck(((((-1.0)*cj3*x13869))+((cj3*x13868))),-1);
if(!x13871.valid){
continue;
}
if( IKabs(((-1.0)*(x13870.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13871.value)*(((((-1.0)*r10*sj5*x13867))+(((-1.0)*cj5*r11*x13867)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13870.value)))+IKsqr(((x13871.value)*(((((-1.0)*r10*sj5*x13867))+(((-1.0)*cj5*r11*x13867))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13870.value)), ((x13871.value)*(((((-1.0)*r10*sj5*x13867))+(((-1.0)*cj5*r11*x13867))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13872=IKsin(j4);
IkReal x13873=IKcos(j4);
IkReal x13874=(sj1*sj2);
IkReal x13875=(r11*sj5);
IkReal x13876=(r00*sj3);
IkReal x13877=(cj5*r01);
IkReal x13878=((1.0)*cj1);
IkReal x13879=(cj3*sj5);
IkReal x13880=(cj5*r11);
IkReal x13881=(r10*sj3);
IkReal x13882=(cj2*sj1);
IkReal x13883=((1.0)*cj5);
IkReal x13884=((1.0)*sj3);
IkReal x13885=(r01*sj5);
IkReal x13886=(cj2*x13878);
IkReal x13887=(cj3*x13873);
IkReal x13888=(r22*x13872);
IkReal x13889=(cj5*x13873);
IkReal x13890=(x13872*x13883);
evalcond[0]=((-1.0)*r22*x13873);
evalcond[1]=(((cj3*x13888))+x13882+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13890))+((x13872*x13885)));
evalcond[3]=((1.0)+((x13872*x13875))+(((-1.0)*r10*x13890)));
evalcond[4]=(x13874+(((-1.0)*x13884*x13888))+(((-1.0)*x13886)));
evalcond[5]=(((sj5*x13881))+((sj3*x13880))+(((-1.0)*r10*x13883*x13887))+((x13875*x13887)));
evalcond[6]=(((x13881*x13889))+((cj3*x13880))+(((-1.0)*x13873*x13875*x13884))+((r10*x13879)));
evalcond[7]=(((sj3*x13877))+(((-1.0)*r00*x13883*x13887))+((sj5*x13876))+x13874+((r01*x13873*x13879))+(((-1.0)*x13886)));
evalcond[8]=((((-1.0)*x13873*x13884*x13885))+((cj3*x13877))+(((-1.0)*sj2*x13878))+((r00*x13879))+(((-1.0)*x13882))+((x13876*x13889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13891=cj5*cj5;
IkReal x13892=((1.0)*cj3);
IkReal x13893=(r10*r21);
IkReal x13894=(cj5*sj5);
IkReal x13895=(r11*r21);
IkReal x13896=(r11*r20);
IkReal x13897=(r22*sj3);
IkReal x13898=(r10*r20);
IkReal x13899=((1.0)*sj3*x13891);
CheckValue<IkReal> x13900 = IKatan2WithCheck(IkReal((((r10*sj5*x13897))+((cj5*r11*x13897)))),IkReal((((sj3*x13894*x13895))+((sj3*x13893))+(((-1.0)*x13893*x13899))+(((-1.0)*x13896*x13899))+(((-1.0)*sj3*x13894*x13898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13900.valid){
continue;
}
CheckValue<IkReal> x13901=IKPowWithIntegerCheck(IKsign((((cj3*x13894*x13896))+(((-1.0)*x13892*x13895))+((cj3*x13893*x13894))+(((-1.0)*r12*r22*x13892))+(((-1.0)*x13891*x13892*x13898))+((cj3*x13891*x13895)))),-1);
if(!x13901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13900.value)+(((1.5707963267949)*(x13901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13902=IKsin(j4);
IkReal x13903=IKcos(j4);
IkReal x13904=(sj1*sj2);
IkReal x13905=(cj5*sj3);
IkReal x13906=(cj5*r10);
IkReal x13907=(r00*sj5);
IkReal x13908=(r11*sj5);
IkReal x13909=(cj3*cj5);
IkReal x13910=((1.0)*cj1);
IkReal x13911=(cj3*sj5);
IkReal x13912=(r21*sj5);
IkReal x13913=(cj2*sj1);
IkReal x13914=(sj3*sj5);
IkReal x13915=(r01*sj5);
IkReal x13916=(cj2*x13910);
IkReal x13917=((1.0)*x13903);
IkReal x13918=((1.0)*x13902);
IkReal x13919=(cj3*x13902);
IkReal x13920=(cj3*x13903);
evalcond[0]=(((x13902*x13912))+(((-1.0)*r22*x13917))+(((-1.0)*cj5*r20*x13918)));
evalcond[1]=((((-1.0)*cj5*r00*x13918))+((x13902*x13915))+(((-1.0)*r02*x13917)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13917))+((x13902*x13908))+(((-1.0)*x13906*x13918)));
evalcond[3]=(((r10*x13914))+(((-1.0)*cj3*x13906*x13917))+((r12*x13919))+((r11*x13905))+((x13908*x13920)));
evalcond[4]=((((-1.0)*sj3*x13908*x13917))+((r10*x13911))+(((-1.0)*r12*sj3*x13918))+((r10*x13903*x13905))+((r11*x13909)));
evalcond[5]=(((r22*x13919))+((r21*x13903*x13911))+((cj1*sj2))+x13913+(((-1.0)*r20*x13909*x13917))+((r20*x13914))+((r21*x13905)));
evalcond[6]=(((r02*x13919))+x13904+((r01*x13905))+((sj3*x13907))+((r01*x13903*x13911))+(((-1.0)*x13916))+(((-1.0)*r00*x13909*x13917)));
evalcond[7]=((((-1.0)*r22*sj3*x13918))+x13904+(((-1.0)*sj3*x13912*x13917))+((r20*x13911))+((r21*x13909))+(((-1.0)*x13916))+((r20*x13903*x13905)));
evalcond[8]=((((-1.0)*r02*sj3*x13918))+(((-1.0)*x13913))+(((-1.0)*sj2*x13910))+((r01*x13909))+((cj3*x13907))+(((-1.0)*r01*x13914*x13917))+((r00*x13903*x13905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13921=((1.0)*cj5);
CheckValue<IkReal> x13922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13921)))),-1);
if(!x13922.valid){
continue;
}
CheckValue<IkReal> x13923 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13922.value)))+(x13923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13924=IKsin(j4);
IkReal x13925=IKcos(j4);
IkReal x13926=(sj1*sj2);
IkReal x13927=(cj5*sj3);
IkReal x13928=(cj5*r10);
IkReal x13929=(r00*sj5);
IkReal x13930=(r11*sj5);
IkReal x13931=(cj3*cj5);
IkReal x13932=((1.0)*cj1);
IkReal x13933=(cj3*sj5);
IkReal x13934=(r21*sj5);
IkReal x13935=(cj2*sj1);
IkReal x13936=(sj3*sj5);
IkReal x13937=(r01*sj5);
IkReal x13938=(cj2*x13932);
IkReal x13939=((1.0)*x13925);
IkReal x13940=((1.0)*x13924);
IkReal x13941=(cj3*x13924);
IkReal x13942=(cj3*x13925);
evalcond[0]=((((-1.0)*cj5*r20*x13940))+((x13924*x13934))+(((-1.0)*r22*x13939)));
evalcond[1]=((((-1.0)*cj5*r00*x13940))+((x13924*x13937))+(((-1.0)*r02*x13939)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13939))+((x13924*x13930))+(((-1.0)*x13928*x13940)));
evalcond[3]=(((r10*x13936))+((r12*x13941))+((r11*x13927))+((x13930*x13942))+(((-1.0)*cj3*x13928*x13939)));
evalcond[4]=(((r11*x13931))+(((-1.0)*sj3*x13930*x13939))+(((-1.0)*r12*sj3*x13940))+((r10*x13933))+((r10*x13925*x13927)));
evalcond[5]=(((r20*x13936))+((r21*x13927))+(((-1.0)*r20*x13931*x13939))+((cj1*sj2))+x13935+((r21*x13925*x13933))+((r22*x13941)));
evalcond[6]=(((sj3*x13929))+x13926+(((-1.0)*x13938))+(((-1.0)*r00*x13931*x13939))+((r01*x13927))+((r01*x13925*x13933))+((r02*x13941)));
evalcond[7]=(((r20*x13933))+((r21*x13931))+x13926+(((-1.0)*x13938))+(((-1.0)*sj3*x13934*x13939))+(((-1.0)*r22*sj3*x13940))+((r20*x13925*x13927)));
evalcond[8]=((((-1.0)*sj2*x13932))+((r01*x13931))+(((-1.0)*r01*x13936*x13939))+((r00*x13925*x13927))+(((-1.0)*r02*sj3*x13940))+(((-1.0)*x13935))+((cj3*x13929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13943=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13943.valid){
continue;
}
CheckValue<IkReal> x13944 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13943.value)))+(x13944.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13945=IKsin(j4);
IkReal x13946=IKcos(j4);
IkReal x13947=(sj1*sj2);
IkReal x13948=(cj5*sj3);
IkReal x13949=(cj5*r10);
IkReal x13950=(r00*sj5);
IkReal x13951=(r11*sj5);
IkReal x13952=(cj3*cj5);
IkReal x13953=((1.0)*cj1);
IkReal x13954=(cj3*sj5);
IkReal x13955=(r21*sj5);
IkReal x13956=(cj2*sj1);
IkReal x13957=(sj3*sj5);
IkReal x13958=(r01*sj5);
IkReal x13959=(cj2*x13953);
IkReal x13960=((1.0)*x13946);
IkReal x13961=((1.0)*x13945);
IkReal x13962=(cj3*x13945);
IkReal x13963=(cj3*x13946);
evalcond[0]=((((-1.0)*r22*x13960))+(((-1.0)*cj5*r20*x13961))+((x13945*x13955)));
evalcond[1]=((((-1.0)*r02*x13960))+(((-1.0)*cj5*r00*x13961))+((x13945*x13958)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13960))+(((-1.0)*x13949*x13961))+((x13945*x13951)));
evalcond[3]=(((x13951*x13963))+((r12*x13962))+(((-1.0)*cj3*x13949*x13960))+((r10*x13957))+((r11*x13948)));
evalcond[4]=((((-1.0)*sj3*x13951*x13960))+((r11*x13952))+(((-1.0)*r12*sj3*x13961))+((r10*x13946*x13948))+((r10*x13954)));
evalcond[5]=(((cj1*sj2))+x13956+((r21*x13946*x13954))+(((-1.0)*r20*x13952*x13960))+((r22*x13962))+((r20*x13957))+((r21*x13948)));
evalcond[6]=(((r02*x13962))+(((-1.0)*x13959))+x13947+(((-1.0)*r00*x13952*x13960))+((r01*x13948))+((r01*x13946*x13954))+((sj3*x13950)));
evalcond[7]=((((-1.0)*r22*sj3*x13961))+(((-1.0)*x13959))+x13947+((r21*x13952))+((r20*x13946*x13948))+(((-1.0)*sj3*x13955*x13960))+((r20*x13954)));
evalcond[8]=((((-1.0)*r01*x13957*x13960))+((cj3*x13950))+((r01*x13952))+((r00*x13946*x13948))+(((-1.0)*r02*sj3*x13961))+(((-1.0)*sj2*x13953))+(((-1.0)*x13956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13964=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13964;
j4eval[1]=IKsign(x13964);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13965=((1.0)*cj5);
IkReal x13966=((((-1.0)*r21*x13965))+(((-1.0)*r20*sj5)));
j4eval[0]=x13966;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x13965)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13967=cj5*cj5;
IkReal x13968=(cj3*r21);
IkReal x13969=(cj5*sj5);
IkReal x13970=((1.0)*cj3);
IkReal x13971=(((r10*x13968*x13969))+(((-1.0)*r12*r22*x13970))+((r11*x13967*x13968))+((cj3*r11*r20*x13969))+(((-1.0)*r11*x13968))+(((-1.0)*r10*r20*x13967*x13970)));
j4eval[0]=x13971;
j4eval[1]=IKsign(x13971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13972=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13972;
j4eval[1]=IKsign(x13972);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13973=((1.0)*cj5);
IkReal x13974=((((-1.0)*r21*x13973))+(((-1.0)*r20*sj5)));
j4eval[0]=x13974;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13973))))));
j4eval[2]=IKsign(x13974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13975=cj5*cj5;
IkReal x13976=r11*r11;
IkReal x13977=(cj5*r10);
IkReal x13978=(r11*sj5);
IkReal x13979=((((-1.0)*x13975*(r10*r10)))+(((2.0)*x13977*x13978))+(((-1.0)*x13976))+(((-1.0)*(r12*r12)))+((x13975*x13976)));
j4eval[0]=x13979;
j4eval[1]=((IKabs(r12))+(IKabs((x13977+(((-1.0)*x13978))))));
j4eval[2]=IKsign(x13979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13980=cj5*cj5;
IkReal x13981=r11*r11;
IkReal x13982=(cj5*r10);
IkReal x13983=(r11*sj5);
CheckValue<IkReal> x13984 = IKatan2WithCheck(IkReal((x13982+(((-1.0)*x13983)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13984.valid){
continue;
}
CheckValue<IkReal> x13985=IKPowWithIntegerCheck(IKsign((((x13980*x13981))+(((-1.0)*(r12*r12)))+(((2.0)*x13982*x13983))+(((-1.0)*x13981))+(((-1.0)*x13980*(r10*r10))))),-1);
if(!x13985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13984.value)+(((1.5707963267949)*(x13985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13986=IKsin(j4);
IkReal x13987=IKcos(j4);
IkReal x13988=(cj5*r10);
IkReal x13989=(r01*sj5);
IkReal x13990=(cj5*r00);
IkReal x13991=(cj5*r20);
IkReal x13992=((1.0)*x13987);
IkReal x13993=((1.0)*x13986);
IkReal x13994=(sj5*x13986);
evalcond[0]=(((r21*x13994))+(((-1.0)*x13991*x13993))+(((-1.0)*r22*x13992)));
evalcond[1]=((((-1.0)*r02*x13992))+(((-1.0)*x13990*x13993))+((x13986*x13989)));
evalcond[2]=((((-1.0)*r11*sj5*x13992))+(((-1.0)*r12*x13993))+((x13987*x13988)));
evalcond[3]=((-1.0)+(((-1.0)*x13988*x13993))+((r11*x13994))+(((-1.0)*r12*x13992)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13993))+((cj1*sj2))+(((-1.0)*x13989*x13992))+((x13987*x13990)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13993))+(((-1.0)*r21*sj5*x13992))+((x13987*x13991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13995=((1.0)*cj5);
CheckValue<IkReal> x13996=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13995))+(((-1.0)*r20*sj5)))),-1);
if(!x13996.valid){
continue;
}
CheckValue<IkReal> x13997 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13996.value)))+(x13997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13998=IKsin(j4);
IkReal x13999=IKcos(j4);
IkReal x14000=(cj5*r10);
IkReal x14001=(r01*sj5);
IkReal x14002=(cj5*r00);
IkReal x14003=(cj5*r20);
IkReal x14004=((1.0)*x13999);
IkReal x14005=((1.0)*x13998);
IkReal x14006=(sj5*x13998);
evalcond[0]=(((r21*x14006))+(((-1.0)*x14003*x14005))+(((-1.0)*r22*x14004)));
evalcond[1]=((((-1.0)*r02*x14004))+((x13998*x14001))+(((-1.0)*x14002*x14005)));
evalcond[2]=((((-1.0)*r11*sj5*x14004))+(((-1.0)*r12*x14005))+((x13999*x14000)));
evalcond[3]=((-1.0)+(((-1.0)*x14000*x14005))+((r11*x14006))+(((-1.0)*r12*x14004)));
evalcond[4]=((((-1.0)*r02*x14005))+((cj2*sj1))+((cj1*sj2))+((x13999*x14002))+(((-1.0)*x14001*x14004)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14004))+((x13999*x14003))+(((-1.0)*r22*x14005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14007 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14007.valid){
continue;
}
CheckValue<IkReal> x14008=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14007.value)+(((1.5707963267949)*(x14008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14009=IKsin(j4);
IkReal x14010=IKcos(j4);
IkReal x14011=(cj5*r10);
IkReal x14012=(r01*sj5);
IkReal x14013=(cj5*r00);
IkReal x14014=(cj5*r20);
IkReal x14015=((1.0)*x14010);
IkReal x14016=((1.0)*x14009);
IkReal x14017=(sj5*x14009);
evalcond[0]=((((-1.0)*x14014*x14016))+((r21*x14017))+(((-1.0)*r22*x14015)));
evalcond[1]=((((-1.0)*r02*x14015))+((x14009*x14012))+(((-1.0)*x14013*x14016)));
evalcond[2]=((((-1.0)*r11*sj5*x14015))+(((-1.0)*r12*x14016))+((x14010*x14011)));
evalcond[3]=((-1.0)+((r11*x14017))+(((-1.0)*r12*x14015))+(((-1.0)*x14011*x14016)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14012*x14015))+(((-1.0)*r02*x14016))+((cj1*sj2))+((x14010*x14013)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14010*x14014))+(((-1.0)*r21*sj5*x14015))+(((-1.0)*r22*x14016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14018=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14018;
j4eval[1]=IKsign(x14018);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14019=((1.0)*cj5);
IkReal x14020=((((-1.0)*r21*x14019))+(((-1.0)*r20*sj5)));
j4eval[0]=x14020;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x14019)))))+(IKabs(r02)));
j4eval[2]=IKsign(x14020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14021=cj5*cj5;
IkReal x14022=r11*r11;
IkReal x14023=(r11*sj5);
IkReal x14024=(cj5*r10);
IkReal x14025=((r12*r12)+((x14021*(r10*r10)))+(((-2.0)*x14023*x14024))+(((-1.0)*x14021*x14022))+x14022);
j4eval[0]=x14025;
j4eval[1]=IKsign(x14025);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14024))+x14023))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14026=cj5*cj5;
IkReal x14027=r11*r11;
IkReal x14028=(cj5*r10);
IkReal x14029=(r11*sj5);
CheckValue<IkReal> x14030 = IKatan2WithCheck(IkReal(((((-1.0)*x14028))+x14029)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14030.valid){
continue;
}
CheckValue<IkReal> x14031=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14028*x14029))+(r12*r12)+(((-1.0)*x14026*x14027))+((x14026*(r10*r10)))+x14027)),-1);
if(!x14031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14030.value)+(((1.5707963267949)*(x14031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14032=IKcos(j4);
IkReal x14033=IKsin(j4);
IkReal x14034=(cj5*r00);
IkReal x14035=(cj5*r10);
IkReal x14036=(r21*sj5);
IkReal x14037=(cj5*r20);
IkReal x14038=((1.0)*x14032);
IkReal x14039=((1.0)*x14033);
IkReal x14040=(sj5*x14033);
IkReal x14041=(sj5*x14032);
evalcond[0]=(((r11*x14041))+(((-1.0)*x14035*x14038))+((r12*x14033)));
evalcond[1]=((((-1.0)*x14037*x14039))+((x14033*x14036))+(((-1.0)*r22*x14038)));
evalcond[2]=(((r01*x14040))+(((-1.0)*x14034*x14039))+(((-1.0)*r02*x14038)));
evalcond[3]=((-1.0)+((r11*x14040))+(((-1.0)*x14035*x14039))+(((-1.0)*r12*x14038)));
evalcond[4]=(((cj2*sj1))+((r01*x14041))+((cj1*sj2))+(((-1.0)*x14034*x14038))+((r02*x14033)));
evalcond[5]=((((-1.0)*x14037*x14038))+((r22*x14033))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14032*x14036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14042=((1.0)*cj5);
CheckValue<IkReal> x14043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14042))+(((-1.0)*r20*sj5)))),-1);
if(!x14043.valid){
continue;
}
CheckValue<IkReal> x14044 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14043.value)))+(x14044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14045=IKcos(j4);
IkReal x14046=IKsin(j4);
IkReal x14047=(cj5*r00);
IkReal x14048=(cj5*r10);
IkReal x14049=(r21*sj5);
IkReal x14050=(cj5*r20);
IkReal x14051=((1.0)*x14045);
IkReal x14052=((1.0)*x14046);
IkReal x14053=(sj5*x14046);
IkReal x14054=(sj5*x14045);
evalcond[0]=(((r11*x14054))+(((-1.0)*x14048*x14051))+((r12*x14046)));
evalcond[1]=((((-1.0)*x14050*x14052))+(((-1.0)*r22*x14051))+((x14046*x14049)));
evalcond[2]=((((-1.0)*r02*x14051))+(((-1.0)*x14047*x14052))+((r01*x14053)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14051))+((r11*x14053))+(((-1.0)*x14048*x14052)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14047*x14051))+((r02*x14046))+((r01*x14054)));
evalcond[5]=(((r22*x14046))+(((-1.0)*x14050*x14051))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14045*x14049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14055 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14055.valid){
continue;
}
CheckValue<IkReal> x14056=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14055.value)+(((1.5707963267949)*(x14056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14057=IKcos(j4);
IkReal x14058=IKsin(j4);
IkReal x14059=(cj5*r00);
IkReal x14060=(cj5*r10);
IkReal x14061=(r21*sj5);
IkReal x14062=(cj5*r20);
IkReal x14063=((1.0)*x14057);
IkReal x14064=((1.0)*x14058);
IkReal x14065=(sj5*x14058);
IkReal x14066=(sj5*x14057);
evalcond[0]=(((r12*x14058))+((r11*x14066))+(((-1.0)*x14060*x14063)));
evalcond[1]=((((-1.0)*r22*x14063))+((x14058*x14061))+(((-1.0)*x14062*x14064)));
evalcond[2]=((((-1.0)*x14059*x14064))+((r01*x14065))+(((-1.0)*r02*x14063)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14063))+((r11*x14065))+(((-1.0)*x14060*x14064)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14059*x14063))+((cj1*sj2))+((r02*x14058))+((r01*x14066)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x14058))+(((-1.0)*x14062*x14063))+((x14057*x14061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14068 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14068)==0){
continue;
}
IkReal x14067=pow(x14068,-0.5);
CheckValue<IkReal> x14069 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14069.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14069.value));
IkReal gconst37=((-1.0)*r01*x14067);
IkReal gconst38=(r00*x14067);
CheckValue<IkReal> x14070 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14070.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14070.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14073 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14073.valid){
continue;
}
IkReal x14071=((-1.0)*(x14073.value));
IkReal x14072=x14067;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14071;
IkReal gconst36=x14071;
IkReal gconst37=((-1.0)*r01*x14072);
IkReal gconst38=(r00*x14072);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14076 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14076.valid){
continue;
}
IkReal x14074=((-1.0)*(x14076.value));
IkReal x14075=x14067;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14074;
IkReal gconst36=x14074;
IkReal gconst37=((-1.0)*r01*x14075);
IkReal gconst38=(r00*x14075);
CheckValue<IkReal> x14084=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14084.valid){
continue;
}
IkReal x14077=x14084.value;
IkReal x14078=(sj3*x14077);
IkReal x14079=(r11*x14078);
IkReal x14080=(r21*x14078);
IkReal x14081=(r20*x14078);
IkReal x14082=(r10*x14078);
IkReal x14083=(r00*r01*x14078);
j4eval[0]=IKsign((((r00*r01*r10*x14080))+((r10*x14081*(r00*r00)))+((r21*x14079*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r20*x14079))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14085=gconst38*gconst38;
IkReal x14086=gconst37*gconst37;
IkReal x14087=((1.0)*cj3);
IkReal x14088=(r11*r20);
IkReal x14089=(r10*sj3);
IkReal x14090=(gconst37*gconst38);
IkReal x14091=(r11*sj3);
IkReal x14092=(r21*x14086);
IkReal x14093=(cj3*x14090);
CheckValue<IkReal> x14094 = IKatan2WithCheck(IkReal((((gconst38*r22*x14091))+((gconst37*r22*x14089)))),IkReal(((((-1.0)*r20*x14089*x14090))+((x14089*x14092))+((r21*x14090*x14091))+(((-1.0)*sj3*x14085*x14088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14094.valid){
continue;
}
CheckValue<IkReal> x14095=IKPowWithIntegerCheck(IKsign((((x14088*x14093))+(((-1.0)*r11*x14087*x14092))+(((-1.0)*r12*r22*x14087))+((r10*r21*x14093))+(((-1.0)*r10*r20*x14085*x14087)))),-1);
if(!x14095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14094.value)+(((1.5707963267949)*(x14095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14096=IKsin(j4);
IkReal x14097=IKcos(j4);
IkReal x14098=(cj2*sj1);
IkReal x14099=(cj1*sj2);
IkReal x14100=(gconst38*r21);
IkReal x14101=(cj3*r20);
IkReal x14102=(gconst38*r10);
IkReal x14103=(cj3*gconst37);
IkReal x14104=(sj1*sj2);
IkReal x14105=(gconst38*r00);
IkReal x14106=(cj1*cj2);
IkReal x14107=(gconst37*sj3);
IkReal x14108=(gconst38*r20);
IkReal x14109=(gconst38*r01);
IkReal x14110=(gconst38*r11);
IkReal x14111=((1.0)*x14097);
IkReal x14112=((1.0)*x14096);
IkReal x14113=(cj3*x14096);
IkReal x14114=(sj3*x14097);
IkReal x14115=(gconst37*x14096);
IkReal x14116=(x14099+x14098);
evalcond[0]=((((-1.0)*x14108*x14112))+(((-1.0)*r22*x14111))+((r21*x14115)));
evalcond[1]=((((-1.0)*x14105*x14112))+((r01*x14115))+(((-1.0)*r02*x14111)));
evalcond[2]=((-1.0)+((r11*x14115))+(((-1.0)*r12*x14111))+(((-1.0)*x14102*x14112)));
evalcond[3]=(((sj3*x14110))+((r11*x14097*x14103))+(((-1.0)*cj3*x14102*x14111))+((r10*x14107))+((r12*x14113)));
evalcond[4]=(((x14102*x14114))+((cj3*x14110))+((r10*x14103))+(((-1.0)*r11*x14107*x14111))+(((-1.0)*r12*sj3*x14112)));
evalcond[5]=(((sj3*x14100))+((r22*x14113))+((r21*x14097*x14103))+x14116+((r20*x14107))+(((-1.0)*gconst38*x14101*x14111)));
evalcond[6]=(((r02*x14113))+((sj3*x14109))+((r00*x14107))+(((-1.0)*x14104))+((r01*x14097*x14103))+x14106+(((-1.0)*cj3*x14105*x14111)));
evalcond[7]=(((r00*x14103))+((cj3*x14109))+(((-1.0)*r02*sj3*x14112))+((x14105*x14114))+(((-1.0)*r01*x14107*x14111))+x14116);
evalcond[8]=((((-1.0)*r21*x14107*x14111))+((cj3*x14100))+((x14108*x14114))+(((-1.0)*x14106))+x14104+((gconst37*x14101))+(((-1.0)*r22*sj3*x14112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14117=gconst38*gconst38;
IkReal x14118=gconst37*gconst37;
IkReal x14119=(gconst37*r10);
IkReal x14120=(cj3*r22);
IkReal x14121=((1.0)*gconst38);
IkReal x14122=(r21*sj3);
IkReal x14123=(gconst38*r11);
IkReal x14124=(cj3*r20);
IkReal x14125=(cj3*r21);
IkReal x14126=(r20*sj3);
CheckValue<IkReal> x14127 = IKatan2WithCheck(IkReal((((x14120*x14123))+((x14119*x14120)))),IkReal(((((-1.0)*x14119*x14121*x14124))+((r10*x14118*x14125))+(((-1.0)*r11*x14117*x14124))+((gconst37*x14123*x14125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14127.valid){
continue;
}
CheckValue<IkReal> x14128=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14119*x14121*x14122))+(((-1.0)*gconst37*r11*x14121*x14126))+((r11*x14118*x14122))+((r10*x14117*x14126))+((r12*r22*sj3)))),-1);
if(!x14128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14127.value)+(((1.5707963267949)*(x14128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14129=IKsin(j4);
IkReal x14130=IKcos(j4);
IkReal x14131=(cj2*sj1);
IkReal x14132=(cj1*sj2);
IkReal x14133=(gconst38*r21);
IkReal x14134=(cj3*r20);
IkReal x14135=(gconst38*r10);
IkReal x14136=(cj3*gconst37);
IkReal x14137=(sj1*sj2);
IkReal x14138=(gconst38*r00);
IkReal x14139=(cj1*cj2);
IkReal x14140=(gconst37*sj3);
IkReal x14141=(gconst38*r20);
IkReal x14142=(gconst38*r01);
IkReal x14143=(gconst38*r11);
IkReal x14144=((1.0)*x14130);
IkReal x14145=((1.0)*x14129);
IkReal x14146=(cj3*x14129);
IkReal x14147=(sj3*x14130);
IkReal x14148=(gconst37*x14129);
IkReal x14149=(x14132+x14131);
evalcond[0]=((((-1.0)*r22*x14144))+((r21*x14148))+(((-1.0)*x14141*x14145)));
evalcond[1]=(((r01*x14148))+(((-1.0)*x14138*x14145))+(((-1.0)*r02*x14144)));
evalcond[2]=((-1.0)+(((-1.0)*x14135*x14145))+(((-1.0)*r12*x14144))+((r11*x14148)));
evalcond[3]=(((r10*x14140))+(((-1.0)*cj3*x14135*x14144))+((r11*x14130*x14136))+((sj3*x14143))+((r12*x14146)));
evalcond[4]=(((cj3*x14143))+(((-1.0)*r11*x14140*x14144))+(((-1.0)*r12*sj3*x14145))+((r10*x14136))+((x14135*x14147)));
evalcond[5]=(((sj3*x14133))+((r21*x14130*x14136))+((r22*x14146))+x14149+(((-1.0)*gconst38*x14134*x14144))+((r20*x14140)));
evalcond[6]=((((-1.0)*cj3*x14138*x14144))+(((-1.0)*x14137))+((r02*x14146))+((r01*x14130*x14136))+((sj3*x14142))+((r00*x14140))+x14139);
evalcond[7]=(((x14138*x14147))+(((-1.0)*r02*sj3*x14145))+((cj3*x14142))+(((-1.0)*r01*x14140*x14144))+x14149+((r00*x14136)));
evalcond[8]=((((-1.0)*x14139))+(((-1.0)*r22*sj3*x14145))+((gconst37*x14134))+((x14141*x14147))+x14137+(((-1.0)*r21*x14140*x14144))+((cj3*x14133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14150=((1.0)*gconst38);
CheckValue<IkReal> x14151 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst37*r01))+(((-1.0)*r00*x14150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14151.valid){
continue;
}
CheckValue<IkReal> x14152=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14150)))),-1);
if(!x14152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14151.value)+(((1.5707963267949)*(x14152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14153=IKsin(j4);
IkReal x14154=IKcos(j4);
IkReal x14155=(cj2*sj1);
IkReal x14156=(cj1*sj2);
IkReal x14157=(gconst38*r21);
IkReal x14158=(cj3*r20);
IkReal x14159=(gconst38*r10);
IkReal x14160=(cj3*gconst37);
IkReal x14161=(sj1*sj2);
IkReal x14162=(gconst38*r00);
IkReal x14163=(cj1*cj2);
IkReal x14164=(gconst37*sj3);
IkReal x14165=(gconst38*r20);
IkReal x14166=(gconst38*r01);
IkReal x14167=(gconst38*r11);
IkReal x14168=((1.0)*x14154);
IkReal x14169=((1.0)*x14153);
IkReal x14170=(cj3*x14153);
IkReal x14171=(sj3*x14154);
IkReal x14172=(gconst37*x14153);
IkReal x14173=(x14155+x14156);
evalcond[0]=((((-1.0)*r22*x14168))+((r21*x14172))+(((-1.0)*x14165*x14169)));
evalcond[1]=((((-1.0)*r02*x14168))+((r01*x14172))+(((-1.0)*x14162*x14169)));
evalcond[2]=((-1.0)+((r11*x14172))+(((-1.0)*r12*x14168))+(((-1.0)*x14159*x14169)));
evalcond[3]=(((r10*x14164))+((sj3*x14167))+(((-1.0)*cj3*x14159*x14168))+((r12*x14170))+((r11*x14154*x14160)));
evalcond[4]=(((cj3*x14167))+((r10*x14160))+(((-1.0)*r12*sj3*x14169))+(((-1.0)*r11*x14164*x14168))+((x14159*x14171)));
evalcond[5]=(((r22*x14170))+((r21*x14154*x14160))+((sj3*x14157))+x14173+(((-1.0)*gconst38*x14158*x14168))+((r20*x14164)));
evalcond[6]=(((sj3*x14166))+(((-1.0)*cj3*x14162*x14168))+((r02*x14170))+((r00*x14164))+x14163+((r01*x14154*x14160))+(((-1.0)*x14161)));
evalcond[7]=(((cj3*x14166))+(((-1.0)*r02*sj3*x14169))+(((-1.0)*r01*x14164*x14168))+((r00*x14160))+x14173+((x14162*x14171)));
evalcond[8]=(((cj3*x14157))+(((-1.0)*r21*x14164*x14168))+(((-1.0)*r22*sj3*x14169))+((x14165*x14171))+((gconst37*x14158))+x14161+(((-1.0)*x14163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14175 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14175)==0){
continue;
}
IkReal x14174=pow(x14175,-0.5);
CheckValue<IkReal> x14176 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14176.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14176.value))));
IkReal gconst40=((1.0)*r01*x14174);
IkReal gconst41=((-1.0)*r00*x14174);
CheckValue<IkReal> x14177 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14177.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14177.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14180 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14180.valid){
continue;
}
IkReal x14178=((1.0)*(x14180.value));
IkReal x14179=x14174;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14178)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14178)));
IkReal gconst40=((1.0)*r01*x14179);
IkReal gconst41=((-1.0)*r00*x14179);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14183 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14183.valid){
continue;
}
IkReal x14181=((1.0)*(x14183.value));
IkReal x14182=x14174;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14181)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14181)));
IkReal gconst40=((1.0)*r01*x14182);
IkReal gconst41=((-1.0)*r00*x14182);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14184=gconst41*gconst41;
IkReal x14185=gconst40*gconst40;
IkReal x14186=(gconst40*r10);
IkReal x14187=(r22*sj3);
IkReal x14188=(r11*sj3);
IkReal x14189=((1.0)*cj3);
IkReal x14190=(gconst41*r21);
IkReal x14191=(gconst41*r20);
IkReal x14192=(r21*x14185);
IkReal x14193=((1.0)*r20*x14184);
CheckValue<IkReal> x14194 = IKatan2WithCheck(IkReal((((gconst41*r11*x14187))+((x14186*x14187)))),IkReal((((r10*sj3*x14192))+((gconst40*x14188*x14190))+(((-1.0)*sj3*x14186*x14191))+(((-1.0)*x14188*x14193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14194.valid){
continue;
}
CheckValue<IkReal> x14195=IKPowWithIntegerCheck(IKsign((((cj3*x14186*x14190))+(((-1.0)*r12*r22*x14189))+(((-1.0)*r10*r20*x14184*x14189))+(((-1.0)*r11*x14189*x14192))+((cj3*gconst40*r11*x14191)))),-1);
if(!x14195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14194.value)+(((1.5707963267949)*(x14195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14196=IKsin(j4);
IkReal x14197=IKcos(j4);
IkReal x14198=(cj2*sj1);
IkReal x14199=(cj1*sj2);
IkReal x14200=(gconst40*sj3);
IkReal x14201=(gconst41*sj3);
IkReal x14202=(gconst41*r20);
IkReal x14203=(cj3*gconst41);
IkReal x14204=(sj1*sj2);
IkReal x14205=(cj1*cj2);
IkReal x14206=(cj3*gconst40);
IkReal x14207=((1.0)*x14197);
IkReal x14208=((1.0)*x14196);
IkReal x14209=(cj3*x14196);
IkReal x14210=(gconst40*x14196);
IkReal x14211=(x14198+x14199);
IkReal x14212=(x14197*x14206);
evalcond[0]=((((-1.0)*x14202*x14208))+((r21*x14210))+(((-1.0)*r22*x14207)));
evalcond[1]=((((-1.0)*gconst41*r00*x14208))+((r01*x14210))+(((-1.0)*r02*x14207)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14208))+((r11*x14210))+(((-1.0)*r12*x14207)));
evalcond[3]=(((r11*x14212))+(((-1.0)*r10*x14203*x14207))+((r10*x14200))+((r12*x14209))+((r11*x14201)));
evalcond[4]=(((r10*x14206))+((r10*x14197*x14201))+(((-1.0)*r11*x14200*x14207))+(((-1.0)*r12*sj3*x14208))+((r11*x14203)));
evalcond[5]=(((r20*x14200))+((r21*x14201))+(((-1.0)*cj3*x14202*x14207))+((r22*x14209))+((r21*x14212))+x14211);
evalcond[6]=(((r02*x14209))+((r01*x14212))+(((-1.0)*r00*x14203*x14207))+((r00*x14200))+((r01*x14201))+(((-1.0)*x14204))+x14205);
evalcond[7]=(((r00*x14197*x14201))+(((-1.0)*r01*x14200*x14207))+(((-1.0)*r02*sj3*x14208))+((r00*x14206))+((r01*x14203))+x14211);
evalcond[8]=(((r20*x14206))+((r21*x14203))+((r20*x14197*x14201))+(((-1.0)*r21*x14200*x14207))+(((-1.0)*x14205))+(((-1.0)*r22*sj3*x14208))+x14204);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14213=((1.0)*gconst41);
CheckValue<IkReal> x14214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14213))+(((-1.0)*gconst40*r20)))),-1);
if(!x14214.valid){
continue;
}
CheckValue<IkReal> x14215 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14213))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14214.value)))+(x14215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14216=IKsin(j4);
IkReal x14217=IKcos(j4);
IkReal x14218=(cj2*sj1);
IkReal x14219=(cj1*sj2);
IkReal x14220=(gconst40*sj3);
IkReal x14221=(gconst41*sj3);
IkReal x14222=(gconst41*r20);
IkReal x14223=(cj3*gconst41);
IkReal x14224=(sj1*sj2);
IkReal x14225=(cj1*cj2);
IkReal x14226=(cj3*gconst40);
IkReal x14227=((1.0)*x14217);
IkReal x14228=((1.0)*x14216);
IkReal x14229=(cj3*x14216);
IkReal x14230=(gconst40*x14216);
IkReal x14231=(x14219+x14218);
IkReal x14232=(x14217*x14226);
evalcond[0]=(((r21*x14230))+(((-1.0)*x14222*x14228))+(((-1.0)*r22*x14227)));
evalcond[1]=((((-1.0)*gconst41*r00*x14228))+((r01*x14230))+(((-1.0)*r02*x14227)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14227))+(((-1.0)*gconst41*r10*x14228))+((r11*x14230)));
evalcond[3]=(((r10*x14220))+((r11*x14221))+(((-1.0)*r10*x14223*x14227))+((r11*x14232))+((r12*x14229)));
evalcond[4]=(((r10*x14226))+((r10*x14217*x14221))+(((-1.0)*r11*x14220*x14227))+(((-1.0)*r12*sj3*x14228))+((r11*x14223)));
evalcond[5]=(((r20*x14220))+((r21*x14232))+(((-1.0)*cj3*x14222*x14227))+((r22*x14229))+((r21*x14221))+x14231);
evalcond[6]=(((r02*x14229))+(((-1.0)*r00*x14223*x14227))+((r01*x14232))+((r00*x14220))+(((-1.0)*x14224))+((r01*x14221))+x14225);
evalcond[7]=((((-1.0)*r01*x14220*x14227))+((r00*x14226))+(((-1.0)*r02*sj3*x14228))+((r01*x14223))+x14231+((r00*x14217*x14221)));
evalcond[8]=(((r20*x14226))+((r20*x14217*x14221))+(((-1.0)*r21*x14220*x14227))+((r21*x14223))+(((-1.0)*x14225))+x14224+(((-1.0)*r22*sj3*x14228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14233 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14233.valid){
continue;
}
CheckValue<IkReal> x14234=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14233.value)+(((1.5707963267949)*(x14234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14235=IKsin(j4);
IkReal x14236=IKcos(j4);
IkReal x14237=(cj2*sj1);
IkReal x14238=(cj1*sj2);
IkReal x14239=(gconst40*sj3);
IkReal x14240=(gconst41*sj3);
IkReal x14241=(gconst41*r20);
IkReal x14242=(cj3*gconst41);
IkReal x14243=(sj1*sj2);
IkReal x14244=(cj1*cj2);
IkReal x14245=(cj3*gconst40);
IkReal x14246=((1.0)*x14236);
IkReal x14247=((1.0)*x14235);
IkReal x14248=(cj3*x14235);
IkReal x14249=(gconst40*x14235);
IkReal x14250=(x14237+x14238);
IkReal x14251=(x14236*x14245);
evalcond[0]=(((r21*x14249))+(((-1.0)*r22*x14246))+(((-1.0)*x14241*x14247)));
evalcond[1]=((((-1.0)*gconst41*r00*x14247))+((r01*x14249))+(((-1.0)*r02*x14246)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14247))+((r11*x14249))+(((-1.0)*r12*x14246)));
evalcond[3]=((((-1.0)*r10*x14242*x14246))+((r10*x14239))+((r12*x14248))+((r11*x14251))+((r11*x14240)));
evalcond[4]=(((r10*x14236*x14240))+(((-1.0)*r11*x14239*x14246))+((r11*x14242))+((r10*x14245))+(((-1.0)*r12*sj3*x14247)));
evalcond[5]=(((r21*x14240))+((r21*x14251))+((r20*x14239))+x14250+(((-1.0)*cj3*x14241*x14246))+((r22*x14248)));
evalcond[6]=((((-1.0)*x14243))+((r02*x14248))+((r00*x14239))+(((-1.0)*r00*x14242*x14246))+((r01*x14240))+x14244+((r01*x14251)));
evalcond[7]=((((-1.0)*r02*sj3*x14247))+(((-1.0)*r01*x14239*x14246))+((r00*x14236*x14240))+((r01*x14242))+x14250+((r00*x14245)));
evalcond[8]=(((r20*x14236*x14240))+((r21*x14242))+(((-1.0)*r22*sj3*x14247))+(((-1.0)*x14244))+((r20*x14245))+(((-1.0)*r21*x14239*x14246))+x14243);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14252=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14252);
rxp1_1=(px*r21);
rxp1_2=(r11*x14252);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14253=(r11*sj5);
IkReal x14254=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14254))+x14253);
j4eval[1]=(((cj3*x14253))+(((-1.0)*cj3*x14254)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14255=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14255);
rxp1_1=(px*r21);
rxp1_2=(r11*x14255);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14256=(cj5*r10);
IkReal x14257=(r11*sj5);
j4eval[0]=(x14257+(((-1.0)*x14256)));
j4eval[1]=((((-1.0)*sj3*x14257))+((sj3*x14256)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14258=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14258);
rxp1_1=(px*r21);
rxp1_2=(r11*x14258);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14259=((1.0)*r10);
CheckValue<IkReal> x14260=IKPowWithIntegerCheck(cj3,-1);
if(!x14260.valid){
continue;
}
CheckValue<IkReal> x14261=IKPowWithIntegerCheck(r02,-1);
if(!x14261.valid){
continue;
}
CheckValue<IkReal> x14262=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14259))),-1);
if(!x14262.valid){
continue;
}
if( IKabs(((x14260.value)*(x14261.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14262.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14259)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14260.value)*(x14261.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14262.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14259))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14260.value)*(x14261.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14262.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14259))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14263=IKsin(j4);
IkReal x14264=IKcos(j4);
IkReal x14265=(cj2*sj1);
IkReal x14266=(cj1*sj2);
IkReal x14267=(cj5*r10);
IkReal x14268=(sj1*sj2);
IkReal x14269=(cj5*sj3);
IkReal x14270=(r11*sj5);
IkReal x14271=(cj3*sj5);
IkReal x14272=(r21*sj5);
IkReal x14273=(cj1*cj2);
IkReal x14274=(cj3*cj5);
IkReal x14275=(sj3*sj5);
IkReal x14276=((1.0)*x14263);
IkReal x14277=(r20*x14264);
IkReal x14278=(cj3*x14264);
IkReal x14279=(sj3*x14264);
IkReal x14280=(x14266+x14265);
evalcond[0]=((-1.0)*r02*x14264);
evalcond[1]=((((-1.0)*cj5*r20*x14276))+((x14263*x14272)));
evalcond[2]=((((-1.0)*x14268))+((cj3*r02*x14263))+x14273);
evalcond[3]=((((-1.0)*r02*sj3*x14276))+x14280);
evalcond[4]=((-1.0)+((x14263*x14270))+(((-1.0)*x14267*x14276)));
evalcond[5]=(((r11*x14269))+(((-1.0)*x14267*x14278))+((x14270*x14278))+((r10*x14275)));
evalcond[6]=((((-1.0)*x14270*x14279))+((x14267*x14279))+((r11*x14274))+((r10*x14271)));
evalcond[7]=(((r21*x14269))+((r20*x14275))+((r21*x14264*x14271))+x14280+(((-1.0)*x14274*x14277)));
evalcond[8]=((((-1.0)*x14273))+((r21*x14274))+(((-1.0)*x14272*x14279))+((x14269*x14277))+((r20*x14271))+x14268);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14281=(cj5*r10);
IkReal x14282=((1.0)*r11);
CheckValue<IkReal> x14283=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14281))),-1);
if(!x14283.valid){
continue;
}
CheckValue<IkReal> x14284=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14282))+((sj3*x14281))),-1);
if(!x14284.valid){
continue;
}
if( IKabs(x14283.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14284.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14282)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14283.value)+IKsqr(((x14284.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14282))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14283.value, ((x14284.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14282))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14285=IKsin(j4);
IkReal x14286=IKcos(j4);
IkReal x14287=(cj2*sj1);
IkReal x14288=(cj1*sj2);
IkReal x14289=(cj5*r10);
IkReal x14290=(sj1*sj2);
IkReal x14291=(cj5*sj3);
IkReal x14292=(r11*sj5);
IkReal x14293=(cj3*sj5);
IkReal x14294=(r21*sj5);
IkReal x14295=(cj1*cj2);
IkReal x14296=(cj3*cj5);
IkReal x14297=(sj3*sj5);
IkReal x14298=((1.0)*x14285);
IkReal x14299=(r20*x14286);
IkReal x14300=(cj3*x14286);
IkReal x14301=(sj3*x14286);
IkReal x14302=(x14287+x14288);
evalcond[0]=((-1.0)*r02*x14286);
evalcond[1]=((((-1.0)*cj5*r20*x14298))+((x14285*x14294)));
evalcond[2]=(((cj3*r02*x14285))+(((-1.0)*x14290))+x14295);
evalcond[3]=((((-1.0)*r02*sj3*x14298))+x14302);
evalcond[4]=((-1.0)+(((-1.0)*x14289*x14298))+((x14285*x14292)));
evalcond[5]=(((r10*x14297))+((x14292*x14300))+((r11*x14291))+(((-1.0)*x14289*x14300)));
evalcond[6]=(((x14289*x14301))+((r10*x14293))+((r11*x14296))+(((-1.0)*x14292*x14301)));
evalcond[7]=(((r20*x14297))+((r21*x14291))+((r21*x14286*x14293))+(((-1.0)*x14296*x14299))+x14302);
evalcond[8]=(((r20*x14293))+((r21*x14296))+((x14291*x14299))+(((-1.0)*x14295))+(((-1.0)*x14294*x14301))+x14290);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14303=((1.0)*r10);
IkReal x14304=(r11*sj5);
CheckValue<IkReal> x14305=IKPowWithIntegerCheck(((((-1.0)*cj5*x14303))+x14304),-1);
if(!x14305.valid){
continue;
}
CheckValue<IkReal> x14306=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14303))+((cj3*x14304))),-1);
if(!x14306.valid){
continue;
}
if( IKabs(x14305.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14306.value)*(((((-1.0)*sj3*sj5*x14303))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14305.value)+IKsqr(((x14306.value)*(((((-1.0)*sj3*sj5*x14303))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14305.value, ((x14306.value)*(((((-1.0)*sj3*sj5*x14303))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14307=IKsin(j4);
IkReal x14308=IKcos(j4);
IkReal x14309=(cj2*sj1);
IkReal x14310=(cj1*sj2);
IkReal x14311=(cj5*r10);
IkReal x14312=(sj1*sj2);
IkReal x14313=(cj5*sj3);
IkReal x14314=(r11*sj5);
IkReal x14315=(cj3*sj5);
IkReal x14316=(r21*sj5);
IkReal x14317=(cj1*cj2);
IkReal x14318=(cj3*cj5);
IkReal x14319=(sj3*sj5);
IkReal x14320=((1.0)*x14307);
IkReal x14321=(r20*x14308);
IkReal x14322=(cj3*x14308);
IkReal x14323=(sj3*x14308);
IkReal x14324=(x14309+x14310);
evalcond[0]=((-1.0)*r02*x14308);
evalcond[1]=(((x14307*x14316))+(((-1.0)*cj5*r20*x14320)));
evalcond[2]=(((cj3*r02*x14307))+(((-1.0)*x14312))+x14317);
evalcond[3]=((((-1.0)*r02*sj3*x14320))+x14324);
evalcond[4]=((-1.0)+(((-1.0)*x14311*x14320))+((x14307*x14314)));
evalcond[5]=(((r11*x14313))+(((-1.0)*x14311*x14322))+((x14314*x14322))+((r10*x14319)));
evalcond[6]=(((x14311*x14323))+(((-1.0)*x14314*x14323))+((r11*x14318))+((r10*x14315)));
evalcond[7]=(((r20*x14319))+((r21*x14308*x14315))+(((-1.0)*x14318*x14321))+((r21*x14313))+x14324);
evalcond[8]=((((-1.0)*x14317))+((r20*x14315))+((r21*x14318))+x14312+((x14313*x14321))+(((-1.0)*x14316*x14323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14325=cj5*cj5;
IkReal x14326=((1.0)*cj3);
IkReal x14327=(r10*r21);
IkReal x14328=(cj5*sj5);
IkReal x14329=(r11*r21);
IkReal x14330=(r11*r20);
IkReal x14331=(r22*sj3);
IkReal x14332=(r10*r20);
IkReal x14333=((1.0)*sj3*x14325);
CheckValue<IkReal> x14334 = IKatan2WithCheck(IkReal((((r10*sj5*x14331))+((cj5*r11*x14331)))),IkReal(((((-1.0)*x14327*x14333))+((sj3*x14327))+(((-1.0)*sj3*x14328*x14332))+((sj3*x14328*x14329))+(((-1.0)*x14330*x14333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14334.valid){
continue;
}
CheckValue<IkReal> x14335=IKPowWithIntegerCheck(IKsign((((cj3*x14327*x14328))+((cj3*x14325*x14329))+((cj3*x14328*x14330))+(((-1.0)*x14325*x14326*x14332))+(((-1.0)*r12*r22*x14326))+(((-1.0)*x14326*x14329)))),-1);
if(!x14335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14334.value)+(((1.5707963267949)*(x14335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14336=IKsin(j4);
IkReal x14337=IKcos(j4);
IkReal x14338=(cj2*sj1);
IkReal x14339=(cj1*sj2);
IkReal x14340=(cj5*sj3);
IkReal x14341=(cj5*r10);
IkReal x14342=(r00*sj5);
IkReal x14343=(sj1*sj2);
IkReal x14344=(r11*sj5);
IkReal x14345=(cj3*cj5);
IkReal x14346=(cj3*sj5);
IkReal x14347=(r21*sj5);
IkReal x14348=(cj1*cj2);
IkReal x14349=(sj3*sj5);
IkReal x14350=(r01*sj5);
IkReal x14351=((1.0)*x14337);
IkReal x14352=((1.0)*x14336);
IkReal x14353=(cj3*x14336);
IkReal x14354=(cj3*x14337);
IkReal x14355=(x14338+x14339);
evalcond[0]=((((-1.0)*cj5*r20*x14352))+(((-1.0)*r22*x14351))+((x14336*x14347)));
evalcond[1]=((((-1.0)*cj5*r00*x14352))+(((-1.0)*r02*x14351))+((x14336*x14350)));
evalcond[2]=((-1.0)+(((-1.0)*x14341*x14352))+(((-1.0)*r12*x14351))+((x14336*x14344)));
evalcond[3]=(((r12*x14353))+(((-1.0)*cj3*x14341*x14351))+((r11*x14340))+((r10*x14349))+((x14344*x14354)));
evalcond[4]=(((r10*x14337*x14340))+((r11*x14345))+((r10*x14346))+(((-1.0)*r12*sj3*x14352))+(((-1.0)*sj3*x14344*x14351)));
evalcond[5]=((((-1.0)*r20*x14345*x14351))+((r21*x14340))+((r21*x14337*x14346))+((r20*x14349))+((r22*x14353))+x14355);
evalcond[6]=((((-1.0)*r00*x14345*x14351))+((r02*x14353))+((r01*x14337*x14346))+((r01*x14340))+(((-1.0)*x14343))+((sj3*x14342))+x14348);
evalcond[7]=((((-1.0)*r01*x14349*x14351))+((cj3*x14342))+((r01*x14345))+((r00*x14337*x14340))+x14355+(((-1.0)*r02*sj3*x14352)));
evalcond[8]=((((-1.0)*r22*sj3*x14352))+((r21*x14345))+(((-1.0)*x14348))+((r20*x14346))+((r20*x14337*x14340))+(((-1.0)*sj3*x14347*x14351))+x14343);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14356=((1.0)*cj5);
CheckValue<IkReal> x14357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14356))+(((-1.0)*r20*sj5)))),-1);
if(!x14357.valid){
continue;
}
CheckValue<IkReal> x14358 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14357.value)))+(x14358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14359=IKsin(j4);
IkReal x14360=IKcos(j4);
IkReal x14361=(cj2*sj1);
IkReal x14362=(cj1*sj2);
IkReal x14363=(cj5*sj3);
IkReal x14364=(cj5*r10);
IkReal x14365=(r00*sj5);
IkReal x14366=(sj1*sj2);
IkReal x14367=(r11*sj5);
IkReal x14368=(cj3*cj5);
IkReal x14369=(cj3*sj5);
IkReal x14370=(r21*sj5);
IkReal x14371=(cj1*cj2);
IkReal x14372=(sj3*sj5);
IkReal x14373=(r01*sj5);
IkReal x14374=((1.0)*x14360);
IkReal x14375=((1.0)*x14359);
IkReal x14376=(cj3*x14359);
IkReal x14377=(cj3*x14360);
IkReal x14378=(x14362+x14361);
evalcond[0]=(((x14359*x14370))+(((-1.0)*r22*x14374))+(((-1.0)*cj5*r20*x14375)));
evalcond[1]=(((x14359*x14373))+(((-1.0)*cj5*r00*x14375))+(((-1.0)*r02*x14374)));
evalcond[2]=((-1.0)+(((-1.0)*x14364*x14375))+(((-1.0)*r12*x14374))+((x14359*x14367)));
evalcond[3]=(((x14367*x14377))+((r11*x14363))+((r10*x14372))+((r12*x14376))+(((-1.0)*cj3*x14364*x14374)));
evalcond[4]=(((r10*x14369))+(((-1.0)*sj3*x14367*x14374))+((r11*x14368))+((r10*x14360*x14363))+(((-1.0)*r12*sj3*x14375)));
evalcond[5]=((((-1.0)*r20*x14368*x14374))+((r22*x14376))+((r21*x14363))+((r21*x14360*x14369))+((r20*x14372))+x14378);
evalcond[6]=(((sj3*x14365))+(((-1.0)*r00*x14368*x14374))+((r01*x14360*x14369))+(((-1.0)*x14366))+((r01*x14363))+x14371+((r02*x14376)));
evalcond[7]=(((cj3*x14365))+(((-1.0)*r02*sj3*x14375))+((r00*x14360*x14363))+(((-1.0)*r01*x14372*x14374))+((r01*x14368))+x14378);
evalcond[8]=((((-1.0)*x14371))+(((-1.0)*sj3*x14370*x14374))+((r20*x14369))+((r20*x14360*x14363))+((r21*x14368))+(((-1.0)*r22*sj3*x14375))+x14366);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14379 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14379.valid){
continue;
}
CheckValue<IkReal> x14380=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14379.value)+(((1.5707963267949)*(x14380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14381=IKsin(j4);
IkReal x14382=IKcos(j4);
IkReal x14383=(cj2*sj1);
IkReal x14384=(cj1*sj2);
IkReal x14385=(cj5*sj3);
IkReal x14386=(cj5*r10);
IkReal x14387=(r00*sj5);
IkReal x14388=(sj1*sj2);
IkReal x14389=(r11*sj5);
IkReal x14390=(cj3*cj5);
IkReal x14391=(cj3*sj5);
IkReal x14392=(r21*sj5);
IkReal x14393=(cj1*cj2);
IkReal x14394=(sj3*sj5);
IkReal x14395=(r01*sj5);
IkReal x14396=((1.0)*x14382);
IkReal x14397=((1.0)*x14381);
IkReal x14398=(cj3*x14381);
IkReal x14399=(cj3*x14382);
IkReal x14400=(x14383+x14384);
evalcond[0]=((((-1.0)*cj5*r20*x14397))+(((-1.0)*r22*x14396))+((x14381*x14392)));
evalcond[1]=((((-1.0)*cj5*r00*x14397))+((x14381*x14395))+(((-1.0)*r02*x14396)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14396))+((x14381*x14389))+(((-1.0)*x14386*x14397)));
evalcond[3]=((((-1.0)*cj3*x14386*x14396))+((r12*x14398))+((r11*x14385))+((r10*x14394))+((x14389*x14399)));
evalcond[4]=((((-1.0)*sj3*x14389*x14396))+((r10*x14382*x14385))+((r10*x14391))+((r11*x14390))+(((-1.0)*r12*sj3*x14397)));
evalcond[5]=(((r21*x14382*x14391))+((r21*x14385))+((r22*x14398))+x14400+(((-1.0)*r20*x14390*x14396))+((r20*x14394)));
evalcond[6]=((((-1.0)*r00*x14390*x14396))+(((-1.0)*x14388))+((r01*x14382*x14391))+((r01*x14385))+((r02*x14398))+x14393+((sj3*x14387)));
evalcond[7]=((((-1.0)*r02*sj3*x14397))+((r01*x14390))+((cj3*x14387))+x14400+(((-1.0)*r01*x14394*x14396))+((r00*x14382*x14385)));
evalcond[8]=((((-1.0)*sj3*x14392*x14396))+((r21*x14390))+(((-1.0)*x14393))+((r20*x14382*x14385))+(((-1.0)*r22*sj3*x14397))+x14388+((r20*x14391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14401=((-1.0)*r00);
IkReal x14403 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14403)==0){
continue;
}
IkReal x14402=pow(x14403,-0.5);
CheckValue<IkReal> x14404 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14401),IKFAST_ATAN2_MAGTHRESH);
if(!x14404.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14404.value));
IkReal gconst13=(r01*x14402);
IkReal gconst14=(x14401*x14402);
CheckValue<IkReal> x14405 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14405.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14405.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14406=((-1.0)*r00);
IkReal x14407=x14402;
CheckValue<IkReal> x14409 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14406),IKFAST_ATAN2_MAGTHRESH);
if(!x14409.valid){
continue;
}
IkReal x14408=((-1.0)*(x14409.value));
sj5=gconst13;
cj5=gconst14;
j5=x14408;
IkReal gconst12=x14408;
IkReal gconst13=(r01*x14407);
IkReal gconst14=(x14406*x14407);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14410=((1.0)*sj0);
IkReal x14411=((1.0)*cj0);
CheckValue<IkReal> x14412 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14411))+(((-1.0)*r12*x14410)))),IkReal(((((-1.0)*gconst13*r11*x14410))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14412.valid){
continue;
}
CheckValue<IkReal> x14413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14412.value)+(((1.5707963267949)*(x14413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14414=IKsin(j4);
IkReal x14415=IKcos(j4);
IkReal x14416=((1.0)*r22);
IkReal x14417=((1.0)*r12);
IkReal x14418=(gconst13*sj3);
IkReal x14419=(gconst13*r01);
IkReal x14420=(sj1*sj2);
IkReal x14421=(gconst14*sj3);
IkReal x14422=(cj2*sj1);
IkReal x14423=((1.0)*sj0);
IkReal x14424=(cj3*gconst13);
IkReal x14425=(cj3*gconst14);
IkReal x14426=((1.0)*cj0);
IkReal x14427=((1.0)*gconst14);
IkReal x14428=(cj1*sj2);
IkReal x14429=(sj3*x14414);
IkReal x14430=((1.0)*cj1*cj2);
IkReal x14431=(cj3*x14415);
IkReal x14432=(cj3*x14414);
IkReal x14433=(gconst13*x14414);
IkReal x14434=((1.0)*x14415);
IkReal x14435=(x14414*x14427);
evalcond[0]=(((r21*x14433))+(((-1.0)*x14415*x14416))+(((-1.0)*r20*x14435)));
evalcond[1]=((((-1.0)*r10*x14435))+cj0+((r11*x14433))+(((-1.0)*x14415*x14417)));
evalcond[2]=((((-1.0)*r00*x14435))+((x14414*x14419))+(((-1.0)*r02*x14434))+(((-1.0)*x14423)));
evalcond[3]=((((-1.0)*r20*x14425*x14434))+((r21*x14415*x14424))+x14422+x14428+((r22*x14432))+((r20*x14418))+((r21*x14421)));
evalcond[4]=((((-1.0)*x14430))+(((-1.0)*x14416*x14429))+((r20*x14424))+((r20*x14415*x14421))+(((-1.0)*r21*x14418*x14434))+x14420+((r21*x14425)));
evalcond[5]=(((cj0*x14420))+((r01*x14421))+((r00*x14418))+((x14419*x14431))+((r02*x14432))+(((-1.0)*r00*x14425*x14434))+(((-1.0)*cj1*cj2*x14426)));
evalcond[6]=(((r11*x14421))+((r11*x14415*x14424))+((sj0*x14420))+((r12*x14432))+(((-1.0)*r10*x14425*x14434))+((r10*x14418))+(((-1.0)*cj1*cj2*x14423)));
evalcond[7]=((((-1.0)*x14422*x14426))+(((-1.0)*x14426*x14428))+((r00*x14415*x14421))+((r01*x14425))+((r00*x14424))+(((-1.0)*r01*x14418*x14434))+(((-1.0)*r02*x14429)));
evalcond[8]=((((-1.0)*x14423*x14428))+(((-1.0)*x14422*x14423))+(((-1.0)*r11*x14418*x14434))+((r11*x14425))+(((-1.0)*x14417*x14429))+((r10*x14424))+((r10*x14415*x14421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14436=((1.0)*gconst14);
CheckValue<IkReal> x14437 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14436))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14437.valid){
continue;
}
CheckValue<IkReal> x14438=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14436)))),-1);
if(!x14438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14437.value)+(((1.5707963267949)*(x14438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14439=IKsin(j4);
IkReal x14440=IKcos(j4);
IkReal x14441=((1.0)*r22);
IkReal x14442=((1.0)*r12);
IkReal x14443=(gconst13*sj3);
IkReal x14444=(gconst13*r01);
IkReal x14445=(sj1*sj2);
IkReal x14446=(gconst14*sj3);
IkReal x14447=(cj2*sj1);
IkReal x14448=((1.0)*sj0);
IkReal x14449=(cj3*gconst13);
IkReal x14450=(cj3*gconst14);
IkReal x14451=((1.0)*cj0);
IkReal x14452=((1.0)*gconst14);
IkReal x14453=(cj1*sj2);
IkReal x14454=(sj3*x14439);
IkReal x14455=((1.0)*cj1*cj2);
IkReal x14456=(cj3*x14440);
IkReal x14457=(cj3*x14439);
IkReal x14458=(gconst13*x14439);
IkReal x14459=((1.0)*x14440);
IkReal x14460=(x14439*x14452);
evalcond[0]=((((-1.0)*x14440*x14441))+(((-1.0)*r20*x14460))+((r21*x14458)));
evalcond[1]=(cj0+(((-1.0)*x14440*x14442))+((r11*x14458))+(((-1.0)*r10*x14460)));
evalcond[2]=(((x14439*x14444))+(((-1.0)*x14448))+(((-1.0)*r00*x14460))+(((-1.0)*r02*x14459)));
evalcond[3]=(((r20*x14443))+((r21*x14440*x14449))+(((-1.0)*r20*x14450*x14459))+x14453+x14447+((r22*x14457))+((r21*x14446)));
evalcond[4]=((((-1.0)*x14455))+((r20*x14449))+(((-1.0)*r21*x14443*x14459))+x14445+(((-1.0)*x14441*x14454))+((r21*x14450))+((r20*x14440*x14446)));
evalcond[5]=(((r01*x14446))+((r00*x14443))+(((-1.0)*r00*x14450*x14459))+((x14444*x14456))+(((-1.0)*cj1*cj2*x14451))+((r02*x14457))+((cj0*x14445)));
evalcond[6]=((((-1.0)*r10*x14450*x14459))+((sj0*x14445))+((r12*x14457))+((r10*x14443))+((r11*x14446))+((r11*x14440*x14449))+(((-1.0)*cj1*cj2*x14448)));
evalcond[7]=((((-1.0)*r02*x14454))+(((-1.0)*r01*x14443*x14459))+((r00*x14449))+((r01*x14450))+(((-1.0)*x14451*x14453))+((r00*x14440*x14446))+(((-1.0)*x14447*x14451)));
evalcond[8]=((((-1.0)*x14448*x14453))+((r11*x14450))+((r10*x14449))+(((-1.0)*x14442*x14454))+((r10*x14440*x14446))+(((-1.0)*r11*x14443*x14459))+(((-1.0)*x14447*x14448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14461=((-1.0)*r01);
IkReal x14463 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14463)==0){
continue;
}
IkReal x14462=pow(x14463,-0.5);
CheckValue<IkReal> x14464 = IKatan2WithCheck(IkReal(x14461),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14464.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14464.value))));
IkReal gconst16=(x14461*x14462);
IkReal gconst17=((1.0)*r00*x14462);
CheckValue<IkReal> x14465 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14465.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14465.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14466=((-1.0)*r01);
CheckValue<IkReal> x14469 = IKatan2WithCheck(IkReal(x14466),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14469.valid){
continue;
}
IkReal x14467=((1.0)*(x14469.value));
IkReal x14468=x14462;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14467)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14467)));
IkReal gconst16=(x14466*x14468);
IkReal gconst17=((1.0)*r00*x14468);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14470=((-1.0)*r01);
CheckValue<IkReal> x14473 = IKatan2WithCheck(IkReal(x14470),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14473.valid){
continue;
}
IkReal x14471=((1.0)*(x14473.value));
IkReal x14472=x14462;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14471)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14471)));
IkReal gconst16=(x14470*x14472);
IkReal gconst17=((1.0)*r00*x14472);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14474=((-1.0)*r01);
CheckValue<IkReal> x14477 = IKatan2WithCheck(IkReal(x14474),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14477.valid){
continue;
}
IkReal x14475=((1.0)*(x14477.value));
IkReal x14476=x14462;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14475)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14475)));
IkReal gconst16=(x14474*x14476);
IkReal gconst17=((1.0)*r00*x14476);
IkReal x14478=r02*r02;
IkReal x14479=(r12*sj0);
IkReal x14480=((1.0)*cj0);
IkReal x14481=x14462;
j4eval[0]=((IKabs(((((-1.0)*x14479))+(((-1.0)*r02*x14480)))))+(IKabs(((((-1.0)*x14480*x14481))+((r02*x14479*x14481))+((cj0*x14478*x14481))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14482=((-1.0)*r01);
CheckValue<IkReal> x14485 = IKatan2WithCheck(IkReal(x14482),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14485.valid){
continue;
}
IkReal x14483=((1.0)*(x14485.value));
IkReal x14484=x14462;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14483)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14483)));
IkReal gconst16=(x14482*x14484);
IkReal gconst17=((1.0)*r00*x14484);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14486=((-1.0)*r01);
CheckValue<IkReal> x14489 = IKatan2WithCheck(IkReal(x14486),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14489.valid){
continue;
}
IkReal x14487=((1.0)*(x14489.value));
IkReal x14488=x14462;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14487)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14487)));
IkReal gconst16=(x14486*x14488);
IkReal gconst17=((1.0)*r00*x14488);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14490=gconst16*gconst16;
IkReal x14491=gconst17*gconst17;
IkReal x14492=(r11*sj3);
IkReal x14493=(cj3*r10);
IkReal x14494=((1.0)*cj3);
IkReal x14495=(r10*sj3);
IkReal x14496=(gconst16*gconst17);
IkReal x14497=(r21*x14490);
IkReal x14498=((1.0)*r20*x14491);
CheckValue<IkReal> x14499 = IKatan2WithCheck(IkReal((((gconst17*r22*x14492))+((gconst16*r22*x14495)))),IkReal((((r21*x14492*x14496))+(((-1.0)*r20*x14495*x14496))+((x14495*x14497))+(((-1.0)*x14492*x14498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14499.valid){
continue;
}
CheckValue<IkReal> x14500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14494*x14497))+(((-1.0)*r12*r22*x14494))+((cj3*r11*r20*x14496))+((r21*x14493*x14496))+(((-1.0)*x14493*x14498)))),-1);
if(!x14500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14499.value)+(((1.5707963267949)*(x14500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14501=IKsin(j4);
IkReal x14502=IKcos(j4);
IkReal x14503=(cj2*sj1);
IkReal x14504=(cj1*sj2);
IkReal x14505=(gconst16*r21);
IkReal x14506=(cj3*gconst17);
IkReal x14507=(gconst16*r20);
IkReal x14508=(sj1*sj2);
IkReal x14509=(gconst17*r20);
IkReal x14510=(gconst17*sj3);
IkReal x14511=(gconst16*r10);
IkReal x14512=(cj1*cj2);
IkReal x14513=(gconst16*sj3);
IkReal x14514=((1.0)*x14502);
IkReal x14515=((1.0)*x14501);
IkReal x14516=(gconst16*x14501);
IkReal x14517=(cj3*x14502);
IkReal x14518=(cj3*x14501);
IkReal x14519=(x14504+x14503);
evalcond[0]=((((-1.0)*r22*x14514))+((x14501*x14505))+(((-1.0)*x14509*x14515)));
evalcond[1]=((((-1.0)*gconst17*r00*x14515))+((r01*x14516))+(((-1.0)*r02*x14514)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14515))+((r11*x14516))+(((-1.0)*r12*x14514)));
evalcond[3]=(((sj3*x14511))+((r11*x14510))+(((-1.0)*r10*x14506*x14514))+((r12*x14518))+((gconst16*r11*x14517)));
evalcond[4]=((((-1.0)*r11*x14513*x14514))+((r10*x14502*x14510))+((cj3*x14511))+((r11*x14506))+(((-1.0)*r12*sj3*x14515)));
evalcond[5]=(((r22*x14518))+(((-1.0)*r20*x14506*x14514))+x14519+((sj3*x14507))+((x14505*x14517))+((r21*x14510)));
evalcond[6]=(((r00*x14513))+((gconst16*r01*x14517))+((r01*x14510))+(((-1.0)*x14508))+(((-1.0)*r00*x14506*x14514))+x14512+((r02*x14518)));
evalcond[7]=(((r00*x14502*x14510))+(((-1.0)*r02*sj3*x14515))+x14519+(((-1.0)*r01*x14513*x14514))+((r01*x14506))+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14507))+((r21*x14506))+((sj3*x14502*x14509))+x14508+(((-1.0)*r22*sj3*x14515))+(((-1.0)*sj3*x14505*x14514))+(((-1.0)*x14512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14520=((1.0)*gconst17);
CheckValue<IkReal> x14521=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14520)))),-1);
if(!x14521.valid){
continue;
}
CheckValue<IkReal> x14522 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14520))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14521.value)))+(x14522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14523=IKsin(j4);
IkReal x14524=IKcos(j4);
IkReal x14525=(cj2*sj1);
IkReal x14526=(cj1*sj2);
IkReal x14527=(gconst16*r21);
IkReal x14528=(cj3*gconst17);
IkReal x14529=(gconst16*r20);
IkReal x14530=(sj1*sj2);
IkReal x14531=(gconst17*r20);
IkReal x14532=(gconst17*sj3);
IkReal x14533=(gconst16*r10);
IkReal x14534=(cj1*cj2);
IkReal x14535=(gconst16*sj3);
IkReal x14536=((1.0)*x14524);
IkReal x14537=((1.0)*x14523);
IkReal x14538=(gconst16*x14523);
IkReal x14539=(cj3*x14524);
IkReal x14540=(cj3*x14523);
IkReal x14541=(x14525+x14526);
evalcond[0]=((((-1.0)*r22*x14536))+(((-1.0)*x14531*x14537))+((x14523*x14527)));
evalcond[1]=(((r01*x14538))+(((-1.0)*gconst17*r00*x14537))+(((-1.0)*r02*x14536)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14537))+(((-1.0)*r12*x14536))+((r11*x14538)));
evalcond[3]=(((r12*x14540))+((r11*x14532))+(((-1.0)*r10*x14528*x14536))+((sj3*x14533))+((gconst16*r11*x14539)));
evalcond[4]=((((-1.0)*r12*sj3*x14537))+((cj3*x14533))+((r11*x14528))+((r10*x14524*x14532))+(((-1.0)*r11*x14535*x14536)));
evalcond[5]=(((sj3*x14529))+((r21*x14532))+((r22*x14540))+x14541+(((-1.0)*r20*x14528*x14536))+((x14527*x14539)));
evalcond[6]=(((r02*x14540))+(((-1.0)*x14530))+((r00*x14535))+((r01*x14532))+x14534+((gconst16*r01*x14539))+(((-1.0)*r00*x14528*x14536)));
evalcond[7]=((((-1.0)*r02*sj3*x14537))+((r01*x14528))+x14541+((r00*x14524*x14532))+((cj3*gconst16*r00))+(((-1.0)*r01*x14535*x14536)));
evalcond[8]=((((-1.0)*x14534))+((cj3*x14529))+x14530+(((-1.0)*sj3*x14527*x14536))+((r21*x14528))+((sj3*x14524*x14531))+(((-1.0)*r22*sj3*x14537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14542=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14542.valid){
continue;
}
CheckValue<IkReal> x14543 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14542.value)))+(x14543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14544=IKsin(j4);
IkReal x14545=IKcos(j4);
IkReal x14546=(cj2*sj1);
IkReal x14547=(cj1*sj2);
IkReal x14548=(gconst16*r21);
IkReal x14549=(cj3*gconst17);
IkReal x14550=(gconst16*r20);
IkReal x14551=(sj1*sj2);
IkReal x14552=(gconst17*r20);
IkReal x14553=(gconst17*sj3);
IkReal x14554=(gconst16*r10);
IkReal x14555=(cj1*cj2);
IkReal x14556=(gconst16*sj3);
IkReal x14557=((1.0)*x14545);
IkReal x14558=((1.0)*x14544);
IkReal x14559=(gconst16*x14544);
IkReal x14560=(cj3*x14545);
IkReal x14561=(cj3*x14544);
IkReal x14562=(x14547+x14546);
evalcond[0]=((((-1.0)*x14552*x14558))+(((-1.0)*r22*x14557))+((x14544*x14548)));
evalcond[1]=((((-1.0)*r02*x14557))+((r01*x14559))+(((-1.0)*gconst17*r00*x14558)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14558))+(((-1.0)*r12*x14557))+((r11*x14559)));
evalcond[3]=(((sj3*x14554))+((gconst16*r11*x14560))+(((-1.0)*r10*x14549*x14557))+((r11*x14553))+((r12*x14561)));
evalcond[4]=((((-1.0)*r11*x14556*x14557))+((r10*x14545*x14553))+((r11*x14549))+((cj3*x14554))+(((-1.0)*r12*sj3*x14558)));
evalcond[5]=((((-1.0)*r20*x14549*x14557))+((sj3*x14550))+x14562+((x14548*x14560))+((r22*x14561))+((r21*x14553)));
evalcond[6]=(((gconst16*r01*x14560))+((r02*x14561))+x14555+(((-1.0)*r00*x14549*x14557))+(((-1.0)*x14551))+((r01*x14553))+((r00*x14556)));
evalcond[7]=(((r00*x14545*x14553))+((r01*x14549))+x14562+(((-1.0)*r02*sj3*x14558))+(((-1.0)*r01*x14556*x14557))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r22*sj3*x14558))+((r21*x14549))+((sj3*x14545*x14552))+x14551+(((-1.0)*x14555))+(((-1.0)*sj3*x14548*x14557))+((cj3*x14550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14563=((-1.0)*r01);
CheckValue<IkReal> x14566 = IKatan2WithCheck(IkReal(x14563),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14566.valid){
continue;
}
IkReal x14564=((1.0)*(x14566.value));
IkReal x14565=x14462;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14564)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14564)));
IkReal gconst16=(x14563*x14565);
IkReal gconst17=((1.0)*r00*x14565);
IkReal x14567=r02*r02;
IkReal x14568=(r12*sj0);
IkReal x14569=((1.0)*cj0);
IkReal x14570=x14462;
j4eval[0]=((IKabs((((cj0*x14567*x14570))+(((-1.0)*x14569*x14570))+((r02*x14568*x14570)))))+(IKabs(((((-1.0)*r02*x14569))+(((-1.0)*x14568))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14571=((1.0)*r12);
IkReal x14572=(sj1*sj2);
IkReal x14573=(cj1*cj2);
IkReal x14574=((1.0)*sj3);
IkReal x14575=(gconst16*r21);
IkReal x14576=(cj3*gconst16*r20);
IkReal x14577=(gconst17*r20*sj3);
IkReal x14578=(cj3*gconst17*r21);
CheckValue<IkReal> x14579=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14575))+(((-1.0)*gconst16*r11*x14574*x14575))+(((-1.0)*r10*r20*x14574*(gconst17*gconst17)))+((gconst16*r11*x14577))),-1);
if(!x14579.valid){
continue;
}
CheckValue<IkReal> x14580=IKPowWithIntegerCheck(((((-1.0)*x14574*x14575))+x14577),-1);
if(!x14580.valid){
continue;
}
if( IKabs(((x14579.value)*(((((-1.0)*x14571*x14576))+(((-1.0)*x14571*x14572))+(((-1.0)*x14571*x14578))+((cj0*sj3*x14575))+((r12*x14573))+(((-1.0)*cj0*gconst17*r20*x14574)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14580.value)*((x14573+(((-1.0)*x14576))+(((-1.0)*x14572))+(((-1.0)*x14578)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14579.value)*(((((-1.0)*x14571*x14576))+(((-1.0)*x14571*x14572))+(((-1.0)*x14571*x14578))+((cj0*sj3*x14575))+((r12*x14573))+(((-1.0)*cj0*gconst17*r20*x14574))))))+IKsqr(((x14580.value)*((x14573+(((-1.0)*x14576))+(((-1.0)*x14572))+(((-1.0)*x14578))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14579.value)*(((((-1.0)*x14571*x14576))+(((-1.0)*x14571*x14572))+(((-1.0)*x14571*x14578))+((cj0*sj3*x14575))+((r12*x14573))+(((-1.0)*cj0*gconst17*r20*x14574))))), ((x14580.value)*((x14573+(((-1.0)*x14576))+(((-1.0)*x14572))+(((-1.0)*x14578))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14581=IKsin(j4);
IkReal x14582=IKcos(j4);
IkReal x14583=((1.0)*gconst17);
IkReal x14584=(gconst17*sj3);
IkReal x14585=(gconst16*r21);
IkReal x14586=(cj3*gconst17);
IkReal x14587=(sj1*sj2);
IkReal x14588=((1.0)*sj0);
IkReal x14589=(gconst16*sj3);
IkReal x14590=(cj3*gconst16);
IkReal x14591=(cj2*sj1);
IkReal x14592=((1.0)*cj0);
IkReal x14593=((1.0)*sj3);
IkReal x14594=(cj1*sj2);
IkReal x14595=(cj3*x14582);
IkReal x14596=(gconst16*x14581);
IkReal x14597=((1.0)*x14582);
IkReal x14598=((1.0)*cj1*cj2);
IkReal x14599=(r02*x14581);
IkReal x14600=(r12*x14581);
evalcond[0]=(((x14581*x14585))+(((-1.0)*r20*x14581*x14583)));
evalcond[1]=(cj0+(((-1.0)*r12*x14597))+(((-1.0)*r10*x14581*x14583))+((r11*x14596)));
evalcond[2]=((((-1.0)*r02*x14597))+(((-1.0)*x14588))+(((-1.0)*r00*x14581*x14583))+((r01*x14596)));
evalcond[3]=(((r20*x14589))+((x14585*x14595))+((r21*x14584))+x14594+x14591+(((-1.0)*r20*x14583*x14595)));
evalcond[4]=(((r20*x14590))+(((-1.0)*x14598))+((r21*x14586))+x14587+((r20*x14582*x14584))+(((-1.0)*x14582*x14585*x14593)));
evalcond[5]=((((-1.0)*r00*x14583*x14595))+((cj3*x14599))+(((-1.0)*cj1*cj2*x14592))+((r01*x14582*x14590))+((r00*x14589))+((r01*x14584))+((cj0*x14587)));
evalcond[6]=(((sj0*x14587))+(((-1.0)*cj1*cj2*x14588))+((r10*x14589))+((r11*x14582*x14590))+((cj3*x14600))+((r11*x14584))+(((-1.0)*r10*x14583*x14595)));
evalcond[7]=((((-1.0)*x14592*x14594))+((r00*x14582*x14584))+(((-1.0)*r01*x14589*x14597))+(((-1.0)*x14593*x14599))+((r01*x14586))+(((-1.0)*x14591*x14592))+((r00*x14590)));
evalcond[8]=((((-1.0)*r11*x14589*x14597))+(((-1.0)*x14588*x14594))+(((-1.0)*x14588*x14591))+(((-1.0)*x14593*x14600))+((r10*x14590))+((r10*x14582*x14584))+((r11*x14586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14601=((1.0)*sj0);
IkReal x14602=((1.0)*cj0);
CheckValue<IkReal> x14603=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14603.valid){
continue;
}
CheckValue<IkReal> x14604 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14601))+(((-1.0)*r02*x14602)))),IkReal(((((-1.0)*gconst16*r01*x14602))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14603.value)))+(x14604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14605=IKsin(j4);
IkReal x14606=IKcos(j4);
IkReal x14607=((1.0)*gconst17);
IkReal x14608=(gconst17*sj3);
IkReal x14609=(gconst16*r21);
IkReal x14610=(cj3*gconst17);
IkReal x14611=(sj1*sj2);
IkReal x14612=((1.0)*sj0);
IkReal x14613=(gconst16*sj3);
IkReal x14614=(cj3*gconst16);
IkReal x14615=(cj2*sj1);
IkReal x14616=((1.0)*cj0);
IkReal x14617=((1.0)*sj3);
IkReal x14618=(cj1*sj2);
IkReal x14619=(cj3*x14606);
IkReal x14620=(gconst16*x14605);
IkReal x14621=((1.0)*x14606);
IkReal x14622=((1.0)*cj1*cj2);
IkReal x14623=(r02*x14605);
IkReal x14624=(r12*x14605);
evalcond[0]=((((-1.0)*r20*x14605*x14607))+((x14605*x14609)));
evalcond[1]=((((-1.0)*r10*x14605*x14607))+cj0+((r11*x14620))+(((-1.0)*r12*x14621)));
evalcond[2]=((((-1.0)*r02*x14621))+(((-1.0)*r00*x14605*x14607))+((r01*x14620))+(((-1.0)*x14612)));
evalcond[3]=(((r21*x14608))+((x14609*x14619))+x14618+x14615+((r20*x14613))+(((-1.0)*r20*x14607*x14619)));
evalcond[4]=((((-1.0)*x14622))+((r21*x14610))+(((-1.0)*x14606*x14609*x14617))+x14611+((r20*x14606*x14608))+((r20*x14614)));
evalcond[5]=((((-1.0)*r00*x14607*x14619))+((cj3*x14623))+((cj0*x14611))+((r01*x14608))+(((-1.0)*cj1*cj2*x14616))+((r00*x14613))+((r01*x14606*x14614)));
evalcond[6]=(((sj0*x14611))+((r10*x14613))+((cj3*x14624))+(((-1.0)*cj1*cj2*x14612))+(((-1.0)*r10*x14607*x14619))+((r11*x14608))+((r11*x14606*x14614)));
evalcond[7]=((((-1.0)*x14617*x14623))+(((-1.0)*x14615*x14616))+(((-1.0)*x14616*x14618))+(((-1.0)*r01*x14613*x14621))+((r00*x14606*x14608))+((r01*x14610))+((r00*x14614)));
evalcond[8]=((((-1.0)*x14612*x14618))+(((-1.0)*x14612*x14615))+(((-1.0)*x14617*x14624))+((r10*x14614))+((r11*x14610))+(((-1.0)*r11*x14613*x14621))+((r10*x14606*x14608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14625=((1.0)*sj0);
IkReal x14626=((1.0)*cj0);
CheckValue<IkReal> x14627=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14627.valid){
continue;
}
CheckValue<IkReal> x14628 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14626))+(((-1.0)*r12*x14625)))),IkReal(((((-1.0)*gconst16*r01*x14626))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14627.value)))+(x14628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14629=IKsin(j4);
IkReal x14630=IKcos(j4);
IkReal x14631=(cj3*gconst17);
IkReal x14632=(gconst16*r21);
IkReal x14633=(gconst17*sj3);
IkReal x14634=(gconst16*r20);
IkReal x14635=(sj1*sj2);
IkReal x14636=(gconst16*r10);
IkReal x14637=(cj2*sj1);
IkReal x14638=(gconst16*sj3);
IkReal x14639=((1.0)*cj0);
IkReal x14640=((1.0)*sj0);
IkReal x14641=(cj1*sj2);
IkReal x14642=((1.0)*x14630);
IkReal x14643=(gconst16*x14629);
IkReal x14644=(cj3*x14630);
IkReal x14645=(cj3*x14629);
IkReal x14646=((1.0)*cj1*cj2);
IkReal x14647=((1.0)*gconst17*x14629);
IkReal x14648=((1.0)*sj3*x14629);
evalcond[0]=(((x14629*x14632))+(((-1.0)*r22*x14642))+(((-1.0)*r20*x14647)));
evalcond[1]=(((r11*x14643))+cj0+(((-1.0)*r12*x14642))+(((-1.0)*r10*x14647)));
evalcond[2]=(((r01*x14643))+(((-1.0)*r02*x14642))+(((-1.0)*x14640))+(((-1.0)*r00*x14647)));
evalcond[3]=(((sj3*x14634))+((r22*x14645))+((x14632*x14644))+(((-1.0)*r20*x14631*x14642))+x14641+x14637+((r21*x14633)));
evalcond[4]=(((r20*x14630*x14633))+(((-1.0)*r22*x14648))+((cj3*x14634))+x14635+(((-1.0)*x14646))+((r21*x14631))+(((-1.0)*sj3*x14632*x14642)));
evalcond[5]=((((-1.0)*r00*x14631*x14642))+((cj0*x14635))+((r01*x14633))+(((-1.0)*cj1*cj2*x14639))+((r00*x14638))+((r02*x14645))+((gconst16*r01*x14644)));
evalcond[6]=(((gconst16*r11*x14644))+((r12*x14645))+((sj3*x14636))+(((-1.0)*cj1*cj2*x14640))+(((-1.0)*r10*x14631*x14642))+((r11*x14633))+((sj0*x14635)));
evalcond[7]=((((-1.0)*x14637*x14639))+(((-1.0)*r02*x14648))+((r01*x14631))+(((-1.0)*r01*x14638*x14642))+((r00*x14630*x14633))+(((-1.0)*x14639*x14641))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14637*x14640))+(((-1.0)*r12*x14648))+(((-1.0)*x14640*x14641))+((cj3*x14636))+((r10*x14630*x14633))+((r11*x14631))+(((-1.0)*r11*x14638*x14642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14649=((1.0)*gconst17);
CheckValue<IkReal> x14650 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14650.valid){
continue;
}
CheckValue<IkReal> x14651=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14649)))),-1);
if(!x14651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14650.value)+(((1.5707963267949)*(x14651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14652=IKsin(j4);
IkReal x14653=IKcos(j4);
IkReal x14654=(cj3*gconst17);
IkReal x14655=(gconst16*r21);
IkReal x14656=(gconst17*sj3);
IkReal x14657=(gconst16*r20);
IkReal x14658=(sj1*sj2);
IkReal x14659=(gconst16*r10);
IkReal x14660=(cj2*sj1);
IkReal x14661=(gconst16*sj3);
IkReal x14662=((1.0)*cj0);
IkReal x14663=((1.0)*sj0);
IkReal x14664=(cj1*sj2);
IkReal x14665=((1.0)*x14653);
IkReal x14666=(gconst16*x14652);
IkReal x14667=(cj3*x14653);
IkReal x14668=(cj3*x14652);
IkReal x14669=((1.0)*cj1*cj2);
IkReal x14670=((1.0)*gconst17*x14652);
IkReal x14671=((1.0)*sj3*x14652);
evalcond[0]=((((-1.0)*r22*x14665))+((x14652*x14655))+(((-1.0)*r20*x14670)));
evalcond[1]=(cj0+(((-1.0)*r10*x14670))+(((-1.0)*r12*x14665))+((r11*x14666)));
evalcond[2]=((((-1.0)*r00*x14670))+((r01*x14666))+(((-1.0)*r02*x14665))+(((-1.0)*x14663)));
evalcond[3]=((((-1.0)*r20*x14654*x14665))+((x14655*x14667))+((sj3*x14657))+((r22*x14668))+x14660+x14664+((r21*x14656)));
evalcond[4]=((((-1.0)*sj3*x14655*x14665))+(((-1.0)*r22*x14671))+x14658+((r21*x14654))+((r20*x14653*x14656))+((cj3*x14657))+(((-1.0)*x14669)));
evalcond[5]=((((-1.0)*r00*x14654*x14665))+((r02*x14668))+((gconst16*r01*x14667))+((cj0*x14658))+((r01*x14656))+((r00*x14661))+(((-1.0)*cj1*cj2*x14662)));
evalcond[6]=(((gconst16*r11*x14667))+(((-1.0)*r10*x14654*x14665))+((sj0*x14658))+((sj3*x14659))+(((-1.0)*cj1*cj2*x14663))+((r12*x14668))+((r11*x14656)));
evalcond[7]=((((-1.0)*x14660*x14662))+((r01*x14654))+(((-1.0)*r02*x14671))+(((-1.0)*r01*x14661*x14665))+(((-1.0)*x14662*x14664))+((cj3*gconst16*r00))+((r00*x14653*x14656)));
evalcond[8]=(((r10*x14653*x14656))+(((-1.0)*x14660*x14663))+(((-1.0)*x14663*x14664))+(((-1.0)*r11*x14661*x14665))+(((-1.0)*r12*x14671))+((cj3*x14659))+((r11*x14654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14672=((1.0)*gconst17);
CheckValue<IkReal> x14673=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14672)))),-1);
if(!x14673.valid){
continue;
}
CheckValue<IkReal> x14674 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14672))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14673.value)))+(x14674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14675=IKsin(j4);
IkReal x14676=IKcos(j4);
IkReal x14677=(cj3*gconst17);
IkReal x14678=(gconst16*r21);
IkReal x14679=(gconst17*sj3);
IkReal x14680=(gconst16*r20);
IkReal x14681=(sj1*sj2);
IkReal x14682=(gconst16*r10);
IkReal x14683=(cj2*sj1);
IkReal x14684=(gconst16*sj3);
IkReal x14685=((1.0)*cj0);
IkReal x14686=((1.0)*sj0);
IkReal x14687=(cj1*sj2);
IkReal x14688=((1.0)*x14676);
IkReal x14689=(gconst16*x14675);
IkReal x14690=(cj3*x14676);
IkReal x14691=(cj3*x14675);
IkReal x14692=((1.0)*cj1*cj2);
IkReal x14693=((1.0)*gconst17*x14675);
IkReal x14694=((1.0)*sj3*x14675);
evalcond[0]=((((-1.0)*r20*x14693))+((x14675*x14678))+(((-1.0)*r22*x14688)));
evalcond[1]=(cj0+((r11*x14689))+(((-1.0)*r12*x14688))+(((-1.0)*r10*x14693)));
evalcond[2]=(((r01*x14689))+(((-1.0)*r00*x14693))+(((-1.0)*r02*x14688))+(((-1.0)*x14686)));
evalcond[3]=(((r22*x14691))+((x14678*x14690))+((sj3*x14680))+((r21*x14679))+(((-1.0)*r20*x14677*x14688))+x14687+x14683);
evalcond[4]=(((cj3*x14680))+((r21*x14677))+(((-1.0)*x14692))+(((-1.0)*r22*x14694))+x14681+((r20*x14676*x14679))+(((-1.0)*sj3*x14678*x14688)));
evalcond[5]=((((-1.0)*r00*x14677*x14688))+((r00*x14684))+(((-1.0)*cj1*cj2*x14685))+((r01*x14679))+((r02*x14691))+((gconst16*r01*x14690))+((cj0*x14681)));
evalcond[6]=((((-1.0)*r10*x14677*x14688))+((sj3*x14682))+(((-1.0)*cj1*cj2*x14686))+((r12*x14691))+((gconst16*r11*x14690))+((sj0*x14681))+((r11*x14679)));
evalcond[7]=((((-1.0)*x14683*x14685))+(((-1.0)*r02*x14694))+((r01*x14677))+(((-1.0)*x14685*x14687))+(((-1.0)*r01*x14684*x14688))+((r00*x14676*x14679))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14683*x14686))+((cj3*x14682))+(((-1.0)*x14686*x14687))+(((-1.0)*r11*x14684*x14688))+((r11*x14677))+(((-1.0)*r12*x14694))+((r10*x14676*x14679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14695=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14695;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14696=((1.0)*cj5);
IkReal x14697=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14696)));
j4eval[0]=x14697;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14696))))));
j4eval[2]=IKsign(x14697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14698=cj5*cj5;
IkReal x14699=(cj3*r01);
IkReal x14700=(cj5*sj5);
IkReal x14701=((1.0)*cj3);
IkReal x14702=((((-1.0)*r02*r22*x14701))+((r20*x14699*x14700))+((r21*x14698*x14699))+((cj3*r00*r21*x14700))+(((-1.0)*r21*x14699))+(((-1.0)*r00*r20*x14698*x14701)));
j4eval[0]=x14702;
j4eval[1]=IKsign(x14702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14703=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14703;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14704=((1.0)*cj5);
IkReal x14705=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14704)));
j4eval[0]=x14705;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14704))))));
j4eval[2]=IKsign(x14705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14706=cj5*cj5;
IkReal x14707=r01*r01;
IkReal x14708=(r01*sj5);
IkReal x14709=(cj5*r00);
IkReal x14710=(((x14706*x14707))+(((-1.0)*x14707))+(((-1.0)*(r02*r02)))+(((-1.0)*x14706*(r00*r00)))+(((2.0)*x14708*x14709)));
j4eval[0]=x14710;
j4eval[1]=IKsign(x14710);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14708))+x14709))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14711=cj5*cj5;
IkReal x14712=r01*r01;
IkReal x14713=(r01*sj5);
IkReal x14714=(cj5*r00);
CheckValue<IkReal> x14715=IKPowWithIntegerCheck(IKsign((((x14711*x14712))+(((-1.0)*(r02*r02)))+(((2.0)*x14713*x14714))+(((-1.0)*x14712))+(((-1.0)*x14711*(r00*r00))))),-1);
if(!x14715.valid){
continue;
}
CheckValue<IkReal> x14716 = IKatan2WithCheck(IkReal(((((-1.0)*x14713))+x14714)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14715.value)))+(x14716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14717=IKsin(j4);
IkReal x14718=IKcos(j4);
IkReal x14719=(cj5*r10);
IkReal x14720=(r01*sj5);
IkReal x14721=((1.0)*cj2);
IkReal x14722=(cj5*r00);
IkReal x14723=(cj5*r20);
IkReal x14724=((1.0)*x14718);
IkReal x14725=((1.0)*x14717);
IkReal x14726=(sj5*x14717);
evalcond[0]=(((r21*x14726))+(((-1.0)*x14723*x14725))+(((-1.0)*r22*x14724)));
evalcond[1]=((((-1.0)*r12*x14724))+(((-1.0)*x14719*x14725))+((r11*x14726)));
evalcond[2]=(((x14718*x14722))+(((-1.0)*x14720*x14724))+(((-1.0)*r02*x14725)));
evalcond[3]=((-1.0)+(((-1.0)*x14722*x14725))+((x14717*x14720))+(((-1.0)*r02*x14724)));
evalcond[4]=((((-1.0)*r21*sj5*x14724))+((sj1*sj2))+((x14718*x14723))+(((-1.0)*cj1*x14721))+(((-1.0)*r22*x14725)));
evalcond[5]=((((-1.0)*r12*x14725))+(((-1.0)*sj1*x14721))+(((-1.0)*cj1*sj2))+((x14718*x14719))+(((-1.0)*r11*sj5*x14724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14727=((1.0)*cj5);
CheckValue<IkReal> x14728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14727))+(((-1.0)*r10*sj5)))),-1);
if(!x14728.valid){
continue;
}
CheckValue<IkReal> x14729 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14727))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14728.value)))+(x14729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14730=IKsin(j4);
IkReal x14731=IKcos(j4);
IkReal x14732=(cj5*r10);
IkReal x14733=(r01*sj5);
IkReal x14734=((1.0)*cj2);
IkReal x14735=(cj5*r00);
IkReal x14736=(cj5*r20);
IkReal x14737=((1.0)*x14731);
IkReal x14738=((1.0)*x14730);
IkReal x14739=(sj5*x14730);
evalcond[0]=((((-1.0)*x14736*x14738))+(((-1.0)*r22*x14737))+((r21*x14739)));
evalcond[1]=((((-1.0)*r12*x14737))+(((-1.0)*x14732*x14738))+((r11*x14739)));
evalcond[2]=(((x14731*x14735))+(((-1.0)*r02*x14738))+(((-1.0)*x14733*x14737)));
evalcond[3]=((-1.0)+((x14730*x14733))+(((-1.0)*r02*x14737))+(((-1.0)*x14735*x14738)));
evalcond[4]=((((-1.0)*r21*sj5*x14737))+((sj1*sj2))+(((-1.0)*cj1*x14734))+((x14731*x14736))+(((-1.0)*r22*x14738)));
evalcond[5]=((((-1.0)*sj1*x14734))+(((-1.0)*r12*x14738))+(((-1.0)*cj1*sj2))+((x14731*x14732))+(((-1.0)*r11*sj5*x14737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14740=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14740.valid){
continue;
}
CheckValue<IkReal> x14741 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14740.value)))+(x14741.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14742=IKsin(j4);
IkReal x14743=IKcos(j4);
IkReal x14744=(cj5*r10);
IkReal x14745=(r01*sj5);
IkReal x14746=((1.0)*cj2);
IkReal x14747=(cj5*r00);
IkReal x14748=(cj5*r20);
IkReal x14749=((1.0)*x14743);
IkReal x14750=((1.0)*x14742);
IkReal x14751=(sj5*x14742);
evalcond[0]=((((-1.0)*r22*x14749))+((r21*x14751))+(((-1.0)*x14748*x14750)));
evalcond[1]=((((-1.0)*x14744*x14750))+(((-1.0)*r12*x14749))+((r11*x14751)));
evalcond[2]=(((x14743*x14747))+(((-1.0)*r02*x14750))+(((-1.0)*x14745*x14749)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14749))+((x14742*x14745))+(((-1.0)*x14747*x14750)));
evalcond[4]=(((x14743*x14748))+((sj1*sj2))+(((-1.0)*cj1*x14746))+(((-1.0)*r22*x14750))+(((-1.0)*r21*sj5*x14749)));
evalcond[5]=(((x14743*x14744))+(((-1.0)*r12*x14750))+(((-1.0)*r11*sj5*x14749))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14752=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14752;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14753=((1.0)*cj5);
IkReal x14754=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14753)));
j4eval[0]=x14754;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14753))+((r21*sj5))))));
j4eval[2]=IKsign(x14754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14755=cj5*cj5;
IkReal x14756=r01*r01;
IkReal x14757=(cj5*r00);
IkReal x14758=(r01*sj5);
IkReal x14759=(((x14755*(r00*r00)))+(((-1.0)*x14755*x14756))+x14756+(r02*r02)+(((-2.0)*x14757*x14758)));
j4eval[0]=x14759;
j4eval[1]=IKsign(x14759);
j4eval[2]=((IKabs(r02))+(IKabs((x14758+(((-1.0)*x14757))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14760=cj5*cj5;
IkReal x14761=r01*r01;
IkReal x14762=(r01*sj5);
IkReal x14763=(cj5*r00);
CheckValue<IkReal> x14764=IKPowWithIntegerCheck(IKsign((((x14760*(r00*r00)))+(((-1.0)*x14760*x14761))+x14761+(((-2.0)*x14762*x14763))+(r02*r02))),-1);
if(!x14764.valid){
continue;
}
CheckValue<IkReal> x14765 = IKatan2WithCheck(IkReal(((((-1.0)*x14763))+x14762)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14764.value)))+(x14765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14766=IKcos(j4);
IkReal x14767=IKsin(j4);
IkReal x14768=(cj5*r00);
IkReal x14769=(cj5*r10);
IkReal x14770=(r21*sj5);
IkReal x14771=((1.0)*cj2);
IkReal x14772=(cj5*r20);
IkReal x14773=((1.0)*x14766);
IkReal x14774=((1.0)*x14767);
IkReal x14775=(sj5*x14767);
IkReal x14776=(sj5*x14766);
evalcond[0]=((((-1.0)*x14768*x14773))+((r01*x14776))+((r02*x14767)));
evalcond[1]=((((-1.0)*x14772*x14774))+((x14767*x14770))+(((-1.0)*r22*x14773)));
evalcond[2]=(((r11*x14775))+(((-1.0)*x14769*x14774))+(((-1.0)*r12*x14773)));
evalcond[3]=((-1.0)+(((-1.0)*x14768*x14774))+(((-1.0)*r02*x14773))+((r01*x14775)));
evalcond[4]=((((-1.0)*x14772*x14773))+((sj1*sj2))+((x14766*x14770))+(((-1.0)*cj1*x14771))+((r22*x14767)));
evalcond[5]=(((r11*x14776))+(((-1.0)*cj1*sj2))+((r12*x14767))+(((-1.0)*x14769*x14773))+(((-1.0)*sj1*x14771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14777=((1.0)*cj5);
CheckValue<IkReal> x14778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14777)))),-1);
if(!x14778.valid){
continue;
}
CheckValue<IkReal> x14779 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14778.value)))+(x14779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14780=IKcos(j4);
IkReal x14781=IKsin(j4);
IkReal x14782=(cj5*r00);
IkReal x14783=(cj5*r10);
IkReal x14784=(r21*sj5);
IkReal x14785=((1.0)*cj2);
IkReal x14786=(cj5*r20);
IkReal x14787=((1.0)*x14780);
IkReal x14788=((1.0)*x14781);
IkReal x14789=(sj5*x14781);
IkReal x14790=(sj5*x14780);
evalcond[0]=(((r01*x14790))+(((-1.0)*x14782*x14787))+((r02*x14781)));
evalcond[1]=((((-1.0)*x14786*x14788))+((x14781*x14784))+(((-1.0)*r22*x14787)));
evalcond[2]=((((-1.0)*x14783*x14788))+(((-1.0)*r12*x14787))+((r11*x14789)));
evalcond[3]=((-1.0)+((r01*x14789))+(((-1.0)*x14782*x14788))+(((-1.0)*r02*x14787)));
evalcond[4]=(((x14780*x14784))+((sj1*sj2))+(((-1.0)*cj1*x14785))+(((-1.0)*x14786*x14787))+((r22*x14781)));
evalcond[5]=((((-1.0)*x14783*x14787))+(((-1.0)*sj1*x14785))+(((-1.0)*cj1*sj2))+((r11*x14790))+((r12*x14781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14791=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14791.valid){
continue;
}
CheckValue<IkReal> x14792 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14791.value)))+(x14792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14793=IKcos(j4);
IkReal x14794=IKsin(j4);
IkReal x14795=(cj5*r00);
IkReal x14796=(cj5*r10);
IkReal x14797=(r21*sj5);
IkReal x14798=((1.0)*cj2);
IkReal x14799=(cj5*r20);
IkReal x14800=((1.0)*x14793);
IkReal x14801=((1.0)*x14794);
IkReal x14802=(sj5*x14794);
IkReal x14803=(sj5*x14793);
evalcond[0]=((((-1.0)*x14795*x14800))+((r01*x14803))+((r02*x14794)));
evalcond[1]=((((-1.0)*r22*x14800))+(((-1.0)*x14799*x14801))+((x14794*x14797)));
evalcond[2]=((((-1.0)*x14796*x14801))+(((-1.0)*r12*x14800))+((r11*x14802)));
evalcond[3]=((-1.0)+(((-1.0)*x14795*x14801))+((r01*x14802))+(((-1.0)*r02*x14800)));
evalcond[4]=((((-1.0)*x14799*x14800))+((x14793*x14797))+((sj1*sj2))+(((-1.0)*cj1*x14798))+((r22*x14794)));
evalcond[5]=((((-1.0)*x14796*x14800))+(((-1.0)*sj1*x14798))+(((-1.0)*cj1*sj2))+((r12*x14794))+((r11*x14803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14805 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14805)==0){
continue;
}
IkReal x14804=pow(x14805,-0.5);
CheckValue<IkReal> x14806 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14806.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14806.value));
IkReal gconst49=((-1.0)*r21*x14804);
IkReal gconst50=(r20*x14804);
CheckValue<IkReal> x14807 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14807.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14810 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14810.valid){
continue;
}
IkReal x14808=((-1.0)*(x14810.value));
IkReal x14809=x14804;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14808;
IkReal gconst48=x14808;
IkReal gconst49=((-1.0)*r21*x14809);
IkReal gconst50=(r20*x14809);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14813 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14813.valid){
continue;
}
IkReal x14811=((-1.0)*(x14813.value));
IkReal x14812=x14804;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14811;
IkReal gconst48=x14811;
IkReal gconst49=((-1.0)*r21*x14812);
IkReal gconst50=(r20*x14812);
CheckValue<IkReal> x14821=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14821.valid){
continue;
}
IkReal x14814=x14821.value;
IkReal x14815=(sj3*x14814);
IkReal x14816=(r11*x14815);
IkReal x14817=(r00*x14815);
IkReal x14818=(r01*x14815);
IkReal x14819=(r10*x14815);
IkReal x14820=(r20*r21*x14815);
j4eval[0]=IKsign((((r10*x14817*(r20*r20)))+((r01*x14816*(r21*r21)))+((r02*r12*sj3))+((r00*r20*r21*x14816))+((r10*r20*r21*x14818))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14822=gconst49*gconst49;
IkReal x14823=gconst50*gconst50;
IkReal x14824=((1.0)*cj3);
IkReal x14825=(gconst50*r01);
IkReal x14826=(gconst49*r10);
IkReal x14827=(r12*sj3);
IkReal x14828=(gconst49*r00);
IkReal x14829=(r00*sj3);
IkReal x14830=(r11*x14822);
IkReal x14831=(r10*x14823);
CheckValue<IkReal> x14832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14824*x14830))+((cj3*gconst50*r11*x14828))+((cj3*x14825*x14826))+(((-1.0)*r00*x14824*x14831))+(((-1.0)*r02*r12*x14824)))),-1);
if(!x14832.valid){
continue;
}
CheckValue<IkReal> x14833 = IKatan2WithCheck(IkReal((((x14827*x14828))+((x14825*x14827)))),IkReal(((((-1.0)*r01*sj3*x14831))+((gconst49*r11*sj3*x14825))+(((-1.0)*gconst50*x14826*x14829))+((x14829*x14830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14832.value)))+(x14833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14834=IKsin(j4);
IkReal x14835=IKcos(j4);
IkReal x14836=(sj1*sj2);
IkReal x14837=(gconst50*r20);
IkReal x14838=(gconst50*sj3);
IkReal x14839=(cj3*r01);
IkReal x14840=(gconst50*r10);
IkReal x14841=(gconst49*sj3);
IkReal x14842=((1.0)*cj2);
IkReal x14843=(cj1*sj2);
IkReal x14844=(cj3*r11);
IkReal x14845=(gconst50*r00);
IkReal x14846=(cj3*r21);
IkReal x14847=(cj3*gconst49);
IkReal x14848=(cj1*x14842);
IkReal x14849=((1.0)*x14835);
IkReal x14850=((1.0)*x14834);
IkReal x14851=(gconst49*x14834);
IkReal x14852=(gconst49*x14835);
IkReal x14853=(cj3*x14834);
evalcond[0]=(((r21*x14851))+(((-1.0)*x14837*x14850))+(((-1.0)*r22*x14849)));
evalcond[1]=(((r11*x14851))+(((-1.0)*x14840*x14850))+(((-1.0)*r12*x14849)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14849))+(((-1.0)*x14845*x14850))+((r01*x14851)));
evalcond[3]=(((r02*x14853))+((x14839*x14852))+(((-1.0)*cj3*x14845*x14849))+((r01*x14838))+((r00*x14841)));
evalcond[4]=((((-1.0)*r02*sj3*x14850))+((gconst50*x14839))+((r00*x14835*x14838))+(((-1.0)*r01*x14841*x14849))+((r00*x14847)));
evalcond[5]=(((r20*x14841))+((cj2*sj1))+x14843+((r21*x14838))+((x14846*x14852))+((r22*x14853))+(((-1.0)*cj3*x14837*x14849)));
evalcond[6]=(((x14844*x14852))+(((-1.0)*cj3*x14840*x14849))+x14836+((r11*x14838))+(((-1.0)*x14848))+((r10*x14841))+((r12*x14853)));
evalcond[7]=(((r20*x14847))+(((-1.0)*r22*sj3*x14850))+(((-1.0)*r21*x14841*x14849))+x14836+(((-1.0)*x14848))+((gconst50*x14846))+((sj3*x14835*x14837)));
evalcond[8]=((((-1.0)*x14843))+(((-1.0)*r11*x14841*x14849))+(((-1.0)*sj1*x14842))+((r10*x14835*x14838))+((gconst50*x14844))+((r10*x14847))+(((-1.0)*r12*sj3*x14850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14854=gconst49*gconst49;
IkReal x14855=gconst50*gconst50;
IkReal x14856=(cj3*r12);
IkReal x14857=(gconst49*r00);
IkReal x14858=(r01*r11);
IkReal x14859=(r00*r11);
IkReal x14860=(cj3*gconst50);
IkReal x14861=((1.0)*r01*r10);
IkReal x14862=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14863 = IKatan2WithCheck(IkReal((((x14856*x14857))+((gconst50*r01*x14856)))),IkReal(((((-1.0)*cj3*x14855*x14861))+(((-1.0)*r10*x14857*x14860))+((gconst49*x14858*x14860))+((cj3*x14854*x14859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14863.valid){
continue;
}
CheckValue<IkReal> x14864=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14857))+((sj3*x14854*x14858))+(((-1.0)*x14861*x14862))+((r00*r10*sj3*x14855)))),-1);
if(!x14864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14863.value)+(((1.5707963267949)*(x14864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14865=IKsin(j4);
IkReal x14866=IKcos(j4);
IkReal x14867=(sj1*sj2);
IkReal x14868=(gconst50*r20);
IkReal x14869=(gconst50*sj3);
IkReal x14870=(cj3*r01);
IkReal x14871=(gconst50*r10);
IkReal x14872=(gconst49*sj3);
IkReal x14873=((1.0)*cj2);
IkReal x14874=(cj1*sj2);
IkReal x14875=(cj3*r11);
IkReal x14876=(gconst50*r00);
IkReal x14877=(cj3*r21);
IkReal x14878=(cj3*gconst49);
IkReal x14879=(cj1*x14873);
IkReal x14880=((1.0)*x14866);
IkReal x14881=((1.0)*x14865);
IkReal x14882=(gconst49*x14865);
IkReal x14883=(gconst49*x14866);
IkReal x14884=(cj3*x14865);
evalcond[0]=((((-1.0)*r22*x14880))+(((-1.0)*x14868*x14881))+((r21*x14882)));
evalcond[1]=(((r11*x14882))+(((-1.0)*r12*x14880))+(((-1.0)*x14871*x14881)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14880))+((r01*x14882))+(((-1.0)*x14876*x14881)));
evalcond[3]=(((x14870*x14883))+(((-1.0)*cj3*x14876*x14880))+((r00*x14872))+((r01*x14869))+((r02*x14884)));
evalcond[4]=((((-1.0)*r01*x14872*x14880))+((r00*x14878))+((gconst50*x14870))+(((-1.0)*r02*sj3*x14881))+((r00*x14866*x14869)));
evalcond[5]=(((cj2*sj1))+((r22*x14884))+(((-1.0)*cj3*x14868*x14880))+x14874+((x14877*x14883))+((r20*x14872))+((r21*x14869)));
evalcond[6]=(((r10*x14872))+(((-1.0)*cj3*x14871*x14880))+((r12*x14884))+x14867+((x14875*x14883))+(((-1.0)*x14879))+((r11*x14869)));
evalcond[7]=((((-1.0)*r21*x14872*x14880))+(((-1.0)*r22*sj3*x14881))+x14867+((sj3*x14866*x14868))+((gconst50*x14877))+(((-1.0)*x14879))+((r20*x14878)));
evalcond[8]=(((r10*x14878))+((r10*x14866*x14869))+(((-1.0)*r12*sj3*x14881))+(((-1.0)*r11*x14872*x14880))+((gconst50*x14875))+(((-1.0)*x14874))+(((-1.0)*sj1*x14873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14885=((1.0)*gconst50);
CheckValue<IkReal> x14886=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14885)))),-1);
if(!x14886.valid){
continue;
}
CheckValue<IkReal> x14887 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14886.value)))+(x14887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14888=IKsin(j4);
IkReal x14889=IKcos(j4);
IkReal x14890=(sj1*sj2);
IkReal x14891=(gconst50*r20);
IkReal x14892=(gconst50*sj3);
IkReal x14893=(cj3*r01);
IkReal x14894=(gconst50*r10);
IkReal x14895=(gconst49*sj3);
IkReal x14896=((1.0)*cj2);
IkReal x14897=(cj1*sj2);
IkReal x14898=(cj3*r11);
IkReal x14899=(gconst50*r00);
IkReal x14900=(cj3*r21);
IkReal x14901=(cj3*gconst49);
IkReal x14902=(cj1*x14896);
IkReal x14903=((1.0)*x14889);
IkReal x14904=((1.0)*x14888);
IkReal x14905=(gconst49*x14888);
IkReal x14906=(gconst49*x14889);
IkReal x14907=(cj3*x14888);
evalcond[0]=(((r21*x14905))+(((-1.0)*r22*x14903))+(((-1.0)*x14891*x14904)));
evalcond[1]=((((-1.0)*r12*x14903))+((r11*x14905))+(((-1.0)*x14894*x14904)));
evalcond[2]=((-1.0)+((r01*x14905))+(((-1.0)*r02*x14903))+(((-1.0)*x14899*x14904)));
evalcond[3]=((((-1.0)*cj3*x14899*x14903))+((r01*x14892))+((r00*x14895))+((r02*x14907))+((x14893*x14906)));
evalcond[4]=(((r00*x14901))+((r00*x14889*x14892))+((gconst50*x14893))+(((-1.0)*r02*sj3*x14904))+(((-1.0)*r01*x14895*x14903)));
evalcond[5]=(((r22*x14907))+((cj2*sj1))+x14897+((r21*x14892))+((x14900*x14906))+((r20*x14895))+(((-1.0)*cj3*x14891*x14903)));
evalcond[6]=(((r10*x14895))+(((-1.0)*cj3*x14894*x14903))+((r11*x14892))+(((-1.0)*x14902))+x14890+((r12*x14907))+((x14898*x14906)));
evalcond[7]=((((-1.0)*r21*x14895*x14903))+(((-1.0)*x14902))+x14890+(((-1.0)*r22*sj3*x14904))+((sj3*x14889*x14891))+((r20*x14901))+((gconst50*x14900)));
evalcond[8]=((((-1.0)*sj1*x14896))+((gconst50*x14898))+(((-1.0)*r11*x14895*x14903))+((r10*x14889*x14892))+(((-1.0)*x14897))+(((-1.0)*r12*sj3*x14904))+((r10*x14901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14909 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14909)==0){
continue;
}
IkReal x14908=pow(x14909,-0.5);
CheckValue<IkReal> x14910 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14910.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14910.value))));
IkReal gconst52=((1.0)*r21*x14908);
IkReal gconst53=((-1.0)*r20*x14908);
CheckValue<IkReal> x14911 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14911.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14911.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14914 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14914.valid){
continue;
}
IkReal x14912=((1.0)*(x14914.value));
IkReal x14913=x14908;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14912)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14912)));
IkReal gconst52=((1.0)*r21*x14913);
IkReal gconst53=((-1.0)*r20*x14913);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14917 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14917.valid){
continue;
}
IkReal x14915=((1.0)*(x14917.value));
IkReal x14916=x14908;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14915)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14915)));
IkReal gconst52=((1.0)*r21*x14916);
IkReal gconst53=((-1.0)*r20*x14916);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14920 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14920.valid){
continue;
}
IkReal x14918=((1.0)*(x14920.value));
IkReal x14919=x14908;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14918)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14918)));
IkReal gconst52=((1.0)*r21*x14919);
IkReal gconst53=((-1.0)*r20*x14919);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14921=gconst52*gconst52;
IkReal x14922=gconst53*gconst53;
IkReal x14923=(gconst53*r01);
IkReal x14924=(cj3*r20);
IkReal x14925=(r22*sj3);
IkReal x14926=((1.0)*cj3);
IkReal x14927=(gconst52*sj3);
IkReal x14928=((1.0)*r00);
IkReal x14929=(gconst52*r00);
IkReal x14930=(r21*x14921);
CheckValue<IkReal> x14931 = IKatan2WithCheck(IkReal((((x14925*x14929))+((x14923*x14925)))),IkReal((((r00*sj3*x14930))+(((-1.0)*gconst53*r20*x14927*x14928))+(((-1.0)*r01*r20*sj3*x14922))+((r21*x14923*x14927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14931.valid){
continue;
}
CheckValue<IkReal> x14932=IKPowWithIntegerCheck(IKsign((((gconst52*x14923*x14924))+((cj3*gconst53*r21*x14929))+(((-1.0)*r01*x14926*x14930))+(((-1.0)*r02*r22*x14926))+(((-1.0)*x14922*x14924*x14928)))),-1);
if(!x14932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14931.value)+(((1.5707963267949)*(x14932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14933=IKsin(j4);
IkReal x14934=IKcos(j4);
IkReal x14935=(sj1*sj2);
IkReal x14936=((1.0)*cj1);
IkReal x14937=(cj3*gconst52);
IkReal x14938=(gconst53*sj3);
IkReal x14939=(cj3*gconst53);
IkReal x14940=(cj2*sj1);
IkReal x14941=(gconst52*sj3);
IkReal x14942=(cj2*x14936);
IkReal x14943=((1.0)*x14934);
IkReal x14944=((1.0)*x14933);
IkReal x14945=(gconst52*x14933);
IkReal x14946=(cj3*x14933);
evalcond[0]=((((-1.0)*gconst53*r20*x14944))+((r21*x14945))+(((-1.0)*r22*x14943)));
evalcond[1]=((((-1.0)*r12*x14943))+(((-1.0)*gconst53*r10*x14944))+((r11*x14945)));
evalcond[2]=((-1.0)+((r01*x14945))+(((-1.0)*r02*x14943))+(((-1.0)*gconst53*r00*x14944)));
evalcond[3]=((((-1.0)*r00*x14939*x14943))+((r00*x14941))+((r01*x14938))+((r02*x14946))+((r01*x14934*x14937)));
evalcond[4]=((((-1.0)*r01*x14941*x14943))+((r00*x14934*x14938))+(((-1.0)*r02*sj3*x14944))+((r01*x14939))+((r00*x14937)));
evalcond[5]=(x14940+((r22*x14946))+((cj1*sj2))+(((-1.0)*r20*x14939*x14943))+((r21*x14938))+((r21*x14934*x14937))+((r20*x14941)));
evalcond[6]=(((r12*x14946))+x14935+((r10*x14941))+((r11*x14934*x14937))+(((-1.0)*x14942))+(((-1.0)*r10*x14939*x14943))+((r11*x14938)));
evalcond[7]=((((-1.0)*r21*x14941*x14943))+x14935+((r20*x14934*x14938))+((r21*x14939))+(((-1.0)*x14942))+(((-1.0)*r22*sj3*x14944))+((r20*x14937)));
evalcond[8]=(((r10*x14934*x14938))+(((-1.0)*r12*sj3*x14944))+((r10*x14937))+(((-1.0)*x14940))+(((-1.0)*sj2*x14936))+(((-1.0)*r11*x14941*x14943))+((r11*x14939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14947=((1.0)*gconst53);
CheckValue<IkReal> x14948 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14947))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14948.valid){
continue;
}
CheckValue<IkReal> x14949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14947))+(((-1.0)*gconst52*r10)))),-1);
if(!x14949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14948.value)+(((1.5707963267949)*(x14949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14950=IKsin(j4);
IkReal x14951=IKcos(j4);
IkReal x14952=(sj1*sj2);
IkReal x14953=((1.0)*cj1);
IkReal x14954=(cj3*gconst52);
IkReal x14955=(gconst53*sj3);
IkReal x14956=(cj3*gconst53);
IkReal x14957=(cj2*sj1);
IkReal x14958=(gconst52*sj3);
IkReal x14959=(cj2*x14953);
IkReal x14960=((1.0)*x14951);
IkReal x14961=((1.0)*x14950);
IkReal x14962=(gconst52*x14950);
IkReal x14963=(cj3*x14950);
evalcond[0]=((((-1.0)*r22*x14960))+((r21*x14962))+(((-1.0)*gconst53*r20*x14961)));
evalcond[1]=((((-1.0)*r12*x14960))+((r11*x14962))+(((-1.0)*gconst53*r10*x14961)));
evalcond[2]=((-1.0)+((r01*x14962))+(((-1.0)*r02*x14960))+(((-1.0)*gconst53*r00*x14961)));
evalcond[3]=(((r01*x14955))+((r01*x14951*x14954))+((r00*x14958))+(((-1.0)*r00*x14956*x14960))+((r02*x14963)));
evalcond[4]=(((r01*x14956))+(((-1.0)*r02*sj3*x14961))+(((-1.0)*r01*x14958*x14960))+((r00*x14954))+((r00*x14951*x14955)));
evalcond[5]=(((r22*x14963))+x14957+((cj1*sj2))+((r21*x14951*x14954))+(((-1.0)*r20*x14956*x14960))+((r21*x14955))+((r20*x14958)));
evalcond[6]=((((-1.0)*r10*x14956*x14960))+x14952+((r12*x14963))+((r10*x14958))+(((-1.0)*x14959))+((r11*x14951*x14954))+((r11*x14955)));
evalcond[7]=(x14952+(((-1.0)*r22*sj3*x14961))+((r20*x14951*x14955))+(((-1.0)*x14959))+(((-1.0)*r21*x14958*x14960))+((r21*x14956))+((r20*x14954)));
evalcond[8]=((((-1.0)*sj2*x14953))+((r10*x14954))+((r10*x14951*x14955))+(((-1.0)*r11*x14958*x14960))+(((-1.0)*x14957))+(((-1.0)*r12*sj3*x14961))+((r11*x14956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14964 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14964.valid){
continue;
}
CheckValue<IkReal> x14965=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14964.value)+(((1.5707963267949)*(x14965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14966=IKsin(j4);
IkReal x14967=IKcos(j4);
IkReal x14968=(sj1*sj2);
IkReal x14969=((1.0)*cj1);
IkReal x14970=(cj3*gconst52);
IkReal x14971=(gconst53*sj3);
IkReal x14972=(cj3*gconst53);
IkReal x14973=(cj2*sj1);
IkReal x14974=(gconst52*sj3);
IkReal x14975=(cj2*x14969);
IkReal x14976=((1.0)*x14967);
IkReal x14977=((1.0)*x14966);
IkReal x14978=(gconst52*x14966);
IkReal x14979=(cj3*x14966);
evalcond[0]=((((-1.0)*gconst53*r20*x14977))+(((-1.0)*r22*x14976))+((r21*x14978)));
evalcond[1]=((((-1.0)*r12*x14976))+((r11*x14978))+(((-1.0)*gconst53*r10*x14977)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14977))+((r01*x14978))+(((-1.0)*r02*x14976)));
evalcond[3]=(((r01*x14967*x14970))+((r02*x14979))+(((-1.0)*r00*x14972*x14976))+((r01*x14971))+((r00*x14974)));
evalcond[4]=((((-1.0)*r01*x14974*x14976))+(((-1.0)*r02*sj3*x14977))+((r00*x14967*x14971))+((r01*x14972))+((r00*x14970)));
evalcond[5]=(((r22*x14979))+x14973+((cj1*sj2))+((r21*x14967*x14970))+(((-1.0)*r20*x14972*x14976))+((r20*x14974))+((r21*x14971)));
evalcond[6]=((((-1.0)*r10*x14972*x14976))+x14968+((r12*x14979))+(((-1.0)*x14975))+((r11*x14971))+((r11*x14967*x14970))+((r10*x14974)));
evalcond[7]=((((-1.0)*r22*sj3*x14977))+x14968+(((-1.0)*r21*x14974*x14976))+(((-1.0)*x14975))+((r20*x14967*x14971))+((r20*x14970))+((r21*x14972)));
evalcond[8]=((((-1.0)*r11*x14974*x14976))+((r10*x14967*x14971))+(((-1.0)*sj2*x14969))+(((-1.0)*x14973))+((r11*x14972))+(((-1.0)*r12*sj3*x14977))+((r10*x14970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14980=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14980);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14980);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14981=(r01*sj5);
IkReal x14982=((1.0)*cj5*r00);
j4eval[0]=(x14981+(((-1.0)*x14982)));
j4eval[1]=((((-1.0)*cj3*x14982))+((cj3*x14981)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14983=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14983);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14983);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14984=(cj5*r00);
IkReal x14985=(r01*sj5);
j4eval[0]=(x14985+(((-1.0)*x14984)));
j4eval[1]=(((sj3*x14984))+(((-1.0)*sj3*x14985)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14986=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14986);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14986);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14987=((1.0)*r00);
CheckValue<IkReal> x14988=IKPowWithIntegerCheck(cj3,-1);
if(!x14988.valid){
continue;
}
CheckValue<IkReal> x14989=IKPowWithIntegerCheck(r22,-1);
if(!x14989.valid){
continue;
}
CheckValue<IkReal> x14990=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14987))),-1);
if(!x14990.valid){
continue;
}
if( IKabs(((x14988.value)*(x14989.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14990.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14987)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14988.value)*(x14989.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14990.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14987))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14988.value)*(x14989.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14990.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14987))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14991=IKsin(j4);
IkReal x14992=IKcos(j4);
IkReal x14993=(sj1*sj2);
IkReal x14994=(cj5*sj3);
IkReal x14995=(r11*sj5);
IkReal x14996=(cj3*cj5);
IkReal x14997=((1.0)*cj1);
IkReal x14998=(cj3*sj5);
IkReal x14999=(sj3*sj5);
IkReal x15000=(cj2*sj1);
IkReal x15001=(r01*sj5);
IkReal x15002=((1.0)*sj3);
IkReal x15003=(cj2*x14997);
IkReal x15004=(r10*x14992);
IkReal x15005=(r22*x14991);
IkReal x15006=(cj3*x14992);
IkReal x15007=((1.0)*cj5*x14991);
evalcond[0]=((-1.0)*r22*x14992);
evalcond[1]=(((cj1*sj2))+x15000+((cj3*x15005)));
evalcond[2]=((((-1.0)*r10*x15007))+((x14991*x14995)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15007))+((x14991*x15001)));
evalcond[4]=(x14993+(((-1.0)*x15002*x15005))+(((-1.0)*x15003)));
evalcond[5]=((((-1.0)*r00*x14992*x14996))+((r00*x14999))+((r01*x14994))+((r01*x14992*x14998)));
evalcond[6]=((((-1.0)*r01*x14992*x14999))+((r00*x14998))+((r00*x14992*x14994))+((r01*x14996)));
evalcond[7]=(x14993+(((-1.0)*x14996*x15004))+((r10*x14999))+((r11*x14994))+(((-1.0)*x15003))+((x14995*x15006)));
evalcond[8]=((((-1.0)*x15000))+((r10*x14998))+((r11*x14996))+((x14994*x15004))+(((-1.0)*sj2*x14997))+(((-1.0)*x14992*x14995*x15002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15008=((1.0)*cj3);
IkReal x15009=(cj5*r00);
IkReal x15010=(r01*sj5);
CheckValue<IkReal> x15011=IKPowWithIntegerCheck(((((-1.0)*x15009))+x15010),-1);
if(!x15011.valid){
continue;
}
CheckValue<IkReal> x15012=IKPowWithIntegerCheck((((sj3*x15009))+(((-1.0)*sj3*x15010))),-1);
if(!x15012.valid){
continue;
}
if( IKabs(x15011.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15012.value)*(((((-1.0)*cj5*r01*x15008))+(((-1.0)*r00*sj5*x15008)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15011.value)+IKsqr(((x15012.value)*(((((-1.0)*cj5*r01*x15008))+(((-1.0)*r00*sj5*x15008))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15011.value, ((x15012.value)*(((((-1.0)*cj5*r01*x15008))+(((-1.0)*r00*sj5*x15008))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15013=IKsin(j4);
IkReal x15014=IKcos(j4);
IkReal x15015=(sj1*sj2);
IkReal x15016=(cj5*sj3);
IkReal x15017=(r11*sj5);
IkReal x15018=(cj3*cj5);
IkReal x15019=((1.0)*cj1);
IkReal x15020=(cj3*sj5);
IkReal x15021=(sj3*sj5);
IkReal x15022=(cj2*sj1);
IkReal x15023=(r01*sj5);
IkReal x15024=((1.0)*sj3);
IkReal x15025=(cj2*x15019);
IkReal x15026=(r10*x15014);
IkReal x15027=(r22*x15013);
IkReal x15028=(cj3*x15014);
IkReal x15029=((1.0)*cj5*x15013);
evalcond[0]=((-1.0)*r22*x15014);
evalcond[1]=(((cj1*sj2))+x15022+((cj3*x15027)));
evalcond[2]=((((-1.0)*r10*x15029))+((x15013*x15017)));
evalcond[3]=((-1.0)+((x15013*x15023))+(((-1.0)*r00*x15029)));
evalcond[4]=((((-1.0)*x15024*x15027))+x15015+(((-1.0)*x15025)));
evalcond[5]=(((r00*x15021))+((r01*x15016))+((r01*x15014*x15020))+(((-1.0)*r00*x15014*x15018)));
evalcond[6]=(((r00*x15020))+(((-1.0)*r01*x15014*x15021))+((r00*x15014*x15016))+((r01*x15018)));
evalcond[7]=(((r10*x15021))+(((-1.0)*x15018*x15026))+x15015+(((-1.0)*x15025))+((r11*x15016))+((x15017*x15028)));
evalcond[8]=(((x15016*x15026))+(((-1.0)*x15022))+((r10*x15020))+((r11*x15018))+(((-1.0)*x15014*x15017*x15024))+(((-1.0)*sj2*x15019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15030=((1.0)*sj3);
IkReal x15031=(r01*sj5);
IkReal x15032=((1.0)*cj5*r00);
CheckValue<IkReal> x15033=IKPowWithIntegerCheck(((((-1.0)*x15032))+x15031),-1);
if(!x15033.valid){
continue;
}
CheckValue<IkReal> x15034=IKPowWithIntegerCheck((((cj3*x15031))+(((-1.0)*cj3*x15032))),-1);
if(!x15034.valid){
continue;
}
if( IKabs(x15033.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15034.value)*(((((-1.0)*r00*sj5*x15030))+(((-1.0)*cj5*r01*x15030)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15033.value)+IKsqr(((x15034.value)*(((((-1.0)*r00*sj5*x15030))+(((-1.0)*cj5*r01*x15030))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15033.value, ((x15034.value)*(((((-1.0)*r00*sj5*x15030))+(((-1.0)*cj5*r01*x15030))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15035=IKsin(j4);
IkReal x15036=IKcos(j4);
IkReal x15037=(sj1*sj2);
IkReal x15038=(cj5*sj3);
IkReal x15039=(r11*sj5);
IkReal x15040=(cj3*cj5);
IkReal x15041=((1.0)*cj1);
IkReal x15042=(cj3*sj5);
IkReal x15043=(sj3*sj5);
IkReal x15044=(cj2*sj1);
IkReal x15045=(r01*sj5);
IkReal x15046=((1.0)*sj3);
IkReal x15047=(cj2*x15041);
IkReal x15048=(r10*x15036);
IkReal x15049=(r22*x15035);
IkReal x15050=(cj3*x15036);
IkReal x15051=((1.0)*cj5*x15035);
evalcond[0]=((-1.0)*r22*x15036);
evalcond[1]=(((cj3*x15049))+((cj1*sj2))+x15044);
evalcond[2]=((((-1.0)*r10*x15051))+((x15035*x15039)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15051))+((x15035*x15045)));
evalcond[4]=((((-1.0)*x15047))+x15037+(((-1.0)*x15046*x15049)));
evalcond[5]=(((r01*x15038))+((r00*x15043))+(((-1.0)*r00*x15036*x15040))+((r01*x15036*x15042)));
evalcond[6]=(((r00*x15042))+((r01*x15040))+((r00*x15036*x15038))+(((-1.0)*r01*x15036*x15043)));
evalcond[7]=((((-1.0)*x15047))+x15037+(((-1.0)*x15040*x15048))+((r11*x15038))+((r10*x15043))+((x15039*x15050)));
evalcond[8]=(((x15038*x15048))+(((-1.0)*sj2*x15041))+((r11*x15040))+(((-1.0)*x15036*x15039*x15046))+(((-1.0)*x15044))+((r10*x15042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15052=cj5*cj5;
IkReal x15053=(cj3*r20);
IkReal x15054=(r21*sj3);
IkReal x15055=((1.0)*cj3);
IkReal x15056=(r01*r21);
IkReal x15057=(r01*sj3);
IkReal x15058=(r00*sj5);
IkReal x15059=(cj5*r01*sj5);
IkReal x15060=((1.0)*x15052);
CheckValue<IkReal> x15061=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15055*x15056))+((x15053*x15059))+((cj3*cj5*r21*x15058))+(((-1.0)*r02*r22*x15055))+(((-1.0)*r00*x15053*x15060))+((cj3*x15052*x15056)))),-1);
if(!x15061.valid){
continue;
}
CheckValue<IkReal> x15062 = IKatan2WithCheck(IkReal((((r22*sj3*x15058))+((cj5*r22*x15057)))),IkReal(((((-1.0)*r00*x15054*x15060))+(((-1.0)*cj5*r20*sj3*x15058))+(((-1.0)*r20*x15057*x15060))+((x15054*x15059))+((r00*x15054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15061.value)))+(x15062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15063=IKsin(j4);
IkReal x15064=IKcos(j4);
IkReal x15065=(sj1*sj2);
IkReal x15066=(r11*sj5);
IkReal x15067=(cj5*r10);
IkReal x15068=(cj5*r01);
IkReal x15069=(cj5*r00);
IkReal x15070=((1.0)*cj1);
IkReal x15071=(cj3*sj5);
IkReal x15072=(r21*sj5);
IkReal x15073=(cj5*sj3);
IkReal x15074=(sj3*sj5);
IkReal x15075=(cj2*sj1);
IkReal x15076=(r01*sj5);
IkReal x15077=(cj3*cj5);
IkReal x15078=(cj5*r20);
IkReal x15079=(cj2*x15070);
IkReal x15080=((1.0)*x15064);
IkReal x15081=((1.0)*x15063);
IkReal x15082=(cj3*x15064);
IkReal x15083=(sj3*x15064);
IkReal x15084=(cj3*x15063);
evalcond[0]=((((-1.0)*r22*x15080))+((x15063*x15072))+(((-1.0)*x15078*x15081)));
evalcond[1]=((((-1.0)*r12*x15080))+(((-1.0)*x15067*x15081))+((x15063*x15066)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15080))+((x15063*x15076))+(((-1.0)*x15069*x15081)));
evalcond[3]=(((sj3*x15068))+((r02*x15084))+((r00*x15074))+(((-1.0)*cj3*x15069*x15080))+((r01*x15064*x15071)));
evalcond[4]=(((r00*x15071))+(((-1.0)*r02*sj3*x15081))+((cj3*x15068))+(((-1.0)*r01*x15074*x15080))+((x15069*x15083)));
evalcond[5]=((((-1.0)*r20*x15077*x15080))+((cj1*sj2))+((r22*x15084))+x15075+((r20*x15074))+((r21*x15073))+((r21*x15064*x15071)));
evalcond[6]=((((-1.0)*x15079))+((r12*x15084))+(((-1.0)*cj3*x15067*x15080))+((r11*x15073))+x15065+((r10*x15074))+((x15066*x15082)));
evalcond[7]=((((-1.0)*x15079))+(((-1.0)*sj3*x15072*x15080))+((r20*x15064*x15073))+x15065+((r20*x15071))+((r21*x15077))+(((-1.0)*r22*sj3*x15081)));
evalcond[8]=((((-1.0)*sj3*x15066*x15080))+(((-1.0)*sj2*x15070))+((r11*x15077))+(((-1.0)*x15075))+((r10*x15071))+(((-1.0)*r12*sj3*x15081))+((x15067*x15083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15085=((1.0)*cj5);
CheckValue<IkReal> x15086 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15086.valid){
continue;
}
CheckValue<IkReal> x15087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15085)))),-1);
if(!x15087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15086.value)+(((1.5707963267949)*(x15087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15088=IKsin(j4);
IkReal x15089=IKcos(j4);
IkReal x15090=(sj1*sj2);
IkReal x15091=(r11*sj5);
IkReal x15092=(cj5*r10);
IkReal x15093=(cj5*r01);
IkReal x15094=(cj5*r00);
IkReal x15095=((1.0)*cj1);
IkReal x15096=(cj3*sj5);
IkReal x15097=(r21*sj5);
IkReal x15098=(cj5*sj3);
IkReal x15099=(sj3*sj5);
IkReal x15100=(cj2*sj1);
IkReal x15101=(r01*sj5);
IkReal x15102=(cj3*cj5);
IkReal x15103=(cj5*r20);
IkReal x15104=(cj2*x15095);
IkReal x15105=((1.0)*x15089);
IkReal x15106=((1.0)*x15088);
IkReal x15107=(cj3*x15089);
IkReal x15108=(sj3*x15089);
IkReal x15109=(cj3*x15088);
evalcond[0]=((((-1.0)*r22*x15105))+((x15088*x15097))+(((-1.0)*x15103*x15106)));
evalcond[1]=((((-1.0)*r12*x15105))+(((-1.0)*x15092*x15106))+((x15088*x15091)));
evalcond[2]=((-1.0)+(((-1.0)*x15094*x15106))+((x15088*x15101))+(((-1.0)*r02*x15105)));
evalcond[3]=(((sj3*x15093))+((r01*x15089*x15096))+(((-1.0)*cj3*x15094*x15105))+((r00*x15099))+((r02*x15109)));
evalcond[4]=(((r00*x15096))+((x15094*x15108))+((cj3*x15093))+(((-1.0)*r02*sj3*x15106))+(((-1.0)*r01*x15099*x15105)));
evalcond[5]=(((r21*x15098))+((r22*x15109))+((r20*x15099))+((r21*x15089*x15096))+((cj1*sj2))+x15100+(((-1.0)*r20*x15102*x15105)));
evalcond[6]=(((r12*x15109))+((x15091*x15107))+x15090+((r11*x15098))+((r10*x15099))+(((-1.0)*x15104))+(((-1.0)*cj3*x15092*x15105)));
evalcond[7]=(((r20*x15089*x15098))+((r20*x15096))+((r21*x15102))+x15090+(((-1.0)*r22*sj3*x15106))+(((-1.0)*x15104))+(((-1.0)*sj3*x15097*x15105)));
evalcond[8]=((((-1.0)*sj3*x15091*x15105))+((r10*x15096))+((x15092*x15108))+(((-1.0)*r12*sj3*x15106))+(((-1.0)*x15100))+(((-1.0)*sj2*x15095))+((r11*x15102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15110=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15110.valid){
continue;
}
CheckValue<IkReal> x15111 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15110.value)))+(x15111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15112=IKsin(j4);
IkReal x15113=IKcos(j4);
IkReal x15114=(sj1*sj2);
IkReal x15115=(r11*sj5);
IkReal x15116=(cj5*r10);
IkReal x15117=(cj5*r01);
IkReal x15118=(cj5*r00);
IkReal x15119=((1.0)*cj1);
IkReal x15120=(cj3*sj5);
IkReal x15121=(r21*sj5);
IkReal x15122=(cj5*sj3);
IkReal x15123=(sj3*sj5);
IkReal x15124=(cj2*sj1);
IkReal x15125=(r01*sj5);
IkReal x15126=(cj3*cj5);
IkReal x15127=(cj5*r20);
IkReal x15128=(cj2*x15119);
IkReal x15129=((1.0)*x15113);
IkReal x15130=((1.0)*x15112);
IkReal x15131=(cj3*x15113);
IkReal x15132=(sj3*x15113);
IkReal x15133=(cj3*x15112);
evalcond[0]=((((-1.0)*x15127*x15130))+((x15112*x15121))+(((-1.0)*r22*x15129)));
evalcond[1]=(((x15112*x15115))+(((-1.0)*r12*x15129))+(((-1.0)*x15116*x15130)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15129))+((x15112*x15125))+(((-1.0)*x15118*x15130)));
evalcond[3]=(((r00*x15123))+((sj3*x15117))+((r01*x15113*x15120))+((r02*x15133))+(((-1.0)*cj3*x15118*x15129)));
evalcond[4]=((((-1.0)*r02*sj3*x15130))+((r00*x15120))+(((-1.0)*r01*x15123*x15129))+((x15118*x15132))+((cj3*x15117)));
evalcond[5]=(((r20*x15123))+((r21*x15122))+((cj1*sj2))+((r22*x15133))+(((-1.0)*r20*x15126*x15129))+x15124+((r21*x15113*x15120)));
evalcond[6]=((((-1.0)*x15128))+((x15115*x15131))+x15114+((r12*x15133))+((r10*x15123))+((r11*x15122))+(((-1.0)*cj3*x15116*x15129)));
evalcond[7]=(((r20*x15120))+((r21*x15126))+(((-1.0)*x15128))+(((-1.0)*r22*sj3*x15130))+x15114+((r20*x15113*x15122))+(((-1.0)*sj3*x15121*x15129)));
evalcond[8]=((((-1.0)*sj2*x15119))+(((-1.0)*r12*sj3*x15130))+(((-1.0)*sj3*x15115*x15129))+(((-1.0)*x15124))+((x15116*x15132))+((r10*x15120))+((r11*x15126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15134=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15134;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15135=((1.0)*cj5);
IkReal x15136=((((-1.0)*r21*x15135))+(((-1.0)*r20*sj5)));
j4eval[0]=x15136;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15135))+((r11*sj5))))));
j4eval[2]=IKsign(x15136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15137=cj5*cj5;
IkReal x15138=(cj3*r01);
IkReal x15139=(cj5*sj5);
IkReal x15140=((1.0)*cj3);
IkReal x15141=(((r20*x15138*x15139))+(((-1.0)*r00*r20*x15137*x15140))+(((-1.0)*r02*r22*x15140))+((cj3*r00*r21*x15139))+(((-1.0)*r21*x15138))+((r21*x15137*x15138)));
j4eval[0]=x15141;
j4eval[1]=IKsign(x15141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15142=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15142;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15143=((1.0)*cj5);
IkReal x15144=((((-1.0)*r21*x15143))+(((-1.0)*r20*sj5)));
j4eval[0]=x15144;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15143))+((r11*sj5))))));
j4eval[2]=IKsign(x15144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15145=cj5*cj5;
IkReal x15146=r01*r01;
IkReal x15147=(cj5*r00);
IkReal x15148=(r01*sj5);
IkReal x15149=(x15146+(((-1.0)*x15145*x15146))+(r02*r02)+(((-2.0)*x15147*x15148))+((x15145*(r00*r00))));
j4eval[0]=x15149;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x15148))+x15147))));
j4eval[2]=IKsign(x15149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15150=cj5*cj5;
IkReal x15151=r01*r01;
IkReal x15152=(r01*sj5);
IkReal x15153=(cj5*r00);
CheckValue<IkReal> x15154 = IKatan2WithCheck(IkReal((x15153+(((-1.0)*x15152)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15154.valid){
continue;
}
CheckValue<IkReal> x15155=IKPowWithIntegerCheck(IKsign((((x15150*(r00*r00)))+(((-2.0)*x15152*x15153))+(((-1.0)*x15150*x15151))+x15151+(r02*r02))),-1);
if(!x15155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15154.value)+(((1.5707963267949)*(x15155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15156=IKsin(j4);
IkReal x15157=IKcos(j4);
IkReal x15158=(cj5*r10);
IkReal x15159=(r01*sj5);
IkReal x15160=(cj5*r00);
IkReal x15161=(cj5*r20);
IkReal x15162=((1.0)*x15157);
IkReal x15163=((1.0)*x15156);
IkReal x15164=(sj5*x15156);
evalcond[0]=(((r21*x15164))+(((-1.0)*r22*x15162))+(((-1.0)*x15161*x15163)));
evalcond[1]=(((r11*x15164))+(((-1.0)*r12*x15162))+(((-1.0)*x15158*x15163)));
evalcond[2]=((((-1.0)*x15159*x15162))+((x15157*x15160))+(((-1.0)*r02*x15163)));
evalcond[3]=((1.0)+(((-1.0)*x15160*x15163))+(((-1.0)*r02*x15162))+((x15156*x15159)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15162))+((x15157*x15158))+(((-1.0)*r12*x15163)));
evalcond[5]=((((-1.0)*r21*sj5*x15162))+((x15157*x15161))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15165=((1.0)*cj5);
CheckValue<IkReal> x15166 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15166.valid){
continue;
}
CheckValue<IkReal> x15167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15165))+(((-1.0)*r20*sj5)))),-1);
if(!x15167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15166.value)+(((1.5707963267949)*(x15167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15168=IKsin(j4);
IkReal x15169=IKcos(j4);
IkReal x15170=(cj5*r10);
IkReal x15171=(r01*sj5);
IkReal x15172=(cj5*r00);
IkReal x15173=(cj5*r20);
IkReal x15174=((1.0)*x15169);
IkReal x15175=((1.0)*x15168);
IkReal x15176=(sj5*x15168);
evalcond[0]=((((-1.0)*x15173*x15175))+((r21*x15176))+(((-1.0)*r22*x15174)));
evalcond[1]=(((r11*x15176))+(((-1.0)*x15170*x15175))+(((-1.0)*r12*x15174)));
evalcond[2]=(((x15169*x15172))+(((-1.0)*x15171*x15174))+(((-1.0)*r02*x15175)));
evalcond[3]=((1.0)+((x15168*x15171))+(((-1.0)*r02*x15174))+(((-1.0)*x15172*x15175)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15169*x15170))+(((-1.0)*r11*sj5*x15174))+(((-1.0)*r12*x15175)));
evalcond[5]=((((-1.0)*r21*sj5*x15174))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15169*x15173))+(((-1.0)*r22*x15175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15177 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15177.valid){
continue;
}
CheckValue<IkReal> x15178=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15177.value)+(((1.5707963267949)*(x15178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15179=IKsin(j4);
IkReal x15180=IKcos(j4);
IkReal x15181=(cj5*r10);
IkReal x15182=(r01*sj5);
IkReal x15183=(cj5*r00);
IkReal x15184=(cj5*r20);
IkReal x15185=((1.0)*x15180);
IkReal x15186=((1.0)*x15179);
IkReal x15187=(sj5*x15179);
evalcond[0]=((((-1.0)*x15184*x15186))+((r21*x15187))+(((-1.0)*r22*x15185)));
evalcond[1]=(((r11*x15187))+(((-1.0)*r12*x15185))+(((-1.0)*x15181*x15186)));
evalcond[2]=((((-1.0)*r02*x15186))+(((-1.0)*x15182*x15185))+((x15180*x15183)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15185))+((x15179*x15182))+(((-1.0)*x15183*x15186)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15185))+((cj1*sj2))+(((-1.0)*r12*x15186))+((x15180*x15181)));
evalcond[5]=((((-1.0)*r21*sj5*x15185))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15186))+((x15180*x15184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15188=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15188;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15189=((1.0)*cj5);
IkReal x15190=((((-1.0)*r21*x15189))+(((-1.0)*r20*sj5)));
j4eval[0]=x15190;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15189))))));
j4eval[2]=IKsign(x15190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15191=cj5*cj5;
IkReal x15192=r01*r01;
IkReal x15193=(r01*sj5);
IkReal x15194=(cj5*r00);
IkReal x15195=((((-1.0)*(r02*r02)))+(((2.0)*x15193*x15194))+(((-1.0)*x15192))+(((-1.0)*x15191*(r00*r00)))+((x15191*x15192)));
j4eval[0]=x15195;
j4eval[1]=IKsign(x15195);
j4eval[2]=((IKabs(r02))+(IKabs((x15193+(((-1.0)*x15194))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15196=cj5*cj5;
IkReal x15197=r01*r01;
IkReal x15198=(r01*sj5);
IkReal x15199=(cj5*r00);
CheckValue<IkReal> x15200=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x15196*(r00*r00)))+(((2.0)*x15198*x15199))+(((-1.0)*x15197))+((x15196*x15197)))),-1);
if(!x15200.valid){
continue;
}
CheckValue<IkReal> x15201 = IKatan2WithCheck(IkReal((x15198+(((-1.0)*x15199)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15200.value)))+(x15201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15202=IKcos(j4);
IkReal x15203=IKsin(j4);
IkReal x15204=(cj5*r00);
IkReal x15205=(cj5*r10);
IkReal x15206=(r21*sj5);
IkReal x15207=(cj5*r20);
IkReal x15208=((1.0)*x15202);
IkReal x15209=((1.0)*x15203);
IkReal x15210=(sj5*x15203);
IkReal x15211=(sj5*x15202);
evalcond[0]=(((r01*x15211))+(((-1.0)*x15204*x15208))+((r02*x15203)));
evalcond[1]=(((x15203*x15206))+(((-1.0)*r22*x15208))+(((-1.0)*x15207*x15209)));
evalcond[2]=(((r11*x15210))+(((-1.0)*r12*x15208))+(((-1.0)*x15205*x15209)));
evalcond[3]=((1.0)+((r01*x15210))+(((-1.0)*x15204*x15209))+(((-1.0)*r02*x15208)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15211))+((r12*x15203))+(((-1.0)*x15205*x15208)));
evalcond[5]=(((x15202*x15206))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15203))+(((-1.0)*x15207*x15208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15212=((1.0)*cj5);
CheckValue<IkReal> x15213 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15213.valid){
continue;
}
CheckValue<IkReal> x15214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15212))+(((-1.0)*r20*sj5)))),-1);
if(!x15214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15213.value)+(((1.5707963267949)*(x15214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15215=IKcos(j4);
IkReal x15216=IKsin(j4);
IkReal x15217=(cj5*r00);
IkReal x15218=(cj5*r10);
IkReal x15219=(r21*sj5);
IkReal x15220=(cj5*r20);
IkReal x15221=((1.0)*x15215);
IkReal x15222=((1.0)*x15216);
IkReal x15223=(sj5*x15216);
IkReal x15224=(sj5*x15215);
evalcond[0]=((((-1.0)*x15217*x15221))+((r02*x15216))+((r01*x15224)));
evalcond[1]=((((-1.0)*x15220*x15222))+((x15216*x15219))+(((-1.0)*r22*x15221)));
evalcond[2]=((((-1.0)*r12*x15221))+(((-1.0)*x15218*x15222))+((r11*x15223)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15221))+(((-1.0)*x15217*x15222))+((r01*x15223)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15218*x15221))+((cj1*sj2))+((r12*x15216))+((r11*x15224)));
evalcond[5]=((((-1.0)*x15220*x15221))+((x15215*x15219))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15225 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15225.valid){
continue;
}
CheckValue<IkReal> x15226=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15225.value)+(((1.5707963267949)*(x15226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15227=IKcos(j4);
IkReal x15228=IKsin(j4);
IkReal x15229=(cj5*r00);
IkReal x15230=(cj5*r10);
IkReal x15231=(r21*sj5);
IkReal x15232=(cj5*r20);
IkReal x15233=((1.0)*x15227);
IkReal x15234=((1.0)*x15228);
IkReal x15235=(sj5*x15228);
IkReal x15236=(sj5*x15227);
evalcond[0]=(((r01*x15236))+((r02*x15228))+(((-1.0)*x15229*x15233)));
evalcond[1]=((((-1.0)*x15232*x15234))+((x15228*x15231))+(((-1.0)*r22*x15233)));
evalcond[2]=((((-1.0)*x15230*x15234))+(((-1.0)*r12*x15233))+((r11*x15235)));
evalcond[3]=((1.0)+((r01*x15235))+(((-1.0)*r02*x15233))+(((-1.0)*x15229*x15234)));
evalcond[4]=(((r12*x15228))+((cj2*sj1))+(((-1.0)*x15230*x15233))+((cj1*sj2))+((r11*x15236)));
evalcond[5]=((((-1.0)*x15232*x15233))+((r22*x15228))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15227*x15231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15238 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15238)==0){
continue;
}
IkReal x15237=pow(x15238,-0.5);
CheckValue<IkReal> x15239 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15239.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15239.value));
IkReal gconst61=((-1.0)*r11*x15237);
IkReal gconst62=(r10*x15237);
CheckValue<IkReal> x15240 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15240.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15240.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15243 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15243.valid){
continue;
}
IkReal x15241=((-1.0)*(x15243.value));
IkReal x15242=x15237;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15241;
IkReal gconst60=x15241;
IkReal gconst61=((-1.0)*r11*x15242);
IkReal gconst62=(r10*x15242);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15246 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15246.valid){
continue;
}
IkReal x15244=((-1.0)*(x15246.value));
IkReal x15245=x15237;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15244;
IkReal gconst60=x15244;
IkReal gconst61=((-1.0)*r11*x15245);
IkReal gconst62=(r10*x15245);
CheckValue<IkReal> x15254=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15254.valid){
continue;
}
IkReal x15247=x15254.value;
IkReal x15248=(sj3*x15247);
IkReal x15249=(r20*x15248);
IkReal x15250=(r00*x15248);
IkReal x15251=(r01*x15248);
IkReal x15252=(r21*x15248);
IkReal x15253=(r10*r11*x15248);
j4eval[0]=IKsign((((r00*x15249*(r10*r10)))+((r10*r11*r21*x15250))+((r01*r10*r11*x15249))+((r02*r22*sj3))+((r21*x15251*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15255=gconst61*gconst61;
IkReal x15256=gconst62*gconst62;
IkReal x15257=(cj3*r01);
IkReal x15258=(r22*sj3);
IkReal x15259=(gconst61*r00);
IkReal x15260=((1.0)*cj3);
IkReal x15261=(gconst62*r01);
IkReal x15262=((1.0)*sj3);
IkReal x15263=(gconst61*gconst62*r20);
IkReal x15264=(r21*x15255);
IkReal x15265=(r20*x15256);
CheckValue<IkReal> x15266=IKPowWithIntegerCheck(IKsign((((x15257*x15263))+((cj3*gconst62*r21*x15259))+(((-1.0)*r00*x15260*x15265))+(((-1.0)*r02*r22*x15260))+(((-1.0)*x15257*x15264)))),-1);
if(!x15266.valid){
continue;
}
CheckValue<IkReal> x15267 = IKatan2WithCheck(IkReal((((x15258*x15259))+((x15258*x15261)))),IkReal((((r00*sj3*x15264))+(((-1.0)*gconst62*r20*x15259*x15262))+((gconst61*r21*sj3*x15261))+(((-1.0)*r01*x15262*x15265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15266.value)))+(x15267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15268=IKsin(j4);
IkReal x15269=IKcos(j4);
IkReal x15270=(cj2*sj1);
IkReal x15271=(cj1*sj2);
IkReal x15272=(gconst61*sj3);
IkReal x15273=(cj3*gconst61);
IkReal x15274=(cj3*gconst62);
IkReal x15275=(sj1*sj2);
IkReal x15276=(gconst62*sj3);
IkReal x15277=(cj1*cj2);
IkReal x15278=((1.0)*x15269);
IkReal x15279=((1.0)*x15268);
IkReal x15280=(gconst61*x15268);
IkReal x15281=(cj3*x15268);
IkReal x15282=(x15270+x15271);
evalcond[0]=((((-1.0)*gconst62*r20*x15279))+(((-1.0)*r22*x15278))+((r21*x15280)));
evalcond[1]=((((-1.0)*r12*x15278))+(((-1.0)*gconst62*r10*x15279))+((r11*x15280)));
evalcond[2]=((1.0)+((r01*x15280))+(((-1.0)*gconst62*r00*x15279))+(((-1.0)*r02*x15278)));
evalcond[3]=(((r01*x15269*x15273))+((r02*x15281))+(((-1.0)*r00*x15274*x15278))+((r01*x15276))+((r00*x15272)));
evalcond[4]=((((-1.0)*r01*x15272*x15278))+((r00*x15269*x15276))+(((-1.0)*r02*sj3*x15279))+((r01*x15274))+((r00*x15273)));
evalcond[5]=(((r22*x15281))+x15282+((r21*x15269*x15273))+((r20*x15272))+((r21*x15276))+(((-1.0)*r20*x15274*x15278)));
evalcond[6]=(((r11*x15276))+((r11*x15269*x15273))+x15277+((r10*x15272))+(((-1.0)*x15275))+((r12*x15281))+(((-1.0)*r10*x15274*x15278)));
evalcond[7]=(((r11*x15274))+x15282+((r10*x15269*x15276))+(((-1.0)*r12*sj3*x15279))+((r10*x15273))+(((-1.0)*r11*x15272*x15278)));
evalcond[8]=(((r20*x15269*x15276))+x15275+(((-1.0)*r22*sj3*x15279))+(((-1.0)*r21*x15272*x15278))+((r20*x15273))+((r21*x15274))+(((-1.0)*x15277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15283=gconst61*gconst61;
IkReal x15284=gconst62*gconst62;
IkReal x15285=(cj3*r22);
IkReal x15286=(gconst62*r01);
IkReal x15287=(gconst61*r00);
IkReal x15288=((1.0)*r20);
IkReal x15289=(cj3*r21);
IkReal x15290=(r21*sj3);
CheckValue<IkReal> x15291=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*x15287*x15290))+(((-1.0)*gconst61*sj3*x15286*x15288))+((r00*r20*sj3*x15284))+((r01*x15283*x15290))+((r02*r22*sj3)))),-1);
if(!x15291.valid){
continue;
}
CheckValue<IkReal> x15292 = IKatan2WithCheck(IkReal((((x15285*x15286))+((x15285*x15287)))),IkReal(((((-1.0)*cj3*gconst62*x15287*x15288))+((gconst61*x15286*x15289))+(((-1.0)*cj3*r01*x15284*x15288))+((r00*x15283*x15289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15291.value)))+(x15292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15293=IKsin(j4);
IkReal x15294=IKcos(j4);
IkReal x15295=(cj2*sj1);
IkReal x15296=(cj1*sj2);
IkReal x15297=(gconst61*sj3);
IkReal x15298=(cj3*gconst61);
IkReal x15299=(cj3*gconst62);
IkReal x15300=(sj1*sj2);
IkReal x15301=(gconst62*sj3);
IkReal x15302=(cj1*cj2);
IkReal x15303=((1.0)*x15294);
IkReal x15304=((1.0)*x15293);
IkReal x15305=(gconst61*x15293);
IkReal x15306=(cj3*x15293);
IkReal x15307=(x15295+x15296);
evalcond[0]=((((-1.0)*gconst62*r20*x15304))+((r21*x15305))+(((-1.0)*r22*x15303)));
evalcond[1]=((((-1.0)*gconst62*r10*x15304))+(((-1.0)*r12*x15303))+((r11*x15305)));
evalcond[2]=((1.0)+((r01*x15305))+(((-1.0)*r02*x15303))+(((-1.0)*gconst62*r00*x15304)));
evalcond[3]=((((-1.0)*r00*x15299*x15303))+((r02*x15306))+((r01*x15301))+((r01*x15294*x15298))+((r00*x15297)));
evalcond[4]=((((-1.0)*r02*sj3*x15304))+(((-1.0)*r01*x15297*x15303))+((r00*x15294*x15301))+((r01*x15299))+((r00*x15298)));
evalcond[5]=(((r20*x15297))+(((-1.0)*r20*x15299*x15303))+((r21*x15301))+x15307+((r21*x15294*x15298))+((r22*x15306)));
evalcond[6]=(((r10*x15297))+(((-1.0)*r10*x15299*x15303))+(((-1.0)*x15300))+x15302+((r11*x15294*x15298))+((r12*x15306))+((r11*x15301)));
evalcond[7]=(((r10*x15298))+((r11*x15299))+(((-1.0)*r12*sj3*x15304))+x15307+(((-1.0)*r11*x15297*x15303))+((r10*x15294*x15301)));
evalcond[8]=(((r20*x15298))+(((-1.0)*r21*x15297*x15303))+(((-1.0)*x15302))+x15300+((r21*x15299))+((r20*x15294*x15301))+(((-1.0)*r22*sj3*x15304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15308=((1.0)*gconst62);
CheckValue<IkReal> x15309=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15308)))),-1);
if(!x15309.valid){
continue;
}
CheckValue<IkReal> x15310 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15308))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15309.value)))+(x15310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15311=IKsin(j4);
IkReal x15312=IKcos(j4);
IkReal x15313=(cj2*sj1);
IkReal x15314=(cj1*sj2);
IkReal x15315=(gconst61*sj3);
IkReal x15316=(cj3*gconst61);
IkReal x15317=(cj3*gconst62);
IkReal x15318=(sj1*sj2);
IkReal x15319=(gconst62*sj3);
IkReal x15320=(cj1*cj2);
IkReal x15321=((1.0)*x15312);
IkReal x15322=((1.0)*x15311);
IkReal x15323=(gconst61*x15311);
IkReal x15324=(cj3*x15311);
IkReal x15325=(x15313+x15314);
evalcond[0]=((((-1.0)*gconst62*r20*x15322))+((r21*x15323))+(((-1.0)*r22*x15321)));
evalcond[1]=(((r11*x15323))+(((-1.0)*gconst62*r10*x15322))+(((-1.0)*r12*x15321)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15322))+((r01*x15323))+(((-1.0)*r02*x15321)));
evalcond[3]=(((r01*x15312*x15316))+((r01*x15319))+((r00*x15315))+(((-1.0)*r00*x15317*x15321))+((r02*x15324)));
evalcond[4]=(((r01*x15317))+((r00*x15316))+((r00*x15312*x15319))+(((-1.0)*r02*sj3*x15322))+(((-1.0)*r01*x15315*x15321)));
evalcond[5]=((((-1.0)*r20*x15317*x15321))+((r22*x15324))+x15325+((r21*x15312*x15316))+((r21*x15319))+((r20*x15315)));
evalcond[6]=(((r11*x15312*x15316))+((r11*x15319))+(((-1.0)*x15318))+((r12*x15324))+x15320+((r10*x15315))+(((-1.0)*r10*x15317*x15321)));
evalcond[7]=(((r10*x15312*x15319))+((r11*x15317))+(((-1.0)*r11*x15315*x15321))+x15325+(((-1.0)*r12*sj3*x15322))+((r10*x15316)));
evalcond[8]=((((-1.0)*x15320))+x15318+(((-1.0)*r21*x15315*x15321))+((r21*x15317))+(((-1.0)*r22*sj3*x15322))+((r20*x15316))+((r20*x15312*x15319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15327 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15327)==0){
continue;
}
IkReal x15326=pow(x15327,-0.5);
CheckValue<IkReal> x15328 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15328.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15328.value))));
IkReal gconst64=((1.0)*r11*x15326);
IkReal gconst65=((-1.0)*r10*x15326);
CheckValue<IkReal> x15329 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15329.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15329.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15332 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15332.valid){
continue;
}
IkReal x15330=((1.0)*(x15332.value));
IkReal x15331=x15326;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15330)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15330)));
IkReal gconst64=((1.0)*r11*x15331);
IkReal gconst65=((-1.0)*r10*x15331);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15333=gconst64*gconst64;
IkReal x15334=gconst65*gconst65;
IkReal x15335=(gconst65*r01);
IkReal x15336=(cj3*r22);
IkReal x15337=(gconst64*r00);
IkReal x15338=(cj3*r21);
IkReal x15339=((1.0)*gconst64*sj3);
IkReal x15340=((1.0)*cj3*r20);
CheckValue<IkReal> x15341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15335*x15339))+((r01*r21*sj3*x15333))+((r00*r20*sj3*x15334))+(((-1.0)*gconst65*r21*sj3*x15337))+((r02*r22*sj3)))),-1);
if(!x15341.valid){
continue;
}
CheckValue<IkReal> x15342 = IKatan2WithCheck(IkReal((((x15336*x15337))+((x15335*x15336)))),IkReal((((gconst64*x15335*x15338))+((r00*x15333*x15338))+(((-1.0)*r01*x15334*x15340))+(((-1.0)*gconst65*x15337*x15340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15341.value)))+(x15342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15343=IKsin(j4);
IkReal x15344=IKcos(j4);
IkReal x15345=(cj2*sj1);
IkReal x15346=(cj1*sj2);
IkReal x15347=(cj3*gconst64);
IkReal x15348=(gconst65*r21);
IkReal x15349=(sj1*sj2);
IkReal x15350=(gconst65*sj3);
IkReal x15351=(gconst64*sj3);
IkReal x15352=(cj3*gconst65);
IkReal x15353=(cj1*cj2);
IkReal x15354=((1.0)*x15344);
IkReal x15355=((1.0)*x15343);
IkReal x15356=(cj3*x15343);
IkReal x15357=(gconst64*x15343);
IkReal x15358=(x15346+x15345);
evalcond[0]=((((-1.0)*r22*x15354))+(((-1.0)*gconst65*r20*x15355))+((r21*x15357)));
evalcond[1]=((((-1.0)*r12*x15354))+((r11*x15357))+(((-1.0)*gconst65*r10*x15355)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15355))+(((-1.0)*r02*x15354))+((r01*x15357)));
evalcond[3]=(((r01*x15344*x15347))+((r02*x15356))+(((-1.0)*r00*x15352*x15354))+((r01*x15350))+((r00*x15351)));
evalcond[4]=(((r00*x15347))+(((-1.0)*r01*x15351*x15354))+((r00*x15344*x15350))+((r01*x15352))+(((-1.0)*r02*sj3*x15355)));
evalcond[5]=((((-1.0)*r20*x15352*x15354))+((r22*x15356))+x15358+((sj3*x15348))+((r20*x15351))+((r21*x15344*x15347)));
evalcond[6]=((((-1.0)*r10*x15352*x15354))+((r11*x15344*x15347))+((r10*x15351))+((r12*x15356))+x15353+((r11*x15350))+(((-1.0)*x15349)));
evalcond[7]=((((-1.0)*r12*sj3*x15355))+((r10*x15347))+x15358+(((-1.0)*r11*x15351*x15354))+((r11*x15352))+((r10*x15344*x15350)));
evalcond[8]=(((cj3*x15348))+(((-1.0)*r22*sj3*x15355))+((r20*x15344*x15350))+x15349+((r20*x15347))+(((-1.0)*r21*x15351*x15354))+(((-1.0)*x15353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15359=((1.0)*gconst65);
CheckValue<IkReal> x15360 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15359))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15360.valid){
continue;
}
CheckValue<IkReal> x15361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15359)))),-1);
if(!x15361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15360.value)+(((1.5707963267949)*(x15361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15362=IKsin(j4);
IkReal x15363=IKcos(j4);
IkReal x15364=(cj2*sj1);
IkReal x15365=(cj1*sj2);
IkReal x15366=(cj3*gconst64);
IkReal x15367=(gconst65*r21);
IkReal x15368=(sj1*sj2);
IkReal x15369=(gconst65*sj3);
IkReal x15370=(gconst64*sj3);
IkReal x15371=(cj3*gconst65);
IkReal x15372=(cj1*cj2);
IkReal x15373=((1.0)*x15363);
IkReal x15374=((1.0)*x15362);
IkReal x15375=(cj3*x15362);
IkReal x15376=(gconst64*x15362);
IkReal x15377=(x15364+x15365);
evalcond[0]=(((r21*x15376))+(((-1.0)*gconst65*r20*x15374))+(((-1.0)*r22*x15373)));
evalcond[1]=((((-1.0)*gconst65*r10*x15374))+(((-1.0)*r12*x15373))+((r11*x15376)));
evalcond[2]=((1.0)+((r01*x15376))+(((-1.0)*gconst65*r00*x15374))+(((-1.0)*r02*x15373)));
evalcond[3]=(((r02*x15375))+((r00*x15370))+(((-1.0)*r00*x15371*x15373))+((r01*x15363*x15366))+((r01*x15369)));
evalcond[4]=((((-1.0)*r02*sj3*x15374))+((r01*x15371))+((r00*x15363*x15369))+(((-1.0)*r01*x15370*x15373))+((r00*x15366)));
evalcond[5]=(((r20*x15370))+((r21*x15363*x15366))+x15377+(((-1.0)*r20*x15371*x15373))+((sj3*x15367))+((r22*x15375)));
evalcond[6]=(((r11*x15363*x15366))+(((-1.0)*r10*x15371*x15373))+x15372+((r11*x15369))+((r10*x15370))+(((-1.0)*x15368))+((r12*x15375)));
evalcond[7]=(((r10*x15366))+(((-1.0)*r12*sj3*x15374))+x15377+(((-1.0)*r11*x15370*x15373))+((r10*x15363*x15369))+((r11*x15371)));
evalcond[8]=(((r20*x15363*x15369))+(((-1.0)*r21*x15370*x15373))+((cj3*x15367))+(((-1.0)*x15372))+x15368+((r20*x15366))+(((-1.0)*r22*sj3*x15374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15378=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15378);
rxp0_2=(py*r00);
rxp1_0=(r21*x15378);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15379=(r01*sj5);
IkReal x15380=((1.0)*cj5*r00);
j4eval[0]=(x15379+(((-1.0)*x15380)));
j4eval[1]=(((cj3*x15379))+(((-1.0)*cj3*x15380)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15381=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15381);
rxp0_2=(py*r00);
rxp1_0=(r21*x15381);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15382=(cj5*r00);
IkReal x15383=(r01*sj5);
j4eval[0]=(x15383+(((-1.0)*x15382)));
j4eval[1]=((((-1.0)*sj3*x15383))+((sj3*x15382)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15384=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15384);
rxp0_2=(py*r00);
rxp1_0=(r21*x15384);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15385=((1.0)*r00);
CheckValue<IkReal> x15386=IKPowWithIntegerCheck(cj3,-1);
if(!x15386.valid){
continue;
}
CheckValue<IkReal> x15387=IKPowWithIntegerCheck(r12,-1);
if(!x15387.valid){
continue;
}
CheckValue<IkReal> x15388=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15385))),-1);
if(!x15388.valid){
continue;
}
if( IKabs(((x15386.value)*(x15387.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15388.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15385)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15386.value)*(x15387.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15388.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15385))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15386.value)*(x15387.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15388.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15385))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15389=IKsin(j4);
IkReal x15390=IKcos(j4);
IkReal x15391=(cj2*sj1);
IkReal x15392=(cj1*sj2);
IkReal x15393=(sj1*sj2);
IkReal x15394=(cj5*sj3);
IkReal x15395=(cj3*cj5);
IkReal x15396=(r21*sj5);
IkReal x15397=(cj1*cj2);
IkReal x15398=(r00*sj5);
IkReal x15399=(r01*sj5);
IkReal x15400=(r20*sj5);
IkReal x15401=((1.0)*x15389);
IkReal x15402=(r20*x15390);
IkReal x15403=(r00*x15390);
IkReal x15404=(cj3*x15390);
IkReal x15405=(x15391+x15392);
IkReal x15406=((1.0)*sj3*x15390);
evalcond[0]=((-1.0)*r12*x15390);
evalcond[1]=((((-1.0)*cj5*r20*x15401))+((x15389*x15396)));
evalcond[2]=(x15397+(((-1.0)*x15393))+((cj3*r12*x15389)));
evalcond[3]=(x15405+(((-1.0)*r12*sj3*x15401)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15401))+((x15389*x15399)));
evalcond[5]=((((-1.0)*x15395*x15403))+((x15399*x15404))+((sj3*x15398))+((r01*x15394)));
evalcond[6]=(((x15394*x15403))+((cj3*x15398))+((r01*x15395))+(((-1.0)*x15399*x15406)));
evalcond[7]=((((-1.0)*x15395*x15402))+((r21*x15394))+((sj3*x15400))+x15405+((x15396*x15404)));
evalcond[8]=(((x15394*x15402))+((r21*x15395))+(((-1.0)*x15396*x15406))+x15393+(((-1.0)*x15397))+((cj3*x15400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15407=((1.0)*r01);
IkReal x15408=(cj5*r00);
CheckValue<IkReal> x15409=IKPowWithIntegerCheck(((((-1.0)*x15408))+((r01*sj5))),-1);
if(!x15409.valid){
continue;
}
CheckValue<IkReal> x15410=IKPowWithIntegerCheck((((sj3*x15408))+(((-1.0)*sj3*sj5*x15407))),-1);
if(!x15410.valid){
continue;
}
if( IKabs(((-1.0)*(x15409.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15410.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15407)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15409.value)))+IKsqr(((x15410.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15407))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15409.value)), ((x15410.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15407))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15411=IKsin(j4);
IkReal x15412=IKcos(j4);
IkReal x15413=(cj2*sj1);
IkReal x15414=(cj1*sj2);
IkReal x15415=(sj1*sj2);
IkReal x15416=(cj5*sj3);
IkReal x15417=(cj3*cj5);
IkReal x15418=(r21*sj5);
IkReal x15419=(cj1*cj2);
IkReal x15420=(r00*sj5);
IkReal x15421=(r01*sj5);
IkReal x15422=(r20*sj5);
IkReal x15423=((1.0)*x15411);
IkReal x15424=(r20*x15412);
IkReal x15425=(r00*x15412);
IkReal x15426=(cj3*x15412);
IkReal x15427=(x15414+x15413);
IkReal x15428=((1.0)*sj3*x15412);
evalcond[0]=((-1.0)*r12*x15412);
evalcond[1]=(((x15411*x15418))+(((-1.0)*cj5*r20*x15423)));
evalcond[2]=((((-1.0)*x15415))+x15419+((cj3*r12*x15411)));
evalcond[3]=((((-1.0)*r12*sj3*x15423))+x15427);
evalcond[4]=((1.0)+((x15411*x15421))+(((-1.0)*cj5*r00*x15423)));
evalcond[5]=((((-1.0)*x15417*x15425))+((sj3*x15420))+((r01*x15416))+((x15421*x15426)));
evalcond[6]=((((-1.0)*x15421*x15428))+((r01*x15417))+((cj3*x15420))+((x15416*x15425)));
evalcond[7]=((((-1.0)*x15417*x15424))+((sj3*x15422))+((x15418*x15426))+x15427+((r21*x15416)));
evalcond[8]=((((-1.0)*x15419))+((cj3*x15422))+((x15416*x15424))+x15415+(((-1.0)*x15418*x15428))+((r21*x15417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15429=((1.0)*r00);
IkReal x15430=(r01*sj5);
CheckValue<IkReal> x15431=IKPowWithIntegerCheck(((((-1.0)*cj5*x15429))+x15430),-1);
if(!x15431.valid){
continue;
}
CheckValue<IkReal> x15432=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15429))+((cj3*x15430))),-1);
if(!x15432.valid){
continue;
}
if( IKabs(((-1.0)*(x15431.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15432.value)*(((((-1.0)*sj3*sj5*x15429))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15431.value)))+IKsqr(((x15432.value)*(((((-1.0)*sj3*sj5*x15429))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15431.value)), ((x15432.value)*(((((-1.0)*sj3*sj5*x15429))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15433=IKsin(j4);
IkReal x15434=IKcos(j4);
IkReal x15435=(cj2*sj1);
IkReal x15436=(cj1*sj2);
IkReal x15437=(sj1*sj2);
IkReal x15438=(cj5*sj3);
IkReal x15439=(cj3*cj5);
IkReal x15440=(r21*sj5);
IkReal x15441=(cj1*cj2);
IkReal x15442=(r00*sj5);
IkReal x15443=(r01*sj5);
IkReal x15444=(r20*sj5);
IkReal x15445=((1.0)*x15433);
IkReal x15446=(r20*x15434);
IkReal x15447=(r00*x15434);
IkReal x15448=(cj3*x15434);
IkReal x15449=(x15435+x15436);
IkReal x15450=((1.0)*sj3*x15434);
evalcond[0]=((-1.0)*r12*x15434);
evalcond[1]=(((x15433*x15440))+(((-1.0)*cj5*r20*x15445)));
evalcond[2]=(((cj3*r12*x15433))+(((-1.0)*x15437))+x15441);
evalcond[3]=(x15449+(((-1.0)*r12*sj3*x15445)));
evalcond[4]=((1.0)+((x15433*x15443))+(((-1.0)*cj5*r00*x15445)));
evalcond[5]=(((sj3*x15442))+(((-1.0)*x15439*x15447))+((x15443*x15448))+((r01*x15438)));
evalcond[6]=((((-1.0)*x15443*x15450))+((x15438*x15447))+((r01*x15439))+((cj3*x15442)));
evalcond[7]=(((sj3*x15444))+(((-1.0)*x15439*x15446))+((r21*x15438))+((x15440*x15448))+x15449);
evalcond[8]=(((r21*x15439))+(((-1.0)*x15440*x15450))+((x15438*x15446))+x15437+(((-1.0)*x15441))+((cj3*x15444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15451=cj5*cj5;
IkReal x15452=(cj3*r20);
IkReal x15453=(r21*sj3);
IkReal x15454=((1.0)*cj3);
IkReal x15455=(r01*r21);
IkReal x15456=(r01*sj3);
IkReal x15457=(r00*sj5);
IkReal x15458=(cj5*r01*sj5);
IkReal x15459=((1.0)*x15451);
CheckValue<IkReal> x15460 = IKatan2WithCheck(IkReal((((cj5*r22*x15456))+((r22*sj3*x15457)))),IkReal((((r00*x15453))+(((-1.0)*cj5*r20*sj3*x15457))+((x15453*x15458))+(((-1.0)*r20*x15456*x15459))+(((-1.0)*r00*x15453*x15459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15460.valid){
continue;
}
CheckValue<IkReal> x15461=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15454*x15455))+(((-1.0)*r00*x15452*x15459))+((cj3*cj5*r21*x15457))+(((-1.0)*r02*r22*x15454))+((x15452*x15458))+((cj3*x15451*x15455)))),-1);
if(!x15461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15460.value)+(((1.5707963267949)*(x15461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15462=IKsin(j4);
IkReal x15463=IKcos(j4);
IkReal x15464=(cj2*sj1);
IkReal x15465=(cj1*sj2);
IkReal x15466=(r11*sj5);
IkReal x15467=(cj5*r10);
IkReal x15468=(sj1*sj2);
IkReal x15469=(cj5*r01);
IkReal x15470=(cj5*r00);
IkReal x15471=(cj3*sj5);
IkReal x15472=(r21*sj5);
IkReal x15473=(cj1*cj2);
IkReal x15474=(cj5*sj3);
IkReal x15475=(sj3*sj5);
IkReal x15476=(r01*sj5);
IkReal x15477=(cj3*cj5);
IkReal x15478=(cj5*r20);
IkReal x15479=((1.0)*x15463);
IkReal x15480=((1.0)*x15462);
IkReal x15481=(cj3*x15463);
IkReal x15482=(sj3*x15463);
IkReal x15483=(cj3*x15462);
IkReal x15484=(x15465+x15464);
evalcond[0]=((((-1.0)*r22*x15479))+((x15462*x15472))+(((-1.0)*x15478*x15480)));
evalcond[1]=((((-1.0)*x15467*x15480))+((x15462*x15466))+(((-1.0)*r12*x15479)));
evalcond[2]=((1.0)+((x15462*x15476))+(((-1.0)*x15470*x15480))+(((-1.0)*r02*x15479)));
evalcond[3]=(((r01*x15463*x15471))+((r02*x15483))+((r00*x15475))+(((-1.0)*cj3*x15470*x15479))+((sj3*x15469)));
evalcond[4]=((((-1.0)*r01*x15475*x15479))+((x15470*x15482))+((r00*x15471))+((cj3*x15469))+(((-1.0)*r02*sj3*x15480)));
evalcond[5]=(((r21*x15463*x15471))+((r22*x15483))+((r21*x15474))+x15484+(((-1.0)*r20*x15477*x15479))+((r20*x15475)));
evalcond[6]=((((-1.0)*x15468))+((r12*x15483))+((x15466*x15481))+x15473+(((-1.0)*cj3*x15467*x15479))+((r11*x15474))+((r10*x15475)));
evalcond[7]=((((-1.0)*sj3*x15466*x15479))+((x15467*x15482))+(((-1.0)*r12*sj3*x15480))+x15484+((r11*x15477))+((r10*x15471)));
evalcond[8]=(((r20*x15463*x15474))+(((-1.0)*x15473))+(((-1.0)*r22*sj3*x15480))+((r21*x15477))+x15468+(((-1.0)*sj3*x15472*x15479))+((r20*x15471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15485=((1.0)*cj5);
CheckValue<IkReal> x15486 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15486.valid){
continue;
}
CheckValue<IkReal> x15487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15485))+(((-1.0)*r20*sj5)))),-1);
if(!x15487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15486.value)+(((1.5707963267949)*(x15487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15488=IKsin(j4);
IkReal x15489=IKcos(j4);
IkReal x15490=(cj2*sj1);
IkReal x15491=(cj1*sj2);
IkReal x15492=(r11*sj5);
IkReal x15493=(cj5*r10);
IkReal x15494=(sj1*sj2);
IkReal x15495=(cj5*r01);
IkReal x15496=(cj5*r00);
IkReal x15497=(cj3*sj5);
IkReal x15498=(r21*sj5);
IkReal x15499=(cj1*cj2);
IkReal x15500=(cj5*sj3);
IkReal x15501=(sj3*sj5);
IkReal x15502=(r01*sj5);
IkReal x15503=(cj3*cj5);
IkReal x15504=(cj5*r20);
IkReal x15505=((1.0)*x15489);
IkReal x15506=((1.0)*x15488);
IkReal x15507=(cj3*x15489);
IkReal x15508=(sj3*x15489);
IkReal x15509=(cj3*x15488);
IkReal x15510=(x15490+x15491);
evalcond[0]=((((-1.0)*r22*x15505))+(((-1.0)*x15504*x15506))+((x15488*x15498)));
evalcond[1]=((((-1.0)*x15493*x15506))+((x15488*x15492))+(((-1.0)*r12*x15505)));
evalcond[2]=((1.0)+(((-1.0)*x15496*x15506))+((x15488*x15502))+(((-1.0)*r02*x15505)));
evalcond[3]=((((-1.0)*cj3*x15496*x15505))+((r00*x15501))+((sj3*x15495))+((r02*x15509))+((r01*x15489*x15497)));
evalcond[4]=(((r00*x15497))+(((-1.0)*r02*sj3*x15506))+((cj3*x15495))+(((-1.0)*r01*x15501*x15505))+((x15496*x15508)));
evalcond[5]=(((r22*x15509))+(((-1.0)*r20*x15503*x15505))+((r21*x15489*x15497))+((r21*x15500))+x15510+((r20*x15501)));
evalcond[6]=(((r10*x15501))+((r11*x15500))+((r12*x15509))+x15499+((x15492*x15507))+(((-1.0)*cj3*x15493*x15505))+(((-1.0)*x15494)));
evalcond[7]=(((x15493*x15508))+((r10*x15497))+((r11*x15503))+(((-1.0)*r12*sj3*x15506))+(((-1.0)*sj3*x15492*x15505))+x15510);
evalcond[8]=((((-1.0)*r22*sj3*x15506))+(((-1.0)*sj3*x15498*x15505))+((r20*x15497))+((r20*x15489*x15500))+x15494+((r21*x15503))+(((-1.0)*x15499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15511 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15511.valid){
continue;
}
CheckValue<IkReal> x15512=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15511.value)+(((1.5707963267949)*(x15512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15513=IKsin(j4);
IkReal x15514=IKcos(j4);
IkReal x15515=(cj2*sj1);
IkReal x15516=(cj1*sj2);
IkReal x15517=(r11*sj5);
IkReal x15518=(cj5*r10);
IkReal x15519=(sj1*sj2);
IkReal x15520=(cj5*r01);
IkReal x15521=(cj5*r00);
IkReal x15522=(cj3*sj5);
IkReal x15523=(r21*sj5);
IkReal x15524=(cj1*cj2);
IkReal x15525=(cj5*sj3);
IkReal x15526=(sj3*sj5);
IkReal x15527=(r01*sj5);
IkReal x15528=(cj3*cj5);
IkReal x15529=(cj5*r20);
IkReal x15530=((1.0)*x15514);
IkReal x15531=((1.0)*x15513);
IkReal x15532=(cj3*x15514);
IkReal x15533=(sj3*x15514);
IkReal x15534=(cj3*x15513);
IkReal x15535=(x15516+x15515);
evalcond[0]=(((x15513*x15523))+(((-1.0)*x15529*x15531))+(((-1.0)*r22*x15530)));
evalcond[1]=((((-1.0)*r12*x15530))+(((-1.0)*x15518*x15531))+((x15513*x15517)));
evalcond[2]=((1.0)+((x15513*x15527))+(((-1.0)*x15521*x15531))+(((-1.0)*r02*x15530)));
evalcond[3]=((((-1.0)*cj3*x15521*x15530))+((r02*x15534))+((sj3*x15520))+((r01*x15514*x15522))+((r00*x15526)));
evalcond[4]=(((cj3*x15520))+(((-1.0)*r01*x15526*x15530))+((r00*x15522))+((x15521*x15533))+(((-1.0)*r02*sj3*x15531)));
evalcond[5]=(((r21*x15514*x15522))+((r20*x15526))+((r21*x15525))+(((-1.0)*r20*x15528*x15530))+x15535+((r22*x15534)));
evalcond[6]=((((-1.0)*cj3*x15518*x15530))+((r10*x15526))+((x15517*x15532))+((r12*x15534))+x15524+((r11*x15525))+(((-1.0)*x15519)));
evalcond[7]=((((-1.0)*r12*sj3*x15531))+((r10*x15522))+((x15518*x15533))+x15535+(((-1.0)*sj3*x15517*x15530))+((r11*x15528)));
evalcond[8]=(((r20*x15522))+((r20*x15514*x15525))+((r21*x15528))+(((-1.0)*sj3*x15523*x15530))+(((-1.0)*x15524))+(((-1.0)*r22*sj3*x15531))+x15519);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15536=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15536);
rxp1_1=(px*r21);
rxp1_2=(r11*x15536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15537=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15537);
rxp1_1=(px*r21);
rxp1_2=(r11*x15537);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15538=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15538)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15538)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15539=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15539);
rxp1_1=(px*r21);
rxp1_2=(r11*x15539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15540=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15540);
rxp1_1=(px*r21);
rxp1_2=(r11*x15540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15541=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15541);
rxp1_1=(px*r21);
rxp1_2=(r11*x15541);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15542=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15542);
rxp1_1=(px*r21);
rxp1_2=(r11*x15542);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15545=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15545.valid){
continue;
}
IkReal x15543=x15545.value;
IkReal x15544=(sj0*x15543);
cj4array[0]=(((cj2*sj1*x15544))+((cj1*sj2*x15544)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15546=IKsin(j4);
IkReal x15547=IKcos(j4);
IkReal x15548=(cj5*r20);
IkReal x15549=(r21*sj5);
IkReal x15550=((1.0)*x15546);
IkReal x15551=((1.0)*x15547);
evalcond[0]=((-1.0)*r02*x15546);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15551)));
evalcond[2]=(((x15546*x15549))+(((-1.0)*x15548*x15550)));
evalcond[3]=(((r11*sj5*x15546))+(((-1.0)*cj5*r10*x15550)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15547*x15548))+(((-1.0)*x15549*x15551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15553=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15553.valid){
continue;
}
IkReal x15552=x15553.value;
cj4array[0]=(((cj1*cj2*x15552))+(((-1.0)*sj1*sj2*x15552)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15554=IKsin(j4);
IkReal x15555=IKcos(j4);
IkReal x15556=(r11*sj5);
IkReal x15557=((1.0)*sj0);
IkReal x15558=((1.0)*x15555);
IkReal x15559=((1.0)*cj5*x15554);
evalcond[0]=((-1.0)*r02*x15554);
evalcond[1]=((((-1.0)*r02*x15558))+(((-1.0)*x15557)));
evalcond[2]=(((r21*sj5*x15554))+(((-1.0)*r20*x15559)));
evalcond[3]=((((-1.0)*r10*x15559))+((x15554*x15556)));
evalcond[4]=(((cj5*r10*x15555))+(((-1.0)*cj1*sj2*x15557))+(((-1.0)*x15556*x15558))+(((-1.0)*cj2*sj1*x15557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15560=IKPowWithIntegerCheck(r02,-1);
if(!x15560.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15560.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15561=IKsin(j4);
IkReal x15562=IKcos(j4);
IkReal x15563=((1.0)*sj0);
IkReal x15564=(cj5*x15562);
IkReal x15565=(sj5*x15561);
IkReal x15566=((1.0)*sj5*x15562);
IkReal x15567=((1.0)*cj5*x15561);
evalcond[0]=((-1.0)*r02*x15561);
evalcond[1]=(((r21*x15565))+(((-1.0)*r20*x15567)));
evalcond[2]=((((-1.0)*r10*x15567))+((r11*x15565)));
evalcond[3]=((((-1.0)*r21*x15566))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15564)));
evalcond[4]=((((-1.0)*r11*x15566))+((r10*x15564))+(((-1.0)*cj1*sj2*x15563))+(((-1.0)*cj2*sj1*x15563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15568=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15568);
rxp1_1=(px*r21);
rxp1_2=(r11*x15568);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15569=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15569);
rxp1_1=(px*r21);
rxp1_2=(r11*x15569);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15570=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15570);
rxp1_1=(px*r21);
rxp1_2=(r11*x15570);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15573=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15573.valid){
continue;
}
IkReal x15571=x15573.value;
IkReal x15572=(sj0*x15571);
cj4array[0]=(((cj2*sj1*x15572))+((cj1*sj2*x15572)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15574=IKsin(j4);
IkReal x15575=IKcos(j4);
IkReal x15576=(r21*sj5);
IkReal x15577=((1.0)*cj5*r20);
evalcond[0]=(r02*x15574);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15575)));
evalcond[2]=((((-1.0)*x15574*x15577))+((x15574*x15576)));
evalcond[3]=(((r11*sj5*x15574))+(((-1.0)*cj5*r10*x15574)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15575*x15576))+(((-1.0)*x15575*x15577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15579=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15579.valid){
continue;
}
IkReal x15578=x15579.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15578))+((cj1*cj2*x15578)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15580=IKsin(j4);
IkReal x15581=IKcos(j4);
IkReal x15582=((1.0)*sj0);
IkReal x15583=((1.0)*cj5);
IkReal x15584=(sj5*x15580);
evalcond[0]=(r02*x15580);
evalcond[1]=((((-1.0)*x15582))+(((-1.0)*r02*x15581)));
evalcond[2]=((((-1.0)*r20*x15580*x15583))+((r21*x15584)));
evalcond[3]=(((r11*x15584))+(((-1.0)*r10*x15580*x15583)));
evalcond[4]=((((-1.0)*r10*x15581*x15583))+(((-1.0)*cj1*sj2*x15582))+(((-1.0)*cj2*sj1*x15582))+((r11*sj5*x15581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15585=IKPowWithIntegerCheck(r02,-1);
if(!x15585.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15585.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15586=IKsin(j4);
IkReal x15587=IKcos(j4);
IkReal x15588=((1.0)*cj1);
IkReal x15589=(r21*sj5);
IkReal x15590=((1.0)*cj5);
IkReal x15591=(r11*sj5);
evalcond[0]=(r02*x15586);
evalcond[1]=((((-1.0)*r20*x15586*x15590))+((x15586*x15589)));
evalcond[2]=((((-1.0)*r10*x15586*x15590))+((x15586*x15591)));
evalcond[3]=((((-1.0)*cj2*x15588))+((sj1*sj2))+((x15587*x15589))+(((-1.0)*r20*x15587*x15590)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15588))+(((-1.0)*r10*x15587*x15590))+((x15587*x15591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15592 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15592.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15592.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15593 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15593.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15593.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15594=((-1.0)*r10);
CheckValue<IkReal> x15596 = IKatan2WithCheck(IkReal(x15594),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15596.valid){
continue;
}
IkReal x15595=((-1.0)*(x15596.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15594);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15595;
IkReal gconst66=x15595;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15597=((-1.0)*r10);
CheckValue<IkReal> x15599 = IKatan2WithCheck(IkReal(x15597),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15599.valid){
continue;
}
IkReal x15598=((-1.0)*(x15599.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15597);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15598;
IkReal gconst66=x15598;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15600=((-1.0)*r10);
CheckValue<IkReal> x15602 = IKatan2WithCheck(IkReal(x15600),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15602.valid){
continue;
}
IkReal x15601=((-1.0)*(x15602.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15600);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15601;
IkReal gconst66=x15601;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15603=((1.0)*gconst67);
IkReal x15604=(cj1*cj2);
IkReal x15605=((1.0)*sj1*sj2);
CheckValue<IkReal> x15606=IKPowWithIntegerCheck(cj3,-1);
if(!x15606.valid){
continue;
}
CheckValue<IkReal> x15607=IKPowWithIntegerCheck(r02,-1);
if(!x15607.valid){
continue;
}
CheckValue<IkReal> x15608=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15603))+((gconst68*r20*sj3))),-1);
if(!x15608.valid){
continue;
}
if( IKabs(((x15606.value)*(x15607.value)*((((cj0*x15604))+(((-1.0)*cj0*x15605)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15608.value)*(((((-1.0)*x15605))+x15604+(((-1.0)*cj3*r20*x15603))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15606.value)*(x15607.value)*((((cj0*x15604))+(((-1.0)*cj0*x15605))))))+IKsqr(((x15608.value)*(((((-1.0)*x15605))+x15604+(((-1.0)*cj3*r20*x15603))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15606.value)*(x15607.value)*((((cj0*x15604))+(((-1.0)*cj0*x15605))))), ((x15608.value)*(((((-1.0)*x15605))+x15604+(((-1.0)*cj3*r20*x15603))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15609=IKsin(j4);
IkReal x15610=IKcos(j4);
IkReal x15611=(sj1*sj2);
IkReal x15612=(gconst68*sj3);
IkReal x15613=(gconst67*r11);
IkReal x15614=(gconst67*sj3);
IkReal x15615=((1.0)*gconst68);
IkReal x15616=(cj2*sj1);
IkReal x15617=((1.0)*cj0);
IkReal x15618=((1.0)*sj0);
IkReal x15619=(cj3*gconst67);
IkReal x15620=(cj3*gconst68);
IkReal x15621=(cj1*sj2);
IkReal x15622=(gconst67*r21);
IkReal x15623=((1.0)*cj1*cj2);
IkReal x15624=(cj3*x15610);
IkReal x15625=((1.0)*x15610);
IkReal x15626=(r02*x15609);
evalcond[0]=((((-1.0)*x15618))+(((-1.0)*r02*x15625)));
evalcond[1]=(((x15609*x15622))+(((-1.0)*r20*x15609*x15615)));
evalcond[2]=((((-1.0)*r10*x15609*x15615))+cj0+((x15609*x15613)));
evalcond[3]=(((cj0*x15611))+((cj3*x15626))+(((-1.0)*cj1*cj2*x15617)));
evalcond[4]=((((-1.0)*x15616*x15617))+(((-1.0)*x15617*x15621))+(((-1.0)*sj3*x15626)));
evalcond[5]=(((r21*x15612))+((r21*x15610*x15619))+x15616+x15621+(((-1.0)*r20*x15615*x15624))+((r20*x15614)));
evalcond[6]=(((r21*x15620))+(((-1.0)*x15623))+((r20*x15610*x15612))+x15611+((r20*x15619))+(((-1.0)*r21*x15614*x15625)));
evalcond[7]=((((-1.0)*r10*x15615*x15624))+((sj0*x15611))+((x15613*x15624))+((r11*x15612))+((r10*x15614))+(((-1.0)*cj1*cj2*x15618)));
evalcond[8]=((((-1.0)*x15616*x15618))+((r10*x15610*x15612))+(((-1.0)*x15618*x15621))+((r10*x15619))+((r11*x15620))+(((-1.0)*sj3*x15613*x15625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15629=IKPowWithIntegerCheck(r02,-1);
if(!x15629.valid){
continue;
}
IkReal x15627=x15629.value;
IkReal x15628=((1.0)*cj0);
CheckValue<IkReal> x15630=IKPowWithIntegerCheck(sj3,-1);
if(!x15630.valid){
continue;
}
if( IKabs((x15627*(x15630.value)*(((((-1.0)*cj1*sj2*x15628))+(((-1.0)*cj2*sj1*x15628)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15627)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15627*(x15630.value)*(((((-1.0)*cj1*sj2*x15628))+(((-1.0)*cj2*sj1*x15628))))))+IKsqr(((-1.0)*sj0*x15627))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15627*(x15630.value)*(((((-1.0)*cj1*sj2*x15628))+(((-1.0)*cj2*sj1*x15628))))), ((-1.0)*sj0*x15627));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15631=IKsin(j4);
IkReal x15632=IKcos(j4);
IkReal x15633=(sj1*sj2);
IkReal x15634=(gconst68*sj3);
IkReal x15635=(gconst67*r11);
IkReal x15636=(gconst67*sj3);
IkReal x15637=((1.0)*gconst68);
IkReal x15638=(cj2*sj1);
IkReal x15639=((1.0)*cj0);
IkReal x15640=((1.0)*sj0);
IkReal x15641=(cj3*gconst67);
IkReal x15642=(cj3*gconst68);
IkReal x15643=(cj1*sj2);
IkReal x15644=(gconst67*r21);
IkReal x15645=((1.0)*cj1*cj2);
IkReal x15646=(cj3*x15632);
IkReal x15647=((1.0)*x15632);
IkReal x15648=(r02*x15631);
evalcond[0]=((((-1.0)*r02*x15647))+(((-1.0)*x15640)));
evalcond[1]=(((x15631*x15644))+(((-1.0)*r20*x15631*x15637)));
evalcond[2]=(((x15631*x15635))+cj0+(((-1.0)*r10*x15631*x15637)));
evalcond[3]=((((-1.0)*cj1*cj2*x15639))+((cj3*x15648))+((cj0*x15633)));
evalcond[4]=((((-1.0)*sj3*x15648))+(((-1.0)*x15638*x15639))+(((-1.0)*x15639*x15643)));
evalcond[5]=(((r21*x15632*x15641))+((r20*x15636))+x15638+x15643+((r21*x15634))+(((-1.0)*r20*x15637*x15646)));
evalcond[6]=(((r20*x15632*x15634))+x15633+((r21*x15642))+(((-1.0)*x15645))+((r20*x15641))+(((-1.0)*r21*x15636*x15647)));
evalcond[7]=((((-1.0)*r10*x15637*x15646))+((r11*x15634))+((sj0*x15633))+((r10*x15636))+(((-1.0)*cj1*cj2*x15640))+((x15635*x15646)));
evalcond[8]=(((r10*x15632*x15634))+(((-1.0)*x15638*x15640))+((r11*x15642))+(((-1.0)*sj3*x15635*x15647))+((r10*x15641))+(((-1.0)*x15640*x15643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15650=IKPowWithIntegerCheck(r02,-1);
if(!x15650.valid){
continue;
}
IkReal x15649=x15650.value;
CheckValue<IkReal> x15651=IKPowWithIntegerCheck(cj3,-1);
if(!x15651.valid){
continue;
}
if( IKabs((x15649*(x15651.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15649)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15649*(x15651.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15649))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15649*(x15651.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15649));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15652=IKsin(j4);
IkReal x15653=IKcos(j4);
IkReal x15654=(sj1*sj2);
IkReal x15655=(gconst68*sj3);
IkReal x15656=(gconst67*r11);
IkReal x15657=(gconst67*sj3);
IkReal x15658=((1.0)*gconst68);
IkReal x15659=(cj2*sj1);
IkReal x15660=((1.0)*cj0);
IkReal x15661=((1.0)*sj0);
IkReal x15662=(cj3*gconst67);
IkReal x15663=(cj3*gconst68);
IkReal x15664=(cj1*sj2);
IkReal x15665=(gconst67*r21);
IkReal x15666=((1.0)*cj1*cj2);
IkReal x15667=(cj3*x15653);
IkReal x15668=((1.0)*x15653);
IkReal x15669=(r02*x15652);
evalcond[0]=((((-1.0)*x15661))+(((-1.0)*r02*x15668)));
evalcond[1]=((((-1.0)*r20*x15652*x15658))+((x15652*x15665)));
evalcond[2]=(cj0+(((-1.0)*r10*x15652*x15658))+((x15652*x15656)));
evalcond[3]=(((cj3*x15669))+(((-1.0)*cj1*cj2*x15660))+((cj0*x15654)));
evalcond[4]=((((-1.0)*sj3*x15669))+(((-1.0)*x15659*x15660))+(((-1.0)*x15660*x15664)));
evalcond[5]=(((r21*x15653*x15662))+x15659+x15664+(((-1.0)*r20*x15658*x15667))+((r21*x15655))+((r20*x15657)));
evalcond[6]=((((-1.0)*x15666))+(((-1.0)*r21*x15657*x15668))+((r20*x15662))+((r20*x15653*x15655))+x15654+((r21*x15663)));
evalcond[7]=(((r10*x15657))+((r11*x15655))+(((-1.0)*cj1*cj2*x15661))+((x15656*x15667))+(((-1.0)*r10*x15658*x15667))+((sj0*x15654)));
evalcond[8]=(((r10*x15662))+(((-1.0)*sj3*x15656*x15668))+((r11*x15663))+((r10*x15653*x15655))+(((-1.0)*x15661*x15664))+(((-1.0)*x15659*x15661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15670=((-1.0)*r10);
CheckValue<IkReal> x15671 = IKatan2WithCheck(IkReal(x15670),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15671.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15671.value))));
IkReal gconst70=x15670;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15672 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15672.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15672.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15673=((-1.0)*r10);
IkReal x15674=((-1.0)*r11);
CheckValue<IkReal> x15676 = IKatan2WithCheck(IkReal(x15673),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15676.valid){
continue;
}
IkReal x15675=((1.0)*(x15676.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15673);
rxp1_1=(px*r21);
rxp1_2=(px*x15674);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15675)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15675)));
IkReal gconst70=x15673;
IkReal gconst71=x15674;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15677=((-1.0)*r10);
IkReal x15678=((-1.0)*r11);
CheckValue<IkReal> x15680 = IKatan2WithCheck(IkReal(x15677),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15680.valid){
continue;
}
IkReal x15679=((1.0)*(x15680.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15677);
rxp1_1=(px*r21);
rxp1_2=(px*x15678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15679)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15679)));
IkReal gconst70=x15677;
IkReal gconst71=x15678;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15681=((-1.0)*r10);
IkReal x15682=((-1.0)*r11);
CheckValue<IkReal> x15684 = IKatan2WithCheck(IkReal(x15681),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15684.valid){
continue;
}
IkReal x15683=((1.0)*(x15684.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15681);
rxp1_1=(px*r21);
rxp1_2=(px*x15682);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15683)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15683)));
IkReal gconst70=x15681;
IkReal gconst71=x15682;
IkReal x15685=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15685))+(((-1.0)*r11*r20*x15685)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15686=((1.0)*r21);
IkReal x15687=(cj1*cj2);
IkReal x15688=((1.0)*sj1*sj2);
CheckValue<IkReal> x15689=IKPowWithIntegerCheck(cj3,-1);
if(!x15689.valid){
continue;
}
CheckValue<IkReal> x15690=IKPowWithIntegerCheck(r02,-1);
if(!x15690.valid){
continue;
}
CheckValue<IkReal> x15691=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15686))+((gconst71*r20*sj3))),-1);
if(!x15691.valid){
continue;
}
if( IKabs(((x15689.value)*(x15690.value)*((((cj0*x15687))+(((-1.0)*cj0*x15688)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15691.value)*(((((-1.0)*cj3*gconst71*x15686))+x15687+(((-1.0)*x15688))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15689.value)*(x15690.value)*((((cj0*x15687))+(((-1.0)*cj0*x15688))))))+IKsqr(((x15691.value)*(((((-1.0)*cj3*gconst71*x15686))+x15687+(((-1.0)*x15688))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15689.value)*(x15690.value)*((((cj0*x15687))+(((-1.0)*cj0*x15688))))), ((x15691.value)*(((((-1.0)*cj3*gconst71*x15686))+x15687+(((-1.0)*x15688))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15692=IKsin(j4);
IkReal x15693=IKcos(j4);
IkReal x15694=(cj3*gconst70);
IkReal x15695=(sj1*sj2);
IkReal x15696=((1.0)*gconst71);
IkReal x15697=(gconst71*sj3);
IkReal x15698=(cj2*sj1);
IkReal x15699=((1.0)*sj0);
IkReal x15700=(gconst70*r11);
IkReal x15701=(gconst70*sj3);
IkReal x15702=((1.0)*cj0);
IkReal x15703=(cj3*gconst71);
IkReal x15704=(cj1*sj2);
IkReal x15705=((1.0)*cj1*cj2);
IkReal x15706=(r21*x15693);
IkReal x15707=(r10*x15693);
IkReal x15708=((1.0)*x15693);
IkReal x15709=(r02*x15692);
IkReal x15710=(r20*x15693);
evalcond[0]=((((-1.0)*x15699))+(((-1.0)*r02*x15708)));
evalcond[1]=((((-1.0)*r20*x15692*x15696))+((gconst70*r21*x15692)));
evalcond[2]=(cj0+((x15692*x15700))+(((-1.0)*r10*x15692*x15696)));
evalcond[3]=(((cj3*x15709))+(((-1.0)*cj1*cj2*x15702))+((cj0*x15695)));
evalcond[4]=((((-1.0)*x15702*x15704))+(((-1.0)*sj3*x15709))+(((-1.0)*x15698*x15702)));
evalcond[5]=(((r20*x15701))+((x15694*x15706))+((r21*x15697))+x15698+x15704+(((-1.0)*cj3*x15696*x15710)));
evalcond[6]=((((-1.0)*x15705))+((r20*x15694))+(((-1.0)*x15701*x15706))+x15695+((r21*x15703))+((x15697*x15710)));
evalcond[7]=(((r11*x15697))+(((-1.0)*cj3*x15696*x15707))+((sj0*x15695))+((r10*x15701))+(((-1.0)*cj1*cj2*x15699))+((r11*x15693*x15694)));
evalcond[8]=(((r11*x15703))+(((-1.0)*x15698*x15699))+(((-1.0)*sj3*x15700*x15708))+((r10*x15694))+((x15697*x15707))+(((-1.0)*x15699*x15704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15713=IKPowWithIntegerCheck(r02,-1);
if(!x15713.valid){
continue;
}
IkReal x15711=x15713.value;
IkReal x15712=((1.0)*cj0);
CheckValue<IkReal> x15714=IKPowWithIntegerCheck(sj3,-1);
if(!x15714.valid){
continue;
}
if( IKabs((x15711*(x15714.value)*(((((-1.0)*cj2*sj1*x15712))+(((-1.0)*cj1*sj2*x15712)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15711)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15711*(x15714.value)*(((((-1.0)*cj2*sj1*x15712))+(((-1.0)*cj1*sj2*x15712))))))+IKsqr(((-1.0)*sj0*x15711))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15711*(x15714.value)*(((((-1.0)*cj2*sj1*x15712))+(((-1.0)*cj1*sj2*x15712))))), ((-1.0)*sj0*x15711));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15715=IKsin(j4);
IkReal x15716=IKcos(j4);
IkReal x15717=(cj3*gconst70);
IkReal x15718=(sj1*sj2);
IkReal x15719=((1.0)*gconst71);
IkReal x15720=(gconst71*sj3);
IkReal x15721=(cj2*sj1);
IkReal x15722=((1.0)*sj0);
IkReal x15723=(gconst70*r11);
IkReal x15724=(gconst70*sj3);
IkReal x15725=((1.0)*cj0);
IkReal x15726=(cj3*gconst71);
IkReal x15727=(cj1*sj2);
IkReal x15728=((1.0)*cj1*cj2);
IkReal x15729=(r21*x15716);
IkReal x15730=(r10*x15716);
IkReal x15731=((1.0)*x15716);
IkReal x15732=(r02*x15715);
IkReal x15733=(r20*x15716);
evalcond[0]=((((-1.0)*x15722))+(((-1.0)*r02*x15731)));
evalcond[1]=((((-1.0)*r20*x15715*x15719))+((gconst70*r21*x15715)));
evalcond[2]=(cj0+(((-1.0)*r10*x15715*x15719))+((x15715*x15723)));
evalcond[3]=((((-1.0)*cj1*cj2*x15725))+((cj0*x15718))+((cj3*x15732)));
evalcond[4]=((((-1.0)*sj3*x15732))+(((-1.0)*x15725*x15727))+(((-1.0)*x15721*x15725)));
evalcond[5]=((((-1.0)*cj3*x15719*x15733))+((r20*x15724))+((r21*x15720))+x15721+x15727+((x15717*x15729)));
evalcond[6]=((((-1.0)*x15728))+((r20*x15717))+((r21*x15726))+((x15720*x15733))+x15718+(((-1.0)*x15724*x15729)));
evalcond[7]=((((-1.0)*cj3*x15719*x15730))+((r11*x15720))+(((-1.0)*cj1*cj2*x15722))+((r11*x15716*x15717))+((r10*x15724))+((sj0*x15718)));
evalcond[8]=(((r11*x15726))+(((-1.0)*x15722*x15727))+((x15720*x15730))+(((-1.0)*sj3*x15723*x15731))+((r10*x15717))+(((-1.0)*x15721*x15722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15735=IKPowWithIntegerCheck(r02,-1);
if(!x15735.valid){
continue;
}
IkReal x15734=x15735.value;
CheckValue<IkReal> x15736=IKPowWithIntegerCheck(cj3,-1);
if(!x15736.valid){
continue;
}
if( IKabs((x15734*(x15736.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15734)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15734*(x15736.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15734))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15734*(x15736.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15734));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15737=IKsin(j4);
IkReal x15738=IKcos(j4);
IkReal x15739=(cj3*gconst70);
IkReal x15740=(sj1*sj2);
IkReal x15741=((1.0)*gconst71);
IkReal x15742=(gconst71*sj3);
IkReal x15743=(cj2*sj1);
IkReal x15744=((1.0)*sj0);
IkReal x15745=(gconst70*r11);
IkReal x15746=(gconst70*sj3);
IkReal x15747=((1.0)*cj0);
IkReal x15748=(cj3*gconst71);
IkReal x15749=(cj1*sj2);
IkReal x15750=((1.0)*cj1*cj2);
IkReal x15751=(r21*x15738);
IkReal x15752=(r10*x15738);
IkReal x15753=((1.0)*x15738);
IkReal x15754=(r02*x15737);
IkReal x15755=(r20*x15738);
evalcond[0]=((((-1.0)*x15744))+(((-1.0)*r02*x15753)));
evalcond[1]=(((gconst70*r21*x15737))+(((-1.0)*r20*x15737*x15741)));
evalcond[2]=(cj0+(((-1.0)*r10*x15737*x15741))+((x15737*x15745)));
evalcond[3]=(((cj3*x15754))+((cj0*x15740))+(((-1.0)*cj1*cj2*x15747)));
evalcond[4]=((((-1.0)*x15747*x15749))+(((-1.0)*sj3*x15754))+(((-1.0)*x15743*x15747)));
evalcond[5]=((((-1.0)*cj3*x15741*x15755))+((r21*x15742))+x15743+x15749+((r20*x15746))+((x15739*x15751)));
evalcond[6]=(((x15742*x15755))+(((-1.0)*x15750))+((r20*x15739))+((r21*x15748))+x15740+(((-1.0)*x15746*x15751)));
evalcond[7]=(((r11*x15738*x15739))+(((-1.0)*cj3*x15741*x15752))+((r11*x15742))+((sj0*x15740))+(((-1.0)*cj1*cj2*x15744))+((r10*x15746)));
evalcond[8]=(((x15742*x15752))+(((-1.0)*x15744*x15749))+((r11*x15748))+((r10*x15739))+(((-1.0)*sj3*x15745*x15753))+(((-1.0)*x15743*x15744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15757=IKPowWithIntegerCheck(r02,-1);
if(!x15757.valid){
continue;
}
IkReal x15756=x15757.value;
CheckValue<IkReal> x15758=IKPowWithIntegerCheck(cj3,-1);
if(!x15758.valid){
continue;
}
if( IKabs((x15756*(x15758.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15756)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15756*(x15758.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15756))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15756*(x15758.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15756));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15759=IKsin(j4);
IkReal x15760=IKcos(j4);
IkReal x15761=(cj5*r10);
IkReal x15762=(sj1*sj2);
IkReal x15763=(cj5*sj3);
IkReal x15764=(r11*sj5);
IkReal x15765=(cj3*cj5);
IkReal x15766=(cj3*sj5);
IkReal x15767=(r21*sj5);
IkReal x15768=(cj2*sj1);
IkReal x15769=((1.0)*sj0);
IkReal x15770=((1.0)*cj0);
IkReal x15771=(sj3*sj5);
IkReal x15772=(cj1*sj2);
IkReal x15773=((1.0)*cj1*cj2);
IkReal x15774=((1.0)*x15759);
IkReal x15775=(r20*x15760);
IkReal x15776=(cj3*x15760);
IkReal x15777=(sj3*x15760);
evalcond[0]=((((-1.0)*r02*x15760))+(((-1.0)*x15769)));
evalcond[1]=(((x15759*x15767))+(((-1.0)*cj5*r20*x15774)));
evalcond[2]=((((-1.0)*x15761*x15774))+cj0+((x15759*x15764)));
evalcond[3]=(((cj3*r02*x15759))+((cj0*x15762))+(((-1.0)*cj1*cj2*x15770)));
evalcond[4]=((((-1.0)*r02*sj3*x15774))+(((-1.0)*x15768*x15770))+(((-1.0)*x15770*x15772)));
evalcond[5]=(((r21*x15760*x15766))+((r21*x15763))+(((-1.0)*x15765*x15775))+((r20*x15771))+x15772+x15768);
evalcond[6]=(((r21*x15765))+(((-1.0)*x15767*x15777))+(((-1.0)*x15773))+((r20*x15766))+x15762+((x15763*x15775)));
evalcond[7]=(((r10*x15771))+((sj0*x15762))+(((-1.0)*x15761*x15776))+(((-1.0)*cj1*cj2*x15769))+((x15764*x15776))+((r11*x15763)));
evalcond[8]=(((r10*x15766))+(((-1.0)*x15768*x15769))+(((-1.0)*x15764*x15777))+((x15761*x15777))+(((-1.0)*x15769*x15772))+((r11*x15765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15778=((1.0)*sj3);
IkReal x15779=((1.0)*cj5);
CheckValue<IkReal> x15780=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15779))),-1);
if(!x15780.valid){
continue;
}
CheckValue<IkReal> x15781=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15779))),-1);
if(!x15781.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15780.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15781.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15778))+(((-1.0)*cj5*r21*x15778)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15780.value)))+IKsqr(((x15781.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15778))+(((-1.0)*cj5*r21*x15778))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15780.value)), ((x15781.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15778))+(((-1.0)*cj5*r21*x15778))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15782=IKsin(j4);
IkReal x15783=IKcos(j4);
IkReal x15784=(cj5*r10);
IkReal x15785=(sj1*sj2);
IkReal x15786=(cj5*sj3);
IkReal x15787=(r11*sj5);
IkReal x15788=(cj3*cj5);
IkReal x15789=(cj3*sj5);
IkReal x15790=(r21*sj5);
IkReal x15791=(cj2*sj1);
IkReal x15792=((1.0)*sj0);
IkReal x15793=((1.0)*cj0);
IkReal x15794=(sj3*sj5);
IkReal x15795=(cj1*sj2);
IkReal x15796=((1.0)*cj1*cj2);
IkReal x15797=((1.0)*x15782);
IkReal x15798=(r20*x15783);
IkReal x15799=(cj3*x15783);
IkReal x15800=(sj3*x15783);
evalcond[0]=((((-1.0)*x15792))+(((-1.0)*r02*x15783)));
evalcond[1]=((((-1.0)*cj5*r20*x15797))+((x15782*x15790)));
evalcond[2]=(cj0+((x15782*x15787))+(((-1.0)*x15784*x15797)));
evalcond[3]=(((cj3*r02*x15782))+(((-1.0)*cj1*cj2*x15793))+((cj0*x15785)));
evalcond[4]=((((-1.0)*r02*sj3*x15797))+(((-1.0)*x15793*x15795))+(((-1.0)*x15791*x15793)));
evalcond[5]=(((r21*x15786))+(((-1.0)*x15788*x15798))+((r20*x15794))+x15795+x15791+((r21*x15783*x15789)));
evalcond[6]=(((r21*x15788))+((x15786*x15798))+(((-1.0)*x15796))+x15785+(((-1.0)*x15790*x15800))+((r20*x15789)));
evalcond[7]=((((-1.0)*x15784*x15799))+((sj0*x15785))+((x15787*x15799))+(((-1.0)*cj1*cj2*x15792))+((r10*x15794))+((r11*x15786)));
evalcond[8]=(((r10*x15789))+((x15784*x15800))+(((-1.0)*x15792*x15795))+(((-1.0)*x15787*x15800))+((r11*x15788))+(((-1.0)*x15791*x15792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15801=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15801.valid){
continue;
}
CheckValue<IkReal> x15802=IKPowWithIntegerCheck(r02,-1);
if(!x15802.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15801.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15802.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15801.value)))+IKsqr(((-1.0)*sj0*(x15802.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15801.value)), ((-1.0)*sj0*(x15802.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15803=IKsin(j4);
IkReal x15804=IKcos(j4);
IkReal x15805=(cj5*r10);
IkReal x15806=(sj1*sj2);
IkReal x15807=(cj5*sj3);
IkReal x15808=(r11*sj5);
IkReal x15809=(cj3*cj5);
IkReal x15810=(cj3*sj5);
IkReal x15811=(r21*sj5);
IkReal x15812=(cj2*sj1);
IkReal x15813=((1.0)*sj0);
IkReal x15814=((1.0)*cj0);
IkReal x15815=(sj3*sj5);
IkReal x15816=(cj1*sj2);
IkReal x15817=((1.0)*cj1*cj2);
IkReal x15818=((1.0)*x15803);
IkReal x15819=(r20*x15804);
IkReal x15820=(cj3*x15804);
IkReal x15821=(sj3*x15804);
evalcond[0]=((((-1.0)*x15813))+(((-1.0)*r02*x15804)));
evalcond[1]=((((-1.0)*cj5*r20*x15818))+((x15803*x15811)));
evalcond[2]=(cj0+((x15803*x15808))+(((-1.0)*x15805*x15818)));
evalcond[3]=((((-1.0)*cj1*cj2*x15814))+((cj0*x15806))+((cj3*r02*x15803)));
evalcond[4]=((((-1.0)*x15814*x15816))+(((-1.0)*x15812*x15814))+(((-1.0)*r02*sj3*x15818)));
evalcond[5]=(((r21*x15807))+((r21*x15804*x15810))+((r20*x15815))+x15812+x15816+(((-1.0)*x15809*x15819)));
evalcond[6]=((((-1.0)*x15817))+((x15807*x15819))+((r21*x15809))+(((-1.0)*x15811*x15821))+((r20*x15810))+x15806);
evalcond[7]=(((x15808*x15820))+(((-1.0)*cj1*cj2*x15813))+((r10*x15815))+((r11*x15807))+(((-1.0)*x15805*x15820))+((sj0*x15806)));
evalcond[8]=((((-1.0)*x15813*x15816))+((r10*x15810))+(((-1.0)*x15812*x15813))+(((-1.0)*x15808*x15821))+((x15805*x15821))+((r11*x15809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15822=((1.0)*sj0);
IkReal x15823=((1.0)*cj0);
CheckValue<IkReal> x15824 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15823))+(((-1.0)*r12*x15822)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15822))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15824.valid){
continue;
}
CheckValue<IkReal> x15825=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15824.value)+(((1.5707963267949)*(x15825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15826=IKsin(j4);
IkReal x15827=IKcos(j4);
IkReal x15828=(r11*sj5);
IkReal x15829=(cj5*r10);
IkReal x15830=(sj1*sj2);
IkReal x15831=(cj5*sj3);
IkReal x15832=((1.0)*sj0);
IkReal x15833=(cj3*cj5);
IkReal x15834=(cj3*sj5);
IkReal x15835=(r21*sj5);
IkReal x15836=(cj2*sj1);
IkReal x15837=(sj3*sj5);
IkReal x15838=(r01*sj5);
IkReal x15839=((1.0)*cj0);
IkReal x15840=(cj1*sj2);
IkReal x15841=((1.0)*x15827);
IkReal x15842=((1.0)*x15826);
IkReal x15843=(cj3*x15827);
IkReal x15844=((1.0)*cj1*cj2);
IkReal x15845=(cj3*x15826);
evalcond[0]=((((-1.0)*cj5*r20*x15842))+(((-1.0)*r22*x15841))+((x15826*x15835)));
evalcond[1]=(cj0+((x15826*x15828))+(((-1.0)*r12*x15841))+(((-1.0)*x15829*x15842)));
evalcond[2]=((((-1.0)*cj5*r00*x15842))+(((-1.0)*x15832))+(((-1.0)*r02*x15841))+((x15826*x15838)));
evalcond[3]=((((-1.0)*r20*x15833*x15841))+((r20*x15837))+((r21*x15827*x15834))+((r22*x15845))+x15836+x15840+((r21*x15831)));
evalcond[4]=(((r20*x15834))+(((-1.0)*r22*sj3*x15842))+(((-1.0)*sj3*x15835*x15841))+(((-1.0)*x15844))+((r20*x15827*x15831))+x15830+((r21*x15833)));
evalcond[5]=(((cj0*x15830))+((r01*x15827*x15834))+(((-1.0)*r00*x15833*x15841))+((r01*x15831))+((r02*x15845))+((r00*x15837))+(((-1.0)*cj1*cj2*x15839)));
evalcond[6]=(((r10*x15837))+((x15828*x15843))+((sj0*x15830))+((r11*x15831))+(((-1.0)*cj3*x15829*x15841))+(((-1.0)*cj1*cj2*x15832))+((r12*x15845)));
evalcond[7]=(((r00*x15827*x15831))+(((-1.0)*r02*sj3*x15842))+(((-1.0)*r01*x15837*x15841))+(((-1.0)*x15836*x15839))+((r01*x15833))+((r00*x15834))+(((-1.0)*x15839*x15840)));
evalcond[8]=(((r10*x15834))+(((-1.0)*x15832*x15840))+((r11*x15833))+(((-1.0)*r12*sj3*x15842))+(((-1.0)*sj3*x15828*x15841))+(((-1.0)*x15832*x15836))+((sj3*x15827*x15829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15846=((1.0)*cj5);
CheckValue<IkReal> x15847=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15846)))),-1);
if(!x15847.valid){
continue;
}
CheckValue<IkReal> x15848 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15847.value)))+(x15848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15849=IKsin(j4);
IkReal x15850=IKcos(j4);
IkReal x15851=(r11*sj5);
IkReal x15852=(cj5*r10);
IkReal x15853=(sj1*sj2);
IkReal x15854=(cj5*sj3);
IkReal x15855=((1.0)*sj0);
IkReal x15856=(cj3*cj5);
IkReal x15857=(cj3*sj5);
IkReal x15858=(r21*sj5);
IkReal x15859=(cj2*sj1);
IkReal x15860=(sj3*sj5);
IkReal x15861=(r01*sj5);
IkReal x15862=((1.0)*cj0);
IkReal x15863=(cj1*sj2);
IkReal x15864=((1.0)*x15850);
IkReal x15865=((1.0)*x15849);
IkReal x15866=(cj3*x15850);
IkReal x15867=((1.0)*cj1*cj2);
IkReal x15868=(cj3*x15849);
evalcond[0]=((((-1.0)*r22*x15864))+(((-1.0)*cj5*r20*x15865))+((x15849*x15858)));
evalcond[1]=(cj0+((x15849*x15851))+(((-1.0)*x15852*x15865))+(((-1.0)*r12*x15864)));
evalcond[2]=((((-1.0)*cj5*r00*x15865))+((x15849*x15861))+(((-1.0)*r02*x15864))+(((-1.0)*x15855)));
evalcond[3]=(((r22*x15868))+((r21*x15850*x15857))+(((-1.0)*r20*x15856*x15864))+((r21*x15854))+((r20*x15860))+x15859+x15863);
evalcond[4]=(((r20*x15850*x15854))+(((-1.0)*x15867))+(((-1.0)*r22*sj3*x15865))+((r20*x15857))+((r21*x15856))+(((-1.0)*sj3*x15858*x15864))+x15853);
evalcond[5]=(((cj0*x15853))+((r02*x15868))+((r01*x15850*x15857))+((r01*x15854))+((r00*x15860))+(((-1.0)*r00*x15856*x15864))+(((-1.0)*cj1*cj2*x15862)));
evalcond[6]=(((r12*x15868))+((x15851*x15866))+(((-1.0)*cj3*x15852*x15864))+(((-1.0)*cj1*cj2*x15855))+((r11*x15854))+((r10*x15860))+((sj0*x15853)));
evalcond[7]=((((-1.0)*x15859*x15862))+(((-1.0)*x15862*x15863))+((r00*x15857))+((r01*x15856))+(((-1.0)*r01*x15860*x15864))+(((-1.0)*r02*sj3*x15865))+((r00*x15850*x15854)));
evalcond[8]=((((-1.0)*sj3*x15851*x15864))+(((-1.0)*x15855*x15859))+(((-1.0)*x15855*x15863))+((r10*x15857))+((sj3*x15850*x15852))+((r11*x15856))+(((-1.0)*r12*sj3*x15865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15869=((1.0)*cj5);
CheckValue<IkReal> x15870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15869)))),-1);
if(!x15870.valid){
continue;
}
CheckValue<IkReal> x15871 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15870.value)))+(x15871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15872=IKsin(j4);
IkReal x15873=IKcos(j4);
IkReal x15874=(r11*sj5);
IkReal x15875=(cj5*r10);
IkReal x15876=(sj1*sj2);
IkReal x15877=(cj5*sj3);
IkReal x15878=((1.0)*sj0);
IkReal x15879=(cj3*cj5);
IkReal x15880=(cj3*sj5);
IkReal x15881=(r21*sj5);
IkReal x15882=(cj2*sj1);
IkReal x15883=(sj3*sj5);
IkReal x15884=(r01*sj5);
IkReal x15885=((1.0)*cj0);
IkReal x15886=(cj1*sj2);
IkReal x15887=((1.0)*x15873);
IkReal x15888=((1.0)*x15872);
IkReal x15889=(cj3*x15873);
IkReal x15890=((1.0)*cj1*cj2);
IkReal x15891=(cj3*x15872);
evalcond[0]=(((x15872*x15881))+(((-1.0)*cj5*r20*x15888))+(((-1.0)*r22*x15887)));
evalcond[1]=(((x15872*x15874))+cj0+(((-1.0)*x15875*x15888))+(((-1.0)*r12*x15887)));
evalcond[2]=((((-1.0)*cj5*r00*x15888))+((x15872*x15884))+(((-1.0)*r02*x15887))+(((-1.0)*x15878)));
evalcond[3]=(((r20*x15883))+((r21*x15877))+((r21*x15873*x15880))+((r22*x15891))+(((-1.0)*r20*x15879*x15887))+x15886+x15882);
evalcond[4]=((((-1.0)*sj3*x15881*x15887))+((r20*x15880))+((r21*x15879))+(((-1.0)*x15890))+(((-1.0)*r22*sj3*x15888))+x15876+((r20*x15873*x15877)));
evalcond[5]=(((r01*x15877))+((r01*x15873*x15880))+((r00*x15883))+(((-1.0)*r00*x15879*x15887))+(((-1.0)*cj1*cj2*x15885))+((r02*x15891))+((cj0*x15876)));
evalcond[6]=(((r11*x15877))+((r10*x15883))+((x15874*x15889))+((r12*x15891))+(((-1.0)*cj3*x15875*x15887))+(((-1.0)*cj1*cj2*x15878))+((sj0*x15876)));
evalcond[7]=((((-1.0)*x15882*x15885))+(((-1.0)*x15885*x15886))+((r01*x15879))+((r00*x15880))+(((-1.0)*r01*x15883*x15887))+(((-1.0)*r02*sj3*x15888))+((r00*x15873*x15877)));
evalcond[8]=(((r11*x15879))+((r10*x15880))+(((-1.0)*x15878*x15886))+(((-1.0)*x15878*x15882))+(((-1.0)*sj3*x15874*x15887))+(((-1.0)*r12*sj3*x15888))+((sj3*x15873*x15875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15892=cj5*cj5;
IkReal x15893=r21*r21;
IkReal x15894=r20*r20;
IkReal x15895=(r20*r21);
IkReal x15896=((1.0)*cj3);
IkReal x15897=((1.0)*cj5);
IkReal x15898=(cj1*sj2);
IkReal x15899=(cj5*sj5);
IkReal x15900=(sj3*sj5);
IkReal x15901=(cj2*sj1);
IkReal x15902=(r21*sj5);
CheckValue<IkReal> x15903 = IKatan2WithCheck(IkReal((((r22*x15901))+((cj5*r21*r22*sj3))+((r20*r22*x15900))+((r22*x15898)))),IkReal(((((-1.0)*x15894*x15897*x15900))+(((-1.0)*r20*x15897*x15901))+(((-1.0)*r20*x15897*x15898))+((sj3*x15893*x15899))+((x15901*x15902))+(((-2.0)*sj3*x15892*x15895))+((x15898*x15902))+((sj3*x15895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15903.valid){
continue;
}
CheckValue<IkReal> x15904=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15893*x15896))+((cj3*x15892*x15893))+(((-1.0)*x15896*(r22*r22)))+(((-1.0)*x15892*x15894*x15896))+(((2.0)*cj3*x15895*x15899)))),-1);
if(!x15904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15903.value)+(((1.5707963267949)*(x15904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15905=IKsin(j4);
IkReal x15906=IKcos(j4);
IkReal x15907=(cj3*r21);
IkReal x15908=(r21*sj5);
IkReal x15909=(r20*sj5);
IkReal x15910=(cj5*r20);
IkReal x15911=((1.0)*x15906);
IkReal x15912=((1.0)*x15905);
evalcond[0]=((((-1.0)*x15910*x15912))+(((-1.0)*r22*x15911))+((x15905*x15908)));
evalcond[1]=((((-1.0)*cj3*x15910*x15911))+((cj2*sj1))+((sj3*x15909))+((sj5*x15906*x15907))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15905)));
evalcond[2]=(((cj5*x15907))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15912))+(((-1.0)*sj3*x15908*x15911))+((sj3*x15906*x15910))+((cj3*x15909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15913=(cj5*sj4);
IkReal x15914=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15914))+(((-1.0)*r00*x15913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15913))+(((-1.0)*r11*x15914))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15914))+(((-1.0)*r00*x15913))))+IKsqr((((r10*x15913))+(((-1.0)*r11*x15914))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15914))+(((-1.0)*r00*x15913))), (((r10*x15913))+(((-1.0)*r11*x15914))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15915=IKcos(j0);
IkReal x15916=IKsin(j0);
IkReal x15917=(r02*sj4);
IkReal x15918=((1.0)*sj3);
IkReal x15919=(r12*sj4);
IkReal x15920=(cj3*cj4);
IkReal x15921=((1.0)*cj5);
IkReal x15922=(r11*sj5);
IkReal x15923=((1.0)*cj1);
IkReal x15924=((0.39225)*sj1);
IkReal x15925=(cj5*r01);
IkReal x15926=(r01*sj5);
IkReal x15927=(r00*sj5);
IkReal x15928=((1.0)*sj1);
IkReal x15929=((0.39225)*cj2);
IkReal x15930=(cj5*r11);
IkReal x15931=(r10*sj5);
IkReal x15932=((1.0)*cj4);
IkReal x15933=(sj2*x15915);
IkReal x15934=(sj2*x15916);
IkReal x15935=(cj4*cj5*sj3);
IkReal x15936=(cj1*x15915);
IkReal x15937=(cj2*x15915);
IkReal x15938=(cj1*x15916);
IkReal x15939=(cj2*x15916);
evalcond[0]=((((-1.0)*r10*sj4*x15921))+(((-1.0)*r12*x15932))+((sj4*x15922))+x15915);
evalcond[1]=((((-1.0)*r00*sj4*x15921))+(((-1.0)*x15916))+(((-1.0)*r02*x15932))+((sj4*x15926)));
evalcond[2]=((((-0.09465)*x15927))+(((-0.09465)*x15925))+(((-1.0)*px))+((x15929*x15936))+(((-1.0)*x15924*x15933))+(((0.425)*x15936))+(((-0.10915)*x15916)));
evalcond[3]=((((-0.09465)*x15931))+(((-0.09465)*x15930))+(((0.10915)*x15915))+(((-1.0)*py))+((x15929*x15938))+(((-1.0)*x15924*x15934))+(((0.425)*x15938)));
evalcond[4]=(((sj3*x15927))+((sj3*x15925))+(((-1.0)*x15923*x15937))+((x15920*x15926))+((cj3*x15917))+((sj1*x15933))+(((-1.0)*r00*x15920*x15921)));
evalcond[5]=((((-1.0)*r10*x15920*x15921))+(((-1.0)*x15923*x15939))+((x15920*x15922))+((cj3*x15919))+((sj1*x15934))+((sj3*x15930))+((sj3*x15931)));
evalcond[6]=(((cj3*x15927))+((cj3*x15925))+(((-1.0)*cj4*x15918*x15926))+(((-1.0)*x15923*x15933))+(((-1.0)*x15917*x15918))+((r00*x15935))+(((-1.0)*x15928*x15937)));
evalcond[7]=((((-1.0)*x15918*x15919))+(((-1.0)*cj4*x15918*x15922))+(((-1.0)*x15923*x15934))+((cj3*x15930))+((cj3*x15931))+(((-1.0)*x15928*x15939))+((r10*x15935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15940=cj5*cj5;
IkReal x15941=r21*r21;
IkReal x15942=r20*r20;
IkReal x15943=(r20*r21);
IkReal x15944=(sj1*sj2);
IkReal x15945=(r21*sj5);
IkReal x15946=(cj1*cj2);
IkReal x15947=(cj5*r20);
IkReal x15948=(cj5*sj5);
IkReal x15949=(cj3*r22);
IkReal x15950=(sj3*x15941);
CheckValue<IkReal> x15951 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15946))+((r20*sj5*x15949))+((cj5*r21*x15949))+((r22*x15944)))),IkReal((((cj3*x15943))+(((-1.0)*x15944*x15947))+(((-2.0)*cj3*x15940*x15943))+((x15944*x15945))+(((-1.0)*cj3*x15942*x15948))+((cj3*x15941*x15948))+((x15946*x15947))+(((-1.0)*x15945*x15946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15951.valid){
continue;
}
CheckValue<IkReal> x15952=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x15940*x15942))+(((-1.0)*x15940*x15950))+(((-2.0)*sj3*x15943*x15948))+x15950)),-1);
if(!x15952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15951.value)+(((1.5707963267949)*(x15952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15953=IKsin(j4);
IkReal x15954=IKcos(j4);
IkReal x15955=(cj3*r21);
IkReal x15956=(r21*sj5);
IkReal x15957=(r20*sj5);
IkReal x15958=(cj5*r20);
IkReal x15959=((1.0)*x15954);
IkReal x15960=((1.0)*x15953);
evalcond[0]=((((-1.0)*x15958*x15960))+(((-1.0)*r22*x15959))+((x15953*x15956)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15958*x15959))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15954*x15955))+((cj3*r22*x15953))+((sj3*x15957)));
evalcond[2]=((((-1.0)*r22*sj3*x15960))+((sj3*x15954*x15958))+(((-1.0)*sj3*x15956*x15959))+((cj5*x15955))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj3*x15957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15961=(cj5*sj4);
IkReal x15962=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15962))+(((-1.0)*r00*x15961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15962))+((r10*x15961))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15962))+(((-1.0)*r00*x15961))))+IKsqr(((((-1.0)*r11*x15962))+((r10*x15961))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15962))+(((-1.0)*r00*x15961))), ((((-1.0)*r11*x15962))+((r10*x15961))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15963=IKcos(j0);
IkReal x15964=IKsin(j0);
IkReal x15965=(r02*sj4);
IkReal x15966=((1.0)*sj3);
IkReal x15967=(r12*sj4);
IkReal x15968=(cj3*cj4);
IkReal x15969=((1.0)*cj5);
IkReal x15970=(r11*sj5);
IkReal x15971=((1.0)*cj1);
IkReal x15972=((0.39225)*sj1);
IkReal x15973=(cj5*r01);
IkReal x15974=(r01*sj5);
IkReal x15975=(r00*sj5);
IkReal x15976=((1.0)*sj1);
IkReal x15977=((0.39225)*cj2);
IkReal x15978=(cj5*r11);
IkReal x15979=(r10*sj5);
IkReal x15980=((1.0)*cj4);
IkReal x15981=(sj2*x15963);
IkReal x15982=(sj2*x15964);
IkReal x15983=(cj4*cj5*sj3);
IkReal x15984=(cj1*x15963);
IkReal x15985=(cj2*x15963);
IkReal x15986=(cj1*x15964);
IkReal x15987=(cj2*x15964);
evalcond[0]=(((sj4*x15970))+(((-1.0)*r10*sj4*x15969))+(((-1.0)*r12*x15980))+x15963);
evalcond[1]=((((-1.0)*r02*x15980))+(((-1.0)*r00*sj4*x15969))+((sj4*x15974))+(((-1.0)*x15964)));
evalcond[2]=(((x15977*x15984))+(((-0.09465)*x15973))+(((-0.09465)*x15975))+(((-0.10915)*x15964))+(((0.425)*x15984))+(((-1.0)*x15972*x15981))+(((-1.0)*px)));
evalcond[3]=(((x15977*x15986))+(((-0.09465)*x15979))+(((-0.09465)*x15978))+(((0.425)*x15986))+(((-1.0)*x15972*x15982))+(((0.10915)*x15963))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*r00*x15968*x15969))+((x15968*x15974))+(((-1.0)*x15971*x15985))+((sj1*x15981))+((sj3*x15973))+((sj3*x15975))+((cj3*x15965)));
evalcond[5]=(((x15968*x15970))+(((-1.0)*x15971*x15987))+(((-1.0)*r10*x15968*x15969))+((sj1*x15982))+((sj3*x15978))+((sj3*x15979))+((cj3*x15967)));
evalcond[6]=(((r00*x15983))+(((-1.0)*x15965*x15966))+(((-1.0)*x15971*x15981))+(((-1.0)*x15976*x15985))+(((-1.0)*cj4*x15966*x15974))+((cj3*x15975))+((cj3*x15973)));
evalcond[7]=((((-1.0)*x15971*x15982))+(((-1.0)*x15976*x15987))+(((-1.0)*x15966*x15967))+((r10*x15983))+(((-1.0)*cj4*x15966*x15970))+((cj3*x15978))+((cj3*x15979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - blitz_robot (83ba58804db5fd3d9763b02807eabd0c)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
